// This file has been generated by the SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui.comp.library-all');
if ( !jQuery.sap.isDeclared('sap.ui.comp.config.condition.Type') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides sap.ui.comp.config.condition.Type.
jQuery.sap.declare('sap.ui.comp.config.condition.Type'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.Select'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/config/condition/Type",[
	'jquery.sap.global', 'sap/ui/base/EventProvider', 'sap/ui/model/json/JSONModel', 'sap/m/Select'
], function(jQuery, EventProvider, JSONModel, Select) {
	"use strict";

	var Type = EventProvider.extend("sap.ui.comp.config.condition.Type", /* @lends "sap.ui.comp.config.condition.Type.prototype */ {
		constructor : function(sFieldName, oFilterProvider, oFieldMetadata) {
			EventProvider.call(this);
			this.oFilterProvider = oFilterProvider;
			//create basic data
			var oData = {
					condition: {
						operation: "",
						value1: null,
						value2: null,
						key: sFieldName
					},
					operations: [],
					controls: [],
					currentoperation: {},
					pending: false
			};
			this.oModel = new JSONModel(oData);
			this.oContext = this.oModel.getContext("/");
			this.oConditionContext = this.oModel.getContext("/condition");
			this.sFieldName = sFieldName;
			var oOperationChangeBinding = this.oModel.bindProperty("operation", this.oConditionContext),
				that = this;
			oOperationChangeBinding.attachChange(function() {
				var sOperation = that.oModel.getProperty("operation", that.getConditionContext()),
					oOperation = that.getOperation(sOperation),
					aControls = that.getControls(oOperation),
					aDefaultValues = that.getDefaultValues(oOperation);
				that.setDefaultValues(aDefaultValues[0], aDefaultValues[1]);
				that.setControls(aControls);
				if (oOperation) {
					if (oOperation.getValueList) {
						oOperation.valueList = oOperation.getValueList();
					}
					that.oModel.setProperty("/currentoperation", oOperation);
				}
				that.serialize();
			});
			var oValueChangeBinding = this.oModel.bindProperty("value1", this.oConditionContext);
			oValueChangeBinding.attachChange(function() {
				that.serialize();
			});
			var oValue2ChangeBinding = this.oModel.bindProperty("value2", this.oConditionContext);
			oValue2ChangeBinding.attachChange(function() {
				that.serialize();
			});

			var oPendingChangeBinding = this.oModel.bindProperty("pending", this.oContext);
			oPendingChangeBinding.attachChange(function() {
				if (that.bAsync) {
					if (that._iPendingTimer) {
						jQuery.sap.clearDelayedCall(that._iPendingTimer);
					}
					that._iPendingTimer = jQuery.sap.delayedCall(10, that, "fireEvent",["PendingChange",{oSource: that, pending: that.oModel.getProperty("/pending")}]);
				}
			});
			this.oOperationSelect = null;
			this.oFieldMetadata = oFieldMetadata;
			this.oOperationFilter  = null;
			this.bAsync = false;
		}
	});

	Type.getTranslatedText = function(sTextKey, sResourceBundle) {
		if (typeof sTextKey === "object") {
			sResourceBundle = sTextKey.bundle;
			sTextKey = sTextKey.key;
		}
		if (!sResourceBundle) {
			sResourceBundle = "sap.ui.comp";
		}
		return sap.ui.getCore().getLibraryResourceBundle(sResourceBundle).getText(sTextKey) || sTextKey;
	};
	Type.prototype.getTranslatedText = Type.getTranslatedText;

	Type.prototype.applySettings = function(oSettings) {
		if (oSettings && oSettings.operations && oSettings.operations.filter) {
			this.oOperationFilter  = oSettings.operations.filter;
		} else {
			this.oOperationFilter = null;
		}
	};

	Type.prototype.getParent = function() {
		return this.oFilterProvider._oSmartFilter;
	};

	Type.prototype.getModel = function() {
		return this.oModel;
	};

	Type.prototype.getConditionContext = function() {
		return this.oConditionContext;
	};

	Type.prototype.setDefaultValues = function(oValue1, oValue2) {
		this.oModel.setProperty("value1", oValue1, this.getConditionContext(), true);
		this.oModel.setProperty("value2", oValue2, this.getConditionContext(), true);
	};

	Type.prototype.getContext = function() {
		return this.oContext;
	};

	Type.prototype.getControls = function(oOperation) {
		return [];
	};

	Type.prototype.getOperations = function() {
		return [];
	};

	Type.prototype.isPending = function() {
		return this.getModel().getProperty("pending", this.getContext());
	};

	Type.prototype.attachPendingChange = function(fHandler) {
		this.attachEvent("PendingChange",fHandler);
	};

	Type.prototype.detachPendingChange = function(fHandler) {
		this.detachEvent("PendingChange",fHandler);
	};


	Type.prototype.setPending = function(bValue) {
		if (this.bAsync) {
			this.getModel().setProperty("pending", bValue, this.getContext());
		}
	};

	Type.prototype._filterOperation = function(oOperation) {
		if (!this.oOperationFilter) {
			return true;
		}
		var oFilter = this.oOperationFilter,
			sValue = oOperation[oFilter.path];
		if (oFilter.path && oFilter.contains && sValue) {
			var bExclude = oFilter.exclude || false,
				aFilterValues = (typeof oFilter.contains === "string") ? oFilter.contains.split(",") : oFilter.contains,
				bResult = bExclude;
			for (var j = 0; j < aFilterValues.length; j++) {
				if (bExclude && sValue.indexOf(aFilterValues[j]) > -1) {
					bResult = false;
				} else if (!bExclude && sValue.indexOf(aFilterValues[j]) > -1) {
					bResult = true;
				}
			}
		}
		return bResult;
	};

	Type.prototype._updateOperation = function(oOperation) {
		if (!oOperation.textValue) {
			oOperation.textValue = "";
		}
		if (!oOperation.languageText && oOperation.textKey) {
			oOperation.languageText = this.getTranslatedText(oOperation.textKey);
		}
	};

	Type.prototype.updateOperations = function() {
		this.oModel.setProperty("operations", [], this.getContext());
	};

	Type.prototype.getOperation = function(sOperationName) {
		var aOperations = this.oModel.getProperty("operations", this.getContext()) || [];
		for (var i = 0; i < aOperations.length; i++) {
			if (sOperationName === aOperations[i].key) {
				return aOperations[i];
			}
		}
		return null;
	};

	Type.prototype.getDefaultOperation = function() {
		var aOperations = this.getOperations();
		if (!aOperations || aOperations.length === 0) {
			return null;
		}
		for (var i = 0; i < aOperations.length; i++) {
			if (aOperations[i].defaultOperation) {
				return aOperations[i];
			}
		}
		return aOperations[0];
	};

	Type.prototype.setLabel = function(oLabel) {
		this._oLabel = oLabel;

		if (this.oLayout) { // update the labelFor and ariaLabelledBy references
			this._assignLabelToControls(this.oLayout.getItems());
		}
	};

	Type.prototype.setControls = function(aControls) {
		var aOldControls = this.oModel.getProperty("controls", this.getContext());
		if (aOldControls) {
			for (var i = 0; i < aOldControls.length; i++) {
				aOldControls[i].destroy();
			}
		}
		this.oModel.setProperty("controls", aControls, this.getContext());
		if (aControls) {
			for (var i = 0; i < aControls.length; i++) {
				aControls[i].setBindingContext(this.getConditionContext(), "$smartEntityFilter");
			}
		}

		if (this.oLayout) { // update the labelFor and ariaLabelledBy references
			this._assignLabelToControls(this.oLayout.getItems());
		}
	};

	Type.prototype._assignLabelToControls = function(aControls) {
		if (this._oLabel) {
			for (var i = 0; i < aControls.length; i++) {
				if (i === 0) {
					this._oLabel.setLabelFor(aControls[i]);
				}

				if (aControls[i].addAriaLabelledBy) {
					aControls[i].addAriaLabelledBy(this._oLabel);
				}
			}
		}
	};

	Type.prototype.setOperation = function(sOperation) {
		var oOperation = this.getOperation(sOperation);
		if (oOperation) {
			this.setCondition({
				operation : oOperation.key,
				key: this.sFieldName,
				value1: oOperation.defaultValues[0] || null,
				value2: oOperation.defaultValues[1] || null
			});
			this.getModel().checkUpdate(true);
		} else {
			//log error -> operation is not possible
		}
	};

	Type.prototype.isValidCondition = function() {
		return false;
	};

	Type.prototype.setCondition = function(oCondition) {
		this.oModel.setProperty("key", oCondition.key, this.oConditionContext);
		this.oModel.setProperty("operation", oCondition.operation, this.oConditionContext);
		this.oModel.setProperty("value1", oCondition.value1, this.oConditionContext);
		this.oModel.setProperty("value2", oCondition.value2, this.oConditionContext);
		this.oModel.setProperty("tokenText", this.getTokenText(oCondition), this.oConditionContext);
		return this;
	};

	Type.prototype.setAsync = function(bAsync) {
		this.bAsync = bAsync;
	};

	Type.prototype.getAsync = function(bAsync) {
		return this.bAsync;
	};

	Type.prototype.initialize = function(oJson) {
		this.updateOperations();
	};

	Type.prototype.serialize = function() {
	};

	Type.prototype.validate = function(bForceError) {
		this._bForceError = bForceError !== false;

		if (!this.isPending() && this.oFieldMetadata && this.oFieldMetadata.isMandatory && !this.isValidCondition() && this._bForceError) {
			this.getModel().setProperty("inputstate", "ERROR", this.getContext());
			return false;
		}
		this.getModel().setProperty("inputstate", "NONE", this.getContext());
		return true;
	};


	Type.prototype.getCondition = function() {
		var oCondition = jQuery.extend({}, this.oModel.getProperty("", this.oConditionContext));
		return oCondition;
	};

	Type.prototype.providerDataUpdated = function(aUpdatedFieldNames, oData) {
	};

	Type.prototype.getFilter = function(oFilter) {
		return null;
	};

	Type.prototype.getFilterRanges = function(oProviderData) {
		return null;
	};

	Type.prototype.getTokenText = function(oOperation) {
		return "";
	};

	Type.prototype.getName = function() {
		return this.getMetadata().getName();
	};

	Type.prototype.getType = function() {
		return "Edm";
	};

	Type.prototype.initializeFilterItem = function(sWidth, oLayout) {
		var oSelect = new sap.m.Select({
			width: sWidth
		});
		this.oOperationSelect = oSelect;
		this.sWidth = sWidth;
		oSelect.bindProperty("selectedKey", {
			path: "$smartEntityFilter>condition/operation"
		});
		oSelect.bindAggregation("items", {
			path: "$smartEntityFilter>operations",
			template: new sap.ui.core.ListItem({
				text: {
					path: "$smartEntityFilter>languageText"
				},
				key: {
					path: "$smartEntityFilter>key"
				},
				additionalText: {
					path: "$smartEntityFilter>textValue"
				}
			})
		});

		//TODO: Remove once Select supports a public API
		if (oSelect._oList && oSelect._oList.setShowSecondaryValues) {
			oSelect._oList.setShowSecondaryValues(true);
		}

		oSelect.setBindingContext(this.getContext(), "$smartEntityFilter");
		var oList = this.getModel().bindList("controls", this.getContext());
		oList.attachChange(function() {
			var aNewControls = oList.getModel().getProperty("controls", oList.getContext());
			if (!aNewControls) {
				return;
			}
			for (var i = 0; i < aNewControls.length; i++) {
				aNewControls[i].setLayoutData(new sap.m.FlexItemData({
					alignSelf: sap.m.FlexAlignSelf.Center
				}));
				//aNewControls[i].bindProperty("busy",{path: "$smartEntityFilter>/pending"});
				oLayout.addItem(aNewControls[i]);
			}
		});
		// The filter definition has own more than 1 operation
		oLayout.addItem(oSelect);
		//oSelect.bindProperty("busy",{path: "$smartEntityFilter>/pending"});
		oLayout.setModel(this.getModel(), "$smartEntityFilter");
		this.getModel().checkUpdate(true);
		this.oLayout = oLayout;
	};

	return Type;
}, /* bExport= */true);

}; // end of sap/ui/comp/config/condition/Type.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.navpopover.NavigationPopover') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.navpopover.NavigationPopover.
jQuery.sap.declare('sap.ui.comp.navpopover.NavigationPopover'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.CustomListItem'); // unlisted dependency retained
jQuery.sap.require('sap.m.Link'); // unlisted dependency retained
jQuery.sap.require('sap.m.Popover'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Title'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.form.SimpleForm'); // unlisted dependency retained
jQuery.sap.require('sap.m.VBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.PopoverRenderer'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/navpopover/NavigationPopover",[
	'jquery.sap.global', 'sap/m/CustomListItem', 'sap/m/Link', 'sap/m/Popover', 'sap/ui/core/Title', 'sap/ui/layout/form/SimpleForm', 'sap/m/VBox', 'sap/m/PopoverRenderer'
], function(jQuery, CustomListItem, Link, Popover, Title, SimpleForm, VBox, PopoverRenderer) {
	"use strict";

	/**
	 * Constructor for a new navpopover/NavigationPopover.
	 * 
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * @class The NavigationPopover allows navigating to different destinations by providing links on a popover.<br>
	 *        The links are fetched using the {@link sap.ushell.services.CrossApplicationNavigation CrossApplicationNavigation} service of the unified
	 *        shell.<br>
	 *        This class gets instantiated by {@link sap.ui.comp.navpopover.SmartLink SmartLink}. It is recommended to use
	 *        {@link sap.ui.comp.navpopover.SmartLink SmartLink} instead of creating NavigationPopover manually.
	 * @extends sap.m.Popover
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.navpopover.NavigationPopover
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var NavigationPopover = Popover.extend("sap.ui.comp.navpopover.NavigationPopover", /** @lends sap.ui.comp.navpopover.NavigationPopover.prototype */
	{
		metadata: {

			library: "sap.ui.comp",
			properties: {

				/**
				 * popover title
				 * 
				 * @since 1.28.0
				 */
				title: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * the name of the semantic object
				 * 
				 * @since 1.28.0
				 */
				semanticObjectName: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * describes the semantic attributes. The attribute has to be a map
				 * 
				 * @since 1.28.0
				 */
				semanticAttributes: {
					type: "object",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * The application state key passed to retrieve the navigation targets.
				 * 
				 * @since 1.28.0
				 */
				appStateKey: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Sets the visible text for the main navigation. If empty, the navigationPopover will try to get the Id from the given sourceObject.
				 */
				mainNavigationId: {
					type: "string",
					group: "Misc",
					defaultValue: null
				}
			},
			aggregations: {

				/**
				 * A list of available actions shown to the user.
				 * 
				 * @since 1.28.0
				 */
				availableActions: {
					type: "sap.ui.comp.navpopover.LinkData",
					multiple: true,
					singularName: "availableAction"
				},

				/**
				 * The main navigation displayed first on the popover.
				 * 
				 * @since 1.28.0
				 */
				mainNavigation: {
					type: "sap.ui.comp.navpopover.LinkData",
					multiple: false
				},

				/**
				 * The navigation taking the user back to the source application.
				 * 
				 * @since 1.28.0
				 */
				ownNavigation: {
					type: "sap.ui.comp.navpopover.LinkData",
					multiple: false
				}
			},
			associations: {

				/**
				 * Source control for which the popover is displayed.
				 * 
				 * @since 1.28.0
				 */
				source: {
					type: "sap.ui.core.Control",
					multiple: false
				},

				/**
				 * ExtraContent is displayed between the main navigation and the additional available links.
				 * 
				 * @since 1.28.0
				 */
				extraContent: {
					type: "sap.ui.core.Control",
					multiple: false
				},

				/**
				 * The parent component.
				 */
				component: {
					type: "sap.ui.core.Element",
					multiple: false
				}
			},
			events: {

				/**
				 * The navigation targets that are shown.
				 * 
				 * @since 1.28.0
				 */
				targetsObtained: {},

				/**
				 * Event is triggered when a link is pressed.
				 * 
				 * @since 1.28.0
				 */
				navigate: {}
			}
		},
		renderer: PopoverRenderer.render
	});

	NavigationPopover.prototype.init = function() {
		Popover.prototype.init.call(this);

		this.addStyleClass("navigationPopover");

		this.setContentWidth("380px");
		this.setHorizontalScrolling(false);
		this.setPlacement(sap.m.PlacementType.Auto);

		this._oHeaderForm = new SimpleForm({
			maxContainerCols: 1,
			visible: true
		});

		this._oMainNavigationText = new Title();
		this._oMainNavigationLink = new Link();
		this._oMainNavigationLink.attachPress(jQuery.proxy(this._onLinkPress, this));

		this._oHeaderForm.addContent(this._oMainNavigationText);
		this._oHeaderForm.addContent(this._oMainNavigationLink);

		this._oForm = new SimpleForm({
			maxContainerCols: 1,
			visible: false
		});

		this._oNavigationLinkContainer = new VBox();

		this._oForm.addContent(new Title({
			text: sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("POPOVER_LINKLIST_TEXT")
		}));
		this._oForm.addContent(this._oNavigationLinkContainer);

		this.addContent(this._oHeaderForm);
		this.addContent(this._oForm);
	};

	NavigationPopover.prototype.addAvailableAction = function(oLinkData) {
		this.addAggregation("availableActions", oLinkData);
	};

	NavigationPopover.prototype._getSemanticObjectValue = function() {

		var oSemanticAttributes = this.getSemanticAttributes();
		if (oSemanticAttributes) {
			var sSemanticalObject = this.getSemanticObjectName();
			return oSemanticAttributes[sSemanticalObject];
		}

		return null;
	};

	/**
	 * creates the link controls and sets them into the popover's content
	 * 
	 * @private
	 */
	NavigationPopover.prototype._createLinks = function() {
		var i;
		var oLink;
		var sValue;
		var sHref;
		var oLinkData;
		var oComponent = this._getComponent();
		var oXApplNavigation = this._getNavigationService();

		this._oNavigationLinkContainer.removeAllItems();

		sValue = this.getMainNavigationId();
		if (!sValue) {
			var oSmartLink = this._getSourceControl();
			if (oSmartLink) {
				if (oSmartLink.getSemanticObjectValue) {
					sValue = oSmartLink.getSemanticObjectValue();
				} else {
					sValue = this._getSemanticObjectValue();
				}
			}
		}

		this._oMainNavigationText.setText(sValue);

		var oMainNav = this.getMainNavigation();
		if (oMainNav) {
			sHref = oMainNav.getHref();
			if (sHref) {
				this._oHeaderForm.removeStyleClass("navpopoversmallheader");
				this._oMainNavigationLink.setText(oMainNav.getText());

				if (oXApplNavigation) {
					sHref = oXApplNavigation.hrefForExternal({
						target: {
							shellHash: sHref
						}
					}, oComponent);
				}
				this._oMainNavigationLink.setHref(sHref);
				this._oMainNavigationLink.setTarget(oMainNav.getTarget());
				this._oMainNavigationLink.setVisible(true);
			} else {
				this._oHeaderForm.addStyleClass("navpopoversmallheader");
				this._oMainNavigationLink.setText("");
				this._oMainNavigationLink.setVisible(false);
			}
		}

		var aActions = this.getAvailableActions();
		if (aActions) {
			for (i = 0; i < aActions.length; i++) {
				oLink = new Link();
				oLinkData = aActions[i];

				if (oLinkData) {
					oLink.setText(oLinkData.getText());
					oLink.attachPress(jQuery.proxy(this._onLinkPress, this));

					sHref = oLinkData.getHref();
					if (oXApplNavigation && sHref) {
						sHref = oXApplNavigation.hrefForExternal({
							target: {
								shellHash: sHref
							}
						}, oComponent);
					}
					oLink.setHref(sHref);
					oLink.setTarget(oLinkData.getTarget());
				}

				this._oNavigationLinkContainer.addItem(oLink);
			}
		}

		this._setListVisibility();
	};

	NavigationPopover.prototype.insertAvailableAction = function(oLinkData, iIndex) {
		this.insertAggregation("availableActions", oLinkData, iIndex);
	};

	NavigationPopover.prototype.removeAvailableAction = function(oLinkData) {
		var iIndexOfRemovedItem;

		if (typeof (oLinkData) === "number") { // oLinkData can also be an index to be removed
			iIndexOfRemovedItem = oLinkData;
		} else {
			iIndexOfRemovedItem = this.getAvailableActions().indexOf(oLinkData);
		}

		if (iIndexOfRemovedItem >= 0) {
			this._oNavigationLinkContainer.removeItem(iIndexOfRemovedItem);
		}

		var oReturnValue = this.removeAggregation("availableActions", oLinkData);
		this._setListVisibility();
		return oReturnValue;
	};

	NavigationPopover.prototype.removeAllAvailableActions = function() {
		this._oNavigationLinkContainer.removeAllItems();
		this.removeAllAggregation("availableActions");
		this._setListVisibility();
	};

	/**
	 * sets the visibility of the link list depending on the number of available links (0 = invisible)
	 * 
	 * @private
	 */
	NavigationPopover.prototype._setListVisibility = function() {
		var iAvailableActions = this.getAvailableActions().length;
		this._oForm.setVisible(iAvailableActions > 0);
	};

	/**
	 * EventHandler for all link press on this popover
	 * 
	 * @param {object} oEvent - the event parameters
	 * @private
	 */
	NavigationPopover.prototype._onLinkPress = function(oEvent) {
		var oSource = oEvent.getSource();
		this.fireNavigate({
			text: oSource.getText(),
			href: oSource.getHref()
		});
	};

	NavigationPopover.prototype.setSemanticObjectName = function(sSemanticalObject) {
		this.setProperty("semanticObjectName", sSemanticalObject);

		this.removeAllAvailableActions();
		this.setMainNavigation(null);
	};

	/**
	 * retrieve the navigation service
	 * 
	 * @private
	 * @returns {object} the navigation service
	 */
	NavigationPopover.prototype._getNavigationService = function() {
		return sap.ushell && sap.ushell.Container && sap.ushell.Container.getService("CrossApplicationNavigation");
	};

	/**
	 * retrieve the url service
	 * 
	 * @private
	 * @returns {object} the url service
	 */
	NavigationPopover.prototype._getUrlService = function() {
		return sap.ushell && sap.ushell.Container && sap.ushell.Container.getService("URLParsing");
	};

	/**
	 * determines the potential navigation targets for the semantical object and visualize the popover
	 * 
	 * @public
	 * @param {string} sSemanticalObject name of the semantical object
	 */
	NavigationPopover.prototype.retrieveNavTargets = function() {
		var sSemanticalObject = this.getSemanticObjectName();
		var mSemanticAttributes = this.getSemanticAttributes();
		var sAppStateKey = this.getAppStateKey();
		this._retrieveNavTargets(sSemanticalObject, mSemanticAttributes, sAppStateKey);
	};

	/**
	 * determines the potential navigation targets for the semantical object and visualize the popover
	 * 
	 * @private
	 * @param {string} sSemanticalObject name of the semantical object
	 * @param {map} mSemanticAttributes map of (name, values) pair for to fine-tune the result
	 * @param {string} sAppStateKey Application state key
	 */
	NavigationPopover.prototype._retrieveNavTargets = function(sSemanticalObject, mSemanticAttributes, sAppStateKey) {

		var that = this;

		this.setMainNavigation(null);
		this.removeAllAvailableActions();

		var oXApplNavigation = this._getNavigationService();
		if (!oXApplNavigation) {
			jQuery.sap.log.error("Service 'CrossApplicationNavigation' could not be obtained");

			// still fire targetsObtained event: easier for testing and the eventhandlers still could provide static links
			this.fireTargetsObtained();
			return;
		}

		var bIgnoreFormFactor = false;

		var oComponent = this._getComponent();

		var oPromise = oXApplNavigation.getSemanticObjectLinks(sSemanticalObject, mSemanticAttributes, bIgnoreFormFactor, oComponent, sAppStateKey);
		oPromise.fail(jQuery.proxy(function() {
			// Reset actions
			jQuery.sap.log.error("'getSemanticObjectLinks' failed");
		}, this));

		oPromise.done(jQuery.proxy(function(aLinks) {
			var i, sId, sText;
			var oURLParsing, oShellHash;
			var oLinkData;
			var bHasFactSheet = false;

			if (aLinks && aLinks.length) {
				oURLParsing = that._getUrlService();

				var sCurrentHash = oXApplNavigation.hrefForExternal();
				if (sCurrentHash && sCurrentHash.indexOf("?") !== -1) { // sCurrentHash can contain query string, cut it off!
					sCurrentHash = sCurrentHash.split("?")[0];
				}

				for (i = 0; i < aLinks.length; i++) {
					sId = aLinks[i].intent;

					sText = aLinks[i].text;

					oLinkData = new sap.ui.comp.navpopover.LinkData({
						text: sText,
						href: sId
					});

					if (sId.indexOf(sCurrentHash) === 0) {
						// Prevent current app from being listed
						// NOTE: If the navigation target exists in
						// multiple contexts (~XXXX in hash) they will all be skipped
						this.setOwnNavigation(oLinkData);
						continue;
					}

					// Check if a FactSheet exists for this SemanticObject (to skip the first one found)
					oShellHash = oURLParsing.parseShellHash(sId);
					if (oShellHash.action && (oShellHash.action === 'displayFactSheet') && !bHasFactSheet) {
						// Prevent this first FactSheet from being listed --> TODO why ?
						oLinkData.setText(sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("POPOVER_FACTSHEET"));
						that.setMainNavigation(oLinkData);
						bHasFactSheet = true;
					} else {
						that.addAvailableAction(oLinkData);
					}
				}
			}

			that.fireTargetsObtained();

		}, this));

	};

	/**
	 * returns the component object
	 * 
	 * @private
	 * @returns {object} the component
	 */
	NavigationPopover.prototype._getComponent = function() {
		var oComponent = this.getComponent();
		if (typeof oComponent === "string") {
			oComponent = sap.ui.getCore().getComponent(oComponent);
		}
		return oComponent;
	};

	/**
	 * displays the popover. This method should be called, once all navigation targets are adapted by the application
	 * 
	 * @public
	 */
	NavigationPopover.prototype.show = function() {

		var oSourceControl = this._getSourceControl();
		if (!oSourceControl) {
			jQuery.sap.log.error("no source assigned");
			return;
		}

		var oMainNav = this.getMainNavigation();
		var aActions = this.getAvailableActions();
		if (!(oMainNav && (oMainNav.getHref())) && !(aActions && (aActions.length > 0))) { // if no fact sheet exists and no actions and no extra
			// content, then do not show popover
			jQuery.sap.log.error("no navigation targets found");

			if (!this.getExtraContent()) {
				jQuery.sap.log.error("NavigationPopover is empty");
				jQuery.sap.require("sap.m.MessageBox");
				var MessageBox = sap.ui.require("sap/m/MessageBox");
				MessageBox.show(sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("POPOVER_DETAILS_NAV_NOT_POSSIBLE"), {
					icon: MessageBox.Icon.ERROR,
					title: sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("POPOVER_MSG_NAV_NOT_POSSIBLE"),
					styleClass: (this.$() && this.$().closest(".sapUiSizeCompact").length) ? "sapUiSizeCompact" : ""
				});

				return;
			}
		}

		this._createLinks();

		this.openBy(oSourceControl);
	};

	/**
	 * retrieves the control for which the popover should be displayed
	 * 
	 * @private
	 * @returns { sap.ui.core.Control} returns the source control
	 */
	NavigationPopover.prototype._getSourceControl = function() {
		var oSourceControl = null;
		var sControlId = this.getSource();

		if (sControlId) {
			oSourceControl = sap.ui.getCore().byId(sControlId);
		}

		return oSourceControl;
	};

	NavigationPopover.prototype.setExtraContent = function(oControl) {
		var oOldContent = this.getExtraContent();
		if (oOldContent && oControl && oOldContent === oControl.getId()) {
			return;
		}

		if (oOldContent) {
			var oOldControl = sap.ui.getCore().byId(oOldContent);
			this.removeContent(oOldControl);
		}

		this.setAssociation("extraContent", oControl);

		if (oControl) {
			this.insertContent(oControl, 1);
		}
	};

	return NavigationPopover;

}, /* bExport= */true);

}; // end of sap/ui/comp/navpopover/NavigationPopover.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.odata.ChartMetadata') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// ---------------------------------------------------------------------------------
// Class used to determine/retrieve UI chart type based on the annotation chart type
// ---------------------------------------------------------------------------------
jQuery.sap.declare('sap.ui.comp.odata.ChartMetadata'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/comp/odata/ChartMetadata",[], function() {
	"use strict";

	var mUi5ChartTypeForAnnotationChartType = {
		"com.sap.vocabularies.UI.v1.ChartType/Waterfall": "column",
		"com.sap.vocabularies.UI.v1.ChartType/Column": "column",
		"com.sap.vocabularies.UI.v1.ChartType/AreaStacked": "stacked_column",
		"com.sap.vocabularies.UI.v1.ChartType/ColumnStacked": "stacked_column",
		"com.sap.vocabularies.UI.v1.ChartType/ColumnDual": "dual_column",
		"com.sap.vocabularies.UI.v1.ChartType/ColumnStackedDual": "dual_stacked_column",
		"com.sap.vocabularies.UI.v1.ChartType/AreaStacked100": "100_stacked_column",
		"com.sap.vocabularies.UI.v1.ChartType/ColumnStacked100": "100_stacked_column",
		"com.sap.vocabularies.UI.v1.ChartType/ColumnStackedDual100": "100_dual_stacked_column",
		"com.sap.vocabularies.UI.v1.ChartType/HorizontalArea": "bar",
		"com.sap.vocabularies.UI.v1.ChartType/Bar": "bar",
		"com.sap.vocabularies.UI.v1.ChartType/HorizontalAreaStacked": "stacked_bar",
		"com.sap.vocabularies.UI.v1.ChartType/BarStacked": "stacked_bar",
		"com.sap.vocabularies.UI.v1.ChartType/BarDual": "dual_bar",
		"com.sap.vocabularies.UI.v1.ChartType/BarStackedDual": "dual_stacked_bar",
		"com.sap.vocabularies.UI.v1.ChartType/HorizontalAreaStacked100": "100_stacked_bar",
		"com.sap.vocabularies.UI.v1.ChartType/BarStacked100": "100_stacked_bar",
		"com.sap.vocabularies.UI.v1.ChartType/BarStackedDual100": "100_dual_stacked_bar",
		"com.sap.vocabularies.UI.v1.ChartType/Radar": "line",
		"com.sap.vocabularies.UI.v1.ChartType/Area": "line",
		"com.sap.vocabularies.UI.v1.ChartType/Line": "line",
		"com.sap.vocabularies.UI.v1.ChartType/LineDual": "dual_line",
		"com.sap.vocabularies.UI.v1.ChartType/Combination": "combination",
		"com.sap.vocabularies.UI.v1.ChartType/CombinationStacked": "stacked_combination",
		"com.sap.vocabularies.UI.v1.ChartType/CombinationDual": "dual_combination",
		"com.sap.vocabularies.UI.v1.ChartType/CombinationStackedDual": "dual_stacked_combination",
		"com.sap.vocabularies.UI.v1.ChartType/HorizontalCombinationStacked": "horizontal_stacked_combination",
		"com.sap.vocabularies.UI.v1.ChartType/Pie": "pie",
		"com.sap.vocabularies.UI.v1.ChartType/Donut": "donut",
		"com.sap.vocabularies.UI.v1.ChartType/Scatter": "scatter",
		"com.sap.vocabularies.UI.v1.ChartType/Bubble": "bubble",
		"com.sap.vocabularies.UI.v1.ChartType/HeatMap": "heatmap",
		"com.sap.vocabularies.UI.v1.ChartType/TreeMap": "treemap",
		"com.sap.vocabularies.UI.v1.ChartType/Bullet": "bullet",
		"com.sap.vocabularies.UI.v1.ChartType/VerticalBullet": "vertical_bullet"
	};

	var mMeasureRole = {
		"com.sap.vocabularies.UI.v1.ChartMeasureAttributeType/Axis1": "axis1",
		"com.sap.vocabularies.UI.v1.ChartMeasureAttributeType/Axis2": "axis2",
		"com.sap.vocabularies.UI.v1.ChartMeasureAttributeType/Axis3": "axis3"
	};

	var mDinemsionRole = {
		"com.sap.vocabularies.UI.v1.ChartDimensionAttributeType/Category": "category",
		"com.sap.vocabularies.UI.v1.ChartDimensionAttributeType/Series": "series"
	};

	/**
	 * Object used to determine/retrieve UI5 chart metadata based on the annotation chart metadata
	 * 
	 * @private
	 * @experimental This module is only for internal/experimental use!
	 */
	var ChartMetadata = {
		/**
		 * Get the UI5 chart type based on Annotation chart type
		 * 
		 * @public
		 * @param {string} sType - The Annotation chart type
		 * @returns {string} the UI5 chart type (if found)
		 */
		getChartType: function(sType) {
			return mUi5ChartTypeForAnnotationChartType[sType];
		},
		/**
		 * Get the UI5 measure role based on Annotation measure role
		 * 
		 * @public
		 * @param {string} sRole - The Annotation measure role
		 * @returns {string} the UI5 measure role (if found)
		 */
		getMeasureRole: function(sRole) {
			return mMeasureRole[sRole];
		},
		/**
		 * Get the UI5 dimension role based on Annotation dimension role
		 * 
		 * @public
		 * @param {string} sType - The Annotation dimension role
		 * @returns {string} the UI5 dimension role (if found)
		 */
		getDimensionRole: function(sRole) {
			return mDinemsionRole[sRole];
		}
	};

	return ChartMetadata;

}, /* bExport= */true);

}; // end of sap/ui/comp/odata/ChartMetadata.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.odata.FieldSelectorRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.comp.odata.FieldSelectorRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/odata/FieldSelectorRenderer",['jquery.sap.global'],
	function(jQuery) {
	"use strict";


	/**
	 * @class FieldSelector renderer.
	 * @static
	 */
	var FieldSelectorRenderer = {};
	
	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 * 
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	FieldSelectorRenderer.render = function(oRm, oControl) {

		// write the HTML into the render manager
		oRm.write("<span");
		oRm.writeControlData(oControl);
		// oRm.addClass("sapUiCompFieldSelector");
		oRm.writeClasses();
		oRm.write(">"); // span element
		var oContent = oControl.getContent();
		oRm.renderControl(oContent);
		oRm.write("</span>");
	};
	

	return FieldSelectorRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/comp/odata/FieldSelectorRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.odata.MetadataAnalyser') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
// -----------------------------------------------------------------------------
// Analyses the OData service metadata doc ($metadata), having SAP-Annotations,
// to resolve all properties from entities, filterable properties, etc.
// -----------------------------------------------------------------------------
/*global Promise */
jQuery.sap.declare('sap.ui.comp.odata.MetadataAnalyser'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.ODataModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.ODataAnnotations'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/odata/MetadataAnalyser",[
	'jquery.sap.global', 'sap/ui/model/odata/ODataModel', 'sap/ui/model/odata/ODataAnnotations'
], function(jQuery, ODataModel, ODataAnnotations) {
	"use strict";

	/**
	 * Constructs a utility class to analyse the OData metadata document ($metadata), to resolve SAP-Annotations. \n<b>Note:</b> Please ensure that
	 * the promise returned by {@link sap.ui.model.odata.ODataMetaModel#loaded loaded} is resolved before using this class!
	 * 
	 * @constructor
	 * @experimental This module is only for internal/experimental use!
	 * @public
	 * @param {String} oResourceRootUri - The URL of the resource or ODataModel
	 * @author Pavan Nayak
	 */
	var MetadataAnalyser = function(oResourceRootUri) {
		if (typeof oResourceRootUri === "object") {
			this.oModel = oResourceRootUri;
		} else {
			this._sResourceRootUri = oResourceRootUri;
		}
		this._oMetadata = null;
		if (!this.oModel && this._sResourceRootUri) {
			this.oModel = new ODataModel(this._sResourceRootUri);
		}
		if (this.oModel) {
			this._oMetaModel = this.oModel.getMetaModel();
		}
		if (this._oMetaModel) {
			this._oMetadata = this._oMetaModel.getProperty("/");
		}

		// store the default schema
		if (this._oMetadata && this._oMetadata.dataServices) {
			this._oSchemaDefinition = this._oMetadata.dataServices.schema[0];
		}
	};

	// TODO: should we cache all these entity fields for future access?
	// this.mFilterFields[sEntityTypeName] = aFinalFilterableFields;

	/**
	 * Returns the namespace from the Schema
	 * 
	 * @returns {string} the namespace
	 * @public
	 * @deprecated Since 1.29.
	 */
	MetadataAnalyser.prototype.getNamespace = function() {
		if (this._oSchemaDefinition) {
			return this._oSchemaDefinition.namespace;
		}
	};

	/**
	 * @public Get the schema definition of the odata service
	 * @returns {Object} Get the schema definition of the odata service
	 * @deprecated Since 1.29.
	 */
	MetadataAnalyser.prototype.getSchemaDefinition = function() {
		return this._oSchemaDefinition;
	};

	/**
	 * Gets the specified attribute (sap:annotation) value from the default entity container
	 * 
	 * @param {String} sAttribute - The name of the attribute (sap:annotation) on the entity container
	 * @returns {String} The value of the specified attribute (if found)|null
	 * @public
	 */
	MetadataAnalyser.prototype.getEntityContainerAttribute = function(sAttribute) {
		var sAttributeValue = null, oEntityContainer;
		if (this._oMetaModel && sAttribute) {
			if (sAttribute.indexOf("sap:") < 0) {
				sAttribute = "sap:" + sAttribute;
			}
			oEntityContainer = this._oMetaModel.getODataEntityContainer();
			sAttributeValue = oEntityContainer[sAttribute] || null;
		}
		return sAttributeValue;
	};

	/**
	 * Gets the specified label for an Entity with non annotation
	 * 
	 * @param {string} sEntityType - name of the entity set
	 * @returns {string} - value of the label (if found)|empty
	 * @public
	 */
	MetadataAnalyser.prototype.getEntityLabelByEntityTypeName = function(sEntityType) {
		var oEntityDef = this._getEntityDefinition(sEntityType), oResult, sResult = "";
		if (oEntityDef) {
			oResult = oEntityDef["com.sap.vocabularies.Common.v1.Label"];
			if (oResult && oResult.String) {
				sResult = oResult.String;
			}
		}

		return sResult;
	};

	/**
	 * Gets the entity definition for the specified entity type
	 * 
	 * @param {String} sEntityTypeName - The entity type name as specified in the metadata document (with or without namespace)
	 * @returns {Object} entity definition
	 * @private
	 */
	MetadataAnalyser.prototype._getEntityDefinition = function(sEntityTypeName) {
		var oEntityDef = null;
		if (sEntityTypeName) {
			oEntityDef = this._oMetaModel.getODataEntityType(this._getFullyQualifiedNameForEntity(sEntityTypeName));
		}
		return oEntityDef;
	};

	/**
	 * Gets the complex type definition for the specified type
	 * 
	 * @param {String} sComplexTypeName - The complex type name as specified in the metadata document (with or without namespace)
	 * @returns {Object} entity definition
	 * @private
	 */
	MetadataAnalyser.prototype._getComplexTypeDefinition = function(sComplexTypeName) {
		var oComplexTypeDef = null;
		if (sComplexTypeName) {
			oComplexTypeDef = this._oMetaModel.getODataComplexType(this._getFullyQualifiedNameForEntity(sComplexTypeName));
		}
		return oComplexTypeDef;
	};

	/**
	 * Gets the property name of a complextype in a given entityType
	 * 
	 * @param {String} sEntityType - EntityType to search for the property
	 * @param {String} sComplexTypeEntityName - Type-Name of the complextype to resolve it.
	 * @returns {String} Returns the propertyname of the complextype as used in the given entityType
	 * @private
	 */
	MetadataAnalyser.prototype._getNameOfPropertyUsingComplexType = function(sEntityType, sComplexTypeEntityName) {
		var sCurrentNamespace = this.getNamespace();
		if (sEntityType && sComplexTypeEntityName && sCurrentNamespace) {
			var sTypeOnMainEntityType = sCurrentNamespace + "." + sComplexTypeEntityName;
			var oMainEntityTypeDef = this._getEntityDefinition(sEntityType);
			if (oMainEntityTypeDef) {
				var aProperties = oMainEntityTypeDef.property;
				if (aProperties && aProperties.length) {
					var i = 0;
					for (i = 0; i < aProperties.length; i++) {
						var oProperty = aProperties[i];
						if (oProperty && oProperty.type === sTypeOnMainEntityType) {
							return oProperty.name;
						}
					}
				}
			}
		}
		return null;
	};

	/**
	 * Removes the namespace from the specified string <br>
	 * returns string content that appears after the last "." separator <br>
	 * E.g.: if input is "com.sap.foo.EntityType", returns "EntityType" as the result
	 * 
	 * @param {string} sString String
	 * @returns {string} String without name space. If no name space was found, the original string will be returned.
	 * @public
	 */
	MetadataAnalyser.prototype.removeNamespace = function(sString) {
		var iIndex, sResult = sString;
		// Return the result
		if (sString) {
			iIndex = sString.lastIndexOf(".") + 1;
		}
		if (iIndex > 0) {
			sResult = sString.substring(iIndex);
		}
		return sResult;
	};

	/**
	 * Gets the entity type from the Entity name (EntitySet name)
	 * 
	 * @param {string} sEntitySetName - The entity name
	 * @returns {string} The entity type
	 * @private
	 */
	MetadataAnalyser.prototype.getEntityTypeNameFromEntitySetName = function(sEntitySetName) {
		var oEntitySet = null, sEntityTypeName = null;

		if (this._oMetaModel) {
			oEntitySet = this._oMetaModel.getODataEntitySet(sEntitySetName);
			if (oEntitySet) {
				sEntityTypeName = oEntitySet.entityType;
			}
		}
		return sEntityTypeName;
	};

	/**
	 * Gets the first matching entity set from the Entity Type name (EntityType name)
	 * 
	 * @param {string} sEntityTypeName - The entity name
	 * @returns {string} The entitySet name
	 * @private
	 * @deprecated Since 1.29.
	 */
	MetadataAnalyser.prototype.getEntitySetNameFromEntityTypeName = function(sEntityTypeName) {
		var sQualifiedEntity, oEntityContainer, aEntitySet, i, iLen, oEntitySet;
		// get entity type
		if (this._oMetaModel && sEntityTypeName) {
			sQualifiedEntity = this._getFullyQualifiedNameForEntity(sEntityTypeName);
			oEntityContainer = this._oMetaModel.getODataEntityContainer();
			if (oEntityContainer && sQualifiedEntity) {
				aEntitySet = oEntityContainer.entitySet;
				iLen = aEntitySet.length;
				for (i = 0; i < iLen; i++) {
					oEntitySet = aEntitySet[i];
					if (oEntitySet.entityType === sQualifiedEntity) {
						break;
					}
					oEntitySet = null;
				}
				// get entity set name
				if (oEntitySet) {
					return oEntitySet.name;
				}
			}
		}

		return null;
	};

	/**
	 * Gets a collection of keys (field names) for the specified entity name
	 * 
	 * @param {String} sEntitySetName - The entity name as specified in the metadata document
	 * @returns {Array} Array of key names
	 * @public
	 */
	MetadataAnalyser.prototype.getKeysByEntitySetName = function(sEntitySetName) {
		var aKeys = null, sEntityTypeName = null;
		if (!this._oMetaModel) {
			return undefined;
		}
		sEntityTypeName = this.getEntityTypeNameFromEntitySetName(sEntitySetName);
		if (sEntityTypeName) {
			aKeys = this.getKeysByEntityTypeName(sEntityTypeName);
		}
		return aKeys;
	};

	/**
	 * Gets a collection keys (field names) for the specified entity type
	 * 
	 * @param {String} sEntityTypeName - The entity type name as specified in the metadata document
	 * @returns {Array} Array of key names
	 * @public
	 */
	MetadataAnalyser.prototype.getKeysByEntityTypeName = function(sEntityTypeName) {
		var aKeys = null, aPropertyRefs = null, i, iLen = 0, oEntityDef = null;
		if (!this._oMetaModel) {
			return undefined;
		}
		oEntityDef = this._getEntityDefinition(sEntityTypeName);
		if (oEntityDef) {
			if (oEntityDef.key) {
				aPropertyRefs = oEntityDef.key.propertyRef;
				if (aPropertyRefs) {
					iLen = aPropertyRefs.length;
					aKeys = [];
					for (i = 0; i < iLen; i++) {
						aKeys.push(aPropertyRefs[i].name);
					}
				}
			}
		}
		return aKeys;
	};

	/**
	 * Gets a collection of fields for the specified entity name
	 * 
	 * @param {String} sEntitySetName - The entity name as specified in the metadata document
	 * @returns {Array} Array of fields
	 * @public
	 */
	MetadataAnalyser.prototype.getFieldsByEntitySetName = function(sEntitySetName) {
		var aFields = null, oEntitySet, sEntityTypeName = null;
		if (!this._oMetaModel) {
			return undefined;
		}
		oEntitySet = this._oMetaModel.getODataEntitySet(sEntitySetName);
		if (oEntitySet) {
			sEntityTypeName = oEntitySet.entityType;
		}

		if (sEntityTypeName) {
			aFields = this.getFieldsByEntityTypeName(sEntityTypeName);
			this._updateSortableOnFields(aFields, oEntitySet);
		}

		return aFields;
	};

	/**
	 * Updates/sets sortable property on fields based on the entitySet annotation (Org.OData.Capabilities.V1.SortRestrictions)
	 * 
	 * @param {Array} aFields - Array of field metadata derived from OData properties
	 * @param {Object} oEntitySet - The entity set instance from ODataMetaModel
	 * @public
	 */
	MetadataAnalyser.prototype._updateSortableOnFields = function(aFields, oEntitySet) {
		var oSortRestrictions, aNonSortableProperties, aNonSortablePaths = [], iLen, sPath, oField;
		if (!oEntitySet || !aFields) {
			return;
		}
		oSortRestrictions = oEntitySet["Org.OData.Capabilities.V1.SortRestrictions"];
		if (oSortRestrictions) {
			aNonSortableProperties = oSortRestrictions.NonSortableProperties;
		}
		if (aNonSortableProperties) {
			iLen = aNonSortableProperties.length;
			while (iLen--) {
				sPath = aNonSortableProperties[iLen].PropertyPath;
				if (sPath) {
					aNonSortablePaths.push(sPath);
				}
			}
		}
		// Loop over the fields
		iLen = aFields.length;
		while (iLen--) {
			oField = aFields[iLen];
			if (aNonSortablePaths.indexOf(oField.name) > -1) {
				oField.sortable = false;
			} else {
				oField.sortable = true;
			}
		}
	};

	/**
	 * Gets a collection of fields for the specified entity type
	 * 
	 * @param {String} sEntityTypeName - The entity type name as specified in the metadata document
	 * @returns {Array} Array of fields
	 * @public
	 */
	MetadataAnalyser.prototype.getFieldsByEntityTypeName = function(sEntityTypeName) {
		var oEntityDef;
		if (!this._oMetaModel) {
			return undefined;
		}
		oEntityDef = this._getEntityDefinition(sEntityTypeName);
		return this._getFieldsByEntityDefinition(oEntityDef);
	};

	/**
	 * Gets a collection of fields for the specified complex type
	 * 
	 * @param {String} sComplexTypeName - The complex type name as specified in the metadata document
	 * @param {string} sParentPropertyName - The name of the parent property (complex type property)
	 * @returns {Array} Array of fields
	 * @public
	 */
	MetadataAnalyser.prototype.getFieldsByComplexTypeName = function(sComplexTypeName, sParentPropertyName) {
		var oComplexDef;
		if (!this._oMetaModel) {
			return undefined;
		}
		oComplexDef = this._getComplexTypeDefinition(sComplexTypeName);
		return this._getFieldsByEntityDefinition(oComplexDef, sParentPropertyName);
	};

	/**
	 * Get an array of all entity type names
	 * 
	 * @returns {Array} Returns an array of entity type names
	 * @public
	 */
	MetadataAnalyser.prototype.getAllEntityTypeNames = function() {
		if (!this._oMetaModel) {
			return undefined;
		}
		var oSchema = this._oSchemaDefinition;
		if (oSchema.entityType && oSchema.entityType.length > 0) {
			var i = 0;
			var aResult = [];
			for (i = 0; i < oSchema.entityType.length; i++) {
				aResult.push(oSchema.entityType[i].name);
			}
			return aResult;
		}
		return null;
	};

	/**
	 * Gets a map with fields and their related semantic objects
	 * 
	 * @param {String} sEntitySetName - The entity set for which the map should be returned
	 * @returns {object} map between fields and semantic objects
	 * @public
	 */
	MetadataAnalyser.prototype.getFieldSemanticObjectMap = function(sEntitySetName) {
		var oMap = {};
		var aODataFieldMetadata = this.getFieldsByEntitySetName(sEntitySetName);
		var i, iLen = aODataFieldMetadata.length;
		for (i = 0; i < iLen; i++) {
			var oField = aODataFieldMetadata[i];
			var mAnnotation = this.getSemanticObjectAnnotation(oField.fullName);
			if (mAnnotation && mAnnotation.semanticObject) {
				oMap[oField.name] = mAnnotation.semanticObject;
			}
		}

		return oMap;
	};

	/**
	 * Gets a collection fields for the specified entity definition
	 * 
	 * @param {Object} oEntityDef - The entity definition as specified in the metadata document
	 * @param {string} sParentPropertyName - The name of the parent property (navigationProperty/complex type)
	 * @returns {Array} Array of fields
	 */
	MetadataAnalyser.prototype._getFieldsByEntityDefinition = function(oEntityDef, sParentPropertyName) {
		var aFields = null, aProperty = null, i = 0, iLen = 0, oProperty, oField, oResult;
		if (oEntityDef) {
			aProperty = oEntityDef.property;
		}
		// Enrich the fields with necessary information as an attribute (easy access)
		if (aProperty) {
			aFields = [];
			iLen = aProperty.length;
			for (i = 0; i < iLen; i++) {
				oProperty = aProperty[i];
				if (oProperty) {
					oField = jQuery.extend({}, oProperty);
					oResult = oProperty["com.sap.vocabularies.Common.v1.Label"];
					if (oResult) {
						oField.fieldLabel = oResult.String;
					}

					oResult = oProperty["com.sap.vocabularies.Common.v1.QuickInfo"];
					if (oResult) {
						oField.quickInfo = oResult.String;
					}

					oField.displayFormat = oProperty["sap:display-format"];
					oField.aggregationRole = oProperty["sap:aggregation-role"];

					oResult = oProperty["Org.OData.Measures.V1.ISOCurrency"];
					if (oResult) {
						oField.isCurrencyField = true;
						oField.isMeasureField = true;
						oField.unit = oResult.Path;
					}
					oResult = oProperty["Org.OData.Measures.V1.Unit"];
					if (oResult) {
						oField.isMeasureField = true;
						oField.unit = oResult.Path;
					}
					oResult = oProperty["com.sap.vocabularies.Common.v1.Text"];
					if (oResult) {
						oField.description = oResult.Path;
					}
					oField.displayBehaviour = this.getTextArrangementValue(oProperty);
					oField.filterRestriction = oProperty["sap:filter-restriction"];
					// Set filter attributes on the field
					oResult = oProperty["sap:filterable"];
					oField.filterable = oResult !== "false";
					oResult = oProperty["sap:required-in-filter"];
					oField.requiredField = oResult === "true";

					// Set the visible attribute on the field
					oResult = oProperty["com.sap.vocabularies.Common.v1.FieldControl"];
					oField.visible = !(oResult && oResult.EnumMember === "com.sap.vocabularies.Common.v1.FieldControlType/Hidden");
					oField.entityName = oEntityDef.name;
					oField.parentPropertyName = sParentPropertyName;
					oField.fullName = this._getFullyQualifiedNameForField(oProperty.name, oEntityDef);

					aFields.push(oField);
				}
			}
		}
		return aFields;
	};

	/**
	 * Gets a collection of all possible filterable fields for the specified entity name
	 * 
	 * @param {String} sEntitySetName - The entity name as specified in the metadata document
	 * @returns {Array} Array of overall filterable fields
	 * @public
	 */
	MetadataAnalyser.prototype.getAllFilterableFieldsByEntitySetName = function(sEntitySetName) {
		var aFilterGroups = [], sEntityTypeName = null;
		if (!this._oMetaModel) {
			return undefined;
		}
		sEntityTypeName = this.getEntityTypeNameFromEntitySetName(sEntitySetName);
		if (sEntityTypeName) {
			aFilterGroups = this.getAllFilterableFieldsByEntityTypeName(sEntityTypeName);
		}
		return aFilterGroups;
	};

	/**
	 * Gets a an Array of the names of all possible filterable fields for the specified entity type
	 * 
	 * @param {String} sEntityTypeName - The entity type name as specified in the metadata document
	 * @returns {Array} Array of names of overall filterable fields
	 * @public
	 */
	MetadataAnalyser.prototype.getAllFilterableFieldNamesByEntityTypeName = function(sEntityTypeName) {
		var aGroup, i, groupLength, j, fieldLength, aResult, oGroup;

		aResult = [];
		aGroup = this.getAllFilterableFieldsByEntityTypeName(sEntityTypeName);
		if (aGroup && aGroup.length) {
			groupLength = aGroup.length;
			for (i = 0; i < groupLength; i++) {
				oGroup = aGroup[i];
				if (oGroup.fields && oGroup.fields.length) {
					fieldLength = oGroup.fields.length;
					for (j = 0; j < fieldLength; j++) {
						aResult.push(oGroup.fields[j].name);
					}
				}
			}
		}
		return aResult;
	};

	/**
	 * Gets a collection of all possible filterable fields for the specified entity type
	 * 
	 * @param {String} sEntityTypeName - The entity type name as specified in the metadata document
	 * @returns {Array} Array of overall filterable fields
	 * @public
	 */
	MetadataAnalyser.prototype.getAllFilterableFieldsByEntityTypeName = function(sEntityTypeName) {
		var aFilterGroups = [], oEntityDef = null, mAssociations = null, sNavigationProperty = null, sSubEntityType = null;
		if (!this._oMetaModel) {
			return undefined;
		}
		oEntityDef = this._getEntityDefinition(sEntityTypeName);
		if (oEntityDef) {
			// filterable fields from the main entity
			aFilterGroups.push(this._getFilterableFieldsFromEntityDefinition(oEntityDef));

			// filterable fields from associations which have 0..1 or 1 cardinality
			mAssociations = this._getFilterableAssociations(oEntityDef);
			for (sNavigationProperty in mAssociations) {
				sSubEntityType = mAssociations[sNavigationProperty];
				oEntityDef = this._getEntityDefinition(sSubEntityType);
				// Entity definition can be null when entities are loaded lazily in the metadata (e.g. ValueList)
				if (oEntityDef) {
					aFilterGroups.push(this._getFilterableFieldsFromEntityDefinition(oEntityDef, sNavigationProperty));
				}
			}
		}
		return aFilterGroups;
	};

	/**
	 * Gets an Object containing collection of filterable fields that are directly under the specified entity type
	 * 
	 * @param {Object} oEntityDef - The entity type definition from the metadata document
	 * @param {string} sParentPropertyName - The name of the parent property (navigationProperty/complex type)
	 * @returns {Object} Object containing array of filterable fields
	 * @private
	 */
	MetadataAnalyser.prototype._getFilterableFieldsFromEntityDefinition = function(oEntityDef, sParentPropertyName) {
		var oFilterData = {}, aFields = [], aProperties = null, oProp, i, iLen, oProperty = null;
		if (!this._oMetaModel || !oEntityDef) {
			return undefined;
		}
		// Set the name and label from entity into the field's group
		oProp = oEntityDef["com.sap.vocabularies.Common.v1.Label"];
		if (oProp) {
			oFilterData.groupLabel = oProp.String;
		}
		oFilterData.groupEntityName = oEntityDef.name;
		oFilterData.groupName = sParentPropertyName;

		aProperties = this._getFieldsByEntityDefinition(oEntityDef, sParentPropertyName);
		iLen = aProperties.length;
		// Extract only visible and filterable fields from all fields!
		for (i = 0; i < iLen; i++) {
			oProperty = aProperties[i];
			if (oProperty.visible && oProperty.filterable) {
				aFields.push(oProperty);
			}
		}
		oFilterData.fields = aFields;
		return oFilterData;
	};

	/**
	 * Returns the fully qualified name of a field which is e.g. "com.sap.GL.ZAF.GL_ACCOUNT/CompanyCode". Schema namespace, entity type name and field
	 * name.
	 * 
	 * @param {string} sFieldName - the name of the field/property
	 * @param {Object} oEntityType - the entity Type under which the field/property is present
	 * @returns {string} - the fully qualified name
	 * @private
	 */
	MetadataAnalyser.prototype._getFullyQualifiedNameForField = function(sFieldName, oEntityType) {
		var sNamespace, sEntityTypeName, sResult = sFieldName;
		if (oEntityType) {
			sNamespace = oEntityType.namespace;
			sEntityTypeName = oEntityType.name;
		}
		if (sNamespace && sEntityTypeName) {
			sResult = sNamespace + "." + sEntityTypeName + "/" + sFieldName;
		}
		return sResult;
	};

	/**
	 * @param {string} sFullyQualifiedFieldName Fully qualified name
	 * @returns {string} The field name without name space and without entity
	 * @public
	 */
	MetadataAnalyser.prototype.getFieldNameByFullyQualifiedFieldName = function(sFullyQualifiedFieldName) {
		var sResult, nPos;

		sResult = this.removeNamespace(sFullyQualifiedFieldName);
		nPos = sResult.indexOf("/");
		sResult = sResult.substring(nPos + 1);
		return sResult;
	};

	/**
	 * Gets a collection of filterable associations under the specified entity type
	 * 
	 * @param {Object} oEntityDef - The entity type definition from the metadata document
	 * @returns {Object} Map of filterable associations
	 * @private
	 */
	MetadataAnalyser.prototype._getFilterableAssociations = function(oEntityDef) {
		var mFilterableAssociations = {}, aNavigationProperties = null, oNavigationProperty = null, i, iLen = 0, oEndRole = null;
		if (!this._oMetaModel || !oEntityDef) {
			return undefined;
		}
		aNavigationProperties = oEntityDef.navigationProperty;
		if (aNavigationProperties && aNavigationProperties.length) {
			iLen = aNavigationProperties.length;
			for (i = 0; i < iLen; i++) {
				oNavigationProperty = aNavigationProperties[i];
				// if the navigation property is explicitly marked as not filterable; skip it
				if (oNavigationProperty["sap:filterable"] === "false") {
					continue;
				}
				// Get the End role of the navigation property
				oEndRole = this._oMetaModel.getODataAssociationEnd(oEntityDef, oNavigationProperty.name);
				if (!oEndRole || oEndRole.type === (oEntityDef.namespace + "." + oEntityDef.name)) {
					continue;
				}
				// check if the end role has cardinality 0..1 or 1
				if (oEndRole.multiplicity === "1" || oEndRole.multiplicity === "0..1") {
					// Only add filterable entities, if they were not already added
					if (mFilterableAssociations[oNavigationProperty.name] === undefined) {
						mFilterableAssociations[oNavigationProperty.name] = oEndRole.type;
					}
				}
			}
		}
		return mFilterableAssociations;
	};

	/**
	 * Retrieves the ValueList Annotation lazily for the specified property/target
	 * 
	 * @param {String} sPath the full path of the property/target (including the namespace)
	 * @returns {Promise} a Promise that would be resolved once the ValueList annotation is loaded -or- rejected if specified property path is
	 *          incorrect or value list could not be resolved
	 * @public
	 */
	MetadataAnalyser.prototype.getValueListAnnotationLazy = function(sPath) {
		var oPromise, mAnnotation = {
			additionalAnnotations: []
		}, oResolvedAnnotation, sParentFieldName, aPath, oType, sProperty, oPropertyContext, sQualifier;
		oPromise = new Promise(function(fResolve, fReject) {
			if (sPath && this._oMetaModel) {
				// Split the property path and
				aPath = sPath.split("/");
				// The type could either be an entity type or a complex type
				oType = this._oMetaModel.getODataEntityType(aPath[0]) || this._oMetaModel.getODataComplexType(aPath[0]);
				sParentFieldName = aPath[1];
				// Get the property path from the type
				sProperty = this._oMetaModel.getODataProperty(oType, sParentFieldName, true);
				if (sProperty) {
					// create property context from its path
					oPropertyContext = this._oMetaModel.createBindingContext(sProperty);

					this._oMetaModel.getODataValueLists(oPropertyContext).then(function(mValueList) {
						for (sQualifier in mValueList) {
							oResolvedAnnotation = {
								annotation: mValueList[sQualifier]
							};
							if (oResolvedAnnotation.annotation) {
								this._enrichValueHelpAnnotation(oResolvedAnnotation, sParentFieldName);
								// Check if there is no qualifier --> the default/primaryValueListAnnotation
								if (!sQualifier) {
									mAnnotation.primaryValueListAnnotation = oResolvedAnnotation;
								} else {
									// Set the qualifier on the resolved annotation
									oResolvedAnnotation.qualifier = sQualifier;
									mAnnotation.additionalAnnotations.push(oResolvedAnnotation);
								}
							}
						}
						fResolve(mAnnotation);
					}.bind(this), fReject);
					return;
				}
			}
			fReject();
		}.bind(this));
		return oPromise;
	};

	/**
	 * Retrieves the ValueList Annotation for the specified property/target
	 * 
	 * @param {String} sPath the full path of the property/target (including the namespace)
	 * @returns {Object} a Map of resolved ValueHelpList (if any) annotations
	 * @deprecated Since 1.29 - use #getValueListAnnotationLazy instead!
	 * @public
	 */
	MetadataAnalyser.prototype.getValueListAnnotation = function(sPath) {
		var mAnnotation = {
			additionalAnnotations: []
		}, oResolvedAnnotation, sParentFieldName, aPath, oType, oProperty, sQualifier;
		if (sPath && this._oMetaModel) {
			// Split the property path and
			aPath = sPath.split("/");
			// The type could either be an entity type or a complex type
			oType = this._oMetaModel.getODataEntityType(aPath[0]) || this._oMetaModel.getODataComplexType(aPath[0]);
			// Get the property from the type
			oProperty = this._oMetaModel.getODataProperty(oType, aPath[1]);
			if (oProperty) {
				sParentFieldName = oProperty.name;
				for ( var sProp in oProperty) {
					if (sProp.indexOf("com.sap.vocabularies.Common.v1.ValueList") > -1) {
						sQualifier = null;
						oResolvedAnnotation = {
							annotation: oProperty[sProp]
						};
						aPath = sProp.split("#");
						if (aPath.length === 2) {
							sQualifier = aPath[1];
						}
						if (oResolvedAnnotation.annotation) {
							this._enrichValueHelpAnnotation(oResolvedAnnotation, sParentFieldName);
							// Check if there is no qualifier --> the default/primaryValueListAnnotation
							if (!sQualifier) {
								mAnnotation.primaryValueListAnnotation = oResolvedAnnotation;
							} else {
								// Set the qualifier on the resolved annotation
								oResolvedAnnotation.qualifier = sQualifier;
								mAnnotation.additionalAnnotations.push(oResolvedAnnotation);
							}
						}
					}
				}
			}
		}
		return mAnnotation;
	};

	/**
	 * Enriches the provided Value Help annotation with key and other relevant information
	 * 
	 * @param {object} oAnnotation Annotation object
	 * @param {string} sParentFieldName - the parent field name
	 * @private
	 */
	MetadataAnalyser.prototype._enrichValueHelpAnnotation = function(oAnnotation, sParentFieldName) {
		var mResult, oResult, oEntitySet, aKeys = [], sKey, mInParams = {}, mOutParams = {}, bIsInParam, bIsOutParam, aFields = [], aValueListFields = [], aRecords, oProperty, sValueListProperty, sLocalDataProperty, oParam, iLen = 0, i = 0, iFieldLen = 0;
		if (oAnnotation && oAnnotation.annotation) {
			mResult = oAnnotation.annotation;
			if (mResult) {
				oResult = mResult["SearchSupported"];
				oAnnotation.isSearchSupported = oResult ? oResult.Bool === "true" : false;
				oResult = mResult["CollectionPath"];
				// Set the CollectionPath on the annotation
				if (oResult) {
					oAnnotation.valueListEntitySetName = oResult.String;
					if (this._oMetaModel) {
						oEntitySet = this._oMetaModel.getODataEntitySet(oAnnotation.valueListEntitySetName);
					}
					if (oEntitySet) {
						oAnnotation.valueListEntityName = oEntitySet.entityType;
						oAnnotation.semantics = oEntitySet["sap:semantics"];
						aKeys = this.getKeysByEntityTypeName(oAnnotation.valueListEntityName);
						aFields = this.getFieldsByEntityTypeName(oAnnotation.valueListEntityName);
					}
				}

				oResult = mResult["Label"];
				// Set the valueListTitle on the annotation
				if (oResult) {
					oAnnotation.valueListTitle = oResult.String;
				}

				// Get all the params to create mappings, fields, key etc
				aRecords = mResult["Parameters"];
				if (aFields && aRecords) {
					iLen = aRecords.length;
				}
				// Loop through all the parameters/records
				for (i = 0; i < iLen; i++) {
					oParam = aRecords[i];
					sValueListProperty = undefined;
					sLocalDataProperty = undefined;
					// Each Parameter on the VL annotation has max 2 properties:
					// LocalDataProperty - Path to the property on the local entity that triggered the ValueList
					// ValueListProperty - Path to property in on the ValueList entity
					oProperty = oParam["ValueListProperty"];
					if (oProperty) {
						sValueListProperty = oProperty.String;
					}
					oProperty = oParam["LocalDataProperty"];
					if (oProperty) {
						sLocalDataProperty = oProperty.PropertyPath;
					}

					bIsInParam = false;
					if (oParam.RecordType === "com.sap.vocabularies.Common.v1.ValueListParameterInOut" || oParam.RecordType === "com.sap.vocabularies.Common.v1.ValueListParameterIn") {
						bIsInParam = true;
					}
					bIsOutParam = false;
					if (oParam.RecordType === "com.sap.vocabularies.Common.v1.ValueListParameterInOut" || oParam.RecordType === "com.sap.vocabularies.Common.v1.ValueListParameterOut") {
						bIsOutParam = true;
					}

					// Mapping for In/InOut params
					if (bIsInParam) {
						mInParams[sLocalDataProperty] = sValueListProperty;
					}

					// Mapping for Out/InOut params
					if (bIsOutParam) {
						mOutParams[sLocalDataProperty] = sValueListProperty;
					}

					// For sFin/gateway; this apparently should form the columns/fields in the list!
					if (bIsOutParam || oParam.RecordType === "com.sap.vocabularies.Common.v1.ValueListParameterDisplayOnly") {
						iFieldLen = aFields.length;
						while (iFieldLen--) {
							if (aFields[iFieldLen].name === sValueListProperty) {
								aValueListFields.push(aFields[iFieldLen]);
								break;
							}
						}
					}
					// The 1st InOut/Out param having the parent field as LocalDataProperty; should be the Key!
					if (!sKey && bIsOutParam && sLocalDataProperty === sParentFieldName) {
						sKey = sValueListProperty;
					}
				}
			}
			// Set the mappings, fields, keys, return key and corresponding description on the annotation
			oAnnotation.inParams = mInParams;
			oAnnotation.outParams = mOutParams;
			oAnnotation.fields = aFields;
			oAnnotation.valueListFields = aValueListFields;
			oAnnotation.keys = aKeys;
			oAnnotation.keyField = sKey;
			oAnnotation.descriptionField = this.getDescriptionFieldName(oAnnotation.keyField, oAnnotation.valueListEntitySetName);
		}
	};

	/**
	 * Gets the human readable text/description field's name from the specified Key field's name and entity name
	 * 
	 * @param {string|object} sKeyField - the name of the key field / oField - the field as present in the OData metadata
	 * @param {string} sEntityName - the name of the entity (required if the name of the field is passed as the 1st param)
	 * @returns {string} the description field name, if any
	 * @public
	 */
	MetadataAnalyser.prototype.getDescriptionFieldName = function(sKeyField, sEntityName) {
		var aFields, i = 0, iLength, oField, sDescriptionField;
		if (typeof sKeyField === "object") {
			oField = sKeyField;
		} else {
			aFields = this.getFieldsByEntitySetName(sEntityName);
			if (aFields) {
				iLength = aFields.length;
				for (i = 0; i < iLength; i++) {
					oField = aFields[i];
					if (oField.name === sKeyField) {
						// Found the specified field, exit loop
						break;
					}
					oField = null;
				}
			}
		}
		if (oField && oField["com.sap.vocabularies.Common.v1.Text"]) {
			sDescriptionField = oField["com.sap.vocabularies.Common.v1.Text"].Path;
		}
		return sDescriptionField;
	};

	/**
	 * Returns whether Search query is supported for this value help annotation
	 * 
	 * @param {object} oAnnotation - ValueHelpAnnotation
	 * @returns {boolean} whether search query is supported
	 * @public
	 */
	MetadataAnalyser.prototype.getIsSearchSupported = function(oAnnotation) {
		var bIsSearchSupported = false, oProperty;

		if (oAnnotation) {
			oProperty = oAnnotation.SearchSupported;
			if (oProperty && oProperty.Bool === "true") {
				bIsSearchSupported = true;
			}
		}

		return bIsSearchSupported;
	};

	/**
	 * Gets the valuelist entity sets semantics from the specified ValueList annotation
	 * 
	 * @param {Object} oAnnotation - the value list annotation
	 * @returns {string} - the semantics of the value list entity set (if any)
	 * @protected
	 */
	MetadataAnalyser.prototype.getValueListSemantics = function(oAnnotation) {
		var sEntitySet, oEntitySet, sSemantics;
		if (oAnnotation) {
			sEntitySet = oAnnotation["CollectionPath"] ? oAnnotation["CollectionPath"].String : undefined;
		}
		if (sEntitySet) {
			oEntitySet = this._oMetaModel.getODataEntitySet(sEntitySet);
			if (oEntitySet) {
				sSemantics = oEntitySet["sap:semantics"];
			}
		}
		return sSemantics;
	};

	/**
	 * Retrieves the LineItem Annotation for the specified target entity type
	 * 
	 * @param {String} sPath the full path of the entity type (including the namespace)
	 * @returns {Object} the resolved LineItem annotation object (if any)
	 * @public
	 */
	MetadataAnalyser.prototype.getLineItemAnnotation = function(sPath) {
		var oEntityType, aAnnotationData, oResolvedAnnotation;
		if (sPath && this._oMetaModel) {
			oEntityType = this._oMetaModel.getODataEntityType(sPath);
			if (oEntityType) {
				aAnnotationData = oEntityType["com.sap.vocabularies.UI.v1.LineItem"];
				// Resolve the annotation data into easily accessible properties
				if (aAnnotationData) {
					oResolvedAnnotation = {
						annotation: aAnnotationData
					};
					this._enrichAnnotationWithUIDataField(oResolvedAnnotation, aAnnotationData);
				}
			}
		}
		return oResolvedAnnotation;
	};

	/**
	 * Retrieves the PresentationVariant Annotation for the specified target entity type
	 * 
	 * @param {String} sPath the full path of the entity type (including the namespace)
	 * @returns {Object} the resolved PresentationVariant annotation object (if any)
	 * @public
	 */
	MetadataAnalyser.prototype.getPresentationVariantAnnotation = function(sPath) {
		var oEntityType, aAnnotationData, iLen, i, oResolvedAnnotation, oLineItemAnnotation, oChartAnnotation, sItemPath;
		if (sPath && this._oMetaModel) {
			oEntityType = this._oMetaModel.getODataEntityType(sPath);
			if (oEntityType) {
				aAnnotationData = oEntityType["com.sap.vocabularies.UI.v1.PresentationVariant"];
				if (aAnnotationData) {
					oResolvedAnnotation = {
						annotation: aAnnotationData,
						requestAtLeastFields: [],
						sortOrderFields: []
					};
					if (aAnnotationData.Visualizations) {
						iLen = aAnnotationData.Visualizations.length;
						for (i = 0; i < iLen; i++) {
							sItemPath = aAnnotationData.Visualizations[i].AnnotationPath;
							if (sItemPath.indexOf("com.sap.vocabularies.UI.v1.LineItem") > -1) {
								// get the lineitem annotation from entityType, ignoring the @
								oLineItemAnnotation = oEntityType[sItemPath.substring(1)];
								// process and set the line item annotation on the resolved result
								oResolvedAnnotation.lineItemAnnotation = {
									annotation: oLineItemAnnotation
								};
								this._enrichAnnotationWithUIDataField(oResolvedAnnotation.lineItemAnnotation, oLineItemAnnotation);

								break;
							} else if (sItemPath.indexOf("com.sap.vocabularies.UI.v1.Chart") > -1) {
								// get the chart annotation from entityType, ignoring the @
								oChartAnnotation = oEntityType[sItemPath.substring(1)];
								// process and set the line item annotation on the resolved result
								oResolvedAnnotation.chartAnnotation = {
									annotation: oChartAnnotation,
									semantics: oEntityType["sap:semantics"]
								};
								this._enrichChartAnnotation(oResolvedAnnotation.chartAnnotation, oChartAnnotation);

								break;
							}
						}
					}
					if (aAnnotationData.RequestAtLeast) {
						iLen = aAnnotationData.RequestAtLeast.length;
						for (i = 0; i < iLen; i++) {
							oResolvedAnnotation.requestAtLeastFields.push(aAnnotationData.RequestAtLeast[i].PropertyPath);
						}
					}
					if (aAnnotationData.SortOrder) {
						iLen = aAnnotationData.SortOrder.length;
						for (i = 0; i < iLen; i++) {
							oResolvedAnnotation.sortOrderFields.push({
								name: aAnnotationData.SortOrder[i].Property.PropertyPath,
								descending: aAnnotationData.SortOrder[i].Descending ? aAnnotationData.SortOrder[i].Descending.Bool === "true" : false
							});
						}
					}
				}
			}
		}
		return oResolvedAnnotation;
	};

	/**
	 * Enriches the provided FieldGroup/LineItem annotation with UI.DataField attributes
	 * 
	 * @param {object} oAnnotation - the annotation that would be enriched
	 * @param {object} oAnnotationData - array of params having UI.DataField
	 * @private
	 */
	MetadataAnalyser.prototype._enrichChartAnnotation = function(oAnnotation, oAnnotationData) {
		var i, iLen, oObj;

		if (oAnnotation && oAnnotationData) {
			oAnnotation.measureFields = [];
			oAnnotation.dimensionFields = [];
			oAnnotation.measureAttributes = {};
			oAnnotation.dimensionAttributes = {};

			if (oAnnotationData.ChartType && oAnnotationData.ChartType.EnumMember) {
				oAnnotation.chartType = oAnnotationData.ChartType.EnumMember;
			}

			if (oAnnotationData.Measures) {
				iLen = oAnnotationData.Measures.length;
				for (i = 0; i < iLen; i++) {
					oAnnotation.measureFields.push(oAnnotationData.Measures[i].PropertyPath);
				}
			}

			if (oAnnotationData.MeasureAttributes) {
				iLen = oAnnotationData.MeasureAttributes.length;
				for (i = 0; i < iLen; i++) {
					oObj = oAnnotationData.MeasureAttributes[i];
					oAnnotation.measureAttributes[oObj.Measure.PropertyPath] = oObj.Role.EnumMember;
				}
			}

			if (oAnnotationData.Dimensions) {
				iLen = oAnnotationData.Dimensions.length;
				for (i = 0; i < iLen; i++) {
					oAnnotation.dimensionFields.push(oAnnotationData.Dimensions[i].PropertyPath);
				}
			}

			if (oAnnotationData.DimensionAttributes) {
				iLen = oAnnotationData.DimensionAttributes.length;
				for (i = 0; i < iLen; i++) {
					oObj = oAnnotationData.DimensionAttributes[i];
					oAnnotation.dimensionAttributes[oObj.Dimension.PropertyPath] = oObj.Role.EnumMember;
				}
			}
		}

	};

	/**
	 * Retrieves the Chart Annotation for the specified target entity type
	 * 
	 * @param {String} sPath the full path of the entity type (including the namespace)
	 * @returns {Object} the resolved Chart annotation object (if any)
	 * @public
	 */
	MetadataAnalyser.prototype.getChartAnnotation = function(sPath) {
		var oEntityType, aAnnotationData, oResolvedAnnotation;
		if (sPath && this._oMetaModel) {
			oEntityType = this._oMetaModel.getODataEntityType(sPath);
			if (oEntityType) {
				aAnnotationData = oEntityType["com.sap.vocabularies.UI.v1.Chart"];
				// Resolve the annotation data into easily accessible properties
				if (aAnnotationData) {
					oResolvedAnnotation = {
						annotation: aAnnotationData,
						semantics: oEntityType["sap:semantics"]
					};
					this._enrichChartAnnotation(oResolvedAnnotation, aAnnotationData);
				}
			}
		}
		return oResolvedAnnotation;
	};

	/**
	 * Retrieves an array of FieldGroup Annotation for the specified target entity type
	 * 
	 * @param {String} sPath the entity type name -or- the full path of the entity type (including the namespace)
	 * @returns {Object} the resolved array of FieldGroup annotations (if any)
	 * @public
	 */
	MetadataAnalyser.prototype.getFieldGroupAnnotation = function(sPath) {
		var oEntityType, sQualifier, aPath, oResult, oAnnotation, oResolvedAnnotation, aResolvedAnnotation = [];
		if (sPath && this._oMetaModel) {
			// Field groups annotations are used also by SmartFilter, which can be used without a fully qualified path --> add support for that
			oEntityType = this._oMetaModel.getODataEntityType(this._getFullyQualifiedNameForEntity(sPath));
			if (oEntityType) {
				for ( var sProp in oEntityType) {
					if (sProp.indexOf("com.sap.vocabularies.UI.v1.FieldGroup") > -1) {
						sQualifier = null;
						oAnnotation = oEntityType[sProp];
						aPath = sProp.split("#");
						if (aPath.length === 2) {
							sQualifier = aPath[1];
						}
						if (oAnnotation) {
							oResolvedAnnotation = {
								annotation: oAnnotation
							};
							// Set the groupName of the annotation
							if (sQualifier) {
								oResolvedAnnotation.groupName = sQualifier;
							}
							// Get the label for the group
							oResult = oAnnotation["Label"];
							if (oResult) {
								// Assign the groupLabel to the annotation if it exists
								oResolvedAnnotation.groupLabel = oResult.String;
							}

							// Get the collection of UI fields
							oResult = oAnnotation["Data"];
							if (oResult) {
								this._enrichAnnotationWithUIDataField(oResolvedAnnotation, oResult);
							}
							aResolvedAnnotation.push(oResolvedAnnotation);
						}
					}
				}
			}
		}
		return aResolvedAnnotation;
	};

	/**
	 * Enriches the provided FieldGroup/LineItem annotation with UI.DataField attributes
	 * 
	 * @param {object} oAnnotation - the annotation that would be enriched
	 * @param {Array} aRecords - array of params having UI.DataField
	 * @private
	 */
	MetadataAnalyser.prototype._enrichAnnotationWithUIDataField = function(oAnnotation, aRecords) {
		var aFields = [], mLabels = {}, mImportance = {}, oProperty, sField, oParam, iLen = 0, i = 0;
		if (oAnnotation && aRecords) {
			iLen = aRecords.length;
			aFields = [];
			mLabels = {};
			for (i = 0; i < iLen; i++) {
				oParam = aRecords[i];
				// Check if term is correct
				if (oParam && oParam.RecordType === "com.sap.vocabularies.UI.v1.DataField") {
					sField = null;
					oProperty = oParam["Value"];
					if (oProperty) {
						sField = oProperty.Path;
						aFields.push(sField);
					}
					if (sField) {
						oProperty = oParam["Label"];
						if (oProperty && oProperty.String) {
							mLabels[sField] = oProperty.String;
						}
						mImportance[sField] = this._getImportanceAnnotation(oParam);
					}
				}
			}

			// Assign the resolved fields and labels to the annotation
			oAnnotation.fields = aFields;
			oAnnotation.labels = mLabels;
			oAnnotation.importance = mImportance;
		}
	};

	/**
	 * Returns the importance annotation if available
	 * 
	 * @param {Object} oParam - the parameter containing the importance annotation
	 * @returns {string} the found importance value or null
	 * @private
	 */
	MetadataAnalyser.prototype._getImportanceAnnotation = function(oParam) {
		var sImportance = null, oResult;

		oResult = oParam["com.sap.vocabularies.UI.v1.Importance"];
		if (oResult) {
			sImportance = oResult.EnumMember;
		}

		switch (sImportance) {
			case "com.sap.vocabularies.UI.v1.ImportanceType/Medium":
				return "Medium";
			case "com.sap.vocabularies.UI.v1.ImportanceType/Low":
				return "Low";
			default:
				return "High";
		}

		// return "High"; // if nothing is specified / or a unknown type is used, default to High
	};

	/**
	 * Resolves and returns the displayBehaviour from TextArrangement Annotation for the specified property/target
	 * 
	 * @param {String} sPath the full path of the property/target (including the namespace) or the property itself
	 * @returns {string} the resolved displayBehaviour from TextArrangement enumeration (if any)
	 * @public
	 */
	MetadataAnalyser.prototype.getTextArrangementValue = function(sPath) {
		var aPath, oType, oObject, oAnnotation, sDisplayBehaviour;

		if (sPath && this._oMetaModel) {
			if (typeof (sPath) === "string") {
				sPath = this._getFullyQualifiedNameForEntity(sPath);
				// Split the property path and
				aPath = sPath.split("/");
				if (aPath.length > 1) {
					// The type could either be an entity type or a complex type
					oType = this._oMetaModel.getODataEntityType(aPath[0]) || this._oMetaModel.getODataComplexType(aPath[0]);
					// Get the property from the type
					oObject = this._oMetaModel.getODataProperty(oType, aPath[1]);
				} else {
					oObject = this._oMetaModel.getODataEntityType(sPath) || this._oMetaModel.getODataComplexType(sPath);
				}
			} else {
				oObject = sPath;
			}
			if (oObject) {
				oAnnotation = oObject["com.sap.vocabularies.UI.v1.TextArrangement"];
			}
			if (oAnnotation) {
				switch (oAnnotation.EnumMember) {
					case "com.sap.vocabularies.UI.v1.TextArrangementType/TextFirst":
						sDisplayBehaviour = "descriptionAndId";
						break;
					case "com.sap.vocabularies.UI.v1.TextArrangementType/TextLast":
						sDisplayBehaviour = "idAndDescription";
						break;
					case "com.sap.vocabularies.UI.v1.TextArrangementType/TextSeparate":
						sDisplayBehaviour = "idOnly";
						break;
				}
			}
		}
		return sDisplayBehaviour;
	};

	/**
	 * Retrieves the SemanticObject Annotation for the specified property/target
	 * 
	 * @param {String} sPath the full path of the property/target (including the namespace)
	 * @returns {Object} the resolved semanticObject annotation object (if any)
	 * @public
	 */
	MetadataAnalyser.prototype.getSemanticObjectAnnotation = function(sPath) {
		var aPath, oType, oProperty, oAnnotation;

		if (sPath && this._oMetaModel) {
			// Split the property path and
			aPath = sPath.split("/");
			// The type could either be an entity type or a complex type
			oType = this._oMetaModel.getODataEntityType(aPath[0]) || this._oMetaModel.getODataComplexType(aPath[0]);
			// Get the property from the type
			oProperty = this._oMetaModel.getODataProperty(oType, aPath[1]);
			if (oProperty) {
				oAnnotation = oProperty["com.sap.vocabularies.Common.v1.SemanticObject"];
			}
			return this._prepareSemanticObjectAnnotationFromProperty(oAnnotation);
		}
		return null;
	};

	/**
	 * Retrieves the SemanticObject Annotation for the specified property/target
	 * 
	 * @param {object} oProperty the given OData property
	 * @returns {Object} the resolved semanticObject annotation object (if any)
	 * @public
	 */
	MetadataAnalyser.prototype.getSemanticObjectAnnotationFromProperty = function(oProperty) {
		var oAnnotation;

		if (oProperty) {
			oAnnotation = oProperty["com.sap.vocabularies.Common.v1.SemanticObject"];
			return this._prepareSemanticObjectAnnotationFromProperty(oAnnotation);
		}

		return null;
	};

	/**
	 * Prepares the semantic object annotation.
	 * 
	 * @param {object} oAnnotation the original annotation
	 * @returns {object} the preparation result
	 * @private
	 */
	MetadataAnalyser.prototype._prepareSemanticObjectAnnotationFromProperty = function(oAnnotation) {
		var oResult, oResolvedAnnotation;

		if (oAnnotation) {
			oResult = oAnnotation["String"];
			if (oResult) {
				oResolvedAnnotation = {
					annotation: oAnnotation
				};
				oResolvedAnnotation.semanticObject = oResult;
			}
		}

		return oResolvedAnnotation;
	};

	/**
	 * Returns the fully qualified name of an entity which is e.g. "com.sap.GL.ZAF.GL_ACCOUNT" from the specified type name.
	 * 
	 * @param {string} sEntityTypeName - the entity Type name which needs to be converted
	 * @returns {string} - the fully qualified name for this entity
	 * @private
	 */
	MetadataAnalyser.prototype._getFullyQualifiedNameForEntity = function(sEntityTypeName) {
		var sNamespace, sResult;
		if (!sEntityTypeName) {
			return undefined;
		}
		// if entity type name already has a ".", just return it
		if (sEntityTypeName.indexOf(".") > -1) {
			return sEntityTypeName;
		}
		sNamespace = this.getNamespace();
		if (sNamespace && !(sEntityTypeName.indexOf(sNamespace) > -1)) {
			sResult = sNamespace + "." + sEntityTypeName;
		} else {
			sResult = sEntityTypeName;
		}
		return sResult;
	};

	/**
	 * Destroys the object
	 * 
	 * @public
	 */
	MetadataAnalyser.prototype.destroy = function() {
		this.oModel = null;
		this._oMetaModel = null;
		this._oMetadata = null;
		this._oSchemaDefinition = null;
		this._sResourceRootUri = null;
		this.bIsDestroyed = true;
	};

	return MetadataAnalyser;

}, /* bExport= */true);

}; // end of sap/ui/comp/odata/MetadataAnalyser.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.odata.ODataModelUtil') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// -------------------------------------------------------------------------------
// Helper class used for generic ODataModel related handling
// -------------------------------------------------------------------------------
jQuery.sap.declare('sap.ui.comp.odata.ODataModelUtil'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/comp/odata/ODataModelUtil",[], function() {
	"use strict";

	/**
	 * Object used to for generic ODataModel related handling
	 * 
	 * @private
	 * @experimental This module is only for internal/experimental use!
	 */
	var ODataModelUtil = {
		/**
		 * Static function that takes care of ODataModel initialisation (all parameters are mandatory)
		 * 
		 * @param {Object} oSmartControl - the Smart control (e.g. SmartTable, SmartFilter)
		 * @param {function} fModelInitCallback - the callback function (will be triggered in the SmartControl scope)
		 * @private
		 */
		handleModelInit: function(oSmartControl, fModelInitCallback) {
			var bLoadMetadataAsync = false, oModel;
			if (oSmartControl && !oSmartControl._bMetaModelLoadAttached && fModelInitCallback) {
				oModel = oSmartControl.getModel();
				if (oModel) {
					// Check if ODataMetaModel was loaded
					// If not, delay the creation of table content/helpers until ODataMetaModel is loaded!
					// Do this only for async ODataModel
					if (oModel.getMetadata() && oModel.getMetadata().getName() === "sap.ui.model.odata.v2.ODataModel") {
						bLoadMetadataAsync = true; // always true for v2.ODataModel
					} else if (oModel.bLoadMetadataAsync || (oModel.getServiceMetadata && !oModel.getServiceMetadata())) {
						bLoadMetadataAsync = true; // assume async if bLoadMetadataAsync or if no service metadata has been loaded for the ODataModel
					}
					oSmartControl._bMetaModelLoadAttached = true;
					if (bLoadMetadataAsync && oModel.getMetaModel() && oModel.getMetaModel().loaded) {
						// wait for the ODataMetaModel loaded promise to be resolved
						oModel.getMetaModel().loaded().then(fModelInitCallback.bind(oSmartControl));
					} else {
						// Could be a non ODataModel or a synchronous ODataModel --> just create the necessary helpers
						fModelInitCallback.apply(oSmartControl);
					}
				}
			}
		}
	};

	return ODataModelUtil;

}, /* bExport= */true);

}; // end of sap/ui/comp/odata/ODataModelUtil.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.odata.ODataType') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// -------------------------------------------------------------------------------
// Class used to determine/retrieve OData type based on the Edm type of a property
// -------------------------------------------------------------------------------
jQuery.sap.declare('sap.ui.comp.odata.ODataType'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.odata.type.Boolean'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.type.Byte'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.type.DateTime'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.type.DateTimeOffset'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.type.Decimal'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.type.Double'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.type.Single'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.type.Guid'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.type.Int16'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.type.Int32'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.type.Int64'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.type.SByte'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.type.String'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.type.Time'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/odata/ODataType",[
	'sap/ui/model/odata/type/Boolean', 'sap/ui/model/odata/type/Byte', 'sap/ui/model/odata/type/DateTime', 'sap/ui/model/odata/type/DateTimeOffset', 'sap/ui/model/odata/type/Decimal', 'sap/ui/model/odata/type/Double', 'sap/ui/model/odata/type/Single', 'sap/ui/model/odata/type/Guid', 'sap/ui/model/odata/type/Int16', 'sap/ui/model/odata/type/Int32', 'sap/ui/model/odata/type/Int64', 'sap/ui/model/odata/type/SByte', 'sap/ui/model/odata/type/String', 'sap/ui/model/odata/type/Time'
], function(Boolean, Byte, DateTime, DateTimeOffset, Decimal, Double, Single, Guid, Int16, Int32, Int64, SByte, String, Time) {
	"use strict";

	// @see sap.ui.model.odata.type for below types
	var mUi5TypeForEdmType = {
		"Edm.Boolean": Boolean,
		"Edm.Byte": Byte,
		"Edm.DateTime": DateTime,
		"Edm.DateTimeOffset": DateTimeOffset,
		"Edm.Decimal": Decimal,
		"Edm.Double": Double,
		"Edm.Float": Single,
		"Edm.Guid": Guid,
		"Edm.Int16": Int16,
		"Edm.Int32": Int32,
		"Edm.Int64": Int64,
		"Edm.SByte": SByte,
		"Edm.Single": Single,
		"Edm.String": String,
		"Edm.Time": Time
	};

	var mNumericType = {
		"Edm.Decimal": true,
		"Edm.Double": true,
		"Edm.Float": true,
		"Edm.Int16": true,
		"Edm.Int32": true,
		"Edm.Int64": true,
		"Edm.Single": true
	};

	var mDateOrTimeType = {
		"Edm.DateTime": true,
		"Edm.DateTimeOffset": true,
		"Edm.Time": true
	};

	/**
	 * Object used to determine/retrieve OData model type and other relevant attributes based on the Edm type (primitive types) of an OData property
	 * 
	 * @private
	 * @experimental This module is only for internal/experimental use!
	 */
	var ODataType = {
		/**
		 * Create/Get the OData type based on Edm type
		 * 
		 * @public
		 * @param {string} sType - The Edm type from OData property
		 * @param {object} oFormatOptions format options as defined in the interface of {@link sap.ui.model.SimpleType}
		 * @param {object} oConstraints constraints as defined in interface of {@link sap.ui.model.SimpleType} or its concrete subclasses
		 * @returns {sap.ui.model.SimpleType} the OData type
		 */
		getType: function(sType, oFormatOptions, oConstraints) {
			var oType = null, _oType;
			_oType = mUi5TypeForEdmType[sType];
			if (_oType) {
				oType = new _oType(oFormatOptions, oConstraints);
			}
			return oType;
		},
		/**
		 * Returns whether the specified type is numeric or not
		 * 
		 * @public
		 * @param {string} sType - The Edm type from OData property
		 * @returns {boolean} true|false
		 */
		isNumeric: function(sType) {
			return mNumericType[sType] ? true : false;
		},
		/**
		 * Returns whether the specified type is date (or time or datetime) or not
		 * 
		 * @public
		 * @param {string} sType - The Edm type from OData property
		 * @returns {boolean} true|false
		 */
		isDateOrTime: function(sType) {
			return mDateOrTimeType[sType] ? true : false;
		}
	};

	return ODataType;

}, /* bExport= */true);

}; // end of sap/ui/comp/odata/ODataType.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.odata.SideEffects') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.odata.SideEffects'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/odata/SideEffects",[	"jquery.sap.global" ], function(jQuery) {
	"use strict";

	/**
	 * Creates a new instance.
	 * 
	 * @private
	 * @class
	 * @classdesc Analyzes OData Side-Effects annotation.
	 * @author SAP SE
	 * @experimental to be productized soon
	 * @version 1.36.12
	 * @since 1.31.0
	 * @alias sap.ui.comp.odata.SideEffects
	 */
	var SideEffects = function() {
		
	};
	
	/**
	 * Calculates the available side effect annotations for a given path. 
	 * 
	 * @param {string} sPath the path
	 * @param {string} sTypePath the path identifying a property on a complex type
	 * @param {object} oMetaData the meta data used to create the control
	 * @param {object} oMetaData.entitySet the OData entity set definition
	 * @param {object} oMetaData.entityType the OData entity type definition
	 * @param {object} oMetaData.complexType the OData property definition
	 * @returns {map} the available side effects ordered by their origin, e.g. the entity set.
	 * @public
	*/
	SideEffects.prototype.getSideEffects = function(sPath, sTypePath, oMetaData) {
		var mResult = {};
		
		if (oMetaData) {
			if (sPath) {
				if (oMetaData.entitySet) {
					mResult.entitySet = this._getForPath(oMetaData.entitySet, sPath);
				}
				
				if (oMetaData.entityType) {
					mResult.entityType = this._getForPath(oMetaData.entityType, sPath);
				}
			}
			
			if (sTypePath && oMetaData.complexType) {
				mResult.complexType = this._getForPath(oMetaData.complexType, sTypePath);
			}
		}
		
		return mResult;
	};
	
	/**
	 * Returns the side effects available on an entity for a given path.
	 *  
	 * @param {object} oEntity the given entity, which can be a complex type, entity type or entity set
	 * @param {string} sPath the path
	 * @returns {map} the available side effects
	 * @private
	 */
	SideEffects.prototype._getForPath = function(oEntity, sPath) {
		var n, oSideEffect, mResult = {};
		
		for (n in oEntity) {
			if (n.indexOf && n.indexOf("com.sap.vocabularies.Common.v1.SideEffects") === 0) {
				oSideEffect = oEntity[n];
				
				if (this._checkSourceProperties(oSideEffect, sPath)) {
					mResult[n] = oSideEffect;
				}
				
				if (this._checkSourceEntities(oSideEffect, sPath)) {
					mResult[n] = oSideEffect;
				}
			}
		}
		
		return mResult;
	};
	
	/**
	 * Checks a given side effect annotation for the given path.
	 * 
	 * @param {object} oSideEffect the given side effect annotation
	 * @param {string} sPath the given path
	 * @returns {boolean} <code>true</code>, if the given side effect annotation contains the given path in its source properties, <code>false</code> otherwise.
	 * @private
	 */
	SideEffects.prototype._checkSourceProperties = function(oSideEffect, sPath) {
		var i, len;
		
		if (oSideEffect.SourceProperties) {
			len = oSideEffect.SourceProperties.length;
			
			for (i = 0; i < len; i++) {
				if (oSideEffect.SourceProperties[i].PropertyPath === sPath) {
					return true;
				}			
			}
		}
		
		return false;
	};
	
	/**
	 * Checks a given side effect annotation for the given path.
	 * 
	 * @param {object} oSideEffect the given side effect annotation
	 * @param {string} sPath the given path
	 * @returns {boolean} <code>true</code>, if the given side effect annotation contains the given path in its source properties, <code>false</code> otherwise.
	 * @private
	 */
	SideEffects.prototype._checkSourceEntities = function(oSideEffect, sPath) {
		var i, len;
		
		if (oSideEffect.SourceEntities && oSideEffect.SourceEntities.Collection) {
			len = oSideEffect.SourceEntities.Collection.length;
			
			for (i = 0; i < len; i++) {
				if (oSideEffect.SourceEntities.Collection[i].NavigationPropertyPath === sPath) {
					return true;
				}			
			}
		}
		
		return false;
	};
	
	/**
	 * Frees all resources claimed during the life-time of this instance.
	 * 
	 * @public
	 */
	SideEffects.prototype.destroy = function() {
		
	};
	
	return SideEffects;

}, true);
}; // end of sap/ui/comp/odata/SideEffects.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.personalization.ChartWrapper') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.personalization.ChartWrapper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/personalization/ChartWrapper",[
	'jquery.sap.global', 'sap/ui/core/Element'
], function(jQuery, Element) {
	"use strict";

	/**
	 * The ChartWrapper can be used to wrap a chart.
	 * 
	 * @class Chart Wrapper
	 * @extends sap.ui.core.Element
	 * @author SAP
	 * @version 1.34.0-SNAPSHOT
	 * @alias sap.ui.comp.personalization.ChartWrapper
	 */
	var ChartWrapper = Element.extend("sap.ui.comp.personalization.ChartWrapper",
	/** @lends sap.ui.comp.personalization.ChartWrapper */
	{
		constructor: function(sId, mSettings) {
			Element.apply(this, arguments);
		},
		metadata: {
			library: "sap.ui.comp",
			aggregations: {
				/**
				 * @since 1.34
				 */
				columns: {
					type: "sap.ui.comp.personalization.ColumnWrapper",
					multiple: true,
					singularName: "column"
				}
			},
			associations: {
				/**
				 * Defines original chart object.
				 * 
				 * @since 1.34
				 */
				chart: {
					type: "sap.chart.Chart",
					multiple: false
				}
			}
		}
	});

	ChartWrapper.prototype.getChartObject = function() {
		var oChart = this.getAssociation("chart");
		if (typeof oChart === "string") {
			oChart = sap.ui.getCore().byId(oChart);
		}
		return oChart;
	};
	
	ChartWrapper.prototype.getDomRef = function() {
		var oChart = this.getChartObject();		
		return oChart.getDomRef();
	};
	
	return ChartWrapper;

}, /* bExport= */true);

}; // end of sap/ui/comp/personalization/ChartWrapper.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.personalization.ColumnWrapper') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.personalization.ColumnWrapper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/personalization/ColumnWrapper",[
	'jquery.sap.global', 'sap/ui/core/Element'
], function(jQuery, Element) {
	"use strict";

	/**
	 * The ColumnWrapper can be used to wrap a chart.
	 * 
	 * @class Chart Wrapper
	 * @extends sap.ui.core.Control
	 * @author SAP
	 * @version 1.34.0-SNAPSHOT
	 * @alias sap.ui.comp.personalization.ColumnWrapper
	 */
	var ColumnWrapper = Element.extend("sap.ui.comp.personalization.ColumnWrapper",
	/** @lends sap.ui.comp.personalization.ColumnWrapper */
	{
		constructor: function(sId, mSettings) {
			Element.apply(this, arguments);
		},
		metadata: {
			library: "sap.ui.comp",
			properties: {
				/**
				 * Defines label to be displayed for the column.
				 * 
				 * @since 1.34.0
				 */
				label: {
					type: "string"
				},

				/**
				 * Defines tooltip of column.
				 * 
				 * @since 1.34.0
				 */
				tooltip: {
					type: "string"
				},

// /**
// * Defines visibility of column.
// *
// * @since 1.34.0
// */
// visible: {
// type: "boolean",
// defaultValue: true
// },

				/**
				 * Defines selection of column.
				 * 
				 * @since 1.34.0
				 */
				selected: {
					type: "boolean",
					defaultValue: false
				},

				/**
				 * Defines the type of column. Supported values are: "dimension", "measure" and "notDimeasure".
				 * 
				 * @since 1.34.0
				 */
				aggregationRole: {
					type: "sap.ui.comp.personalization.AggregationRole"
				},

				/**
				 * Defines the role of column. Supported values are: "axis1", "axis2" or "axis3" in case of measure and "category" or "series" in case
				 * of dimension.
				 * 
				 * @since 1.34.0
				 */
				role: {
					type: "string"
				}
			}
		}
	});

	return ColumnWrapper;

}, /* bExport= */true);

}; // end of sap/ui/comp/personalization/ColumnWrapper.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.AnnotationHelper') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

/**
 * Utility to access annotations for SmartField control. OData V2 annotations are supported and vocabulary-based OData V4 annotations, which are used
 * as fall-back. For <code>sap:updatable-path</code> currently no OData V4 annotation is considered, because it is replaced by the instance
 * annotation <code>com.sap.vocabularies.Common.v1.Updatable</code>, which is meaningless in a context of OData V2 with additional OData V4
 * annotations. An additional exception is <code>sap:visible</code>, as there is no replacement available. Additionally please note that
 * <code>sap:display-format</code> with value <code>Date</code> is not considered here, as it is replaced by the new primitive type
 * <code>Edm.Date</code> from V4 onwards. And <code>sap:semantics</code> with value <code>fixed-values</code> on entity set is not considered
 * here. It addresses value help use cases, especially the entity set used for value help.
 * 
 * @private
 * @name sap.ui.comp.smartfield.AnnotationHelper
 * @author SAP SE
 * @version 1.36.12
 * @since 1.29.0
 * @return {sap.ui.comp.smartfield.AnnotationHelper} the annotation access class.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.AnnotationHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/comp/smartfield/AnnotationHelper",[], function() {
	"use strict";

	/**
	 * @private
	 * @constructor
	 */
	var AnnotationHelper = function() {
		// nothing to do here.
	};

	/**
	 * Calculates the value of the text annotation.
	 * 
	 * @param {object} oProperty the OData property from the meta model for which to calculate the value of the text annotation
	 * @return {string} the value of the text annotation, which can be <code>null</code>.
	 * @public
	 */
	AnnotationHelper.prototype.getText = function(oProperty) {
		return oProperty["sap:text"] || this._getObject("com.sap.vocabularies.Common.v1.Text/Path", oProperty);
	};

	/**
	 * Checks whether updating an entity set is statically enabled.
	 * 
	 * @param {object} oProperty the given property from the meta model
	 * @param {object} oEntityType the given entity set from the meta model
	 * @return {boolean} <code>true</code>, if updating an entity set is statically enabled, <code>false<code> otherwise.
	 * @public
	 */
	AnnotationHelper.prototype.getTextArrangement = function(oProperty, oEntityType) {
		var oEnumTextArrangement = this._getObject("com.sap.vocabularies.UI.v1.TextArrangement", oProperty);
		if (!oEnumTextArrangement) {
			oEnumTextArrangement = this._getObject("com.sap.vocabularies.UI.v1.TextArrangement", oEntityType);
		}

		if (oEnumTextArrangement && oEnumTextArrangement.EnumMember) {

			if (oEnumTextArrangement.EnumMember === "com.sap.vocabularies.UI.v1.TextArrangementType/TextFirst") {
				return "descriptionAndId";
			} else if (oEnumTextArrangement.EnumMember === "com.sap.vocabularies.UI.v1.TextArrangementType/TextLast") {
				return "idAndDescription";
			}
		}

		return null;
	};

	/**
	 * Calculates the value of the unit annotation.
	 * 
	 * @param {object} oProperty the OData property from the meta model for which to calculate the value of the unit annotation
	 * @return {string} the value of the unit annotation, which can be <code>null</code>.
	 * @public
	 */
	AnnotationHelper.prototype.getUnit = function(oProperty) {
		return oProperty["sap:unit"] || this._getObject("Org.OData.Measures.V1.ISOCurrency/Path", oProperty) || this._getObject("Org.OData.Measures.V1.Unit/Path", oProperty);
	};

	/**
	 * Calculates the value of the label annotation.
	 * 
	 * @param {object} oProperty the OData property for which to calculate the value of the label annotation
	 * @return {string} the value of the label annotation, which can be <code>null</code>.
	 * @public
	 */
	AnnotationHelper.prototype.getLabel = function(oProperty) {
		var sLabel = this._getObject("com.sap.vocabularies.UI.v1.DataFieldWithUrl/Label/String", oProperty);
		return sLabel || oProperty["sap:label"] || this._getObject("com.sap.vocabularies.Common.v1.Label/String", oProperty);
	};

	/**
	 * Checks whether the given property semantically addresses a currency.
	 * 
	 * @param {object} oProperty the OData property
	 * @return {boolean} <code>true</code>, if a currency is addressed, <code>false<code> otherwise.
	 * @public
	 */
	AnnotationHelper.prototype.isCurrency = function(oProperty) {
		return (oProperty["sap:semantics"] === "currency-code") || !!this._getObject("Org.OData.Measures.V1.ISOCurrency/Path", oProperty);
	};

	/**
	 * Calculates the value of the quickinfo annotation. e.q. usage as tooltip
	 * 
	 * @param {object} oProperty the OData property from the meta model
	 * @return {string} the value of the quickinfo annotation, which can be <code>null</code>.
	 * @public
	 */
	AnnotationHelper.prototype.getQuickInfo = function(oProperty) {
		return oProperty["sap:quickinfo"] || this._getObject("com.sap.vocabularies.Common.v1.QuickInfo/String", oProperty);
	};

	/**
	 * Calculates the value of the vocabularies.UI.v1.DataFieldWithUrl property annotation, for example, usage as a link
	 * 
	 * @param {object} oProperty the OData property from the meta model
	 * @return {object} the value of the vocabularies.UI.v1.DataFieldWithUrl annotation, which can be <code>null</code>.
	 * @public
	 */
	// AnnotationHelper.prototype.getAnnotationWithUrl = function(oProperty) {
	// return this._getObject("com.sap.vocabularies.UI.v1.DataFieldWithUrl", oProperty);
	// };
	/**
	 * Checks whether the given property needs to be masked. e.q. usage as password
	 * 
	 * @param {object} oProperty the OData property from the meta model
	 * @return {boolean} <code>true</code>, if masking is required, <code>false<code> otherwise.
	 * @public
	 */
	AnnotationHelper.prototype.isMasked = function(oProperty) {
		return (!!this._getObject("com.sap.vocabularies.Common.v1.Masked", oProperty));
	};

	/**
	 * Checks whether the given property supports the multi-line-text annotation
	 * 
	 * @param {object} oProperty the OData property from the meta model
	 * @return {boolean} <code>true</code>, if this annotation exists, <code>false<code> otherwise.
	 * @public
	 */
	AnnotationHelper.prototype.isMultiLineText = function(oProperty) {
		return (!!this._getObject("com.sap.vocabularies.UI.v1.MultiLineText", oProperty));
	};

	/**
	 * Checks whether the given property requires a conversion of its value to upper case.
	 * 
	 * @param {object} oProperty the OData property from the meta model
	 * @return {boolean} <code>true</code>, if a conversion to upper case is required, <code>false<code> otherwise.
	 * @public
	 */
	AnnotationHelper.prototype.isUpperCase = function(oProperty) {
		return (oProperty["sap:display-format"] === "UpperCase") || (this._getObject("com.sap.vocabularies.Common.v1.IsUpperCase/Bool", oProperty) === "true");
	};

	/**
	 * Checks whether creating an entity set is statically enabled.
	 * 
	 * @param {object} oEntitySet the given entity set from the meta model
	 * @return {boolean} <code>true</code>, if creating an entity set is statically enabled, <code>false<code> otherwise.
	 * @public
	 */
	AnnotationHelper.prototype.canCreateEntitySet = function(oEntitySet) {
		var bNo = (oEntitySet["sap:creatable"] === "false") || (this._getObject("Org.OData.Capabilities.V1.InsertRestrictions/Insertable/Bool", oEntitySet) === "false");
		return !bNo;
	};

	/**
	 * Checks whether creating a property is statically enabled.
	 * 
	 * @param {object} oProperty the given property from the meta model
	 * @return {boolean} <code>true</code>, if creating a property is statically enabled, <code>false<code> otherwise.
	 * @public
	 */
	AnnotationHelper.prototype.canCreateProperty = function(oProperty) {
		if (this._getObject("Org.OData.Core.V1.Computed/Bool", oProperty) === "true") {
			return false;
		}

		if (oProperty["sap:creatable"] === "false") {
			return false;
		}

		// if (this._getObject("Org.OData.Core.V1.Immutable/Bool", oProperty) === "true") {
		// return true;
		// }

		return true;
	};

	/**
	 * Checks whether updating an entity set is statically enabled.
	 * 
	 * @param {object} oEntitySet the given entity set from the meta model
	 * @return {boolean} <code>true</code>, if updating an entity set is statically enabled, <code>false<code> otherwise.
	 * @public
	 */
	AnnotationHelper.prototype.canUpdateEntitySet = function(oEntitySet) {
		var bNo = (oEntitySet["sap:updatable"] === "false") || (this._getObject("Org.OData.Capabilities.V1.UpdateRestrictions/Updatable/Bool", oEntitySet) === "false");
		return !bNo;
	};

	/**
	 * Checks whether updating an entity set is statically enabled.
	 * 
	 * @param {object} oEntitySet the given entity set from the meta model
	 * @return {string} the path of the field control property.
	 * @public
	 */
	AnnotationHelper.prototype.getUpdateEntitySetPath = function(oEntitySet) {
		return oEntitySet["sap:updatable"] || this._getObject("Org.OData.Capabilities.V1.UpdateRestrictions/Updatable/Path", oEntitySet);
	};

	/**
	 * Checks whether updating a property is statically enabled.
	 * 
	 * @param {object} oProperty the given property from the meta model
	 * @return {boolean} <code>true</code>, if updating a property is statically enabled, <code>false<code> otherwise.
	 * @public
	 */
	AnnotationHelper.prototype.canUpdateProperty = function(oProperty) {
		var bNo = (oProperty["sap:updatable"] === "false") || (this._getObject("Org.OData.Core.V1.Immutable/Bool", oProperty) === "true") || (this._getObject("com.sap.vocabularies.Common.v1.FieldControl/EnumMember", oProperty) === "com.sap.vocabularies.Common.v1.FieldControlType/ReadOnly");
		return !bNo;
	};

	/**
	 * Calculates the path of the field control property for a given property.
	 * 
	 * @param {object} oProperty the given property from the meta model
	 * @return {string} the path of the field control property.
	 * @public
	 */
	AnnotationHelper.prototype.getFieldControlPath = function(oProperty) {
		return oProperty["sap:field-control"] || this._getObject("com.sap.vocabularies.Common.v1.FieldControl/Path", oProperty);
	};

	/**
	 * Checks whether the visibility of a property is statically modeled.
	 * 
	 * @param {object} oProperty the given property from the meta model
	 * @return {string} <code>true</code>, if a property is modeled as statically visible, <code>false</code> otherwise.
	 * @public
	 */
	AnnotationHelper.prototype.getVisible = function(oProperty) {
		var sValue;

		// check for "sap:visible".
		if (oProperty["sap:visible"]) {
			return oProperty["sap:visible"];
		}

		// no "sap:visible": so check for a static field control.
		sValue = this._getObject("com.sap.vocabularies.Common.v1.FieldControl/EnumMember", oProperty);

		if (sValue === "com.sap.vocabularies.Common.v1.FieldControlType/Hidden") {
			return "false";
		}

		// return default.
		return "true";
	};

	/**
	 * Returns an object that is addressed by a given path. If no object can be found <code>null</code> is returned.
	 * 
	 * @param {string} sPath the path to address the object
	 * @param {object} oObject the object to start with
	 * @return {object} the target object, can be <code>null</code>.
	 * @private
	 */
	AnnotationHelper.prototype._getObject = function(sPath, oObject) {
		var oNode = oObject, aParts = sPath.split("/"), iIndex = 0;

		while (oNode && aParts[iIndex]) {
			oNode = oNode[aParts[iIndex]];
			iIndex++;
		}

		return oNode;
	};

	/**
	 * Frees all resources claimed during the life-time of this instance.
	 * 
	 * @public
	 */
	AnnotationHelper.prototype.destroy = function() {
		// nothing to do here.
	};

	return AnnotationHelper;
}, true);

}; // end of sap/ui/comp/smartfield/AnnotationHelper.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.BindingUtil') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

/**
 * Utility to access control binding for SmartFieldControl.
 * 
 * @private
 * @name sap.ui.comp.smartfield.BindingUtil
 * @author SAP SE
 * @version 1.36.12
 * @since 1.28.0
 * @param {sap.ui.model.odata.AnnotationHelper} AnnotationHelper A reference to the AnnotationHelper implementation
 * @param {sap.ui.base.BindingParser} BindingParser A reference to the BindingParser implementation
 * @returns {sap.ui.comp.smartfield.BindingUtil} The binding access class.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.BindingUtil'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.odata.AnnotationHelper'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.BindingParser'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/BindingUtil",["sap/ui/model/odata/AnnotationHelper", "sap/ui/base/BindingParser"], function( AnnotationHelper, BindingParser ) {
	"use strict";

	/**
	 * @private
	 * @constructor
	 */
	var BindingUtil = function() {
		//nothing to do here.
	};

	/**
	 * Corrects a given navigation path, especially IDs are removed, e.g. <code>Tasks('id-1428419016778-51')</code> is converted into
	 * <code>Tasks</code>.
	 * 
	 * @param {string} sPath The path to be converted.
	 * @returns {string} Conversion result.
	 * @since 1.29.0
	 * @public
	 */
	BindingUtil.prototype.correctPath = function(sPath) {
		var oRegExp, aMatches, sEntity;

		oRegExp = /\((.+)\)/;
		aMatches = oRegExp.exec(sPath);

		if (aMatches) {
			sEntity = sPath.replace(aMatches[0], "");
		} else {
			sEntity = sPath;
		}

		return sEntity.replace("/", "");
	};
	
	/**
	 * Calculates the navigation properties to traverse. The binding context and object binding are used as a basis for this calculation.
	 * 
	 * @param {sap.ui.core.control} oControl The control for which the binding context and object binding have to be analyzed.
	 * @returns {map} The navigation properties to traverse or an empty array, never <code>null</code>.
	 * @since 1.29.0
	 * @public
	 */
	BindingUtil.prototype.getNavigationProperties = function(oControl) {
		var oObjectBinding, oBindingContext, mResult = {};
		
		// check the binding context.
		oBindingContext = oControl.getBindingContext();

		if (oBindingContext && oBindingContext.sPath) {
			mResult.paths = oBindingContext.sPath.split("/");			
		}
		
		// check the object binding.
		oObjectBinding = oControl.getObjectBinding();
		
		if (oObjectBinding && oObjectBinding.sPath) {
			mResult.objectBinding = oObjectBinding.sPath;
			
			if (mResult.paths) {
				mResult.paths.push(oObjectBinding.sPath);
			} else {
				mResult.paths = [
					oObjectBinding.sPath
				];
			}
		}
		
		if (!mResult.paths) {
			mResult.paths = [];
		}
		
		return mResult;
	};

	/**
	 * Converts the paths from the binding information of a control property to their original form.
	 * 
	 * @param {object} oBindingInfo The binding information from the control
	 * @param {array} aPaths The binding paths
	 * @param {object} oInfo Information about the binding
	 * @public
	 */	
	BindingUtil.prototype.getBindingParts = function(oBindingInfo, aPaths, oInfo) {
		var len = 0, i, oPart, sOut;
		
		if (oBindingInfo && oBindingInfo.parts) {
			len = oBindingInfo.parts.length;
		}
		
		for (i = 0; i < len; i++) {
			sOut = "";
			oPart = oBindingInfo.parts[i];
			
			if (oPart.model) {
				sOut = sOut + oPart.model + ">";
			}
			
			sOut = sOut + oPart.path;
			aPaths.push(sOut);
			oInfo.length++;
		}
	};
	
	/**
	 * Converts binding information for a control property to its original form.
	 * 
	 * @param {object} oInfo The binding information from the control.
	 * @returns {object} Conversion result.
	 * @public
	 */
	BindingUtil.prototype.toBinding = function(oInfo) {
		var oOut = {}, n, oPart, i, len, mNames = {
			model: true,
			formatter: true,
			mode: true,
			path: true
		};

		if (oInfo) {
			if (oInfo.parts && oInfo.parts.length) {
				len = oInfo.parts.length;
				oOut.parts = [];
			}
			
			for (i = 0; i < len; i++) {
				oPart = oInfo.parts[i];
				oOut.parts.push(oPart);
			}
			
			for (n in mNames) {
				if (oInfo[n]) {
					oOut[n] = oInfo[n];
				}
			}

			return oOut;			
		}

		return null;
	};

	/**
	 * Converts binding information for a control property to its original form.
	 * 
	 * @param {object} oInfo The binding information from the control.
	 * @returns {string} Conversion result.
	 * @public
	 */
	BindingUtil.prototype.toBindingPath = function(oInfo) {
		var oOut, sOut = "", oPart, i, len;

		oOut = this.toBinding(oInfo);

		if (oOut) {
			if (oOut.model) {
				sOut = oOut.model + ">";
			}

			if (oOut.path) {
				sOut = sOut + oOut.path;
			} else if (oOut.parts && oOut.parts.length > 0) {
				len = oOut.parts.length;
				
				for (i = 0; i < len; i++) {
					oPart = oOut.parts[i];
					
					if (oPart.model) {
						sOut = sOut + oPart.model + ">";
					}
					
					sOut = sOut + oPart.path;
				}
			}
		}

		return sOut;
	};

	/**
	 * Creates a binding definition for a formatter.
	 * 
	 * @param {string} sModel The name of the current model
	 * @param {map} oFormatter The formatter
	 * @param {array} aPaths Overall collection of paths
	 * @returns {map} The binding definition
	 * @public
	 */
	BindingUtil.prototype.fromFormatter = function(sModel, oFormatter, aPaths) {
		var i, len, aParts, mBind = {
			model: sModel,
			formatter: oFormatter.formatter
		};
		
		aParts = oFormatter.path();
		len = aParts.length;
		
		if (len > 0) {				
			mBind.parts = aParts;
			
			if (aPaths) {
				for (i = 0; i < len; i++) {
					aPaths.push(aParts[i]);
				}				
			}
			
		} else {
			mBind.path = "";
		}
		
		return mBind;
	};
	
	/**
	 * This helper function is able to to handle odata binding expressions like path and apply function 
	 * 
	 * @param {object} oBindingExpression The oData description starting with <code>Apply Function</code> or with a <code>path</code> expression
	 * @param {object} oBindingContext The current binding context
	 * @returns {string} The resulting value of the function execution
	 * @private
	 * @since 1.30.0
	 */
	BindingUtil.prototype.executeODataBindingExpression = function(oBindingExpression, oBindingContext) {

		var i, sValue, aValues, oParseResult, sHref, sHrefResult = "";

		if (oBindingExpression && oBindingContext) {

			sHref = AnnotationHelper.format(oBindingContext, oBindingExpression); // generate a sapui5 binding expression
			sHrefResult = sHref;

			oParseResult = BindingParser.complexParser(sHref, oBindingContext); // parse the binding expression
			aValues = [];
			if (oParseResult) {

				if (oParseResult.formatter) {

					for (i = 0; i < oParseResult.parts.length; i++) {
						sValue = oBindingContext.getProperty(oParseResult.parts[i].path, "value");
						aValues.push(sValue);
					}

					sHrefResult = oParseResult.formatter.apply(null, aValues);
				} else {
					sHrefResult = oBindingContext.getProperty(oParseResult.path, "value");
				}
			}
		}

		return sHrefResult;
	};
	
	/**
	 * Frees all resources claimed during the life-time of this instance.
	 * 
	 * @public
	 */
	BindingUtil.prototype.destroy = function() {
		//nothing to do here.
	};

	return BindingUtil;
}, true);

}; // end of sap/ui/comp/smartfield/BindingUtil.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.FieldControl') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

/**
 * Field Control Implementation for SmartField Control. The implementation operates on OData meta data, so an instance of
 * <code>sap.ui.model.odata.ODataModel</code>.
 * 
 * @private
 * @name sap.ui.comp.smartfield.FieldControl
 * @author SAP SE
 * @version 1.36.12
 * @since 1.28.0
 * @param {jquery.sap.global} jQuery a reference to the jQuery implementation.
 * @param {sap.ui.comp.smartfield.BindingUtil} BindingUtil a reference to the binding utility implementation.
 * @param {sap.ui.model.ParseException} ParseException a reference to the parse exception implementation.
 * @returns {sap.ui.comp.smartfield.FieldControl} the field control class.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.FieldControl'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.ParseException'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/FieldControl",[
	"jquery.sap.global", "sap/ui/comp/smartfield/BindingUtil", "sap/ui/model/ParseException"
], function(jQuery, BindingUtil, ParseException) {
	"use strict";

	/**
	 * @private
	 * @constructor
	 * @param {sap.ui.core.Control} oParent the parent control.
	 * @param {sap.ui.comp.smartfield.ODataHelper} oHelper a reference to the oData helper implementation.
	 */
	var FieldControl = function(oParent, oHelper) {
		this._bIsDestroyed = false;
		this._oBinding = new BindingUtil();
		this._oStoredProperties = {};
		this._oParent = oParent;
		this._oHelper = oHelper;
		this._oAnnotation = oHelper.oAnnotation;
	};

	/**
	 * Calculates the control attributes that can be bound with field-control.
	 * 
	 * @param {boolean} bNoMandatory flag indicating whether the mandatory attribute can be returned.
	 * @returns {array} the control attributes that can be bound with field-control.
	 * @public
	 */
	FieldControl.prototype.getBindableAttributes = function(bNoMandatory) {
		var oConfig = this._oParent.data("configdata");

		// in case of table there is no need to bind visible and mandatory properties.
		if (oConfig && (oConfig.configdata && !oConfig.configdata.isUOM || !oConfig.configdata)) {
			return [
				"editable"
			];
		}

		if (bNoMandatory) {
			return [
				"editable", "visible"
			];
		}

		return [
			"editable", "visible", "mandatory"
		];
	};

	/**
	 * Returns formatter functions for the given control properties. The formatters use the given control property and its subordinate attributes.
	 * Each formatter consists of two function, one to calculate the binding paths and the formatter function itself.
	 * 
	 * @param {object} oMetaData the meta data used to create the control.
	 * @param {object} oMetaData.entitySet the OData entity set definition.
	 * @param {object} oMetaData.property the OData property definition.
	 * @param {string} oMetaData.path the binding path.
	 * @param {array} aBindings the names of the properties to be bound, e.g. "editable", "mandatory" and "visible".
	 * @returns {map} formatter functions for the given control properties.
	 * @public
	 */
	FieldControl.prototype.getControlProperties = function(oMetaData, aBindings) {
		var sMethod, len, sName, oResult = {};

		if (oMetaData && aBindings) {
			len = aBindings.length;

			while (len--) {
				sName = aBindings[len];
				sMethod = "_get" + sName.substring(0, 1).toUpperCase() + sName.substring(1);

				if (this[sMethod]) {
					oResult[sName] = this[sMethod](oMetaData, this._oParent.getBindingInfo(sName));
				}
			}
		}

		return oResult;
	};

	/**
	 * Returns formatter functions for the <code>editable</code> property of a control. The formatters use the given OData property and its
	 * subordinate attributes.
	 * 
	 * @param {object} oMetaData the meta data used to create the control
	 * @param {object} oMetaData.entitySet the OData entity set definition
	 * @param {object} oMetaData.property the OData property definition
	 * @param {string} oMetaData.path the binding path
	 * @param {object} oBindingInfo the current binding of the property
	 * @param {string} sProperty the property
	 * @returns {object} formatter function for the given control attribute
	 * @private
	 */
	FieldControl.prototype._getEditable = function(oMetaData, oBindingInfo, sProperty) {
		var bParent, iPropertyPos = -1, iEntitySetPos = -1, iBindingPos = -1, that = this, oParts = {
			length: 0
		};

		// if the field is not bound, use the initial value from the parent control.
		if (!oBindingInfo) {
			if (sProperty) {
				bParent = this._oParent["get" + sProperty.substring(0, 1).toUpperCase() + sProperty.substring(1)]();
				this._oStoredProperties[sProperty] = bParent;
			} else {
				bParent = this._oParent.getEditable();
				this._oStoredProperties.editable = bParent;
			}
		}

		return {
			path: function() {
				var aPaths = [], sPath, len = 0;

				// no value bound on smart field, but a URL could be there.
				if (!oMetaData.property || !oMetaData.property.property) {
					return [
						""
					];
				}

				// check for field-control on property level and set position.
				sPath = that._oAnnotation.getFieldControlPath(oMetaData.property.property);

				if (sPath) {
					aPaths.push(that._toPath(oMetaData, sPath));
					iPropertyPos = len;
					len++;
				}

				// check for field-control on entity set level and set position.
				// for "sap:updatable-path" no OData V4 annotation is considered,
				// because it is replaced by the instance annotation com.sap.vocabularies.Common.v1.Updatable.
				if (oMetaData.entitySet["sap:updatable-path"]) {
					aPaths.push(oMetaData.entitySet["sap:updatable-path"]);
					iEntitySetPos = len;
					len++;
				}

				// check for binding info and set position.
				if (oBindingInfo) {
					iBindingPos = len;
					that._oBinding.getBindingParts(oBindingInfo, aPaths, oParts);
					len = len + oParts.length;
				}

				if (len > 0) {
					return aPaths;
				}

				return [
					""
				];
			},
			formatter: function(v, p1, p2, p3) {
				var aArgs = [], oBindingContext, oObject;

				if (that._bIsDestroyed) {
					return false;
				}

				// check the modeled static values.
				oBindingContext = that._oParent.getBindingContext();

				if (!oBindingContext) {
					return false; // technical exit due to BindingContext creation
				}

				if (oBindingContext.getObject && oMetaData && oMetaData.property && oMetaData.property.property) {
					oObject = oBindingContext.getObject();

					if (oObject && oObject.__metadata && oObject.__metadata.created) {
						if (!that._getCreatableStatic(oMetaData)) {
							return false;
						}
					} else if (!that._getUpdatableStatic(oMetaData)) {
						return false;
					}
				}

				// get the values to compare.
				if (iPropertyPos > -1) {
					aArgs.push(arguments[iPropertyPos] !== 1);
				}

				if (iEntitySetPos > -1) {
					aArgs.push(!!arguments[iEntitySetPos]);
				}

				// check for binding, in case of no binding, use value from parent
				if (iBindingPos > -1) {
					if (oBindingInfo.formatter) {
						aArgs.push(that._execFormatter(oBindingInfo.formatter, arguments, iBindingPos, oParts.length));
					} else {
						aArgs.push(!!arguments[iBindingPos]);
					}
				} else {
					aArgs.push(bParent);
				}

				return that._compare(aArgs, false, true);
			}
		};
	};

	/**
	 * Executes the given formatter.
	 * 
	 * @param {function} fFormatter The formatter to be executed
	 * @param {array} aArguments The possible arguments
	 * @param {int} iStart The start position
	 * @param {int} iLength The length
	 * @returns {object} The formatting result
	 * @private
	 */
	FieldControl.prototype._execFormatter = function(fFormatter, aArguments, iStart, iLength) {
		var aArgs = [], i;

		if (iStart > -1 && iLength > -1) {
			for (i = 0; i < iLength; i++) {
				aArgs.push(aArguments[iStart + i]);
			}
		}

		return fFormatter.apply(null, aArgs);
	};

	/**
	 * Returns static value for the <code>enabled</code> property of a control.
	 * 
	 * @param {object} oMetaData the meta data used to create the control.
	 * @param {object} oMetaData.entitySet the OData entity set definition.
	 * @param {object} oMetaData.property the OData property definition.
	 * @param {string} oMetaData.path the binding path.
	 * @returns {boolean} static value for the <code>enabled</code> property of a control.
	 * @private
	 */
	FieldControl.prototype._getCreatableStatic = function(oMetaData) {
		return (this._oAnnotation.canCreateEntitySet(oMetaData.entitySet) && this._oAnnotation.canCreateProperty(oMetaData.property.property));
	};

	/**
	 * Returns static value for the <code>enabled</code> property of a control.
	 * 
	 * @param {object} oMetaData the meta data used to create the control.
	 * @param {object} oMetaData.entitySet the OData entity set definition.
	 * @param {object} oMetaData.property the OData property definition.
	 * @param {string} oMetaData.path the binding path.
	 * @returns {boolean} static value for the <code>enabled</code> property of a control.
	 * @private
	 */
	FieldControl.prototype._getUpdatableStatic = function(oMetaData) {
		return (this._oAnnotation.canUpdateEntitySet(oMetaData.entitySet) && this._oAnnotation.canUpdateProperty(oMetaData.property.property));
	};

	/**
	 * Compares the boolean values from field control evaluation. First the values are compared to <code>bPessimist</code>. If this comparison does
	 * not evaluate to <code>true</code>, <code>bDefault</code> is returned.
	 * 
	 * @param {array} aArgs values to be compared.
	 * @param {boolean} bPessimist first operand.
	 * @param {boolean} bDefault second operand.
	 * @returns {boolean} comparison result.
	 * @private
	 */
	FieldControl.prototype._compare = function(aArgs, bPessimist, bDefault) {
		var i, len = aArgs.length;

		for (i = 0; i < len; i++) {
			if (aArgs[i] === bPessimist) {
				return bPessimist;
			}
		}

		return bDefault;
	};

	/**
	 * Returns formatter functions for the <code>visible</code> property of a control. The formatters use the given OData property and its
	 * subordinate attributes.
	 * 
	 * @param {object} oMetaData the meta data used to create the control.
	 * @param {object} oMetaData.entitySet the OData entity set definition.
	 * @param {object} oMetaData.property the OData property definition.
	 * @param {string} oMetaData.path the binding path.
	 * @param {object} oBindingInfo the current binding of the property.
	 * @returns {object} formatter function for the given control attribute.
	 * @private
	 */
	FieldControl.prototype._getVisible = function(oMetaData, oBindingInfo) {
		var bParent, iBindingPos = -1, iPropertyPos = -1, that = this, oParts = {
			length: 0
		};

		// if the field is not bound, use the initial value from the parent control.
		if (!oBindingInfo) {
			bParent = this._oParent.getVisible();
			this._oStoredProperties.visible = bParent;
		}

		return {
			path: function() {
				var aPaths = [], sPath, len = 0;

				// no value bound on smart field, but a URL could be there.
				if (!oMetaData.property || !oMetaData.property.property) {
					return [
						""
					];
				}

				// check for field-control on entity set level and set position.
				sPath = that._oAnnotation.getFieldControlPath(oMetaData.property.property);

				if (sPath) {
					aPaths.push(that._toPath(oMetaData, sPath));
					iPropertyPos = len;
					len++;
				}

				// check for binding info and set position.
				if (oBindingInfo) {
					iBindingPos = len;
					that._oBinding.getBindingParts(oBindingInfo, aPaths, oParts);
					len = len + oParts.length;
				}

				if (len > 0) {
					return aPaths;
				}

				return [
					""
				];
			},
			formatter: function(p1, p2) {
				var aArgs = [];

				if (that._bIsDestroyed) {
					return false;
				}

				// check static property.
				if (oMetaData.property && oMetaData.property.property && that._oAnnotation.getVisible(oMetaData.property.property) === "false") {
					return false;
				}

				// check, if field-control is available.
				if (iPropertyPos > -1) {
					aArgs.push(arguments[iPropertyPos] !== 0);
				}

				// check for binding, in case of no binding, use value from parent.
				if (iBindingPos > -1) {
					if (oBindingInfo.formatter) {
						aArgs.push(that._execFormatter(oBindingInfo.formatter, arguments, iBindingPos, oParts.length));
					} else {
						aArgs.push(!!arguments[iBindingPos]);
					}
				} else {
					aArgs.push(bParent);
				}

				return that._compare(aArgs, false, true);
			}
		};
	};

	/**
	 * Returns formatter functions for the <code>mandatory</code> property of a control. The formatters use the given OData property and its
	 * subordinate attributes.
	 * 
	 * @param {object} oMetaData the meta data used to create the control.
	 * @param {object} oMetaData.entitySet the OData entity set definition.
	 * @param {object} oMetaData.property the OData property definition.
	 * @param {string} oMetaData.path the binding path.
	 * @param {object} oBindingInfo the current binding of the property.
	 * @returns {object} formatter function for the given control attribute.
	 * @private
	 */
	FieldControl.prototype._getMandatory = function(oMetaData, oBindingInfo) {
		var bParent, iBindingPos = -1, iPropertyPos = -1, that = this, oParts = {
			length: 0
		};

		// if the field is not bound, use the initial value from the parent control.
		if (!oBindingInfo) {
			bParent = this._oParent.getMandatory();
			this._oStoredProperties.mandatory = bParent;
		}

		return {
			path: function() {
				var aPaths = [], sPath, len = 0;

				// no value bound on smart field, but a URL could be there.
				if (!oMetaData.property || !oMetaData.property.property) {
					return [
						""
					];
				}

				// check for field-control on entity set level and set position.
				sPath = that._oAnnotation.getFieldControlPath(oMetaData.property.property);

				if (sPath) {
					aPaths.push(that._toPath(oMetaData, sPath));
					iPropertyPos = len;
					len++;
				}

				// check for binding info and set position.
				if (oBindingInfo) {
					iBindingPos = len;
					that._oBinding.getBindingParts(oBindingInfo, aPaths, oParts);
					len = len + oParts.length;
				}

				if (len > 0) {
					return aPaths;
				}

				return [
					""
				];
			},
			formatter: function(p1, p2) {
				var aArgs = [];

				if (that._bIsDestroyed) {
					return true;
				}

				// no field control, so check for null-able.
				// default for null-able is true, so it has to be set to false to make a property mandatory.
				if (oMetaData.property && oMetaData.property.property && oMetaData.property.property.nullable) {
					aArgs.push(oMetaData.property.property.nullable === "false");
				}

				// check, if field-control is active.
				if (iPropertyPos > -1) {
					aArgs.push(arguments[iPropertyPos] === 7);
				}

				// check for binding, in case of no binding, use value from parent.
				if (iBindingPos > -1) {
					if (oBindingInfo.formatter) {
						aArgs.push(that._execFormatter(oBindingInfo.formatter, arguments, iBindingPos, oParts.length));
					} else {
						aArgs.push(!!arguments[iBindingPos]);
					}
				} else {
					aArgs.push(bParent);
				}

				return that._compare(aArgs, true, false);
			}
		};
	};

	/**
	 * Constructs a binding path for a formatter from the <code>value</code> attribute of a JSON property.
	 * 
	 * @param {object} oMetaData the meta data used to create the control.
	 * @param {object} oMetaData.entitySet the OData entity set definition.
	 * @param {object} oMetaData.property the OData property definition.
	 * @param {string} oMetaData.path the binding path.
	 * @param {string} sPath the given path.
	 * @returns {string} binding path for an attribute.
	 * @private
	 */
	FieldControl.prototype._toPath = function(oMetaData, sPath) {
		// if the original property is a complex path,
		// impossible to have a navigation property in sPath.
		// so we assume this as a prerequisite.
		if (oMetaData.property.complex) {
			return oMetaData.path.replace(oMetaData.property.property.name, sPath);
		}

		// add an optional navigation path from value property of the smart control:
		// should be done for simple and complex properties!
		if (oMetaData.navigationPath) {
			return oMetaData.navigationPath + "/" + sPath;
		}

		return sPath;
	};

	/**
	 * Returns a function to check whether a field is a mandatory field.
	 * 
	 * @param {object} oProperty the meta data to execute the check.
	 * @returns {function} the check function, can be <code>null</code>.
	 * @public
	 */
	FieldControl.prototype.getMandatoryCheck = function(oProperty) {
		var fReturn, that = this;

		if (oProperty) {
			switch (oProperty.property.type) {
				case "Edm.DateTimeOffset":
				case "Edm.DateTime":
				case "Edm.Time":
				case "Edm.String":
					fReturn = function(sValue) {
						if (that._oParent.getMandatory() && !sValue) {
							throw new ParseException(sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("VALUEHELPVALDLG_FIELDMESSAGE"));
						}
					};
					break;
				case "Edm.Decimal":
				case "Edm.Double":
				case "Edm.Float":
				case "Edm.Single":
				case "Edm.Int16":
				case "Edm.Int32":
				case "Edm.Int64":
				case "Edm.Byte":
				case "Edm.SByte":
					fReturn = function(sValue) {
						if (that._oParent.getMandatory() && (sValue === null || sValue === undefined || sValue === "")) {
							throw new ParseException(sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("VALUEHELPVALDLG_FIELDMESSAGE"));
						}
					};
					break;
				default:
					break;
			}
		}

		return fReturn;
	};

	/**
	 * Returns formatter functions for the <code>uomEditState</code> property of a control. The formatters use the given OData property and its
	 * subordinate attributes.
	 * 
	 * @param {object} oMetaData the meta data used to create the control
	 * @param {object} oMetaData.entitySet the OData entity set definition
	 * @param {object} oMetaData.property the OData property definition
	 * @param {string} oMetaData.path the binding path
	 * @returns {object} formatter function for the given control attribute
	 * @public
	 */
	FieldControl.prototype.getUOMEditState = function(oMetaData) {
		var mNumber, mUnit, oUnitMetaData, lenNumber = 0, oBindingInfo;

		// get the formatter for the number.
		oBindingInfo = this._oParent.getBindingInfo("editable");
		mNumber = this._getEditable(oMetaData, oBindingInfo);

		// get the formatter for the unit.
		oUnitMetaData = {
			model: oMetaData.model,
			path: this._oHelper.getUOMPath(oMetaData),
			entitySet: oMetaData.entitySet,
			entityType: oMetaData.entityType,
			property: {
				property: oMetaData.annotations.uom.property,
				complex: oMetaData.property.complex,
				typePath: this._oHelper.getUOMTypePath(oMetaData)
			}
		};
		mUnit = this._getEditable(oUnitMetaData, this._oParent.getBindingInfo("uomEditable"), "uomEditable");

		return {
			path: function() {
				var aNumber = mNumber.path(), aUnit = mUnit.path();

				if (aNumber[0] === "" && aUnit === "") {
					return [
						""
					];
				}

				lenNumber = aNumber.length;

				return aNumber.concat(aUnit);
			},
			formatter: function(v, p1, p2, p3) {
				var aArgs = [], i, bNumber, bUnit, len = arguments.length;

				// execute the formatter for the number
				for (i = 0; i < lenNumber; i++) {
					aArgs.push(arguments[i]);
				}

				bNumber = mNumber.formatter.apply(null, aArgs);

				// prepare the arguments for the unit formatter => simply remove the arguments for the number.
				aArgs = [];

				for (i = 0; i < len; i++) {
					aArgs.push(arguments[i]);
				}

				for (i = 0; i < lenNumber; i++) {
					aArgs.shift();
				}

				// execute the formatter for the unit.
				bUnit = mUnit.formatter.apply(null, aArgs);

				// calculate the result
				if (!bUnit && !bNumber) {
					return 0;
				}

				return 1;
			}
		};
	};

	/**
	 * Checks whether a formatter for the property <code>uomEditState</code> of a control can be returned.
	 * 
	 * @param {object} oMetaData the meta data used to create the control
	 * @param {object} oMetaData.entitySet the OData entity set definition
	 * @param {object} oMetaData.property the OData property definition
	 * @param {string} oMetaData.path the binding path
	 * @returns {boolean} <code>uomEditState</code>, if a formatter for the property <code>uomEditState</code> of a control can be returned,
	 *          <code>false</code> otherwise
	 * @public
	 */
	FieldControl.prototype.hasUomEditState = function(oMetaData) {
		var oProposal;

		if (oMetaData && oMetaData.annotations && oMetaData.annotations.uom) {
			oProposal = this._oParent.getControlProposal();

			if (oProposal) {
				if (oProposal.getControlType() === "ObjectNumber") {
					return true;
				}

				if (oProposal.getObjectStatus()) {
					return true;
				}
			}

			return this._oParent.getProposedControl() === "ObjectNumber";
		}

		return false;
	};

	/**
	 * Frees all resources claimed during the life-time of this instance.
	 * 
	 * @public
	 */
	FieldControl.prototype.destroy = function() {
		if (this._oBinding) {
			this._oBinding.destroy();
		}

		this._oAnnotation = null;
		this._oBinding = null;

		if (this._oParent && !this._oParent._bInDestroy) {

			// reset properties
			for ( var sProperty in this._oStoredProperties) {
				this._oParent.unbindProperty(sProperty, true);
				if (this._oParent["set" + sProperty.substring(0, 1).toUpperCase() + sProperty.substring(1)]) {
					this._oParent["set" + sProperty.substring(0, 1).toUpperCase() + sProperty.substring(1)](this._oStoredProperties[sProperty]);
				}
			}

			if (this._oStoredProperties) {
				if (!this._oStoredProperties.editable) {
					this._oParent.unbindProperty("editable");
				}
				if (!this._oStoredProperties.visible) {
					this._oParent.unbindProperty("visible");
				}
				if (!this._oStoredProperties.mandatory) {
					this._oParent.unbindProperty("mandatory");
				}
				if (!this._oStoredProperties.uomEditable) {
					this._oParent.unbindProperty("uomEditable");
				}
			}
		}

		this._oStoredProperties = null;
		this._oParent = null;
		this._oHelper = null;
		this._bIsDestroyed = true;
	};

	return FieldControl;
}, true);

}; // end of sap/ui/comp/smartfield/FieldControl.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.JSONTypes') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

/**
 * Utility class to access data types, if the SmartField uses a JSON model.
 * 
 * @private
 * @name sap.ui.comp.smartfield.JSONTypes
 * @author SAP SE
 * @version 1.36.12
 * @since 1.28.0
 * @param {jquery.sap.global} jQuery a reference to the jQuery implementation.
 * @param {sap.ui.model.type.Boolean} BooleanType a reference to the boolean type implementation.
 * @param {sap.ui.model.type.Date} DateType a reference to the date type implementation.
 * @param {sap.ui.model.type.Float} FloatType a reference to the float type implementation.
 * @param {sap.ui.model.type.Integer} IntegerType a reference to the integer type implementation.
 * @param {sap.ui.model.type.String} StringType a reference to the string type implementation.
 * @returns {sap.ui.comp.smartfield.JSONTypes} the new instance.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.JSONTypes'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.type.Boolean'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.type.Date'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.type.Float'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.type.Integer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.type.String'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/JSONTypes",[	"jquery.sap.global", "sap/ui/model/type/Boolean", "sap/ui/model/type/Date", "sap/ui/model/type/Float", "sap/ui/model/type/Integer", "sap/ui/model/type/String" ], function(jQuery, BooleanType, DateType, FloatType, IntegerType, StringType) {
	"use strict";

	/**
	 * @private
	 * @constructor
	 */
	var JSONTypes = function() {
		//nothing to do here.
	};

	/**
	 * Returns an instance of a sub-class of <code>sap.ui.model.Type</code> depending on the OData property's EDM type.
	 * 
	 * @param {sType} sType the name of the type to be created.
	 * @returns {sap.ui.model.Type} an instance of a sub-class of <code>sap.ui.model.Type</code>.
	 * @public
	 */
	JSONTypes.prototype.getType = function(sType) {
		if (sType) {
			switch (sType) {
				case "Boolean":
					return new BooleanType();
				case "Date":
					return new DateType();
				case "Float":
					return new FloatType();
				case "Integer":
					return new IntegerType();
				default:
					return new StringType();
			}
		}

		return null;
	};

	/**
	 * Frees all resources claimed during the life-time of this instance.
	 * 
	 * @public
	 */
	JSONTypes.prototype.destroy = function() {
		//nothing to do here.
	};

	return JSONTypes;
}, true);

}; // end of sap/ui/comp/smartfield/JSONTypes.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.ODataControlSelector') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

/**
 * Selector for controls that are hosted by <code>sap.ui.comp.SmartField</code>.
 * 
 * @private
 * @name sap.ui.comp.smartfield.ODataControlSelector
 * @author SAP SE
 * @version 1.36.12
 * @since 1.28.0
 * @param {jquery.sap.global} jQuery a reference to the jQuery implementation.
 * @returns {sap.ui.comp.smartfield.ODataControlSelector} new control selector instance.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.ODataControlSelector'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/ODataControlSelector",[	"jquery.sap.global" ], function(jQuery) {
	"use strict";
	
	/**
	 * @private
	 * @constructor
	 * @param {object} oMetaData the meta data used to create the control.
	 * @param {object} oMetaData.entitySet the OData entity set definition.
	 * @param {object} oMetaData.entityType the OData entity type definition.	 
	 * @param {object} oMetaData.annotations the OData annotations.
	 * @param {string} oMetaData.path the binding path.
	 * @param {sap.ui.core.Control} oParent the parent control.
	 * @param {sap.ui.comp.smartfield.ODataTypes} oTypes types utility.
	 */
	var ODataControlSelector = function(oMetaData, oParent, oTypes) {
		this._oMetaData = oMetaData;
		this._oParent = oParent;
		this._oTypes = oTypes;
	};
	
	/**
	 * Checks whether a combo-box should be displayed.
	 * 
	 * @param {boolean} bConfigOnly if set to <code>true</code>, only the control configuration will be checked.
	 * @returns {object} a flag indicating whether a combo-box should be displayed and the value list annotation to use the control to be created
	 *          regardless of whether a combo-box has to be created or not.
	 * @public
	 */
	ODataControlSelector.prototype.checkComboBox = function(bConfigOnly) {
		var oResult = {};

		// no annotation means no combo box in any case.
		if (this._oMetaData.annotations.valuelist) {
			oResult.valuelistType = this._oMetaData.annotations.valuelistType;
			oResult.annotation = this._oMetaData.annotations.valuelist;
		}
	
		if (!oResult.annotation) {
			return oResult;
		}
		
		// currently there is no replacement for <code>sap:semantics</code> with value <code>fixed-values</code>.
		if (oResult.valuelistType === "fixed-values" && !bConfigOnly) {
			oResult.combobox = true;
		}
		
		// check configuration to find out whether a combo box should be created.
		if (!oResult.combobox) {
			oResult.annotation = this._oMetaData.annotations.valuelist;
			oResult.combobox = this._checkConfig("dropDownList");
		}
		
		return oResult;
	};

	/**
	 * Checks whether a <code>sap.m.Selection</code> should be displayed.
	 * 
	 * @returns {object} a flag indicating whether a combo-box should be displayed and the value list annotation to use the control to be created
	 *          regardless of whether a <code>sap.m.Selection</code> has to be created or not.
	 * @public
	 */
	ODataControlSelector.prototype.checkSelection = function() {
		var oResult = {};

		// no annotation means no combo box in any case.
		if (this._oMetaData.annotations.valuelist) {
			oResult.annotation = this._oMetaData.annotations.valuelist;
			oResult.selection = this._checkConfig("selection");
		}		

		return oResult;
	};

	
	/**
	 * Returns <code>true</code>, if a check box has to be rendered. The prerequisite is a property of Edm.type string with a maximum length of 1.
	 * Additionally the control has to be configured as a check box. 
	 * 
	 * @returns {boolean} <code>true</code>, if a check box has to be rendered, <code>false</code> otherwise. 
	 * @public
	 */
	ODataControlSelector.prototype.checkCheckBox = function() {
		var oBind, iMaxLength;
		
		if (this._oMetaData.property && this._oMetaData.property.property && this._oMetaData.property.property.type === "Edm.String") {
			oBind = this._oParent.getBindingInfo("value");
			iMaxLength = this._oTypes.getMaxLength(this._oMetaData.property, oBind);
			
			if (iMaxLength === 1) {
				if (this._checkConfig("checkBox")) {
					return true;
				}				
			}
		}
	
		return false;
	};
	
	/**
	 * Checks whether a <code>sap.m.DatePicker</code> has to be created. The <code>display-format</code> is evaluated and the control
	 * configuration.
	 * 
	 * @returns {boolean} <code>true</code>, if a <code>sap.m.DatePicker</code> has to be created, <code>false</code> otherwise.
	 * @public
	 */
	ODataControlSelector.prototype.checkDatePicker = function() {
		// check the display-format annotation.
		// this method is only invoked for Edm.DateTime, 
		// so no need exists to replace it with V4 annotations,
		// as Edm.DateTime is "pruned" in V4.
		if (this._oMetaData.property && this._oMetaData.property.property && this._oMetaData.property.property["sap:display-format"] === "Date") {
			return true;
		}

		// check the control configuration.
		return this._checkConfig("datePicker");
	};
	
	/**
	 * Checks whether a configuration exists for the given SmartField. If this is the case the controlType property is a validated.
	 * 
	 * @param {string} sType the value of the type property to be checked against.
	 * @returns {boolean} <code>true</code>, if a configuration exists and the controlType property has the given value, <code>false</code>
	 *          otherwise.
	 * @private
	 */
	ODataControlSelector.prototype._checkConfig = function(sType) {
		var oConfig = this._oParent.getConfiguration();

		if (oConfig) {
			return oConfig.getControlType() === sType;
		}

		return false;
	};
	
	/**
	 * Returns the name of a method to create a control.
	 * 
	 * @param {boolean} bBlockSmartLinkCreation if true, SmartLink will not be created
	 * @returns {string} the name of the factory method to create the control.
	 * @public
	 */
	ODataControlSelector.prototype.getCreator = function(bBlockSmartLinkCreation) {
		var bContextEditable = true, oConfig, mMethods = {
			"Edm.Decimal": "_createEdmNumeric",
			"Edm.Double": "_createEdmNumeric",
			"Edm.Float": "_createEdmNumeric",
			"Edm.Single": "_createEdmNumeric",
			"Edm.Int16": "_createEdmNumeric",
			"Edm.Int32": "_createEdmNumeric",
			"Edm.Int64": "_createEdmNumeric",
			"Edm.Byte": "_createEdmNumeric",
			"Edm.DateTimeOffset": "_createEdmDateTimeOffset",
			"Edm.DateTime": "_createEdmDateTime",
			"Edm.Boolean": "_createEdmBoolean",
			"Edm.String": "_createEdmString",
			"Edm.Time": "_createEdmTime"
		};

		// check for unit of measure being displayed as object status.
		if (this._isUOMDisplayObjectStatus()) {				
			return "_createEdmUOMObjectStatus";
		}
		
		// check for unit of measure being displayed as object number.
		if (this._isUOMDisplay()) {			
			return "_createEdmUOMObjectNumber";
		}
		
		// context editable in smart form is on parent's parent in UOM for unit.
		oConfig = this._oParent.data("configdata");
		
		if (oConfig && oConfig.configdata && oConfig.configdata.isUOM) {
			if (oConfig.configdata.getContextEditable) {
				bContextEditable = oConfig.configdata.getContextEditable();
			}
		}
		
		// check for display mode.
		if (!this._oParent.getEditable() || !this._oParent.getEnabled() || !this._oParent.getContextEditable() || !bContextEditable) {
			if (this._oMetaData.annotations) {
				// check for semantic annotation.
				if (this._oMetaData.annotations.semantic && !bBlockSmartLinkCreation) {
					return "_createEdmSemantic";
				}
				
				if (this._oMetaData.annotations.uom) {			
					return "_createEdmUOMDisplay";
				}
				
				if (this._isObjectStatusProposed()) {
					return "_createObjectStatus";
				}
				
				return (this._oMetaData.property && this._oMetaData.property.property && this._oMetaData.property.property.type === "Edm.Boolean") ? "_createEdmBoolean" : "_createEdmDisplay";
			}
		}

		// check for unit of measure.
		if (this._oMetaData.annotations && this._oMetaData.annotations.uom) {
			return "_createEdmUOM";
		}

		if (this._oMetaData.property && this._oMetaData.property.property) {
			// check by EdmType.
			return mMethods[this._oMetaData.property.property.type] || "_createEdmString";
		}
		
		return null;
	};
	
	/**
	 * Checks whether the complete unit of measure is in display mode.
	 * 
	 * @returns {boolean} <code>true</code>, if the complete unit of measure is in display mode, <code>false</code> otherwise
	 * @private
	 */
	ODataControlSelector.prototype._isUOMDisplay = function() {
		if (this._oMetaData.annotations.uom) {
			if (this._isObjectNumberProposed()) {
				if (!this._oParent.getContextEditable() || (!this._oParent.getEditable() && !this._oParent.getUomEditable()) || (!this._oParent.getEnabled() && !this._oParent.getUomEnabled())) {
					return true;
				}
				
				// check field-control: unit and measure should be read-only!!!!
				if (this._oParent.getUomEditState() === 0) {
					return true;
				}
			}
		}
		
		return false;
	};
	
	/**
	 * Checks whether the complete unit of measure is in display mode and an object status control has to be displayed.
	 * 
	 * @returns {boolean} <code>true</code>, if the complete unit of measure is in display mode and an object status control has to be displayed, <code>false</code> otherwise
	 * @private
	 */
	ODataControlSelector.prototype._isUOMDisplayObjectStatus = function() {
		if (this._oMetaData.annotations.uom) {
			if (this._isObjectStatusProposed()) {
				if (!this._oParent.getContextEditable() || (!this._oParent.getEditable() && !this._oParent.getUomEditable()) || (!this._oParent.getEnabled() && !this._oParent.getUomEnabled())) {
					return true;
				}
				
				// check field-control: unit and measure should be read-only!!!!
				if (this._oParent.getUomEditState() === 0) {
					return true;
				}
			}
		}
		
		return false;
	};
	
	/**
	 * Checks whether an ObjectStatus is proposed.
	 * 
	 * @returns {boolean} <code>true</code>, if ObjectStatus is proposed, <code>false</code> otherwise
	 * @private
	 */	
	ODataControlSelector.prototype._isObjectStatusProposed = function() {
		var oProposal = this._oParent.getControlProposal(), oStatus;

		if (oProposal) {
			oStatus = oProposal.getObjectStatus();
			
			if (oStatus) {
				return true;
			}
		}
		
		return false;
	};
	
	/**
	 * Checks whether the object number control has been proposed.
	 * 
	 * @returns {boolean} <code>true</code>, the object number control has been proposed, <code>false</code> otherwise
	 * @private
	 */
	ODataControlSelector.prototype._isObjectNumberProposed = function() {
		var oProposal;
		
		if (this._oParent.data("suppressUnit") !== "true") {
			oProposal = this._oParent.getControlProposal();
			
			if (oProposal && oProposal.getControlType() === "ObjectNumber") {
				return true;
			}
			
			if (this._oParent.getProposedControl() === "ObjectNumber") {
				return true;
			}
		}
		
		return false;
	};
	
	/**
	 * Checks whether the <code>sap.m.ObjectIdentifier</code> control has to be created.
	 * 
	 * @param {boolean} bDatePicker flag indicating whether a data picker has to be displayed
	 * @param {boolean} bMasked flag indicating whether a masked input field has to be displayed
	 * @returns {boolean} <code>true</code>, if <code>sap.m.ObjectIdentifier</code> control has to be created, <code>false</code> otherwise 
	 * @public
	 */
	ODataControlSelector.prototype.useObjectIdentifier = function(bDatePicker, bMasked) {
		var oProposal;
		
		if (this._oMetaData && this._oMetaData.property && this._oMetaData.property.property && this._oMetaData.property.property.type === "Edm.String") {
			if (!bDatePicker && !bMasked) {
				oProposal = this._oParent.getControlProposal();
				
				if (oProposal && oProposal.getControlType() === "ObjectIdentifier") {
					return true;
				}				
				
				if (this._oParent.getProposedControl() === "ObjectIdentifier") {
					return true;
				}
			}
		}
		
		return false;
	};
	
	/**
	 * Frees all resources claimed during the life-time of this instance.
	 * 
	 * @public
	 */
	ODataControlSelector.prototype.destroy = function() {
		this._oParent = null;
		this._oMetaData = null;
		this._oTypes = null;
	};
	
	return ODataControlSelector;
	
}, /* bExport= */true);
}; // end of sap/ui/comp/smartfield/ODataControlSelector.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.ODataHelper') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

/**
 * Utility class to access OData Meta Data.
 * 
 * @private
 * @name sap.ui.comp.smartfield.ODataHelper
 * @author SAP SE
 * @version 1.36.12
 * @since 1.28.0
 * @param {jquery.sap.global} jQuery a reference to the jQuery implementation.
 * @param {sap.ui.comp.odata.MetadataAnalyser} MData a reference to the meta data analyzer implementation.
 * @param {sap.ui.comp.smartfield.AnnotationHelper} Annotation a reference to the annotation helper implementation.
 * @returns {sap.ui.comp.smartfield.ODataHelper} the new instance.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.ODataHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/ODataHelper",[	"jquery.sap.global", "sap/ui/comp/odata/MetadataAnalyser", "sap/ui/comp/smartfield/AnnotationHelper" ], function(jQuery, MData, Annotation) {
	"use strict";

	/**
	 * @private
	 * @constructor
	 * @param {sap.ui.model.odata.ODataModel} oModel the OData model currently used
	 * @param {sap.ui.comp.smartfield.BindingUtil} oUtil a reference to the binding utility
	 * @param {sap.ui.model.odata.ODataMetaModel} oMetaModel the given OData meta model
	 */
	var ODataHelper = function(oModel, oUtil, oMetaModel) {
		if (oModel) {
			this.oMeta = oModel.getMetaModel();
		}
		
		if (oMetaModel) {
			this.oMeta = oMetaModel;
		}
		
		this._oModel = oModel;
		this._oUtil = oUtil;
		this.oAnnotation = new Annotation();
	};

	/**
	 * Returns a reference to the meta data analyzer and creates it lazily.
	 * 
	 * @param {object} oModel the model instance (optional)
	 * @returns {sap.ui.comp.odata.MetaDataAnalyser} meta data analyzer
	 * @public
	 */
	ODataHelper.prototype.getAnalyzer = function(oModel) {
		if (!this._oAnalyzer) {
			this._oAnalyzer = new MData(this._oModel || oModel);
		}
		
		return this._oAnalyzer;
	};
	
	/**
	 * Checks whether the current path contains a sequence of navigation properties and corrects the current meta data accordingly.
	 * Especially the optional property <code>navigationPath</code> is added to the meta data. 
	 * 
	 * @param {object} oMetaData the meta data used to create the control
	 * @param {object} oMetaData.entitySet the OData entity set definition
	 * @param {object} oMetaData.entityType the OData entity type definition
	 * @param {object} oMetaData.property the OData property definition
	 * @param {string} oMetaData.path the binding path
	 * @param {sap.ui.core.Control} oControl the control
	 * @public
	*/
	ODataHelper.prototype.checkNavigationProperty = function(oMetaData, oControl) {
		var mPaths, sPath, len, oResult;
	
		if (oControl && oMetaData) {
			mPaths = this._oUtil.getNavigationProperties(oControl);
			len = mPaths.paths.length;
					
			while (len--) {
				sPath = mPaths.paths.shift();	
				sPath = this._oUtil.correctPath(sPath);
					
				if (sPath === "" || sPath === oMetaData.entitySet.name) {
					continue;
				}
				
				oResult = this.getNavigationProperty(oMetaData.entityType, sPath);
				
				if (oResult.entitySet) {
					oMetaData.entitySet = oResult.entitySet;
					oMetaData.entityType = oResult.entityType;
				}
			}
		}
	};
	
	/**
	 * Checks whether a path addresses a navigation property and returns the target entity set and entity type, if this is the case.
	 * 
	 * @param {object} oEntityType the OData entity type definition
	 * @param {string} sPath the binding path
	 * @returns {object} the target entity set and entity type.
	 * @public
	 */
	ODataHelper.prototype.getNavigationProperty = function(oEntityType, sPath) {
		var oNavi, oTarget, oResult = {};
		
		oNavi = this._getNamedProperty(sPath, "navigationProperty", oEntityType);
		
		if (oNavi) {
			oTarget = this.oMeta.getODataAssociationSetEnd(oEntityType, oNavi.name);
			oResult.entitySet = this.oMeta.getODataEntitySet(oTarget.entitySet);
			oResult.entityType = this.oMeta.getODataEntityType(oResult.entitySet.entityType);
		}
		
		return oResult;
	};
	
	/**
	 * Checks whether a given paths starts with a navigation property.
	 * 
	 * @param {string} sPath the given path.
	 * @param {object} oMetaData the meta data used to create the control
	 * @param {object} oMetaData.entitySet the OData entity set definition
	 * @param {object} oMetaData.entityType the OData entity type definition
	 * @param {object} oMetaData.property the OData property definition
	 * @param {string} oMetaData.path the binding path
	 * @returns {string} the first navigation property, if the given paths starts with a navigation property, <code>null<code> otherwise
	 * @public
	 */	
	ODataHelper.prototype.startWithNavigationProperty = function(sPath, oMetaData) {
		var aPath = sPath.split("/"), oProperty;
		
		if (aPath && aPath.length > 1) {
			oProperty = this._getNamedProperty(aPath.shift(), "navigationProperty", oMetaData.entityType);
		}
		
		if (oProperty) {
			return oProperty.name;
		}
		
		return null;
	};
	
	/**
	 * Calculates the definition of a property of an entity type.
	 * 
	 * @param {object} oMetaData the meta data used to create the control
	 * @param {object} oMetaData.entitySet the OData entity set definition
	 * @param {object} oMetaData.entityType the OData entity type definition
	 * @param {object} oMetaData.property the OData property definition
	 * @param {string} oMetaData.path the binding path
	 * @public
	 */
	ODataHelper.prototype.getProperty = function(oMetaData) {
		var aNavigation = [], len, aProp, oProp, sPart, sPath, oResult = {
			entityType: oMetaData.entityType,
			entitySet: oMetaData.entitySet
		};

		if (oMetaData) {
			aProp = oMetaData.path.split("/");
			len = aProp.length;

			// check for navigation properties.
			if (len > 1) {
				while (oResult.entityType) {
					sPart = aProp[0];
					oResult = this.getNavigationProperty(oResult.entityType, sPart);

					if (oResult.entityType) {
						oMetaData.entityType = oResult.entityType;
						oMetaData.entitySet = oResult.entitySet;
						aNavigation.push(aProp.shift());
						len--;
					}
				}
			}

			// add navigation path
			oMetaData.navigationPath = aNavigation.join("/");
			
			// property can be complex.
			if (len > 1) {
				oProp = this.oMeta.getODataProperty(oMetaData.entityType, aProp[0]);
				
				// property name may be invalid: check for existing prop to avoid exceptions
				if (oProp) {
					oMetaData.property = this._getComplex(oProp, aProp, len);
				}
				
				return;
			}

			// simple property (can be with and without navigation path)
			if (oMetaData.navigationPath) {
				sPath = oMetaData.path.replace(oMetaData.navigationPath + "/", "");
			} else {
				sPath = oMetaData.path;
			}
			
			oProp = this.oMeta.getODataProperty(oMetaData.entityType, sPath);
			oMetaData.property = {
				property: oProp,
				typePath: oMetaData.path
			};
		}
	};

	/**
	 * Returns a complex property.
	 * 
	 * @param {object} oProperty the object
	 * @param {array} aProp the path to the OData property
	 * @param {integer} iLen the length of the path to the OData property
	 * @returns {object} the complex property
	 * @private
	 */
	ODataHelper.prototype._getComplex = function(oProperty, aProp, iLen) {
		var oObject = oProperty, sTypePath, aComplex = [];

		while (iLen--) {
			if (oObject) {
				if (iLen === 0) {
					sTypePath = oObject.name;
					oObject = this._getNamedProperty(aProp[0], "property", oObject);

					return {
						typePath: sTypePath + "/" + aProp[0],
						property: oObject,
						complex: true,
						parents: aComplex
					};
				}

				oObject = this.oMeta.getODataComplexType(oObject.type);
				
				if (oObject) {
					aComplex.push(oObject);
				}
			}

			aProp.shift();
		}
	};

	/**
	 * Returns a named property.
	 * 
	 * @param {string} sName the name
	 * @param {string} sArray the name of the array to scan for the property
	 * @param {object} oProperty the object
	 * @returns {object} the named property, can be <code>null</code>
	 * @private
	 */
	ODataHelper.prototype._getNamedProperty = function(sName, sArray, oProperty) {
		var oResult;

		jQuery.each(oProperty[sArray] || [], function(i, oEntity) {
			if (oEntity.name === sName) {
				oResult = oEntity;
				return false;
			}
		});
		
		return oResult;
	};
	
	/**
	 * Checks whether an OData property has a <code>text</code> annotation and adds it to the available meta data.
	 * 
	 * @param {object} oMetaDataIn the meta data used to create the control
	 * @param {object} oMetaDataIn.entitySet the OData entity set definition
	 * @param {object} oMetaDataIn.entityType the OData entity type definition
	 * @param {object} oMetaDataIn.property the OData property definition
	 * @param {string} oMetaDataIn.path the binding path
	 * @returns {object} the OData property representing the text annotation, if no text annotation is encountered, <code>null</code> is returned
	 * @public
	 */
	ODataHelper.prototype.getTextProperty2 = function(oMetaDataIn) {
		var sAnnotation, oMetaData;
		
		sAnnotation = this.oAnnotation.getText(oMetaDataIn.property.property);
		
		if (sAnnotation) {	
			oMetaData = this._preprocAnnotation(sAnnotation, oMetaDataIn);
			this.getProperty(oMetaData);
			this._postprocAnnotation(oMetaData, oMetaDataIn);
		}
		
		return oMetaData;
	};
	
	/**
	 * Checks whether an OData property represents semantically a unit of measure, e.g. a currency, and returns its definition, if the property
	 * represents a unit of measure.
	 * 
	 * @param {object} oMetaDataIn the meta data available
	 * @param {object} oMetaDataIn.entitySet the name of the OData entity set
	 * @param {object} oMetaDataIn.entityType the name of the OData entity type
	 * @returns {object} the OData property representing the unit, if no unit of measure is encountered, <code>null</code> is returned
	 * @public
	 */
	ODataHelper.prototype.getUnitOfMeasure2 = function(oMetaDataIn) {
		var sAnnotation, oMetaData;
		
		sAnnotation = this.oAnnotation.getUnit(oMetaDataIn.property.property);
		
		if (sAnnotation) {	
			oMetaData = this._preprocAnnotation(sAnnotation, oMetaDataIn);
			this.getProperty(oMetaData);
			this._postprocAnnotation(oMetaData, oMetaDataIn);
		}
		
		return oMetaData;
	};
	
	/**
	 * Pre-processes an annotation.
	 *
	 * @param {string} sAnnotation the given annotation
	 * @param {object} oMetaDataIn the meta data available
	 * @param {object} oMetaDataIn.entitySet the name of the OData entity set
	 * @param {object} oMetaDataIn.entityType the name of the OData entity type
	 * @returns {object} the meta data representing the annotation
	 * @private
	 */
	ODataHelper.prototype._preprocAnnotation = function(sAnnotation, oMetaDataIn) {
		var sPath, oMetaData;
		
		// annotation can contain navigation properties: so get the entity type and set
		// additionally the navigation properties are exposed as "navigation path".
		oMetaData = this.traverseNavigationProperties(sAnnotation, oMetaDataIn.entityType);
		
		// set the entity set, if it is not returned from the traversal.
		if (!oMetaData.navigationPath) {
			oMetaData.entitySet = oMetaDataIn.entitySet;
		}
		
		// get the path identifying the property: it may contain complex types,
		// but we know the navigation properties.
		if (oMetaDataIn.navigationPath) {
			oMetaData.path = oMetaDataIn.path.replace(oMetaDataIn.navigationPath + "/", "");
		} else {
			oMetaData.path = oMetaDataIn.path;
		}
		
		if (oMetaData.navigationPath) {
			sPath = sAnnotation.replace(oMetaData.navigationPath + "/", "");
		} else {
			sPath = sAnnotation;
		}
		
		oMetaData.path = oMetaData.path.replace(oMetaDataIn.property.property.name, sPath);	
		
		// make sure navigation path does not get lost, if after this method get property is invoked.
		if (oMetaData.navigationPath) {
			oMetaData.navigationPathHelp = oMetaData.navigationPath;
		}
		
		return oMetaData;
	};	
	
	/**
	 * Post-processes an annotation.
	 * 
	 * @param {object} oMetaData the new meta data
	 * @param {object} oMetaData.entitySet the name of the OData entity set
	 * @param {object} oMetaData.entityType the name of the OData entity type
	 * @param {object} oMetaDataIn the meta data available
	 * @param {object} oMetaDataIn.entitySet the name of the OData entity set
	 * @param {object} oMetaDataIn.entityType the name of the OData entity type
	 * @private
	 */
	ODataHelper.prototype._postprocAnnotation = function(oMetaData, oMetaDataIn) {
		var sPath;
		
		// make sure navigation path does not get lost, if after this method get property is invoked.
		if (oMetaData.navigationPathHelp) {
			oMetaData.navigationPath = oMetaData.navigationPathHelp;
		}
		
		// now complete the navigation path of the new meta data.
		if (oMetaData.navigationPath) {
			sPath = oMetaData.navigationPath;
		} else {
			sPath = "";
		}
		
		if (oMetaDataIn.navigationPath) {
			if (sPath) {
				sPath = oMetaDataIn.navigationPath + "/" + sPath;
			} else {
				sPath = oMetaDataIn.navigationPath;
			}
		}
		
		oMetaData.navigationPath = sPath;
		
		// now correct the path of the new meta data, if necessary.
		if (oMetaData.navigationPath) {
			oMetaData.path = oMetaData.navigationPath + "/" + oMetaData.path;
		}
	};
	
	/**
	 * Traverses the navigation properties contained in a path.
	 * 
	 * @param {string} sPath the given path
	 * @param {object} oEntityType the given entity type.
	 * @returns {object} the target entity set and entity type of the navigation properties
	 * @public
	 */
	ODataHelper.prototype.traverseNavigationProperties = function(sPath, oEntityType) {
		var oResult = {}, oResult1 = {}, aPath, sPart, len;
		
		aPath = sPath.split("/");
		len = aPath.length;
		oResult.entityType = oEntityType;
		oResult1.entityType = oEntityType;
		
		while (len--) {
			sPart = aPath.shift();	
			
			if (sPart === "") {
				continue;
			}
			
			oResult1 = this.getNavigationProperty(oResult.entityType, sPart);
			
			if (!oResult1.entitySet) {
				break;
			}
			
			oResult.entityType = oResult1.entityType;
			oResult.entitySet = oResult1.entitySet;
			
			if (oResult.navigationPath) {
				oResult.navigationPath = oResult.navigationPath + "/" + sPart;
			} else {
				oResult.navigationPath = sPart;
			}
		}

		return oResult;
	};
	
	/**
	 * Calculates the value list annotation for the given property.
	 * 
	 * @param {object} oMetaData the meta data available
	 * @param {object} oMetaData.entitySet the name of the OData entity set
	 * @param {object} oMetaData.entityType the name of the OData entity type
	 * @param {object} oMetaData.property the name of the OData property
	 * @param {string} oMetaData.model the name of the model
	 * @param {string} oMetaData.path the path identifying the OData property
	 * @param {object} oMetaData.annotations the current annotations
	 * @returns {object} the value list annotation or <code>null</code>
	 * @public
	 */
	ODataHelper.prototype.getValueListAnnotationPath = function(oMetaData) {
		var sPath, len;

		if (oMetaData.property.complex) {
			len = oMetaData.property.parents.length - 1;
			sPath = oMetaData.property.parents[len].namespace;
			sPath = sPath + "." +  oMetaData.property.typePath;
		} else {
			sPath = oMetaData.entitySet.entityType + "/" + oMetaData.property.property.name;
		}
		
		return sPath;
	};
	
	/**
	 * Calculates the value list annotation for the given property, if it represents a unit of measure, and adds it to the meta data as
	 * <code>valuelistuom</code> in the annotations.
	 * 
	 * @param {object} oMetaData the meta data used to initialize the factory
	 * @param {object} oMetaData.entitySet the name of the OData entity set
	 * @param {object} oMetaData.entityType the name of the OData entity type
	 * @param {object} oMetaData.property the name of the OData property
	 * @param {string} oMetaData.model the name of the model
	 * @param {string} oMetaData.path the path identifying the OData property
	 * @param {object} oMetaData.annotations the current annotations
	 * @public
	 */
	ODataHelper.prototype.getUOMValueListAnnotationPath = function(oMetaData) {
		var sPath;

		if (oMetaData.annotations.uom) {
			sPath = this.getValueListAnnotationPath(oMetaData.annotations.uom);			
		}

		if (sPath) {
			oMetaData.annotations.valuelistuom = sPath;
		}
	};
	
	/**
	 * Calculates a possibly existing text annotation for the unit in a unit of measure field and add it, if it exists.
	 * 
	 * @param {object} oMetaData the meta data used to initialize the factory
	 * @param {object} oMetaData.entitySet the name of the OData entity set
	 * @param {object} oMetaData.entityType the name of the OData entity type
	 * @param {object} oMetaData.property the name of the OData property
	 * @param {string} oMetaData.model the name of the model
	 * @param {string} oMetaData.path the path identifying the OData property
	 * @param {object} oMetaData.annotations the current annotations
	 * @public
	 */
	ODataHelper.prototype.getUOMTextAnnotation = function(oMetaData) {
		if (oMetaData && oMetaData.annotations && oMetaData.annotations.uom) {			
			oMetaData.annotations.textuom = this.getTextProperty2(oMetaData.annotations.uom);
		}
	};
	
	/**
	 * Calculates the entity set a value list annotation for the given property points to and adds it to the meta data as
	 * <code>valuelistentityset</code> in the annotations.
	 * 
	 * @param {object} oMetaData the meta data used to initialize the factory
	 * @param {object} oMetaData.entitySet the name of the OData entity set
	 * @param {object} oMetaData.entityType the name of the OData entity type
	 * @param {object} oMetaData.property the name of the OData property
	 * @param {string} oMetaData.model the name of the model
	 * @param {string} oMetaData.path the path identifying the OData property
	 * @param {object} oMetaData.annotations the current annotations
	 * @public
	 */
	ODataHelper.prototype.geValueListEntitySet = function(oMetaData) {
		if (oMetaData && oMetaData.annotations && oMetaData.annotations.valuelist) {
			if (oMetaData.annotations.valuelist.primaryValueListAnnotation && oMetaData.annotations.valuelist.primaryValueListAnnotation.valueListEntitySetName) {
				oMetaData.annotations.valuelistentityset = this.oMeta.getODataEntitySet(oMetaData.annotations.valuelist.primaryValueListAnnotation.valueListEntitySetName);
			} 
		}	
	};
	
	/**
	 * Adds the value list data to the given meta data.
	 * 
	 * @param {object} oMetaData the meta data used to initialize the factory
	 * @param {object} oMetaData.entitySet the name of the OData entity set
	 * @param {object} oMetaData.entityType the name of the OData entity type
	 * @param {object} oMetaData.property the name of the OData property
	 * @param {string} oMetaData.model the name of the model
	 * @param {string} oMetaData.path the path identifying the OData property
	 * @param {object} oMetaData.annotations the current annotations
	 * @public
	 */
	ODataHelper.prototype.getValueListData = function(oMetaData) {
		if (oMetaData.property.property["sap:value-list"] || oMetaData.property.property["com.sap.vocabularies.Common.v1.ValueList"]) {
			oMetaData.annotations.valuelist = this.getValueListAnnotationPath(oMetaData);
			
			if (oMetaData.property.property["sap:value-list"]) {
				oMetaData.annotations.valuelistType = oMetaData.property.property["sap:value-list"];
			} else {
				oMetaData.annotations.valuelistType = this.getAnalyzer().getValueListSemantics(oMetaData.property.property["com.sap.vocabularies.Common.v1.ValueList"]);
			}
		}		
	};
	
	/**
	 * Calculates the binding path for the <code>text</code> property for the display use case. If a text annotation exists, it is considered,
	 * otherwise the binding path addresses the property.
	 *
	 * @param {object} oMetaData the meta data used to initialize the factory
	 * @param {object} oMetaData.entitySet the name of the OData entity set
	 * @param {object} oMetaData.entityType the name of the OData entity type
	 * @param {object} oMetaData.property the name of the OData property
	 * @param {string} oMetaData.model the name of the model
	 * @param {string} oMetaData.path the path identifying the OData property
	 * @param {object} oMetaData.annotations the current annotations
	 * @returns {string} the binding path
	 * @public
	 */
	ODataHelper.prototype.getEdmDisplayPath = function(oMetaData) {
		if (oMetaData.annotations.text) {
			return oMetaData.annotations.text.path;
		}

		return oMetaData.path;
	};

	/**
	 * Calculates the binding path for the Unit of Measure.
	 * 
	 * @param {object} oMetaData the meta data used to initialize the factory
	 * @param {object} oMetaData.entitySet the name of the OData entity set
	 * @param {object} oMetaData.entityType the name of the OData entity type
	 * @param {object} oMetaData.property the name of the OData property
	 * @param {string} oMetaData.model the name of the model.
	 * @param {string} oMetaData.path the path identifying the OData property
	 * @param {object} oMetaData.annotations the current annotations
	 * @returns {string} the binding path for the Unit of Measure text, which can be <code>null</code>
	 * @public
	 */
	ODataHelper.prototype.getUOMPath = function(oMetaData) {
		if (oMetaData && oMetaData.annotations && oMetaData.annotations.uom) {
			return oMetaData.annotations.uom.path;
		}
		
		return null;
	};

	/**
	 * Calculates the type path for the Unit of Measure.
	 * 
	 * @param {object} oMetaData the meta data used to initialize the factory
	 * @param {object} oMetaData.entitySet the name of the OData entity set
	 * @param {object} oMetaData.entityType the name of the OData entity type
	 * @param {object} oMetaData.property the name of the OData property
	 * @param {string} oMetaData.model the name of the model
	 * @param {string} oMetaData.path the path identifying the OData property
	 * @param {object} oMetaData.annotations the current annotations
	 * @returns {string} the binding path for the Unit of Measure text, which can be <code>null</code>
	 * @public
	 */
	ODataHelper.prototype.getUOMTypePath = function(oMetaData) {
		if (oMetaData.property.complex) {
			return oMetaData.property.typePath.replace(oMetaData.property.property.name, oMetaData.annotations.uom.property.name);
		}
		
		return oMetaData.annotations.uom.property.name;
	};
	
	/**
	 * Returns an event handler for the change event in unit of measure use cases.
	 * 
	 * @param {sap.ui.core.Control} oControl the control which propagates the event
	 * @param {boolean} bUnit flag indicating whether the measure or the unit is affected by the change
	 * @returns {function} handler for the change event in unit of measure use cases.
	 * @public
	 */
	ODataHelper.prototype.getUOMChangeHandler = function(oControl, bUnit) {
		return function(oParam) {
			try {
				oControl.fireChange({
					value: oParam.mParameters.value,
					newValue: oParam.mParameters.value,
					unitChanged: bUnit,
					validated: oParam.mParameters["validated"]
				});
			} catch (ex) {
				jQuery.sap.log.warning(ex);
			}
		};
	};
	
	/**
	 * Returns an event handler for the selection change event.
	 * 
	 * @param {sap.ui.core.Control} oControl the control which propagates the event
	 * @returns {function} handler for the selection change event
	 * @public
	 */
	ODataHelper.prototype.getSelectionChangeHandler = function(oControl) {
		return function(oParam) {
			var oKey, oItem;

			try {
				oItem = oParam.getParameter("selectedItem");

				if (oItem && oItem.getKey) {
					oKey = oItem.getKey();
				}

				oControl.fireChange({
					value: oKey,
					newValue: oKey
				});
			} catch (ex) {
				jQuery.sap.log.warning(ex);
			}
		};
	};
	
	/**
	 * Frees all resources claimed during the life-time of this instance.
	 * 
	 * @public
	 */
	ODataHelper.prototype.destroy = function() {
		if (this._oAnalyzer) {
			this._oAnalyzer.destroy();
		}
		
		if (this.oAnnotation) {
			this.oAnnotation.destroy();
		}
		
		this._oUtil = null;
		this.oMeta = null;
		this.oAnalyzer = null;
		this.oAnnotation = null;
	};

	return ODataHelper;
}, true);

}; // end of sap/ui/comp/smartfield/ODataHelper.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.SideEffectUtil') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartfield.SideEffectUtil'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/SideEffectUtil",[	"jquery.sap.global", "sap/ui/comp/odata/SideEffects" ], function(jQuery, SideEffects) {
	"use strict";

	/**
	 * Creates a new instance.
	 * 
	 * @private
	 * @class
	 * @classdesc Analyzes OData Side-Effects annotation in the SmartField.
	 * @author SAP SE
	 * @experimental to be productized soon
	 * @version 1.36.12
	 * @since 1.31.0
	 * @alias sap.ui.comp.odata.SideEffects
	 * @param {sap.ui.core.Control} oParent the parent control
	 */
	var SideEffectUtil = function(oParent) {
		this._oParent = oParent;
		this._oSideEffects = new SideEffects();
	};
	
	/**
	 * Calculates the field group IDs according to the side effects annotation.
	 * 
	 * @param {object} oMetaData the meta data used to create the control
	 * @param {object} oMetaData.entitySet the OData entity set definition
	 * @param {object} oMetaData.entityType the OData entity type definition
	 * @param {object} oMetaData.property the OData property definition
	 * @param {string} oMetaData.path the binding path
	 * @param {sap.ui.core.mvc.View} oView the current view
	 * @returns {array} the IDs of the field groups
	 * @public
	 */
	SideEffectUtil.prototype.getFieldGroupIDs = function(oMetaData, oView) {
		var oMeta, oComplex, sTypePath, mSideEffects;
		
		if (oMetaData.property && oMetaData.property.complex) {
			oComplex = oMetaData.property.parents[0];
			sTypePath = this._toTypePath(oMetaData.path, oComplex);
		}
		
		oMeta = {
			entitySet: oMetaData.entitySet,
			entityType: oMetaData.entityType,
			complexType: oComplex
		};
	 
		mSideEffects = this._oSideEffects.getSideEffects(oMetaData.path, sTypePath, oMeta);	
		return this._calcFieldGroups(mSideEffects, oMetaData, oView);
	};
	
	/**
	 * Calculates the field group definitions and returns the IDs of the field group.
	 * 
	 * @param {map} mSideEffects the given side effects
	 * @param {object} oMetaData the meta data used to create the control
	 * @param {object} oMetaData.entitySet the OData entity set definition
	 * @param {object} oMetaData.entityType the OData entity type definition
	 * @param {object} oMetaData.property the OData property definition
	 * @param {string} oMetaData.path the binding path
	 * @param {sap.ui.core.mvc.View} oView the current view
	 * @returns {array} the field group IDs
	 * @private
	 */
	SideEffectUtil.prototype._calcFieldGroups = function(mSideEffects, oMetaData, oView) {
		var sContextPath, aSideEffects, i, len, aGroupIDs = [];
		
		aSideEffects = this._getSideEffects(mSideEffects, oMetaData, oView);
		len = aSideEffects.length;
		sContextPath = this._oParent.getBindingContext().getPath();
		
		for (i = 0; i < len; i++) {
			this._calcFieldGroups2(aSideEffects[i], aGroupIDs, oView, sContextPath);
		}
		
		return aGroupIDs.length > 0 ? aGroupIDs : null;
	};

	/**
	 * Calculates the field group definitions and returns the IDs of the field group for side effects 
	 * that have been collected for entity set, entity type or complex type.
	 * 
	 * @param {map} oSideEffects the given side effects
	 * @param {array} aGroupIDs all available field group IDs
	 * @param {sap.ui.core.mvc.View} oView the current view
	 * @param {string} sContextPath the given binding context path
	 * @private
	 */
	SideEffectUtil.prototype._calcFieldGroups2 = function(oSideEffects, aGroupIDs, oView, sContextPath) {
		var sUUID, sID, oID, that = this;
		
		oSideEffects.sideEffects.forEach(function(oItem) {
			oID = {
				name: oItem.name,
				originType: oItem.originType,
				originName: oSideEffects.origin.name,
				originNamespace: oSideEffects.origin.namespace,
				context: sContextPath
			};
				
			sID = JSON.stringify(oID); 
			sID = sID.substring(1, sID.length - 2); //remove "{ ... }" because sID will be set to a property, where the JSON curly bracket { will be interpreted as binding...
			sUUID = oView.data(sID);
			
			if (!sUUID) {
				sUUID = that.createUUID();
				oView.data(sUUID, oID);
				oView.data(sID, sUUID);				
			}
				
			aGroupIDs.push(sUUID);
		});
	};
	
	/**
	 * Returns side effects.
	 * 
	 * @param {map} mSideEffects the given side effects
	 * @param {object} oMetaData the meta data used to create the control
	 * @param {object} oMetaData.entitySet the OData entity set definition
	 * @param {object} oMetaData.entityType the OData entity type definition
	 * @param {object} oMetaData.property the OData property definition
	 * @param {string} oMetaData.path the binding path
	 * @returns {array} the side effects
	 * @private
	 */
	SideEffectUtil.prototype._getSideEffects = function(mSideEffects, oMetaData) {
		var oResult, aResult = [];
		
		// check entity set
		oResult = {};
		oResult.sideEffects = this._getSideEffectsFromEntity("entitySet", mSideEffects);
		
		if (oResult.sideEffects && oResult.sideEffects.length) {
			oResult.origin = oMetaData.entitySet;
			aResult.push(oResult);
		}
		
		// check entity type
		oResult = {};
		oResult.sideEffects = this._getSideEffectsFromEntity("entityType", mSideEffects);
			
		if (oResult.sideEffects && oResult.sideEffects.length) {
			oResult.origin = oMetaData.entityType;
			aResult.push(oResult);
		}
		
		// check complex type
		oResult = {};
		oResult.sideEffects = this._getSideEffectsFromEntity("complexType", mSideEffects);
			
		if (oResult.sideEffects && oResult.sideEffects.length) {
			oResult.origin = oMetaData.property.parents[0];
			aResult.push(oResult);
		}
		
		return aResult;
	};

	/**
	 * Returns the side effect in the map.
	 * 
	 * @param {string} sName the name of the map
	 * @param {map} mSideEffects the given side effects
	 * @returns {array} the side effects in the map
	 * @private
	 */
	SideEffectUtil.prototype._getSideEffectsFromEntity = function(sName, mSideEffects) {
		var n, aSideEffects = [];
		
		if (mSideEffects[sName]) {
			for (n in mSideEffects[sName]) {
				aSideEffects.push({
					name: n,
					originType: sName,
					sideEffect: mSideEffects[sName][n]
				});
			}
		}
		
		return aSideEffects;
	};
	
	/**
	 * Converts a given path to the type path.
	 * 
	 * @param {string} sPath the given path
	 * @param {object} oComplexType the given complex type
	 * @returns {string} the type path.
	 * @private
	 */
	SideEffectUtil.prototype._toTypePath = function(sPath, oComplexType) {
		var aProp = sPath.split("/");		
		return sPath.replace(aProp[0], oComplexType.name);
	};
	
	/**
	 * Creates a new UUID.
	 * 
	 * @returns {string} the new UUID.
	 * @public
	 */
	SideEffectUtil.prototype.createUUID = function() {
		var d = new Date().getTime();
		var uuid = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx".replace(/[x]/g, function(c) {
			var r = (d + Math.random() * 16) % 16 | 0;
			d = Math.floor(d / 16);
			return (c === "x" ? r : (r & 0x7 | 0x8)).toString(16);
		});
		return uuid;	
	};
	
	/**
	 * Frees all resources claimed during the life-time of this instance.
	 * 
	 * @public
	 */
	SideEffectUtil.prototype.destroy = function() {
		if (this._oSideEffects) {
			this._oSideEffects.destroy();
		}
		
		this._oSideEffects = null;
	};
	
	return SideEffectUtil;

}, true);
}; // end of sap/ui/comp/smartfield/SideEffectUtil.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.type.AbapBool') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.comp.smartfield.type.AbapBool'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FormatException'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.ParseException'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.SimpleType'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/type/AbapBool",[	"jquery.sap.global", "sap/ui/model/FormatException", "sap/ui/model/ParseException", "sap/ui/model/SimpleType" ], function(jQuery, FormatException, ParseException, SimpleType) {
	"use strict";

	/**
	 * Constructor for an ABAP Boolean type.
	 * 
	 * @private
	 * @class 
	 * @classdesc
	 * ABAP Boolean data type.
	 * @author SAP SE
	 * @version 1.36.12
	 * @since 1.28.0
	 * @alias sap.ui.comp.smartfield.type.AbapBool
	 * @extends sap.ui.model.type.SimpleType
	 */
	var AbapBool = SimpleType.extend("sap.ui.comp.smartfield.type.AbapBool", {
		constructor: function() {
			SimpleType.apply(this, arguments);
			this.sName = "sap.ui.comp.smartfield.type.AbapBool";
		}
	});

	/**
	 * Formats the given boolean value to the given target type.
	 * 
	 * @param {boolean} bValue the value to be formatted
	 * @param {string} sTargetType the target type; may be "any" or "boolean".
	 * @returns {boolean} the formatted output value in the target type; <code>undefined</code> or <code>null</code> are formatted to
	 *          <code>null</code>
	 * @throws {sap.ui.model.FormatException} if <code>sTargetType</code> is unsupported.
	 * @public
	 */
	AbapBool.prototype.formatValue = function(bValue, sTargetType) {
		if (bValue === undefined || bValue === null) {
			return null;
		}

		switch (sTargetType) {
			case "boolean":
			case "any":
				return bValue === "X";
			default:
				throw new FormatException("Don't know how to format Boolean to " + sTargetType);
		}
	};

	/**
	 * Parses the given value from the given type to a boolean.
	 * 
	 * @param {boolean} oValue the value to be parsed.
	 * @param {string} sSourceType the source type, may be "boolean".
	 * @returns {boolean} the parsed value.
	 * @throws {sap.ui.model.ParseException} if <code>sSourceType</code> is unsupported or if the given string is neither "X" nor "".
	 * @public
	 */
	AbapBool.prototype.parseValue = function(oValue, sSourceType) {
		switch (sSourceType) {
			case "boolean":
				return (oValue === true) ? "X" : "";
			default:
				throw new ParseException("Don't know how to parse Boolean from " + sSourceType);
		}
	};

	/**
	 * Validates whether the given value in model representation is valid and meets the given constraints.
	 * 
	 * @param {boolean} sValue the value to be validated.
	 * @throws {sap.ui.model.ValidateException} if the value is not valid
	 * @public
	 */
	AbapBool.prototype.validateValue = function(sValue) {
		if (sValue !== null && sValue !== undefined) {
			if (sValue !== "X" && sValue !== "") {
				throw new ParseException("Invalid Boolean " + sValue);
			}
		}
	};

	return AbapBool;

}, /* bExport= */true);

}; // end of sap/ui/comp/smartfield/type/AbapBool.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.type.DateTime') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

/**
 * Date Time data type that supports field-control.
 * 
 * @private
 * @name sap.ui.comp.smartfield.type.DateTime
 * @author SAP SE
 * @version 1.36.12
 * @since 1.28.0
 * @extends sap.ui.model.odata.type.DateTime
 * @param {sap.ui.model.odata.type.DateTime} DateTimeBase a reference to the date time implementation.
 * @returns {sap.ui.comp.smartfield.type.DateTime} the date time implementation.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.type.DateTime'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.odata.type.DateTime'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/type/DateTime",[	"sap/ui/model/odata/type/DateTime" ], function(DateTimeBase) {
	"use strict";

	/**
	 * Constructor for a primitive type <code>Edm.DateTime</code>.
	 * 
	 * @param {object} oFormatOptions format options.
	 * @param {object} oConstraints constraints.
	 * @private
	 */
	var DateTime = DateTimeBase.extend("sap.ui.comp.smartfield.type.DateTime", {
		constructor: function(oFormatOptions, oConstraints) {
			DateTimeBase.apply(this, [
				oFormatOptions, oConstraints
			]);
			this.oFieldControl = null;
		}
	});

	/**
	 * Parses the given value to JavaScript <code>Date</code>.
	 * 
	 * @param {string} sValue the value to be parsed; the empty string and <code>null</code> will be parsed to <code>null</code>
	 * @param {string} sSourceType the source type (the expected type of <code>sValue</code>); must be "string".
	 * @returns {Date} the parsed value
	 * @throws {sap.ui.model.ParseException} if <code>sSourceType</code> is unsupported or if the given string cannot be parsed to a Date
	 * @public
	 */
	DateTime.prototype.parseValue = function(sValue, sSourceType) {
		var oReturn = DateTimeBase.prototype.parseValue.apply(this, [ sValue, sSourceType ]);
		this.oFieldControl(sValue, sSourceType);
		return oReturn;
	};
	
	/**
	 * Returns the type's name.
	 * 
	 * @returns {string} the type's name
	 * @public
	 */
	DateTime.prototype.getName = function() {
		return "sap.ui.comp.smartfield.type.DateTime";
	};

	return DateTime;
});

}; // end of sap/ui/comp/smartfield/type/DateTime.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.type.DateTimeOffset') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

/**
 * Date Time Offset data type that supports field-control.
 * 
 * @private
 * @name sap.ui.comp.smartfield.type.DateTimeOffset
 * @author SAP SE
 * @version 1.36.12
 * @since 1.28.0
 * @extends sap.ui.model.odata.type.DateTimeOffset
 * @param {sap.ui.model.odata.type.DateTimeOffset} DateTimeBase a reference to the date time implementation.
 * @returns {sap.ui.comp.smartfield.type.DateTimeOffset} the date time implementation.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.type.DateTimeOffset'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.odata.type.DateTimeOffset'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/type/DateTimeOffset",[	"sap/ui/model/odata/type/DateTimeOffset" ], function(DateTimeBase) {
	"use strict";

	/**
	 * Constructor for a primitive type <code>Edm.DateTimeOffset</code>.
	 * 
	 * @param {object} oFormatOptions format options.
	 * @param {object} oConstraints constraints.
	 * @private
	 */
	var DateTimeOffset = DateTimeBase.extend("sap.ui.comp.smartfield.type.DateTimeOffset", {
		constructor: function(oFormatOptions, oConstraints) {
			DateTimeBase.apply(this, [
				oFormatOptions, oConstraints
			]);
			this.oFieldControl = null;
		}
	});

	/**
	 * Parses the given value to JavaScript <code>Date</code>.
	 * 
	 * @param {string} sValue the value to be parsed; the empty string and <code>null</code> will be parsed to <code>null</code>
	 * @param {string} sSourceType the source type (the expected type of <code>sValue</code>); must be "string".
	 * @returns {Date} the parsed value
	 * @throws {sap.ui.model.ParseException} if <code>sSourceType</code> is unsupported or if the given string cannot be parsed to a Date
	 * @public
	 */
	DateTimeOffset.prototype.parseValue = function(sValue, sSourceType) {
		var oReturn = DateTimeBase.prototype.parseValue.apply(this, [ sValue, sSourceType ]);
		this.oFieldControl(sValue, sSourceType);
		return oReturn;
	};
	
	/**
	 * Returns the type's name.
	 * 
	 * @returns {string} the type's name
	 * @public
	 */
	DateTimeOffset.prototype.getName = function() {
		return "sap.ui.comp.smartfield.type.DateTimeOffset";
	};

	return DateTimeOffset;
});

}; // end of sap/ui/comp/smartfield/type/DateTimeOffset.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.type.Decimal') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

/**
 * Decimal data type that supports field-control.
 * 
 * @private
 * @name sap.ui.comp.smartfield.type.Decimal
 * @author SAP SE
 * @version 1.36.12
 * @since 1.28.0
 * @extends sap.ui.model.odata.type.Decimal
 * @param {sap.ui.model.odata.type.Decimal} DecimalBase a reference to the decimal implementation.
 * @returns {sap.ui.comp.smartfield.type.Decimal} the decimal implementation.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.type.Decimal'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.odata.type.Decimal'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/type/Decimal",[	"sap/ui/model/odata/type/Decimal" ], function(DecimalBase) {
	"use strict";

	/**
	 * Constructor for a primitive type <code>Edm.Decimal</code>.
	 * 
	 * @param {object} oFormatOptions format options.
	 * @param {object} oConstraints constraints.
	 * @private
	 */
	var DecimalType = DecimalBase.extend("sap.ui.comp.smartfield.type.Decimal", {
		constructor: function(oFormatOptions, oConstraints) {
			DecimalBase.apply(this, [
				oFormatOptions, oConstraints
			]);
			this.oFieldControl = null;
		}
	});

	/**
	 * Parses the given value to JavaScript <code>decimal</code>.
	 * 
	 * @param {string} sValue the value to be parsed; the empty string and <code>null</code> will be parsed to <code>null</code>
	 * @param {string} sSourceType the source type (the expected type of <code>sValue</code>); must be "string".
	 * @returns {decimal} the parsed value
	 * @throws {sap.ui.model.ParseException} if <code>sSourceType</code> is unsupported or if the given string cannot be parsed to a Date
	 * @public
	 */
	DecimalType.prototype.parseValue = function(sValue, sSourceType) {
		var oReturn = DecimalBase.prototype.parseValue.apply(this, [ sValue, sSourceType ]);
		this.oFieldControl(sValue, sSourceType);
		return oReturn;
	};
	
	/**
	 * Returns the type's name.
	 * 
	 * @returns {string} the type's name
	 * @public
	 */
	DecimalType.prototype.getName = function() {
		return "sap.ui.comp.smartfield.type.Decimal";
	};

	return DecimalType;
});

}; // end of sap/ui/comp/smartfield/type/Decimal.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.type.Int16') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

/**
 * 16 byte integer data type that supports field-control.
 * 
 * @private
 * @name sap.ui.comp.smartfield.type.Int16
 * @author SAP SE
 * @version 1.36.12
 * @since 1.28.0
 * @extends sap.ui.model.odata.type.Int16
 * @param {sap.ui.model.odata.type.Int16} IntBase a reference to the integer implementation.
 * @returns {sap.ui.comp.smartfield.type.Int16} the integer implementation.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.type.Int16'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.odata.type.Int16'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/type/Int16",[	"sap/ui/model/odata/type/Int16" ], function(IntBase) {
	"use strict";

	/**
	 * Constructor for a primitive type <code>Edm.Int16</code>.
	 * 
	 * @param {object} oFormatOptions format options.
	 * @param {object} oConstraints constraints.
	 * @private
	 */
	var Int16Type = IntBase.extend("sap.ui.comp.smartfield.type.Int16", {
		constructor: function(oFormatOptions, oConstraints) {
			IntBase.apply(this, [
				oFormatOptions, oConstraints
			]);
			this.oFieldControl = null;
		}
	});

	/**
	 * Parses the given value to JavaScript <code>integer</code>.
	 * 
	 * @param {string} sValue the value to be parsed; the empty string and <code>null</code> will be parsed to <code>null</code>
	 * @param {string} sSourceType the source type (the expected type of <code>sValue</code>); must be "string".
	 * @returns {integer} the parsed value
	 * @throws {sap.ui.model.ParseException} if <code>sSourceType</code> is unsupported or if the given string cannot be parsed to a Date
	 * @public
	 */
	Int16Type.prototype.parseValue = function(sValue, sSourceType) {
		var oReturn = IntBase.prototype.parseValue.apply(this, [ sValue, sSourceType ]);
		this.oFieldControl(sValue, sSourceType);
		return oReturn;
	};
	
	/**
	 * Returns the type's name.
	 * 
	 * @returns {string} the type's name
	 * @public
	 */
	Int16Type.prototype.getName = function() {
		return "sap.ui.comp.smartfield.type.Int16";
	};

	return Int16Type;
});

}; // end of sap/ui/comp/smartfield/type/Int16.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.type.Int32') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

/**
 * 32 byte integer data type that supports field-control.
 * 
 * @private
 * @name sap.ui.comp.smartfield.type.Int32
 * @author SAP SE
 * @version 1.36.12
 * @since 1.28.0
 * @extends sap.ui.model.odata.type.Int32
 * @param {sap.ui.model.odata.type.Int32} IntBase a reference to the integer implementation.
 * @returns {sap.ui.comp.smartfield.type.Int32} the integer implementation.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.type.Int32'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.odata.type.Int32'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/type/Int32",[	"sap/ui/model/odata/type/Int32" ], function(IntBase) {
	"use strict";

	/**
	 * Constructor for a primitive type <code>Edm.Int32</code>.
	 * 
	 * @param {object} oFormatOptions format options.
	 * @param {object} oConstraints constraints.
	 * @private
	 */
	var Int32Type = IntBase.extend("sap.ui.comp.smartfield.type.Int32", {
		constructor: function(oFormatOptions, oConstraints) {
			IntBase.apply(this, [
				oFormatOptions, oConstraints
			]);
			this.oFieldControl = null;
		}
	});

	/**
	 * Parses the given value to JavaScript <code>integer</code>.
	 * 
	 * @param {string} sValue the value to be parsed; the empty string and <code>null</code> will be parsed to <code>null</code>
	 * @param {string} sSourceType the source type (the expected type of <code>sValue</code>); must be "string".
	 * @returns {integer} the parsed value
	 * @throws {sap.ui.model.ParseException} if <code>sSourceType</code> is unsupported or if the given string cannot be parsed to a Date
	 * @public
	 */
	Int32Type.prototype.parseValue = function(sValue, sSourceType) {
		var oReturn = IntBase.prototype.parseValue.apply(this, [ sValue, sSourceType ]);
		this.oFieldControl(sValue, sSourceType);
		return oReturn;
	};
	
	/**
	 * Returns the type's name.
	 * 
	 * @returns {string} the type's name
	 * @public
	 */
	Int32Type.prototype.getName = function() {
		return "sap.ui.comp.smartfield.type.Int32";
	};

	return Int32Type;
});

}; // end of sap/ui/comp/smartfield/type/Int32.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.type.Int64') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

/**
 * 64 byte integer data type that supports field-control.
 * 
 * @private
 * @name sap.ui.comp.smartfield.type.Int64
 * @author SAP SE
 * @version 1.36.12
 * @since 1.31.0
 * @extends sap.ui.model.odata.type.Int64
 * @param {sap.ui.model.odata.type.Int64} IntBase a reference to the integer implementation.
 * @returns {sap.ui.comp.smartfield.type.Int64} the integer implementation.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.type.Int64'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.odata.type.Int64'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/type/Int64",[	"sap/ui/model/odata/type/Int64" ], function(IntBase) {
	"use strict";

	/**
	 * Constructor for a primitive type <code>Edm.Int64</code>.
	 * 
	 * @param {object} oFormatOptions format options.
	 * @param {object} oConstraints constraints.
	 * @private
	 */
	var Int64Type = IntBase.extend("sap.ui.comp.smartfield.type.Int64", {
		constructor: function(oFormatOptions, oConstraints) {
			IntBase.apply(this, [
				oFormatOptions, oConstraints
			]);
			this.oFieldControl = null;
		}
	});

	/**
	 * Parses the given value to JavaScript <code>integer</code>.
	 * 
	 * @param {string} sValue the value to be parsed; the empty string and <code>null</code> will be parsed to <code>null</code>
	 * @param {string} sSourceType the source type (the expected type of <code>sValue</code>); must be "string".
	 * @returns {integer} the parsed value
	 * @throws {sap.ui.model.ParseException} if <code>sSourceType</code> is unsupported or if the given string cannot be parsed to a Date
	 * @public
	 */
	Int64Type.prototype.parseValue = function(sValue, sSourceType) {
		var oReturn = IntBase.prototype.parseValue.apply(this, [ sValue, sSourceType ]);
		this.oFieldControl(sValue, sSourceType);
		return oReturn;
	};
	
	/**
	 * Returns the type's name.
	 * 
	 * @returns {string} the type's name
	 * @public
	 */
	Int64Type.prototype.getName = function() {
		return "sap.ui.comp.smartfield.type.Int64";
	};

	return Int64Type;
});

}; // end of sap/ui/comp/smartfield/type/Int64.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.type.SByte') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

/**
 * SByte data type that supports field-control.
 * 
 * @private
 * @name sap.ui.comp.smartfield.type.SByte
 * @author SAP SE
 * @version 1.36.12
 * @since 1.28.0
 * @extends sap.ui.model.odata.type.SByte
 * @param {sap.ui.model.odata.type.SByte} SByteBase a reference to the integer implementation.
 * @returns {sap.ui.comp.smartfield.type.SByte} the byte implementation.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.type.SByte'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.odata.type.SByte'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/type/SByte",[	"sap/ui/model/odata/type/SByte" ], function(SByteBase) {
	"use strict";

	/**
	 * Constructor for a primitive type <code>Edm.SByte</code>.
	 * 
	 * @param {object} oFormatOptions format options.
	 * @param {object} oConstraints constraints.
	 * @private
	 */
	var SByteType = SByteBase.extend("sap.ui.comp.smartfield.type.SByte", {
		constructor: function(oFormatOptions, oConstraints) {
			SByteBase.apply(this, [
				oFormatOptions, oConstraints
			]);
			this.oFieldControl = null;
		}
	});

	/**
	 * Parses the given value to JavaScript <code>integer</code>.
	 * 
	 * @param {string} sValue the value to be parsed; the empty string and <code>null</code> will be parsed to <code>null</code>
	 * @param {string} sSourceType the source type (the expected type of <code>sValue</code>); must be "string".
	 * @returns {integer} the parsed value
	 * @throws {sap.ui.model.ParseException} if <code>sSourceType</code> is unsupported or if the given string cannot be parsed to a Date
	 * @public
	 */
	SByteType.prototype.parseValue = function(sValue, sSourceType) {
		var oReturn = SByteBase.prototype.parseValue.apply(this, [ sValue, sSourceType ]);
		this.oFieldControl(sValue, sSourceType);
		return oReturn;
	};
	
	/**
	 * Returns the type's name.
	 * 
	 * @returns {string} the type's name
	 * @public
	 */
	SByteType.prototype.getName = function() {
		return "sap.ui.comp.smartfield.type.SByte";
	};

	return SByteType;
});

}; // end of sap/ui/comp/smartfield/type/SByte.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.type.String') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

/**
 * String data type that supports field-control.
 * 
 * @private
 * @name sap.ui.comp.smartfield.type.String
 * @author SAP SE
 * @version 1.36.12
 * @since 1.28.0
 * @extends sap.ui.model.odata.type.String
 * @param {sap.ui.model.odata.type.String} StringBase a reference to the string implementation.
 * @returns {sap.ui.comp.smartfield.type.String} the string implementation.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.type.String'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.odata.type.String'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/type/String",[	"sap/ui/model/odata/type/String" ], function(StringBase) {
	"use strict";

	/**
	 * Constructor for a primitive type <code>Edm.String</code>.
	 * 
	 * @param {object} oFormatOptions format options.
	 * @param {object} oConstraints constraints.
	 * @private
	 */
	var StringType = StringBase.extend("sap.ui.comp.smartfield.type.String", {
		constructor: function(oFormatOptions, oConstraints) {
			StringBase.apply(this, [
				oFormatOptions, oConstraints
			]);
			this.oFieldControl = null;
		}
	});

	/**
	 * Parses the given value to JavaScript <code>string</code>.
	 * 
	 * @param {string} sValue the value to be parsed; the empty string and <code>null</code> will be parsed to <code>null</code>
	 * @param {string} sSourceType the source type (the expected type of <code>sValue</code>); must be "string".
	 * @returns {string} the parsed value
	 * @throws {sap.ui.model.ParseException} if <code>sSourceType</code> is unsupported or if the given string cannot be parsed to a Date
	 * @public
	 */
	StringType.prototype.parseValue = function(sValue, sSourceType) {
		var oReturn = StringBase.prototype.parseValue.apply(this, [ sValue, sSourceType ]);
		this.oFieldControl(sValue, sSourceType);
		return oReturn;
	};
	
	/**
	 * Returns the type's name.
	 * 
	 * @returns {string} the type's name
	 * @public
	 */
	StringType.prototype.getName = function() {
		return "sap.ui.comp.smartfield.type.String";
	};

	return StringType;
});

}; // end of sap/ui/comp/smartfield/type/String.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.type.Time') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

/**
 * Time data type that supports field-control.
 * 
 * @private
 * @name sap.ui.comp.smartfield.type.Time
 * @author SAP SE
 * @version 1.36.12
 * @since 1.34.0
 * @extends sap.ui.model.odata.type.Time
 * @param {sap.ui.model.odata.type.Time} TimeBase a reference to the time implementation.
 * @returns {sap.ui.comp.smartfield.type.Time} the time implementation.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.type.Time'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.odata.type.Time'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/type/Time",[	"sap/ui/model/odata/type/Time" ], function(TimeBase) {
	"use strict";

	/**
	 * Constructor for a primitive type <code>Edm.Time</code>.
	 * 
	 * @param {object} oFormatOptions format options.
	 * @param {object} oConstraints constraints.
	 * @private
	 */
	var Time = TimeBase.extend("sap.ui.comp.smartfield.type.Time", {
		constructor: function(oFormatOptions, oConstraints) {
			TimeBase.apply(this, [
				oFormatOptions, oConstraints
			]);
			this.oFieldControl = null;
		}
	});

	/**
	 * Parses the given value to JavaScript <code>Date</code>.
	 * 
	 * @param {string} sValue the value to be parsed; the empty string and <code>null</code> will be parsed to <code>null</code>
	 * @param {string} sSourceType the source type (the expected type of <code>sValue</code>); must be "string".
	 * @returns {Date} the parsed value
	 * @throws {sap.ui.model.ParseException} if <code>sSourceType</code> is unsupported or if the given string cannot be parsed to a Date
	 * @public
	 */
	Time.prototype.parseValue = function(sValue, sSourceType) {
		var oReturn = TimeBase.prototype.parseValue.apply(this, [ sValue, sSourceType ]);
		this.oFieldControl(sValue, sSourceType);
		return oReturn;
	};
	
	/**
	 * Returns the type's name.
	 * 
	 * @returns {string} the type's name
	 * @public
	 */
	Time.prototype.getName = function() {
		return "sap.ui.comp.smartfield.type.Time";
	};

	return Time;
});

}; // end of sap/ui/comp/smartfield/type/Time.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfilterbar.AdditionalConfigurationHelper') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartfilterbar.AdditionalConfigurationHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfilterbar/AdditionalConfigurationHelper",[
	'jquery.sap.global'
], function(jQuery) {
	"use strict";

	/**
	 * @public
	 * @constructor
	 */
	var AdditionalConfigurationHelper = function(aControlConfiguration, aGroupConfiguration) {
		this.controlConfiguration = [];
		this.groupConfiguration = [];
		this._initialize(aControlConfiguration, aGroupConfiguration);
	};

	/**
	 * Fills the internal structures
	 * 
	 * @private
	 */
	AdditionalConfigurationHelper.prototype._initialize = function(aControlConfiguration, aGroupConfiguration) {
		var i, length, oGroupConfiguration, oControlConfiguration, o, aDefaultFilterValues, oDefaultFilterValue, j, length2, oo;

		if (!aControlConfiguration) {
			aControlConfiguration = [];
		}

		if (!aGroupConfiguration) {
			aGroupConfiguration = [];
		}

		// Control Configuration
		length = aControlConfiguration.length;
		for (i = 0; i < length; i++) {
			oControlConfiguration = aControlConfiguration[i];
			o = {};
			o.key = oControlConfiguration.getKey();
			o.groupId = oControlConfiguration.getGroupId();
			o.index = oControlConfiguration.getIndex();
			o.label = oControlConfiguration.getLabel();
			o.isVisible = oControlConfiguration.getVisible();
			o.mandatory = oControlConfiguration.getMandatory();
			o.width = oControlConfiguration.getWidth();
			o.hasValueHelpDialog = oControlConfiguration.getHasValueHelpDialog();
			o.hasTypeAhead = oControlConfiguration.getHasTypeAhead();
			o.controlType = oControlConfiguration.getControlType();
			o.filterType = oControlConfiguration.getFilterType();
			o.customControl = oControlConfiguration.getCustomControl();
			o.visibleInAdvancedArea = oControlConfiguration.getVisibleInAdvancedArea();
			o.preventInitialDataFetchInValueHelpDialog = oControlConfiguration.getPreventInitialDataFetchInValueHelpDialog();
			o.displayBehaviour = oControlConfiguration.getDisplayBehaviour();
			o.defaultFilterValues = [];
			o.conditionType = oControlConfiguration.getConditionType();
			aDefaultFilterValues = oControlConfiguration.getDefaultFilterValues();
			if (aDefaultFilterValues && aDefaultFilterValues.length) {
				length2 = aDefaultFilterValues.length;
				for (j = 0; j < length2; j++) {
					oDefaultFilterValue = aDefaultFilterValues[j];
					oo = {};
					oo.sign = oDefaultFilterValue.getSign();
					oo.operator = oDefaultFilterValue.getOperator();
					oo.low = oDefaultFilterValue.getLow();
					oo.high = oDefaultFilterValue.getHigh();
					o.defaultFilterValues.push(oo);
				}
			}
			this.controlConfiguration.push(o);
		}

		// Group Configuration
		length = aGroupConfiguration.length;
		for (i = 0; i < length; i++) {
			oGroupConfiguration = aGroupConfiguration[i];
			o = {
				key: oGroupConfiguration.getKey(),
				index: oGroupConfiguration.getIndex(),
				label: oGroupConfiguration.getLabel()
			};
			this.groupConfiguration.push(o);
		}
	};

	/**
	 * Returns the control configuration for a specified key. Returns undefined, if there is no configuration.
	 * 
	 * @public
	 */
	AdditionalConfigurationHelper.prototype.getControlConfigurationByKey = function(sKey) {
		var i, length;

		length = this.controlConfiguration.length;
		for (i = 0; i < length; i++) {
			if (this.controlConfiguration[i].key === sKey) {
				return this.controlConfiguration[i];
			}
		}
		return undefined;
	};

	/**
	 * Returns all control configurations
	 * 
	 * @public
	 */
	AdditionalConfigurationHelper.prototype.getControlConfiguration = function() {
		return this.controlConfiguration;
	};

	/**
	 * Returns all group configurations
	 * 
	 * @public
	 */
	AdditionalConfigurationHelper.prototype.getGroupConfiguration = function() {
		return this.groupConfiguration;
	};

	/**
	 * Returns the control configuration for a specified key. Returns undefined, if there is no configuration.
	 */
	AdditionalConfigurationHelper.prototype.getGroupConfigurationByKey = function(sKey) {
		var i, length;

		length = this.groupConfiguration.length;
		for (i = 0; i < length; i++) {
			if (this.groupConfiguration[i].key === sKey) {
				return this.groupConfiguration[i];
			}
		}
		return undefined;
	};

	return AdditionalConfigurationHelper;

}, /* bExport= */true);

}; // end of sap/ui/comp/smartfilterbar/AdditionalConfigurationHelper.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.Group.designtime') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides the Design Time Metadata for the sap.ui.comp.smartform.Group control
jQuery.sap.declare('sap.ui.comp.smartform.Group.designtime'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/comp/smartform/Group.designtime",[],
	function() {
	"use strict";

	return {
		aggregations : {
			groupElements : {
				ignore : true
			},
			formElements : {
				domRef : ":sap-domref"
			}
		},
		name: "{name}",
		description: "{description}"
	};

}, /* bExport= */ true);
}; // end of sap/ui/comp/smartform/Group.designtime.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.flexibility.DialogContentRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartform.flexibility.DialogContentRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/flexibility/DialogContentRenderer",['jquery.sap.global'],
	function(jQuery) {
	"use strict";


	/**
	 * @class DialogContent renderer.
	 * @static
	 */
	var DialogContentRenderer = {};
	
	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 * 
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	DialogContentRenderer.render = function(oRm, oControl) {
	
		// write the HTML into the render manager
		oRm.write("<div");
		oRm.writeControlData(oControl);
		// oRm.addClass("sapUiCompDialogContent");
		oRm.writeClasses();
		oRm.write(">"); // span element
		var oContent = oControl.getContent();
		oRm.renderControl(oContent);
		oRm.write("</div>");
	};
	

	return DialogContentRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/comp/smartform/flexibility/DialogContentRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.flexibility.FieldListNodeRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.comp.smartform.flexibility.FieldListNodeRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/flexibility/FieldListNodeRenderer",['jquery.sap.global'],
	function(jQuery) {
	"use strict";


	/**
	 * @class FieldListNode renderer.
	 * @static
	 */
	var FieldListNodeRenderer = {};
	
	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 * 
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	FieldListNodeRenderer.render = function(oRm, oControl) {

		// write the HTML into the render manager
		oRm.write("<div");
		oRm.writeControlData(oControl);
		oRm.addClass("sapUiCompFieldListNode");
		if (!oControl.getIsVisible()) {
			oRm.addClass("sapUiCompFieldListNodeIsHidden");
		} else {
			oRm.addClass("sapUiCompFieldListNodeIsVisible");
		}
		if (oControl.getIsSelected()) {
			oRm.addClass("sapUiCompFieldListNodeIsSelected");
		}
		oRm.writeClasses();
		oRm.write(">"); // span element
	
		FieldListNodeRenderer.renderLayout(oRm, oControl);
		FieldListNodeRenderer.renderChildren(oRm, oControl);
	
		oRm.write("</div>");
	};
	
	/**
	 * Renders the layout control
	 * 
	 * @param {sap.ui.core.RenderManager} oRm RenderManager
	 * @param {sap.ui.comp.smartform.flexibility.FieldListNode} oControl field list node
	 * @private
	 */
	FieldListNodeRenderer.renderLayout = function(oRm, oControl) {

		oRm.renderControl(oControl._oLayout);
	};
	
	/**
	 * Renders the child nodes
	 * 
	 * @param {sap.ui.core.RenderManager} oRm RenderManager
	 * @param {sap.ui.comp.smartform.flexibility.FieldListNode} oControl field list node
	 * @private
	 */
	FieldListNodeRenderer.renderChildren = function(oRm, oControl) {

		var length, i, aChildren;
		aChildren = oControl.getNodes();
		length = aChildren.length;
		oRm.write('<div class="sapUiCompFieldListNodeBorder">');
		for (i = 0; i < length; i++) {
			oRm.renderControl(aChildren[i]);
		}
		oRm.write("</div>");
	};
	

	return FieldListNodeRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/comp/smartform/flexibility/FieldListNodeRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.flexibility.FieldListRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartform.flexibility.FieldListRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/flexibility/FieldListRenderer",['jquery.sap.global'],
	function(jQuery) {
	"use strict";


	/**
	 * @class FieldList renderer.
	 * @static
	 */
	var FieldListRenderer = {};
	
	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 * 
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.comp.smartform.flexibility.FieldList} oControl an object representation of the control that should be rendered
	 */
	FieldListRenderer.render = function(oRm, oControl) {

		// write the HTML into the render manager
		oRm.write("<div");
		oRm.writeControlData(oControl);
		oRm.addClass("sapUiCompFieldList");
		oRm.writeClasses();
		oRm.write(">"); // span element
	
		FieldListRenderer.renderNodes(oRm, oControl);
	
		oRm.write("</div>");
	};
	
	/**
	 * Renders the child nodes from the aggregation nodes
	 * 
	 * @param {sap.ui.core.RenderManager} oRm RenderManager
	 * @param {sap.ui.comp.smartform.flexibility.FieldList} oControl field list node
	 * @private
	 */
	FieldListRenderer.renderNodes = function(oRm, oControl) {

		var aNodes, length, i;
		aNodes = oControl.getNodes();
		length = aNodes.length;
		for (i = 0; i < length; i++) {
			oRm.renderControl(aNodes[i]);
		}
	};
	

	return FieldListRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/comp/smartform/flexibility/FieldListRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.flexibility.InputRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartform.flexibility.InputRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.InputRenderer'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/flexibility/InputRenderer",['jquery.sap.global', 'sap/m/InputRenderer'],
	function(jQuery, InputRenderer1) {
	"use strict";


	/**
	 * @class Input renderer.
	 * @static
	 */
	var InputRenderer = {};
	
	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 * 
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	InputRenderer.render = function(oRm, oControl) {
		InputRenderer1.render(oRm, oControl);
	};
	

	return InputRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/comp/smartform/flexibility/InputRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.flexibility.changes.AddField') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartform.flexibility.changes.AddField'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.Base'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/flexibility/changes/AddField",[
	'jquery.sap.global', 'sap/ui/fl/Utils', 'sap/ui/fl/changeHandler/Base'
], function(jQuery, Utils, Base) {
	"use strict";

	/**
	 * Change handler for adding a smart form group element (representing a field).
	 * @constructor
	 * @alias sap.ui.fl.changeHandler.AddField
	 * @author SAP SE
	 * @version 1.36.12
	 * @experimental Since 1.27.0
	 */
	var AddField = function() {
	};
	AddField.prototype = jQuery.sap.newObject(Base.prototype);

	/**
	 * Adds a smart form group element incl. a value control.
	 *
	 * @param {sap.ui.fl.Change} oChangeWrapper change wrapper object with instructions to be applied on the control map
	 * @param {sap.ui.comp.smartform.Group} oGroup group control that matches the change selector for applying the change
	 * @public
	 */
	AddField.prototype.applyChange = function(oChangeWrapper, oGroup) {
		var oChange = oChangeWrapper.getDefinition();
		if (oChange.texts && oChange.texts.fieldLabel && oChange.texts.fieldLabel.value && oChange.content && oChange.content.field && oChange.content.field.id && oChange.content.field.jsType && oChange.content.field.value && oChange.content.field.valueProperty) {
			jQuery.sap.require("sap.ui.comp.smartform.GroupElement"); //revise in future when concept for accessing controls within change handlers is available
			var oGroupElement = new sap.ui.comp.smartform.GroupElement(oChange.content.field.id);
			if (oGroupElement.setLabel) {
				oGroupElement.setLabel(oChange.texts.fieldLabel.value);
			}
			//create the value control
			var ValueControlClass = this._getControlClass(oChange.content.field.jsType);
			var oValueControl = new ValueControlClass();
			if (oValueControl) {
				if ( oChange.content.field.entitySet && oValueControl.setEntitySet ){
					oValueControl.setEntitySet(oChange.content.field.entitySet);
				}
				oGroupElement.addElement(oValueControl);
				oValueControl.bindProperty(oChange.content.field.valueProperty, oChange.content.field.value);
			}
			//add group element to the existing group
			if (oGroup && oGroup.insertGroupElement) {
				oGroup.insertGroupElement(oGroupElement, oChange.content.field.index);	
			} else {
				throw new Error("no parent group provided for adding the field");
			}
		} else {
			Utils.log.error("Change does not contain sufficient information to be applied: [" + oChange.layer + "]" + oChange.namespace + "/" + oChange.fileName + "." + oChange.fileType);
			//however subsequent changes should be applied
		}
	};

	/**
	 * Completes the change by adding change handler specific content
	 *
	 * @param {sap.ui.fl.Change} oChangeWrapper change wrapper object to be completed
	 * @param {object} oSpecificChangeInfo with attributes "fieldLabel", the field label to be included in the change,
	 * 								 "fieldValue", the value for the control that displays the value, 
	 * 								 "valueProperty", the control property that holds the field value,
	 * 								 "newControlId", the control ID for the control to be added
	 * 								 and "jsType", the JavaScript control for the field value.
	 * @public
	 */
	AddField.prototype.completeChangeContent = function(oChangeWrapper, oSpecificChangeInfo) {
		var oChange = oChangeWrapper.getDefinition();
		if (oSpecificChangeInfo.fieldLabel) {
			this.setTextInChange(oChange, "fieldLabel", oSpecificChangeInfo.fieldLabel, "XFLD");
		} else {
			throw new Error("oSpecificChangeInfo.fieldLabel attribute required");
		}
		if (!oChange.content) {
			oChange.content = {};
		}
		if (!oChange.content.field) {
			oChange.content.field = {};
		}
		if (oSpecificChangeInfo.fieldValue) {
			oChange.content.field.value = oSpecificChangeInfo.fieldValue;
		} else {
			throw new Error("oSpecificChangeInfo.fieldValue attribute required");
		}
		if (oSpecificChangeInfo.valueProperty) {
			oChange.content.field.valueProperty = oSpecificChangeInfo.valueProperty;
		} else {
			throw new Error("oSpecificChangeInfo.valueProperty attribute required");
		}
		if ( oSpecificChangeInfo.newControlId ){
			oChange.content.field.id = oSpecificChangeInfo.newControlId;
		}else {
			throw new Error("oSpecificChangeInfo.newControlId attribute required");
		}
		if (oSpecificChangeInfo.jsType) {
			oChange.content.field.jsType = oSpecificChangeInfo.jsType;
		} else {
			throw new Error("oSpecificChangeInfo.jsType attribute required");
		}
		if (oSpecificChangeInfo.index === undefined) {
			throw new Error("oSpecificChangeInfo.index attribute required");
		} else {
			oChange.content.field.index = oSpecificChangeInfo.index;
		}
		if (oSpecificChangeInfo.entitySet){
			//an optional entity set can be configured
			oChange.content.field.entitySet = oSpecificChangeInfo.entitySet;
		}
		
	};

	/**
	 * Gets the control class from the dom for a given JavaScript type string.
	 *
	 * @param {string} sJsType - the JS type string; example "sap.ui.commons.TextView"
	 * @returns {sap.ui.core.Control} UI5 control class
	 * @private
	 */
	AddField.prototype._getControlClass = function(sJsType) {
		var oResult;
		jQuery.sap.require(sJsType);
		var aSegments = sJsType.split(".");
		var oJsClass = window;
		jQuery.each(aSegments, function(i, sSegment) {
			oJsClass = oJsClass[sSegment];
		});
		if (typeof (oJsClass) == "function") {
			oResult = oJsClass;
		}
		return oResult;
	};

	/**
	 * Gets the id from the field to be added.
	 *
	 * @param {object} oChange - addField change, which contains the field id within the content
	 * @returns {string} field id
	 * @public
	 */
	AddField.prototype.getControlIdFromChangeContent = function(oChange) {
		var sControlId;
		
		if (oChange && oChange._oDefinition) {
			sControlId = oChange._oDefinition.content.field.id;
		}
		
		return sControlId;
	};

	return AddField;
},
/* bExport= */true);

}; // end of sap/ui/comp/smartform/flexibility/changes/AddField.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.flexibility.changes.AddFields') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartform.flexibility.changes.AddFields'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.Base'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/flexibility/changes/AddFields",['jquery.sap.global', 'sap/ui/fl/Utils', 'sap/ui/fl/changeHandler/Base'], function(jQuery, Utils, Base) {
	"use strict";

	/**
	 * Change handler for adding a smart form group element (representing one or more fields).
	 * 
	 * @constructor
	 * @alias sap.ui.fl.changeHandler.AddFields
	 * @author SAP SE
	 * @version 1.36.12
	 * @experimental Since 1.33.0
	 */
	var AddFields = function() {
	};
	AddFields.prototype = jQuery.sap.newObject(Base.prototype);

	/**
	 * Adds a smart form group element incl. one or more value controls.
	 * 
	 * @param {sap.ui.fl.Change}
	 *          oChangeWrapper change wrapper object with instructions to be applied on the control map
	 * @param {sap.ui.comp.smartform.Group}
	 *          oGroup group control that matches the change selector for applying the change
	 * @public
	 */
	AddFields.prototype.applyChange = function(oChangeWrapper, oGroup) {
		var oChange = oChangeWrapper.getDefinition();
		if (oChange.texts && oChange.content && oChange.content.field && oChange.content.field.id
				&& oChange.content.field.jsTypes && oChange.content.field.value && oChange.content.field.valueProperty) {
			jQuery.sap.require("sap.ui.comp.smartform.GroupElement"); // revise in future when concept for accessing controls
																																// within change handlers is available
			var oGroupElement = new sap.ui.comp.smartform.GroupElement(oChange.content.field.id);
			if (oGroupElement.setLabel) {
				oGroupElement.setLabel(oChange.texts["fieldLabel0"].value);
			}
			// create the value control
			for (var i = 0; i < oChange.content.field.jsTypes.length; i++) {

				var sValue = oChange.content.field.value[i];
				var oProperty = oChange.content.field.valueProperty[i];
				var oEntitySet = oChange.content.field.entitySet;

				var ValueControlClass = this._getControlClass(oChange.content.field.jsTypes[i]);
				var oValueControl = new ValueControlClass();
				if (oValueControl) {
					if (sValue && oProperty) {
						oValueControl.bindProperty(oProperty, sValue);
					}
					if (oValueControl.setTextLabel) {
						oValueControl.setTextLabel(oChange.texts["fieldLabel" + i].value);
					}
					if (oEntitySet && oValueControl.setEntitySet) {
						oValueControl.setEntitySet(oEntitySet);
					}
					oGroupElement.addElement(oValueControl);
				}
			}
			// add group element to the existing group
			if (oGroup && oGroup.insertGroupElement) {
				oGroup.insertGroupElement(oGroupElement, oChange.content.field.index);
			} else {
				throw new Error("no parent group provided for adding the field");
			}
		} else {
			Utils.log.error("Change does not contain sufficient information to be applied: [" + oChange.layer + "]"
					+ oChange.namespace + "/" + oChange.fileName + "." + oChange.fileType);
			// however subsequent changes should be applied
		}
	};

	/**
	 * Completes the change by adding change handler specific content
	 * 
	 * @param {sap.ui.fl.Change}
	 *          oChangeWrapper change wrapper object to be completed
	 * @param {object}
	 *          oSpecificChangeInfo with attributes "fieldLabel", the field label to be included in the change,
	 *          "fieldValue", the value for the control that displays the value, "valueProperty", the control property
	 *          that holds the field value, "newControlId", the control ID for the control to be added and "jsType", the
	 *          JavaScript control for the field value.
	 * @public
	 */
	AddFields.prototype.completeChangeContent = function(oChangeWrapper, oSpecificChangeInfo) {
		var oChange = oChangeWrapper.getDefinition();
		if (oSpecificChangeInfo.fieldLabels) {
			for (var i = 0; i < oSpecificChangeInfo.fieldLabels.length; i++) {
				var sFieldLabel = "fieldLabel" + i;
				this.setTextInChange(oChange, sFieldLabel, oSpecificChangeInfo.fieldLabels[i], "XFLD");
			}
		} else {
			throw new Error("oSpecificChangeInfo.fieldLabel attribute required");
		}
		if (!oChange.content) {
			oChange.content = {};
		}
		if (!oChange.content.field) {
			oChange.content.field = {};
		}
		if (oSpecificChangeInfo.fieldValues) {
			oChange.content.field.value = oSpecificChangeInfo.fieldValues;
		} else {
			throw new Error("oSpecificChangeInfo.fieldValue attribute required");
		}
		if (oSpecificChangeInfo.valueProperty) {
			oChange.content.field.valueProperty = oSpecificChangeInfo.valueProperty;
		} else {
			throw new Error("oSpecificChangeInfo.valueProperty attribute required");
		}
		if (oSpecificChangeInfo.newControlId) {
			oChange.content.field.id = oSpecificChangeInfo.newControlId;
		} else {
			throw new Error("oSpecificChangeInfo.newControlId attribute required");
		}
		if (oSpecificChangeInfo.jsTypes) {
			oChange.content.field.jsTypes = oSpecificChangeInfo.jsTypes;
		} else {
			throw new Error("oSpecificChangeInfo.jsType attribute required");
		}
		if (oSpecificChangeInfo.index === undefined) {
			throw new Error("oSpecificChangeInfo.index attribute required");
		} else {
			oChange.content.field.index = oSpecificChangeInfo.index;
		}
		if (oSpecificChangeInfo.entitySet) {
			// an optional entity set can be configured
			oChange.content.field.entitySet = oSpecificChangeInfo.entitySet;
		}

	};

	/**
	 * Gets the control class from the dom for a given JavaScript type string.
	 * 
	 * @param {string}
	 *          sJsType - the JS type string; example "sap.ui.commons.TextView"
	 * @returns {sap.ui.core.Control} UI5 control class
	 * @private
	 */
	AddFields.prototype._getControlClass = function(sJsType) {
		var oResult;
		jQuery.sap.require(sJsType);
		var aSegments = sJsType.split(".");
		var oJsClass = window;
		jQuery.each(aSegments, function(i, sSegment) {
			oJsClass = oJsClass[sSegment];
		});
		if (typeof (oJsClass) == "function") {
			oResult = oJsClass;
		}
		return oResult;
	};

	return AddFields;
},
/* bExport= */true);

}; // end of sap/ui/comp/smartform/flexibility/changes/AddFields.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.flexibility.changes.AddGroup') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartform.flexibility.changes.AddGroup'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.Base'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/flexibility/changes/AddGroup",[
	'sap/ui/fl/Utils', 'jquery.sap.global', 'sap/ui/fl/changeHandler/Base'
], function(Utils, jQuery, Base) {
	"use strict";

	/**
	 * Change handler for adding a smart form group.
	 * @constructor
	 * @alias sap.ui.fl.changeHandler.AddGroup
	 * @author SAP SE
	 * @version 1.36.12
	 * @experimental Since 1.27.0
	 */
	var AddGroup = function() {
	};
	AddGroup.prototype = jQuery.sap.newObject(Base.prototype);

	/**
	 * Adds a smart form group.
	 *
	 * @param {sap.ui.fl.Change} oChangeWrapper change wrapper object with instructions to be applied on the control map
	 * @param {sap.ui.comp.smartform.SmartForm} oForm smart form control that matches the change selector for applying the change
	 * @param {object} oControlMap flat list of ids that point to control instances
	 * @public
	 */
	AddGroup.prototype.applyChange = function(oChangeWrapper, oForm) {
		var oChange = oChangeWrapper.getDefinition();
		if (oChange.texts && oChange.texts.groupLabel && oChange.texts.groupLabel.value && oChange.content && oChange.content.group && oChange.content.group.id) {
			jQuery.sap.require("sap.ui.comp.smartform.Group"); //revise in future when concept for accessing controls within change handlers is available
			var oGroup = new sap.ui.comp.smartform.Group(oChange.content.group.id);
			if (oGroup.setLabel) {
				oGroup.setLabel(oChange.texts.groupLabel.value);
			}
			if (oForm && oForm.insertGroup) {
				oForm.insertGroup(oGroup, oChange.content.group.index);
			} else {
				throw new Error("no parent form provided for adding the group");
			}
		} else {
			Utils.log.error("Change does not contain sufficient information to be applied: [" + oChange.layer + "]" + oChange.namespace + "/" + oChange.fileName + "." + oChange.fileType);
			//however subsequent changes should be applied
		}
	};

	/**
	 * Completes the change by adding change handler specific content
	 *
	 * @param {sap.ui.fl.Change} oChangeWrapper change wrapper object to be completed
	 * @param {object} oSpecificChangeInfo with attributes "groupLabel", the group label to be included in the change and "newControlId", the control ID for the control to be added
	 * @public
	 */
	AddGroup.prototype.completeChangeContent = function(oChangeWrapper, oSpecificChangeInfo) {
		var oChange = oChangeWrapper.getDefinition();
		if (oSpecificChangeInfo.groupLabel) {
			this.setTextInChange(oChange, "groupLabel", oSpecificChangeInfo.groupLabel, "XFLD");
		} else {
			throw new Error("oSpecificChangeInfo.groupLabel attribute required");
		}
		if (!oChange.content) {
			oChange.content = {};
		}
		if (!oChange.content.group) {
			oChange.content.group = {};
		}
		if ( oSpecificChangeInfo.newControlId ){
			oChange.content.group.id = oSpecificChangeInfo.newControlId;
		}else {
			throw new Error("oSpecificChangeInfo.newControlId attribute required");
		}
		if (oSpecificChangeInfo.index === undefined) {
			throw new Error("oSpecificChangeInfo.index attribute required");
		} else {
			oChange.content.group.index = oSpecificChangeInfo.index;
		}
	};

	/**
	 * Gets the id from the group to be added.
	 *
	 * @param {object} oChange - addGroup change, which contains the group id within the content
	 * @returns {string} group id
	 * @public
	 */
	AddGroup.prototype.getControlIdFromChangeContent = function(oChange) {
		var sControlId;
		
		if (oChange && oChange._oDefinition) {
			sControlId = oChange._oDefinition.content.group.id;
		}
		
		return sControlId;
	};

	return AddGroup;
},
/* bExport= */true);

}; // end of sap/ui/comp/smartform/flexibility/changes/AddGroup.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.flexibility.changes.MoveFields') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartform.flexibility.changes.MoveFields'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.Base'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/flexibility/changes/MoveFields",[
	'jquery.sap.global', 'sap/ui/fl/changeHandler/Base', 'sap/ui/fl/Utils'
], function(jQuery, Base, FlexUtils) {
	"use strict";

	/**
	 * Change handler for moving of fields within/between groups.
	 * @constructor
	 * @alias sap.ui.fl.changeHandler.MoveFields
	 * @author SAP SE
	 * @version 1.36.12
	 * @experimental Since 1.27.0
	 */
	var MoveFields = function() {
	};
	MoveFields.prototype = jQuery.sap.newObject(Base.prototype);

	/**
	 * Moves field(s) within a group or between groups.
	 *
	 * @param {object} oChange change object with instructions to be applied on the control
	 * @param {object} oGroup Smart form group instance which is referred to in change selector section 
	 * @public
	 */
	MoveFields.prototype.applyChange = function(oChange, oGroup) {

		if (!oChange) {
			throw new Error("No change instance");
		}

		var oChangeJson = oChange.getDefinition();

		if (!oChangeJson.selector || !oChangeJson.content || !oChangeJson.content.moveFields || oChangeJson.content.moveFields.length === 0 || Object.keys(oChangeJson.selector).length !== 1) {
			throw new Error("Change format invalid");
		}

		if (!oGroup || !oGroup.getGroupElements || !oGroup.getId) {
			throw new Error("No smart form group instance supplied");
		}

		// determine target group of move
		var oTargetGroup = oGroup;
		var bTargetDiffers = false;

		if (oChangeJson.content.targetId) {
			var sSourceKey = oGroup.getId();
			if (sSourceKey !== oChangeJson.content.targetId) {
				oTargetGroup = sap.ui.getCore().byId(oChangeJson.content.targetId);
				bTargetDiffers = true;
			}
		}
		
		// Array of fields of smart form group in old order
		var aFields = oGroup.getGroupElements();
		if (!aFields) {
			return;
		}
		var iFieldNumber = aFields.length;

		// move is within a group - adapt order of fields in aFields according to the change
		// move is between groups - remove field from source group and insert it at target group
		var oField = {}, oMoveField = {};
		var iMoveFields = oChangeJson.content.moveFields.length;
		var iIndex, i, j;

		for (i = 0; i < iMoveFields; i++) {

			oMoveField = oChangeJson.content.moveFields[i];

			if (!oMoveField.id) {
				throw new Error("Change format invalid - moveFields element has no id attribute");
			}
			if (typeof (oMoveField.index) !== "number") {
				throw new Error("Change format invalid - moveFields element index attribute is no number");
			}
			
			// determine the index of the field to move in aFields 
			iIndex = -1;
			for (j = 0; j < iFieldNumber; j++) {
				var sControlId = aFields[j].getId();
				if (sControlId === oMoveField.id) {
					iIndex = j;
					break;
				}
			}

			// move within group and position of field is unchanged
			if (bTargetDiffers === false && iIndex === oMoveField.index) {
				continue;
			}
			// field not found in source group
			if (iIndex === -1) {
				continue;
			}

			// get the field to move
			oField = aFields[iIndex];
			
			// move is between groups - remove field from source group
			// and insert it at target group
			if (bTargetDiffers === true) {
				oGroup.removeGroupElement(oField);
				oTargetGroup.insertGroupElement(oField, oMoveField.index);
				continue;
			}

			// move is within a group
			// remove the field to move from aFields
			aFields.splice(iIndex, 1);

			// reinsert the field to aFields at the new index
			if (bTargetDiffers === false) {
				aFields.splice(oMoveField.index, 0, oField);
			}

		}
		
		// in case of move between groups we are done
		if (bTargetDiffers === true) {
			return;
		}

		// remove all fields from smart form group (source)
		oGroup.removeAllGroupElements();

		// reinsert fields into smart form group in new order (source)
		for (i = 0; i < iFieldNumber; i++) {
			oGroup.insertGroupElement(aFields[i], i);
		}

	};

	/**
	 * Completes the change by adding change handler specific content
	 *
	 * @param {object} oChange change object to be completed
	 * @param {object} oSpecificChangeInfo with attribute moveFields which contains an array which holds objects which have attributes
	 * 				   id and index - id is the id of the field to move and index the new position of the field in the smart form group 
	 * @public
	 * @function
	 * @name sap.ui.fl.changeHandler.MoveGroups#completeChangeContent
	 */
	MoveFields.prototype.completeChangeContent = function(oChange, oSpecificChangeInfo) {

		var oChangeJson = oChange.getDefinition();

		if (oSpecificChangeInfo.moveFields) {

			var oMoveField = {};
			var i, iLength = oSpecificChangeInfo.moveFields.length;

			if (iLength === 0) {
				throw new Error("MoveFields array is empty");
			}

			for (i = 0; i < iLength; i++) {
				oMoveField = oSpecificChangeInfo.moveFields[i];
				if (!oMoveField.id) {
					throw new Error("MoveFields element has no id attribute");
				}
				if (typeof (oMoveField.index) !== "number") {
					throw new Error("Index attribute at MoveFields element is no number");
				}
			}

			if (!oChangeJson.content) {
				oChangeJson.content = {};
			}

			if (!oChangeJson.content.moveFields) {
				oChangeJson.content.moveFields = [];
			}

			oChangeJson.content.moveFields = oSpecificChangeInfo.moveFields;

			if (oSpecificChangeInfo.targetId) {
				oChangeJson.content.targetId = oSpecificChangeInfo.targetId;
			}

		} else {

			throw new Error("oSpecificChangeInfo.moveFields attribute required");

		}

	};

	return MoveFields;
},
/* bExport= */true);

}; // end of sap/ui/comp/smartform/flexibility/changes/MoveFields.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.flexibility.changes.MoveGroups') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartform.flexibility.changes.MoveGroups'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.Base'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/flexibility/changes/MoveGroups",[
	'jquery.sap.global', 'sap/ui/fl/changeHandler/Base', 'sap/ui/fl/Utils'
], function(jQuery, Base, FlexUtils) {
	"use strict";

	/**
	 * Change handler for moving of groups inside a smart form.
	 * @constructor
	 * @alias sap.ui.fl.changeHandler.MoveGroups
	 * @author SAP SE
	 * @version 1.36.12
	 * @experimental Since 1.27.0
	 */
	var MoveGroups = function() {
	};
	MoveGroups.prototype = jQuery.sap.newObject(Base.prototype);

	/**
	 * Moves group(s) inside a smart form.
	 *
	 * @param {object} oChange change object with instructions to be applied on the control
	 * @param {object} oSmartForm Smart form instance which is referred to in change selector section 
	 * @public
	 */
	MoveGroups.prototype.applyChange = function(oChange, oSmartForm) {

		if (!oChange) {
			throw new Error("No change instance");
		}

		var oChangeJson = oChange.getDefinition();

		if (!oChangeJson.selector || !oChangeJson.content || !oChangeJson.content.moveGroups || oChangeJson.content.moveGroups.length === 0 || Object.keys(oChangeJson.selector).length !== 1) {
			throw new Error("Change format invalid");
		}

		if (!oSmartForm || !oSmartForm.getGroups) {
			throw new Error("No smart form instance supplied");
		}

		// Array of groups of smart form in old order
		var aGroups = [];
		aGroups = oSmartForm.getGroups();
		if (aGroups.length === 0) {
			return;
		}
		var iGroupNumber = aGroups.length;

		// adapt order of groups in aGroups according to the change
		var oGroup = {}, oMoveGroup = {};
		var iMoveGroups = oChangeJson.content.moveGroups.length;
		var iIndex;
		var i, j;

		for (i = 0; i < iMoveGroups; i++) {

			oMoveGroup = oChangeJson.content.moveGroups[i];

			if (!oMoveGroup.id) {
				throw new Error("Change format invalid - moveGroups element has no id attribute");
			}
			if (typeof (oMoveGroup.index) !== "number") {
				throw new Error("Change format invalid - moveGroups element index attribute is no number");
			}

			// determine the index of the group to move in aGroups 
			iIndex = -1;
			for (j = 0; j < iGroupNumber; j++) {
				if (aGroups[j].getId() === oMoveGroup.id) {
					iIndex = j;
					break;
				}
			}

			if (iIndex === oMoveGroup.index || iIndex === -1) {
				continue;
			}

			// memorize the group to move
			oGroup = aGroups[iIndex];

			// remove the group to move from aGroups
			aGroups.splice(iIndex, 1);

			// reinsert the group to aGroups at the new index
			aGroups.splice(oMoveGroup.index, 0, oGroup);

		}

		// remove all groups from smart form
		oSmartForm.removeAllGroups();

		// reinsert groups into smart form in new order
		for (i = 0; i < iGroupNumber; i++) {
			oSmartForm.insertGroup(aGroups[i], i);
		}

	};

	/**
	 * Completes the change by adding change handler specific content
	 *
	 * @param {object} oChange change object to be completed
	 * @param {object} oSpecificChangeInfo with attribute moveGroups which contains an array which holds objects which have attributes
	 * 				   id and index - id is the id of the group to move and index the new position of the group in the smart form 
	 * @public
	 */
	MoveGroups.prototype.completeChangeContent = function(oChange, oSpecificChangeInfo) {

		var oChangeJson = oChange.getDefinition();

		if (oSpecificChangeInfo.moveGroups) {

			var oMoveGroup = {};
			var i, iLength = oSpecificChangeInfo.moveGroups.length;

			if (iLength === 0) {
				throw new Error("MoveGroups array is empty");
			}

			for (i = 0; i < iLength; i++) {
				oMoveGroup = oSpecificChangeInfo.moveGroups[i];
				if (!oMoveGroup.id) {
					throw new Error("MoveGroups element has no id attribute");
				}
				if (typeof (oMoveGroup.index) !== "number") {
					throw new Error("Index attribute at MoveGroups element is no number");
				}
			}

			if (!oChangeJson.content) {
				oChangeJson.content = {};
			}

			if (!oChangeJson.content.moveGroups) {
				oChangeJson.content.moveGroups = [];
			}

			oChangeJson.content.moveGroups = oSpecificChangeInfo.moveGroups;

		} else {

			throw new Error("oSpecificChangeInfo.moveGroups attribute required");

		}

	};

	return MoveGroups;
},
/* bExport= */true);

}; // end of sap/ui/comp/smartform/flexibility/changes/MoveGroups.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.flexibility.changes.OrderFields') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartform.flexibility.changes.OrderFields'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.Base'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/flexibility/changes/OrderFields",[
	'jquery.sap.global', 'sap/ui/fl/changeHandler/Base', 'sap/ui/fl/Utils'
], function(jQuery, Base, FlexUtils) {
	"use strict";

	/**
	 * Change handler for reordering of fields within a group.
	 * @constructor
	 * @alias sap.ui.fl.changeHandler.OrderFields
	 * @author SAP SE
	 * @version 1.36.12
	 * @experimental Since 1.27.0
	 */
	var OrderFields = function() {
	};
	OrderFields.prototype = jQuery.sap.newObject(Base.prototype);

	/**
	 * Reorders groups.
	 *
	 * @param {object} oChange change object with instructions to be applied on the control map
	 * @param {object} oControl control instance which is referred to in change selector section 
	 * @public
	 */
	OrderFields.prototype.applyChange = function(oChange, oControl) {

		if (!oChange) {
			throw new Error("No change instance");
		}

		var oChangeJson = oChange.getDefinition();

		if (!oChangeJson.selector || !oChangeJson.content || !oChangeJson.content.orderFields || oChangeJson.content.orderFields.length === 0 || Object.keys(oChangeJson.selector).length !== 1) {
			throw new Error("Change format invalid");
		}

		if (!oControl || !oControl.getGroupElements) {
			throw new Error("No control instance or wrong control instance supplied");
		}

		// Array of group elements of smart form in old order
		var aGroupElement = oControl.getGroupElements();
		var iGroupElementNumber = aGroupElement.length;

		// Array of ids of group elements in new order as defined in the change
		var aKeyOrderFromChange = oChangeJson.content.orderFields;

		var iKeyNumberInChange = aKeyOrderFromChange.length;

		// build object of group elements of smart form group which has their ids as key
		var oGroupElements = {}, oGroupElement = {};
		var sKey;
		var i;
		for (i = 0; i < iGroupElementNumber; i++) {
			oGroupElement = aGroupElement[i];
			if (!oGroupElement.getId()) {
				return;
			}
			sKey = oGroupElement.getId();
			oGroupElements[sKey] = oGroupElement;
		}

		// remove all group elements from smart form group
		oControl.removeAllGroupElements();

		// reinsert group elements into smart form group in order given by change
		for (i = 0; i < iGroupElementNumber; i++) {
			sKey = aKeyOrderFromChange[i];
			if (oGroupElements[sKey]) {
				oControl.insertGroupElement(oGroupElements[sKey], i);
				oGroupElements[sKey] = null;
			}
		}

		// add group elements not handled by change at the end
		i = iKeyNumberInChange;
		jQuery.each(oGroupElements, function(key, element) {
			if (element !== null) {
				i += 1;
				oControl.insertGroupElement(element, i);
			}
		});

	};

	/**
	 * Completes the change by adding change handler specific content
	 *
	 * @param {object} oChange change object to be completed
	 * @param {object} oSpecificChangeInfo with attribute orderFields which contains an array which holds the ids of 
	 * 				   the group elements of the smart form group in the desired order 
	 * @public
	 */
	OrderFields.prototype.completeChangeContent = function(oChange, oSpecificChangeInfo) {

		var oChangeJson = oChange.getDefinition();

		if (oSpecificChangeInfo.orderFields) {
			if (!oChangeJson.content) {
				oChangeJson.content = {};
			}
			if (!oChangeJson.content.orderFields) {
				oChangeJson.content.orderFields = {};
			}
			oChangeJson.content.orderFields = oSpecificChangeInfo.orderFields;
		} else {
			throw new Error("oSpecificChangeInfo.orderFields attribute required");
		}

	};

	return OrderFields;
},
/* bExport= */true);

}; // end of sap/ui/comp/smartform/flexibility/changes/OrderFields.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.flexibility.changes.OrderGroups') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartform.flexibility.changes.OrderGroups'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.Base'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/flexibility/changes/OrderGroups",[
	'jquery.sap.global', 'sap/ui/fl/changeHandler/Base', 'sap/ui/fl/Utils'
], function(jQuery, Base, FlexUtils) {
	"use strict";

	/**
	 * Change handler for reordering of groups.
	 * @constructor
	 * @alias sap.ui.fl.changeHandler.OrderGroups
	 * @author SAP SE
	 * @version 1.36.12
	 * @experimental Since 1.27.0
	 */
	var OrderGroups = function() {
	};
	OrderGroups.prototype = jQuery.sap.newObject(Base.prototype);

	/**
	 * Reorders groups.
	 *
	 * @param {object} oChange change object with instructions to be applied on the control
	 * @param {object} oControl control instance which is referred to in change selector section 
	 * @public
	 */
	OrderGroups.prototype.applyChange = function(oChange, oControl) {

		if (!oChange) {
			throw new Error("No change instance");
		}

		var oChangeJson = oChange.getDefinition();

		if (!oChangeJson.selector || !oChangeJson.content || !oChangeJson.content.orderGroups || oChangeJson.content.orderGroups.length === 0 || Object.keys(oChangeJson.selector).length !== 1) {
			throw new Error("Change format invalid");
		}

		if (!oControl || !oControl.getGroups) {
			throw new Error("No control instance or wrong control instance supplied");
		}

		// Array of groups of smart form in old order
		var aGroup = oControl.getGroups();
		var iGroupNumber = aGroup.length;

		// Array of ids of groups in new order as defined in the change
		var aKeyOrderFromChange = oChangeJson.content.orderGroups;

		var iKeyNumberInChange = aKeyOrderFromChange.length;

		// build object of groups of smart form which has their ids as key
		var oGroups = {}, oGroup = {};
		var sKey;
		var i;
		for (i = 0; i < iGroupNumber; i++) {
			oGroup = aGroup[i];
			if (!oGroup.getId()) {
				return;
			}
			sKey = oGroup.getId();
			oGroups[sKey] = oGroup;
		}

		// remove all groups from smart form
		if (iGroupNumber > 0) {
			oControl.removeAllGroups();
		}

		// reinsert groups into smart form in order given by change
		for (i = 0; i < iGroupNumber; i++) {
			sKey = aKeyOrderFromChange[i];
			if (oGroups[sKey]) {
				oControl.insertGroup(oGroups[sKey], i);
				oGroups[sKey] = null;
			}
		}

		// add groups not handled by change at the end
		i = iKeyNumberInChange;
		jQuery.each(oGroups, function(key, group) {
			if (group !== null) {
				i += 1;
				oControl.insertGroup(group, i);
			}
		});

	};

	/**
	 * Completes the change by adding change handler specific content
	 *
	 * @param {object} oChange change object to be completed
	 * @param {object} oSpecificChangeInfo with attribute orderGroups which contains an array which holds the ids of 
	 * 				   the groups of the smart form in the desired order 
	 * @public
	 */
	OrderGroups.prototype.completeChangeContent = function(oChange, oSpecificChangeInfo) {

		var oChangeJson = oChange.getDefinition();

		if (oSpecificChangeInfo.orderGroups) {
			if (!oChangeJson.content) {
				oChangeJson.content = {};
			}
			if (!oChangeJson.content.orderGroups) {
				oChangeJson.content.orderGroups = {};
			}
			oChangeJson.content.orderGroups = oSpecificChangeInfo.orderGroups;
		} else {
			throw new Error("oSpecificChangeInfo.orderGroups attribute required");
		}

	};

	return OrderGroups;
},
/* bExport= */true);

}; // end of sap/ui/comp/smartform/flexibility/changes/OrderGroups.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.flexibility.changes.RemoveField') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartform.flexibility.changes.RemoveField'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.Base'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/flexibility/changes/RemoveField",[
	'jquery.sap.global', 'sap/ui/fl/changeHandler/Base'
], function(jQuery, Base) {
	"use strict";

	/**
	 * Change handler for removing a smart form group element.
	 * @constructor
	 * @alias sap.ui.fl.changeHandler.RemoveField
	 * @author SAP SE
	 * @version 1.36.12
	 * @experimental Since 1.27.0
	 */
	var RemoveField = function() {
	};
	RemoveField.prototype = jQuery.sap.newObject(Base.prototype);

	/**
	 * Removes a smart form group element.
	 *
	 * @param {sap.ui.fl.Change} oChangeWrapper change wrapper object with instructions to be applied on the control map
	 * @param {sap.ui.comp.smartform.GroupElement} oField GroupElement control that matches the change selector for applying the change
	 * @public
	 */
	RemoveField.prototype.applyChange = function(oChangeWrapper, oField) {
		if (oField.getParent) {
			var oGroup = oField.getParent();
			if (oGroup.removeGroupElement) {
				oGroup.removeGroupElement(oField);
			}
		} else {
			throw new Error("no GroupElement control provided for removing the field");
		}
	};

	/**
	 * Completes the change by adding change handler specific content
	 *
	 * @param {sap.ui.fl.Change} oChangeWrapper change wrapper object to be completed
	 * @param {object} oSpecificChangeInfo as an empty object since no additional attributes are required for this operation
	 * @public
	 */
	RemoveField.prototype.completeChangeContent = function(oChangeWrapper, oSpecificChangeInfo) {
		var oChange = oChangeWrapper.getDefinition();
		if (!oChange.content) {
			oChange.content = {};
		}
	};

	return RemoveField;
},
/* bExport= */true);

}; // end of sap/ui/comp/smartform/flexibility/changes/RemoveField.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.flexibility.changes.RemoveGroup') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartform.flexibility.changes.RemoveGroup'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.Base'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/flexibility/changes/RemoveGroup",[
	'jquery.sap.global', 'sap/ui/fl/changeHandler/Base'
], function(jQuery, Base) {
	"use strict";

	/**
	 * Change handler for removing a smart form group.
	 * 
	 * @constructor
	 * @alias sap.ui.fl.changeHandler.RemoveGroup
	 * @author SAP SE
	 * @version 1.36.12
	 * @experimental Since 1.27.0
	 */
	var RemoveGroup = function() {
	};
	RemoveGroup.prototype = jQuery.sap.newObject(Base.prototype);

	/**
	 * Removes a smart form group.
	 * 
	 * @param {sap.ui.fl.Change} oChangeWrapper change wrapper object with instructions to be applied on the control map
	 * @param {sap.ui.comp.smartform.Group} oGroup group control that matches the change selector for applying the change
	 * @public
	 */
	RemoveGroup.prototype.applyChange = function(oChangeWrapper, oGroup) {
		var oInternalForm = null;

		if (oGroup.getParent) {
			oInternalForm = oGroup.getParent();
			if (oInternalForm) {
				if (oInternalForm.removeFormContainer) {
					oInternalForm.removeFormContainer(oGroup);
				}
			}
		} else {
			throw new Error("no Group control provided for removing the group");
		}
	};

	/**
	 * Completes the change by adding change handler specific content
	 * 
	 * @param {sap.ui.fl.Change} oChangeWrapper change wrapper object to be completed
	 * @param {object} oSpecificChangeInfo as an empty object since no additional attributes are required for this operation
	 * @public
	 */
	RemoveGroup.prototype.completeChangeContent = function(oChangeWrapper, oSpecificChangeInfo) {
		var oChange = oChangeWrapper.getDefinition();
		if (!oChange.content) {
			oChange.content = {};
		}
	};

	return RemoveGroup;
},
/* bExport= */true);

}; // end of sap/ui/comp/smartform/flexibility/changes/RemoveGroup.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.flexibility.changes.RenameField') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartform.flexibility.changes.RenameField'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.Base'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/flexibility/changes/RenameField",[
	'sap/ui/fl/Utils', 'jquery.sap.global', 'sap/ui/fl/changeHandler/Base'
], function(Utils, jQuery, Base) {
	"use strict";

	/**
	 * Change handler for renaming a smart form group element.
	 * @constructor
	 * @alias sap.ui.fl.changeHandler.RenameField
	 * @author SAP SE
	 * @version 1.36.12
	 * @experimental Since 1.27.0
	 */
	var RenameField = function() {
	};
	RenameField.prototype = jQuery.sap.newObject(Base.prototype);

	/**
	 * Renames a smart form group element.
	 *
	 * @param {sap.ui.fl.Change} oChangeWrapper change wrapper object with instructions to be applied on the control map
	 * @param {sap.ui.core.Control} oControl control that matches the change selector for applying the change
	 * @public
	 */
	RenameField.prototype.applyChange = function(oChangeWrapper, oControl) {
		var oChange = oChangeWrapper.getDefinition();
		if (oChange.texts && oChange.texts.fieldLabel && this._isProvided(oChange.texts.fieldLabel.value)) {
			if (!oControl) {
				throw new Error("no Control provided for renaming");
			}

			if (typeof oControl.setLabel === 'function') {
				oControl.unbindProperty("label");
				oControl.setLabel(oChange.texts.fieldLabel.value);
			} else if (typeof oControl.setTitle === 'function') {
				oControl.unbindProperty("title");
				oControl.setTitle(oChange.texts.fieldLabel.value);
			} else {
				throw new Error('Control does not support "renameField" change');
			}
		} else {
			Utils.log.error("Change does not contain sufficient information to be applied: [" + oChange.layer + "]" + oChange.namespace + "/" + oChange.fileName + "." + oChange.fileType);
			//however subsequent changes should be applied
		}
	};

	/**
	 * Completes the change by adding change handler specific content
	 *
	 * @param {sap.ui.fl.Change} oChangeWrapper change wrapper object to be completed
	 * @param {object} oSpecificChangeInfo with attribute fieldLabel, the new field label to be included in the change
	 * @public
	 */
	RenameField.prototype.completeChangeContent = function(oChangeWrapper, oSpecificChangeInfo) {
		var oChange = oChangeWrapper.getDefinition();
		if (this._isProvided(oSpecificChangeInfo.fieldLabel)) {
			this.setTextInChange(oChange, "fieldLabel", oSpecificChangeInfo.fieldLabel, "XFLD");
		} else {
			throw new Error("oSpecificChangeInfo.fieldLabel attribute required");
		}
	};
	
	/**
	 * Checks if a string is provided as also empty strings are allowed for the fields
	 */
	RenameField.prototype._isProvided = function(sString){
		return typeof (sString) === "string";
	};
	
	return RenameField;
},
/* bExport= */true);

}; // end of sap/ui/comp/smartform/flexibility/changes/RenameField.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.flexibility.changes.RenameGroup') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartform.flexibility.changes.RenameGroup'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.Base'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/flexibility/changes/RenameGroup",[
	'sap/ui/fl/Utils', 'jquery.sap.global', 'sap/ui/fl/changeHandler/Base'
], function(Utils, jQuery, Base) {
	"use strict";

	/**
	 * Change handler for renaming a SmartForm group.
	 * @constructor
	 * @alias sap.ui.fl.changeHandler.RenameGroup
	 * @author SAP SE
	 * @version 1.36.12
	 * @experimental Since 1.27.0
	 */
	var RenameGroup = function() {
	};
	RenameGroup.prototype = jQuery.sap.newObject(Base.prototype);

	/**
	 * Renames a form group.
	 *
	 * @param {sap.ui.fl.Change} oChangeWrapper change wrapper object with instructions to be applied on the control map
	 * @param {sap.ui.comp.smartform.Group} oGroup Group control that matches the change selector for applying the change
	 * @public
	 */
	RenameGroup.prototype.applyChange = function(oChangeWrapper, oGroup) {
		var oChange = oChangeWrapper.getDefinition();
		if (oChange.texts && oChange.texts.groupLabel && this._isProvided(oChange.texts.groupLabel.value)) {
			if (oGroup && oGroup.setLabel) {
				//remove the model binding, as this might overwrite the change, will be replaced with suspendBinding
				oGroup.unbindProperty("label");
				oGroup.setLabel(oChange.texts.groupLabel.value);
			} else {
				throw new Error("no Group provided for renaming");
			}
		} else {
			Utils.log.error("Change does not contain sufficient information to be applied: [" + oChange.layer + "]" + oChange.namespace + "/" + oChange.fileName + "." + oChange.fileType);
			//however subsequent changes should be applied
		}
	};

	/**
	 * Completes the change by adding change handler specific content
	 *
	 * @param {sap.ui.fl.Change} oChangeWrapper change wrapper object to be completed
	 * @param {object} oSpecificChangeInfo with attribute groupLabel, the new group label to be included in the change
	 * @public
	 */
	RenameGroup.prototype.completeChangeContent = function(oChangeWrapper, oSpecificChangeInfo) {
		var oChange = oChangeWrapper.getDefinition();
		if (this._isProvided(oSpecificChangeInfo.groupLabel)) {
			this.setTextInChange(oChange, "groupLabel", oSpecificChangeInfo.groupLabel, "XFLD");
		} else {
			throw new Error("oSpecificChangeInfo.groupLabel attribute required");
		}
	};
	
	/**
	 * Checks if a string is provided as also empty strings are allowed for the group
	 */
	RenameGroup.prototype._isProvided = function(sString){
		return typeof (sString) === "string";
	};

	return RenameGroup;
},
/* bExport= */true);

}; // end of sap/ui/comp/smartform/flexibility/changes/RenameGroup.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartmicrochart.SmartAreaMicroChartRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.ui.comp.smartmicrochart.SmartAreaMicroChartRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

jQuery.sap.require('sap.suite.ui.microchart.AreaMicroChartRenderer'); // unlisted dependency retained


/**
 * @class SmartAreaMicroChart renderer.
 * @version 1.36.12
 * @experimental Since 1.34.0 This is currently under development. The API could be changed at any point in time.
 * @static
 */
sap.ui.comp.smartmicrochart.SmartAreaMicroChartRenderer = sap.ui.core.Renderer.extend(sap.suite.ui.microchart.AreaMicroChartRenderer);
}; // end of sap/ui/comp/smartmicrochart/SmartAreaMicroChartRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartmicrochart.SmartBulletMicroChartRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.ui.comp.smartmicrochart.SmartBulletMicroChartRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

jQuery.sap.require('sap.suite.ui.microchart.BulletMicroChartRenderer'); // unlisted dependency retained


/**
 * @class SmartBulletMicroChart renderer.
 * @version 1.36.12
 * @experimental Since 1.34.0 This is currently under development. The API could be changed at any point in time.
 * @static
 */
sap.ui.comp.smartmicrochart.SmartBulletMicroChartRenderer = sap.ui.core.Renderer.extend(sap.suite.ui.microchart.BulletMicroChartRenderer);
}; // end of sap/ui/comp/smartmicrochart/SmartBulletMicroChartRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smarttable.SmartTable.designtime') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides the Design Time Metadata for the sap.ui.comp.smarttable.SmartTable control
jQuery.sap.declare('sap.ui.comp.smarttable.SmartTable.designtime'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/comp/smarttable/SmartTable.designtime",[],
	function() {
	"use strict";

	return {
		aggregations : {
			customToolbar : {
				ignore : true
			},
			semanticObjectController : {
				ignore : true
			},
			noData : {
				ignore : true
			}
		}
	
	};

}, /* bExport= */ false);
}; // end of sap/ui/comp/smarttable/SmartTable.designtime.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.util.FormatUtil') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// --------------------------------------------------------------------------------
// Utility class used by smart controls for formatting related operations
// --------------------------------------------------------------------------------
jQuery.sap.declare('sap.ui.comp.util.FormatUtil'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.format.NumberFormat'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/util/FormatUtil",[
	"jquery.sap.global", "sap/ui/model/FilterOperator", "sap/ui/core/format/NumberFormat"
], function(jQuery, FilterOperator, NumberFormat) {
	"use strict";

	/**
	 * Utility class used by smart controls for formatting related operations
	 * 
	 * @private
	 * @experimental This module is only for internal/experimental use!
	 */
	var FormatUtil = {
		/**
		 * Static function that returns a formatted expression based on the displayBehaviour. Fallback is to return the Id (sId)
		 * 
		 * @param {string} sDisplayBehaviour - the display behaviour (e.g. as defined in:
		 *        sap.ui.comp.smartfilterbar.ControlConfiguration.DISPLAYBEHAVIOUR)
		 * @param {string} sId - the Id field value
		 * @param {string} sDescription - the Description field value
		 * @returns {string} the formatted string value based on the displayBehaviour
		 * @private
		 */
		getFormattedExpressionFromDisplayBehaviour: function(sDisplayBehaviour, sId, sDescription) {
			var sTextBinding = null;

			if (!sId) {
				return sDescription ? sDescription : "";
			}

			switch (sDisplayBehaviour) {
				case "descriptionAndId":
					if (sDescription && sId) {
						sTextBinding = sDescription + " (" + sId + ")";
					} else if (!sDescription) {
						sTextBinding = sId;
					}
					break;
				case "idAndDescription":
					if (sDescription && sId) {
						sTextBinding = sId + " (" + sDescription + ")";
					} else if (!sDescription) {
						sTextBinding = sId;
					}
					break;
				case "descriptionOnly":
					sTextBinding = sDescription;
					if (!sDescription) {
						sTextBinding = sId;
					}
					break;
				// fallback to Id in case nothing was specified
				default:
					sTextBinding = sId;
					break;
			}
			return sTextBinding;
		},
		/**
		 * Static function that returns a formatted binding expression based on the displayBehaviour. Fallback is to return the Id (sId)
		 * 
		 * @param {string} sDisplayBehaviour - the display behaviour (e.g. as defined in:
		 *        sap.ui.comp.smartfilterbar.ControlConfiguration.DISPLAYBEHAVIOUR)
		 * @param {string} sId - the Id field name/path in the model
		 * @param {string} sDescription - the Description field name/path in the model
		 * @returns {string} the calculated binding path based on the displayBehaviour
		 * @private
		 */
		getFormattedBindingExpressionFromDisplayBehaviour: function(sDisplayBehaviour, sId, sDescription) {
			return FormatUtil.getFormattedExpressionFromDisplayBehaviour(sDisplayBehaviour, "{" + sId + "}", "{" + sDescription + "}");
		},
		/**
		 * creates and returns a formatted text for the specified range
		 * 
		 * @private
		 * @param {string} sOperation the operation type sap.ui.model.FilterOperator
		 * @param {string} sValue1 value of the first range field
		 * @param {string} sValue2 value of the second range field
		 * @param {boolean} bExclude indicates if the range is an Exclude range
		 * @returns {string} the range token text
		 */
		getFormattedRangeText: function(sOperation, sValue1, sValue2, bExclude) {
			var sTokenText;
			if (sValue1) {
				switch (sOperation) {
					case FilterOperator.EQ:
						sTokenText = "=" + sValue1;
						break;
					case FilterOperator.GT:
						sTokenText = ">" + sValue1;
						break;
					case FilterOperator.GE:
						sTokenText = ">=" + sValue1;
						break;
					case FilterOperator.LT:
						sTokenText = "<" + sValue1;
						break;
					case FilterOperator.LE:
						sTokenText = "<=" + sValue1;
						break;
					case FilterOperator.Contains:
						sTokenText = "*" + sValue1 + "*";
						break;
					case FilterOperator.StartsWith:
						sTokenText = sValue1 + "*";
						break;
					case FilterOperator.EndsWith:
						sTokenText = "*" + sValue1;
						break;
					case FilterOperator.BT:
						if (sValue2) {
							sTokenText = sValue1 + "..." + sValue2;
						}
						break;
					default:
						sTokenText = "";
						break;
				}
			}

			if (bExclude && sTokenText) {
				sTokenText = "!(" + sTokenText + ")";
			}

			return sTokenText;
		},
		_initialiseCurrencyFormatter: function() {
			// create number formatter instance
			if (!FormatUtil._oCurrencyFormatter) {
				FormatUtil._oCurrencyFormatter = NumberFormat.getCurrencyInstance({
					showMeasure: false
				});
			}
			if (!FormatUtil._MAX_CURRENCY_DIGITS) {
				FormatUtil._MAX_CURRENCY_DIGITS = 3;
			}
			FormatUtil._initialiseSpaceChars();
		},
		_initialiseSpaceChars: function() {
			// initialise SPACE chars the 1st time
			if (!FormatUtil._FIGURE_SPACE || !FormatUtil._PUNCTUATION_SPACE) {
				// Whitespace characters to align values
				FormatUtil._FIGURE_SPACE = '\u2007';
				FormatUtil._PUNCTUATION_SPACE = '\u2008';
			}
		},
		/**
		 * creates and returns an Amount Currency formatter, for formatting amount with spaces
		 * 
		 * @private
		 * @returns {function} a formatter function accepting raw value of amount and currency
		 */
		getAmountCurrencyFormatter: function() {
			FormatUtil._initialiseCurrencyFormatter();
			if (!FormatUtil._fAmountCurrencyFormatter) {
				FormatUtil._fAmountCurrencyFormatter = function(oAmount, sCurrency) {
					// Adapted logic from sap.ui.unified.Currency to implement basic padding for some currencies (Ex: JPY)
					var sValue, iCurrencyDigits, iPadding;
					if (oAmount === undefined || oAmount === null || sCurrency === "*") {
						return "";
					}
					// Get the formatted numeric value
					sValue = FormatUtil._oCurrencyFormatter.format(oAmount, sCurrency);

					// Get the currency digits
					iCurrencyDigits = FormatUtil._oCurrencyFormatter.oLocaleData.getCurrencyDigits(sCurrency);

					// Add padding for decimal "."
					if (iCurrencyDigits === 0) {
						sValue += FormatUtil._PUNCTUATION_SPACE;
					}
					// Calculate and set padding for missing currency digits
					iPadding = FormatUtil._MAX_CURRENCY_DIGITS - iCurrencyDigits;
					if (iPadding) {
						sValue = jQuery.sap.padRight(sValue, FormatUtil._FIGURE_SPACE, sValue.length + iPadding);
					}
					return sValue;
				};
			}
			return FormatUtil._fAmountCurrencyFormatter;
		},
		/**
		 * creates and returns a Currency symbol formatter
		 * 
		 * @private
		 * @returns {function} a formatter function accepting currency value
		 */
		getCurrencySymbolFormatter: function() {
			FormatUtil._initialiseCurrencyFormatter();
			if (!FormatUtil._fCurrencySymbolFormatter) {
				// Formatter function for currency symbol conversion
				FormatUtil._fCurrencySymbolFormatter = function(sCurrency) {
					if (!sCurrency || sCurrency === "*") {
						return "";
					}
					return FormatUtil._oCurrencyFormatter.oLocaleData.getCurrencySymbol(sCurrency);
				};
			}
			return FormatUtil._fCurrencySymbolFormatter;
		},
		/**
		 * creates and returns a Measure Unit formatter, for formatting measure values with spaces
		 * 
		 * @private
		 * @returns {function} a formatter function accepting strings for value and unit (unit is not used currently)
		 */
		getMeasureUnitFormatter: function() {
			FormatUtil._initialiseSpaceChars();
			if (!FormatUtil._fMeasureFormatter) {
				// Formatter function for value part of measure
				FormatUtil._fMeasureFormatter = function(sValue, sUnit) {
					if (sValue === undefined || sValue === null || sUnit === "*") {
						return "";
					}
					return sValue + FormatUtil._FIGURE_SPACE;
				};
			}
			return FormatUtil._fMeasureFormatter;
		},
		/**
		 * Returns Time in 'PT'HH'H'mm'M'ss'S' format (as expected by Edm.Time fields)
		 * 
		 * @private
		 * @param {Object} oDate - The input date object
		 * @returns {string} The time in 'PT'HH'H'mm'M'ss'S' format
		 */
		getEdmTimeFromDate: function(oDate) {
			if (!FormatUtil._oTimeFormat) {
				jQuery.sap.require("sap.ui.core.format.DateFormat");
				FormatUtil._oTimeFormat = sap.ui.core.format.DateFormat.getTimeInstance({
					pattern: "'PT'HH'H'mm'M'ss'S'"
				});
			}
			return FormatUtil._oTimeFormat.format(oDate);
		},
		/**
		 * Returns the width from the metadata attributes. min-width if there is no width specified
		 * 
		 * @param {object} oField - OData metadata for the table field
		 * @param {Number} iMax - The max width (optional, default 30)
		 * @param {Number} iMin - The min width (optional, default 3)
		 * @returns {string} - width of the filter field in em
		 * @private
		 */
		getWidth: function(oField, iMax, iMin) {
			var sWidth = oField.maxLength || oField.precision, iWidth;
			if (!iMax) {
				iMax = 30;
			}
			if (!iMin) {
				iMin = 3;
			}
			// Force set the width to 9em for date fields
			if (oField.type === "Edm.DateTime" && oField.displayFormat === "Date") {
				sWidth = "9em";
			} else if (sWidth) {
				// Use max width if "Max is set in the
				if (sWidth === "Max") {
					sWidth = iMax + "";
				}
				iWidth = parseInt(sWidth, 10);
				if (!isNaN(iWidth)) {
					// Add additional .75 em (~12px) to avoid showing ellipsis in some cases!
					iWidth += 0.75;
					// use a max initial width of 50em (default)
					if (iWidth > iMax) {
						iWidth = iMax;
					} else if (iWidth < iMin) {
						// use a min width of 3em (default)
						iWidth = iMin;
					}
					sWidth = iWidth + "em";
				} else {
					// if NaN reset the width so min width would be used
					sWidth = null;
				}
			}
			if (!sWidth) {
				// For Boolean fields - Use min width as the fallabck, in case no width could be derived.
				if (oField.type === "Edm.Boolean") {
					sWidth = iMin + "em";
				} else {
					// use the max width as the fallback width of the column, if no width can be derived
					sWidth = iMax + "em";
				}
			}
			return sWidth;
		}
	};

	return FormatUtil;

}, /* bExport= */true);

}; // end of sap/ui/comp/util/FormatUtil.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.valuehelpdialog.ItemsCollection') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.valuehelpdialog.ItemsCollection'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/valuehelpdialog/ItemsCollection",['jquery.sap.global', 'sap/ui/comp/util/FormatUtil'],
	function(jQuery, FormatUtil) {
	"use strict";


	/**
	 * Constructs a class to map key/object pairs
	 * 
	 * @constructor
	 * @public
	 * @author Peter Harbusch
	 */
	var ItemsCollection = function() {
		this.items = {};
	};
	
	/**
	 * Add or overwrite a key in the map and the associated obj.
	 * 
	 * @param {string} the key of the obj in the map
	 * @param {object} the obj which has to been stored in the map
	 * @public
	 */
	ItemsCollection.prototype.add = function(sKey, obj) {
		this.items[sKey] = obj;
	};
	
	/**
	 * Removes the key in the map and the associated obj.
	 * 
	 * @param {string} sKey - the key of the obj in the map
	 * @public
	 */
	ItemsCollection.prototype.remove = function(sKey) {
		delete this.items[sKey];
	};
	
	/**
	 * Removes all the items.
	 * 
	 * @public
	 */
	ItemsCollection.prototype.removeAll = function() {
		this.items = {};
	};
	
	/**
	 * Returns the obj of the key on the map.
	 * 
	 * @param {string} sKey - the key of the obj in the map
	 * @returns {object} the object with the given key
	 * @public
	 */
	ItemsCollection.prototype.getItem = function(sKey) {
		return this.items[sKey];
	};
	
	/**
	 * returns an array of all keys in the map
	 * 
	 * @returns {array} the array of all the map keys
	 * @public
	 */
	ItemsCollection.prototype.getItems = function() {
		var aKeys = [];
		for ( var item in this.items) {
			aKeys.push(item);
		}
		return aKeys;
	};
	
	/**
	 * Returns an array of all selected tokens in the map.
	 * 
	 * @param {string} sKey - the property name of the obj in the map which will be used for the Display Key in the tokens returned in the array
	 * @param {string} sDescriptionKey - the property name of the obj in the map which will be returned in the array
	 * @param {string} sDisplayBehaviour - the behaviour/format of the token text (See: sap.ui.comp.smartfilterbar.ControlConfiguration.DISPLAYBEHAVIOUR)
	 * @returns {sap.m.Token[]} array of tokens with the given key and the text value
	 * @public
	 */
	ItemsCollection.prototype.getSelectedItemsTokenArray = function(sKey, sDescriptionKey, sDisplayBehaviour) {
		var aTokens = [];
		for ( var sItemKey in this.items) {
			var oItem = this.items[sItemKey];
			var sText, sDisplayKey;
			
			if (typeof oItem === "string") {
				sDisplayKey = sItemKey;
				sText = oItem;
			} else {
				sDisplayKey = oItem[sKey];
				sText = oItem[sDescriptionKey];
	
				if (sText === undefined) {
					sText = this.items[sItemKey];
				} else {
					if (!sDisplayBehaviour) {
						sDisplayBehaviour = "descriptionAndId";
					}
					sText = FormatUtil.getFormattedExpressionFromDisplayBehaviour(sDisplayBehaviour, sDisplayKey, sText);					
				}
			}
			
			var oToken = new sap.m.Token({
				key: sDisplayKey,
				text: sText,
				tooltip: sText
			});
			
			if (typeof oItem !== "string") {
				oToken.data("row", oItem);
				oToken.data("longKey", sItemKey);
			}
			aTokens.push(oToken);
		}
		return aTokens;
	};
	
	/**
	 * Returns an array of all objects in the map.
	 * 
	 * @returns {string[]} array of all the map objects
	 * @public
	 */
	ItemsCollection.prototype.getModelData = function() {
		var aModelItems = [];
		for ( var itemKey in this.items) {
			var item = this.items[itemKey];
			if (typeof item === "string") {
				item = {
					missing: itemKey
				};
			}
			aModelItems.push(item);
		}
		return aModelItems;
	};
	

	return ItemsCollection;

}, /* bExport= */ true);

}; // end of sap/ui/comp/valuehelpdialog/ItemsCollection.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.config.condition.DateRangeType') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides sap.ui.comp.config.condition.DateRangeType.
jQuery.sap.declare('sap.ui.comp.config.condition.DateRangeType'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.Input'); // unlisted dependency retained
jQuery.sap.require('sap.m.DateRangeSelection'); // unlisted dependency retained
jQuery.sap.require('sap.m.DatePicker'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.m.Select'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.date.UniversalDate'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Locale'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.LocaleData'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.Filter'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/config/condition/DateRangeType",[
	'jquery.sap.global', 'sap/ui/comp/config/condition/Type', 'sap/m/Input', 'sap/m/DateRangeSelection', 'sap/m/DatePicker', 'sap/m/Text', 'sap/m/Select', 'sap/ui/core/date/UniversalDate', 'sap/ui/core/Locale', 'sap/ui/core/LocaleData', 'sap/ui/model/odata/Filter'
], function(jQuery, Type, Input, DateRangeSelection, DatePicker, Text, Select, UniversalDate, Locale, LocaleData, Filter) {
	"use strict";

	sap.ui.model.type.Integer.extend("sap.ui.model.type.NullableInteger", {
		parseValue: function(oValue, sInternalType) {
			switch (this.getPrimitiveType(sInternalType)) {
				case "string":
					if (oValue === "") {
						return null;
					}
			}

			return sap.ui.model.type.Integer.prototype.parseValue.apply(this, arguments);
		}
	});


	var DateRangeType = Type.extend("sap.ui.comp.config.condition.DateRangeType", /** @lends "sap.ui.comp.config.condition.DateRangeType.prototype */{
		constructor: function(sFieldName, oFilterProvider, oFieldViewMetadata) {
			Type.apply(this, [
				sFieldName, oFilterProvider, oFieldViewMetadata
			]);
			this.oDateFormat = oFilterProvider && oFilterProvider._oDateFormatSettings ? oFilterProvider._oDateFormatSettings : {
				UTC: true
			};

			this._bIgnoreTime = false;
			this.bMandatory = this.oFieldMetadata ? this.oFieldMetadata.isMandatory : false;
		}
	});

	DateRangeType.prototype.applySettings = function(oSettings) {
		Type.prototype.applySettings.apply(this, arguments);

		if (oSettings && oSettings.ignoreTime) {
			this._bIgnoreTime = oSettings.ignoreTime;
		}
	};


	/**
	 * Sets and returns the given date with the start time 00:00:00.000 UTC
	 *
	 * @param {UniversalDate} oDate the date
	 * @returns {UniversalDate} the given date with the start time 00:00:00.000 UTC
	 */
	DateRangeType.setStartTime = function(oDate) {
		if (oDate instanceof Date) {
			oDate = new UniversalDate(oDate);
		}
		if (!oDate) {
			oDate = new UniversalDate();
		}
		oDate.setHours(0);
		oDate.setMinutes(0);
		oDate.setSeconds(0);
		oDate.setMilliseconds(0);
		return oDate;
	};

	/**
	 * Sets and returns the given date with the end time 23:59:59.999 UTC
	 *
	 * @param {UniversalDate} oDate the date
	 * @returns {UniversalDate} the given date with the end time 23:59:59.999 UTC
	 */
	DateRangeType.setEndTime = function(oDate) {
		oDate = DateRangeType.toUniversalDate(oDate);
		oDate.setHours(23);
		oDate.setMinutes(59);
		oDate.setSeconds(59);
		oDate.setMilliseconds(999);
		return oDate;
	};

	DateRangeType.toUniversalDate = function(oDate) {
		if (oDate instanceof Date) {
			oDate = new UniversalDate(oDate);
		}
		if (!oDate) {
			oDate = new UniversalDate();
		}
		return oDate;
	};

	/**
	 * Returns the weeks start date of a given universal date based on the locale and format settings
	 */
	DateRangeType.getWeekStartDate = function(oUniversalDate) {
		var oLocale = new Locale(sap.ui.getCore().getConfiguration().getFormatSettings().getFormatLocale().toString()), oLocaleData = LocaleData.getInstance(oLocale), iFirstDayOfWeek = oLocaleData.getFirstDayOfWeek();
		if (!oUniversalDate) {
			oUniversalDate = new UniversalDate();
		}
		oUniversalDate.setDate(oUniversalDate.getDate() - oUniversalDate.getDay() + iFirstDayOfWeek);
		return DateRangeType.setStartTime(oUniversalDate);
	};

	/**
	 * Returns the month start date of a given universal date
	 */
	DateRangeType.getMonthStartDate = function(oUniversalDate) {
		if (!oUniversalDate) {
			oUniversalDate = new UniversalDate();
		}
		oUniversalDate.setDate(1);
		return DateRangeType.setStartTime(oUniversalDate);
	};

	/**
	 * Returns the quarter start date of a given universal date
	 */
	DateRangeType.getQuarterStartDate = function(oUniversalDate) {
		if (!oUniversalDate) {
			oUniversalDate = new UniversalDate();
		}
		oUniversalDate.setMonth(3 * Math.floor(oUniversalDate.getMonth() / 3));
		oUniversalDate.setDate(1);
		return DateRangeType.setStartTime(oUniversalDate);
	};

	/**
	 * Returns the years start date of a given universal date. If no date is given, today is used.
	 *
	 * @param {sap.ui.core.date.UniversalDate} [oUniversalDate] the universal date
	 * @returns the years start date of a given universal date.
	 * @public
	 */
	DateRangeType.getYearStartDate = function(oUniversalDate) {
		if (!oUniversalDate) {
			oUniversalDate = new UniversalDate();
		}
		oUniversalDate.setMonth(0);
		oUniversalDate.setDate(1);
		return DateRangeType.setStartTime(oUniversalDate);
	};

	/**
	 * Returns an array of a date range based on the given universal date If no date is given, today is used.
	 *
	 * @param {int} iValue positive and negative values to calculate the date range
	 * @param {string} sType defines the range that the iValue refers to ("DAY","WEEK","MONTH","QUARTER","YEAR")
	 * @param {sap.ui.core.date.UniversalDate} [oUniversalDate] the universal date
	 * @returns {sap.ui.core.date.UniversalDate[]} array with 2 values where [0] is the start and [1] is the end date for the range
	 * @public
	 */
	DateRangeType.getDateRange = function(iValue, sType, oUniversalDate, bCalcBaseStartDate) {
		if (oUniversalDate === true) {
			bCalcBaseStartDate = true;
			oUniversalDate = null;
		}
		if (!oUniversalDate) {
			oUniversalDate = new UniversalDate();
		}
		var oStartDate = new UniversalDate(), oEndDate;
		if (oUniversalDate) {
			oStartDate.oDate.setTime(oUniversalDate.getTime());
			oStartDate = DateRangeType.setStartTime(oStartDate);
		}
		if (iValue !== 0) {
			if (sType === "DAY") {
				oEndDate = new UniversalDate(oStartDate);
				oEndDate.setDate(oStartDate.getDate() + iValue);
			} else if (sType === "WEEK") {
				if (bCalcBaseStartDate) {
					oStartDate = DateRangeType.getWeekStartDate(oStartDate);
				}
				oEndDate = new UniversalDate(oStartDate);
				oEndDate.setDate(oStartDate.getDate() + (iValue * 7));
			} else if (sType === "MONTH") {
				if (bCalcBaseStartDate) {
					oStartDate = DateRangeType.getMonthStartDate(oStartDate);
				}
				oEndDate = new UniversalDate(oStartDate);
				oEndDate.setMonth(oStartDate.getMonth() + iValue);
			} else if (sType === "QUARTER") {
				if (bCalcBaseStartDate) {
					oStartDate = DateRangeType.getQuarterStartDate(oStartDate);
				}
				oEndDate = new UniversalDate(oStartDate);
				oEndDate.setMonth(oStartDate.getMonth() + (iValue * 3));
			} else if (sType === "YEAR") {
				if (bCalcBaseStartDate) {
					oStartDate = DateRangeType.getYearStartDate(oStartDate);
				}
				oEndDate = new UniversalDate(oStartDate);
				oEndDate.setFullYear(oStartDate.getFullYear() + iValue);
			}
		}
		if (!oEndDate) {
			return [];
		}
		if (oEndDate.getTime() < oStartDate.getTime()) {
			// swap start/end date
			oEndDate = [oStartDate, oStartDate = oEndDate][0];
		}

		// adjust endDate
		oEndDate.setDate( oEndDate.getDate() - 1);

		return [
			DateRangeType.setStartTime(oStartDate), DateRangeType.setEndTime(oEndDate)
		];
	};

	DateRangeType.getTextField = function(oInstance, bExpression) {
		if (bExpression) {
			return new Text({
				text: "{path: '$smartEntityFilter>value1', type:'sap.ui.model.type.Date', formatOptions:" + JSON.stringify({
					style: oInstance.oDateFormat.style,
					pattern: oInstance.oDateFormat.pattern
				}) + "} - {path: '$smartEntityFilter>value2', type:'sap.ui.model.type.Date', formatOptions:" + JSON.stringify({
					style: oInstance.oDateFormat.style,
					pattern: oInstance.oDateFormat.pattern
				}) + "}"
			});
		}
		return new Text({
			text: {
				path: '$smartEntityFilter>value1',
				type: 'sap.ui.model.type.Date',
				formatOptions: {
					style: oInstance.oDateFormat.style,
					pattern: oInstance.oDateFormat.pattern
				}
			}
		});
	};

	DateRangeType.getIntField = function(oInstance) {
		return new Input({
			width: "7rem",
			ariaLabelledBy: oInstance.oOperationSelect || null,
			value: {
				path: "$smartEntityFilter>value1",
				type: "sap.ui.model.type.NullableInteger"
			},
			textAlign: "End",
			type: "Number",
			valueState: {
				path: "$smartEntityFilter>/inputstate",
				formatter: function() {
					if (this.getBinding("valueState").getValue() === "ERROR") {
						return sap.ui.core.ValueState.Error;
					} else {
						return sap.ui.core.ValueState.None;
					}
				}
			}
		});
	};

	DateRangeType.getDescriptionText = function(sTextKey, sTextMulti, sResourceBundle) {
		return new Text({
			wrapping: false,
			text: {
				path: "$smartEntityFilter>value1",
				type: "sap.ui.model.type.Integer",
				formatter: function() {
					if (this.getBinding("text").getValue() === 1) {
						return Type.getTranslatedText(sTextKey, sResourceBundle);
					} else {
						return Type.getTranslatedText(sTextMulti || sTextKey, sResourceBundle);
					}
				}
			}
		});
	};

	DateRangeType.ControlFactory = function(oInstance, aResult, oOperation) {
		if (oOperation.type === "range") {
			var oControl = DateRangeType.getTextField(oInstance, oOperation.display !== "start");
			oControl.addStyleClass("sapUiCompFilterBarCTPaddingLeft");
			aResult.push(oControl);
			return;
		}
		if (oOperation.type === "int") {
			var oControl = DateRangeType.getIntField(oInstance);
			oControl.addStyleClass("sapUiCompFilterBarCTPaddingLeft");
			aResult.push(oControl);
			oControl.setWidth(oInstance.sWidth);
			if (oOperation.descriptionTextKeys) {
				oControl.setWidth("100%");
				var oText = DateRangeType.getDescriptionText(oOperation.descriptionTextKeys[0],oOperation.descriptionTextKeys[1]);
				oText.addStyleClass("sapUiCompFilterBarCTPaddingLeft");
				aResult.push(oText);
				oText.setWidth("auto");
				//it would be better we could use the oControl.addAriaDescribedBy(oText)
				oControl.addAriaLabelledBy(oText);
			}
		}

	};

	DateRangeType.getFixedRangeOperation = function(sKey, sTextKey, sCategory, aDefaults) {
		return {
			key: sKey,
			textKey: sTextKey,
			category: sCategory,
			defaultValues: aDefaults || null,
			value1: null,
			value2: null,
			type: "range",
			display: "range",
			getControls: DateRangeType.ControlFactory
		};
	};

	/**
	 * Supported operations of the DateRangeType
	 */
	DateRangeType.Operations = {
		DATERANGE: {
			key: "DATERANGE",
			textKey: "CONDITION_DATERANGETYPE_DATERANGE",
			category: "DYNAMIC.DATERANGE",
			defaultOperation: true,
			defaultValues: [
				null, null
			],
			value1: null,
			value2: null,
			getControls: function(oInstance, aResult) {
				var oControl = new DateRangeSelection({
					ariaLabelledBy: oInstance.oOperationSelect || null,
					dateValue: {
						path: "$smartEntityFilter>value1"
					},
					secondDateValue: {
						path: "$smartEntityFilter>value2"
					},
					displayFormat: oInstance.oDateFormat.style || "",
					valueState: {
						path: "$smartEntityFilter>/inputstate",
						formatter: function() {
							if (this.getBinding("valueState").getValue() === "ERROR") {
								return sap.ui.core.ValueState.Error;
							} else {
								return sap.ui.core.ValueState.None;
							}
						}
					},
					change: function(oEvent) {
						var bValid = oEvent.getParameter("valid");

						if (bValid) {
							this.fireValidationSuccess({
								element: this
							}, false, true);
						} else {
							this.fireValidationError({
								element: this
							}, false, true);
						}
					}
				});
				oControl.addStyleClass("sapUiCompFilterBarCTPaddingLeft");
				aResult.push(oControl);
			}
		},
		FROM: {
			key: "FROM",
			textKey: "CONDITION_DATERANGETYPE_FROM",
			category: "DYNAMIC.DATE",
			defaultValues: [
				null
			],
			value1: null,
			getControls: function(oInstance, aResult) {
				var oControl = new DatePicker({
					ariaLabelledBy: oInstance.oOperationSelect || null,
					value: {
						path: "$smartEntityFilter>value1",
						type: "sap.ui.model.type.Date",
						formatOptions: {
							style: oInstance.oDateFormat.style,
							pattern: oInstance.oDateFormat.pattern
						}
					},
					valueState: {
						path: "$smartEntityFilter>/inputstate",
						formatter: function() {
							if (this.getBinding("valueState").getValue() === "ERROR") {
								return sap.ui.core.ValueState.Error;
							} else {
								return sap.ui.core.ValueState.None;
							}
						}
					}
				});
				oControl.addStyleClass("sapUiCompFilterBarCTPaddingLeft");
				aResult.push(oControl);
			}
		},
		TO: {
			key: "TO",
			textKey: "CONDITION_DATERANGETYPE_TO",
			category: "DYNAMIC.DATE",
			defaultValues: [
				null
			],
			value1: null,
			getControls: function(oInstance, aResult, oOperation) {
				var oControl = new DatePicker({
					ariaLabelledBy: oInstance.oOperationSelect || null,
					value: {
						path: "$smartEntityFilter>value1",
						type: "sap.ui.model.type.Date",
						formatOptions: {
							style: oInstance.oDateFormat.style,
							pattern: oInstance.oDateFormat.pattern
						}
					},
					valueState: {
						path: "$smartEntityFilter>/inputstate",
						formatter: function() {
							if (this.getBinding("valueState").getValue() === "ERROR") {
								return sap.ui.core.ValueState.Error;
							} else {
								return sap.ui.core.ValueState.None;
							}
						}
					}
				});
				oControl.addStyleClass("sapUiCompFilterBarCTPaddingLeft");
				aResult.push(oControl);
			}
		},
		LASTDAYS: {
			key: "LASTDAYS",
			textKey: "CONDITION_DATERANGETYPE_LASTDAYS",
			category: "DYNAMIC.DATE.INT",
			defaultValues: [
				1
			],
			value1: null,
			type: "int",
			descriptionTextKeys: ["CONDITION_DATERANGETYPE_SINGLE_DAY","CONDITION_DATERANGETYPE_MULTIPLE_DAYS"],
			getControls: DateRangeType.ControlFactory
		},
		LASTWEEKS: {
			key: "LASTWEEKS",
			textKey: "CONDITION_DATERANGETYPE_LASTWEEKS",
			category: "DYNAMIC.WEEK.INT",
			defaultValues: [
				1
			],
			value1: null,
			type: "int",
			descriptionTextKeys: ["CONDITION_DATERANGETYPE_SINGLE_WEEK","CONDITION_DATERANGETYPE_MULTIPLE_WEEKS"],
			getControls: DateRangeType.ControlFactory
		},
		LASTMONTHS: {
			key: "LASTMONTHS",
			textKey: "CONDITION_DATERANGETYPE_LASTMONTHS",
			category: "DYNAMIC.MONTH.INT",
			defaultValues: [
				1
			],
			value1: null,
			type: "int",
			descriptionTextKeys: ["CONDITION_DATERANGETYPE_SINGLE_MONTH","CONDITION_DATERANGETYPE_MULTIPLE_MONTHS"],
			getControls: DateRangeType.ControlFactory
		},
		LASTQUARTERS: {
			key: "LASTQUARTERS",
			textKey: "CONDITION_DATERANGETYPE_LASTQUARTERS",
			category: "DYNAMIC.QUARTER.INT",
			defaultValues: [
				1
			],
			value1: null,
			type: "int",
			descriptionTextKeys: ["CONDITION_DATERANGETYPE_SINGLE_QUARTER","CONDITION_DATERANGETYPE_MULTIPLE_QUARTERS"],
			getControls: DateRangeType.ControlFactory
		},
		LASTYEARS: {
			key: "LASTYEARS",
			textKey: "CONDITION_DATERANGETYPE_LASTYEARS",
			category: "DYNAMIC.YEAR.INT",
			defaultValues: [
				1
			],
			value1: null,
			type: "int",
			descriptionTextKeys: ["CONDITION_DATERANGETYPE_SINGLE_YEAR","CONDITION_DATERANGETYPE_MULTIPLE_YEARS"],
			getControls: DateRangeType.ControlFactory
		},
		SPECIFICMONTH: {
			key: "SPECIFICMONTH",
			textKey: "CONDITION_DATERANGETYPE_SPECIFICMONTH",
			category: "DYNAMIC.MONTH",
			defaultValues: function() {
				var oDate = new UniversalDate();
				return [
					oDate.getMonth()
				];
			},
			value1: null,
			getControls: function(oInstance, aResult, oOperation) {
				var oSelect = new Select({
					ariaLabelledBy: oInstance.oOperationSelect || null,
					width: "12rem",
					selectedKey: {
						path: "$smartEntityFilter>value1",
						type: "sap.ui.model.type.Integer"
					}
				});
				oSelect.bindAggregation("items", {
					path: "$smartEntityFilter>/currentoperation/valueList",
					template: new sap.ui.core.ListItem({
						text: {
							path: "$smartEntityFilter>text"
						},
						key: {
							path: "$smartEntityFilter>key"
						}
					})
				});
				oSelect.addStyleClass("sapUiCompFilterBarCTMarginLeft");
				aResult.push(oSelect);
			},
			getValueList: function() {
				var oDate = new UniversalDate(),
					aMonths = [],
					oFormatter = sap.ui.core.format.DateFormat.getDateInstance({
						pattern: "MMMM"
					});
				oDate.setDate(15);
				oDate.setMonth(0);
				for (var i = 0; i < 12; i++) {
					aMonths.push({
						text: oFormatter.format(oDate),
						key: i
					});
					oDate.setMonth(oDate.getMonth() + 1);
				}
				return aMonths;
			}
		},
		TODAY: {
			key: "TODAY",
			textKey: "CONDITION_DATERANGETYPE_TODAY",
			category: "FIXED.DATE",
			defaultValues: function() {
				return DateRangeType.getDateRange(1, "DAY", true);
			},
			type: "range",
			display: "start",
			getControls: DateRangeType.ControlFactory
		},
		THISWEEK: DateRangeType.getFixedRangeOperation("THISWEEK", "CONDITION_DATERANGETYPE_THISWEEK", "FIXED.WEEK", function() {
			return DateRangeType.getDateRange(1, "WEEK", true);
		}),
		LASTWEEK: DateRangeType.getFixedRangeOperation("LASTWEEK", "CONDITION_DATERANGETYPE_LASTWEEK", "FIXED.WEEK", function() {
			return DateRangeType.getDateRange(-1, "WEEK", true);
		}),
		LAST2WEEKS: DateRangeType.getFixedRangeOperation("LAST2WEEKS", "CONDITION_DATERANGETYPE_LAST2WEEKS", "FIXED.WEEK", function() {
			return DateRangeType.getDateRange(-2, "WEEK", true);
		}),
		LAST3WEEKS: DateRangeType.getFixedRangeOperation("LAST3WEEKS", "CONDITION_DATERANGETYPE_LAST3WEEKS", "FIXED.WEEK", function() {
			return DateRangeType.getDateRange(-3, "WEEK", true);
		}),
		LAST4WEEKS: DateRangeType.getFixedRangeOperation("LAST4WEEKS", "CONDITION_DATERANGETYPE_LAST4WEEKS", "FIXED.WEEK", function() {
			return DateRangeType.getDateRange(-4, "WEEK", true);
		}),
		LAST5WEEKS: DateRangeType.getFixedRangeOperation("LAST5WEEKS", "CONDITION_DATERANGETYPE_LAST5WEEKS", "FIXED.WEEK", function() {
			return DateRangeType.getDateRange(-5, "WEEK", true);
		}),
		THISMONTH: DateRangeType.getFixedRangeOperation("THISMONTH", "CONDITION_DATERANGETYPE_THISMONTH", "FIXED.MONTH", function() {
			return DateRangeType.getDateRange(1, "MONTH", true);
		}),
		LASTMONTH: DateRangeType.getFixedRangeOperation("LASTMONTH", "CONDITION_DATERANGETYPE_LASTMONTH", "FIXED.MONTH", function() {
			return DateRangeType.getDateRange(-1, "MONTH", true);
		}),
		THISQUARTER: DateRangeType.getFixedRangeOperation("THISQUARTER", "CONDITION_DATERANGETYPE_THISQUARTER", "FIXED.QUARTER", function() {
			return DateRangeType.getDateRange(1, "QUARTER", true);
		}),
		LASTQUARTER: DateRangeType.getFixedRangeOperation("LASTQUARTER", "CONDITION_DATERANGETYPE_LASTQUARTER", "FIXED.QUARTER", function() {
			return DateRangeType.getDateRange(-1, "QUARTER", true);
		}),
		YEARTODATE: DateRangeType.getFixedRangeOperation("YEARTODATE", "CONDITION_DATERANGETYPE_YEARTODATE", "FIXED.YEAR", function() {
			return [
				DateRangeType.getYearStartDate(new UniversalDate()), DateRangeType.setEndTime()
			];
		}),
		THISYEAR: DateRangeType.getFixedRangeOperation("THISYEAR", "CONDITION_DATERANGETYPE_THISYEAR", "FIXED.YEAR", function() {
			return DateRangeType.getDateRange(1, "YEAR", true);
		}),
		LASTYEAR: DateRangeType.getFixedRangeOperation("LASTYEAR", "CONDITION_DATERANGETYPE_LASTYEAR", "FIXED.YEAR", function() {
			return DateRangeType.getDateRange(-1, "YEAR", true);
		}),
		QUARTER1: DateRangeType.getFixedRangeOperation("QUARTER1", "CONDITION_DATERANGETYPE_QUARTER1", "FIXED.QUARTER", function() {
			var oStartDate = DateRangeType.getYearStartDate();
			return DateRangeType.getDateRange(1, "QUARTER", oStartDate);
		}),
		QUARTER2: DateRangeType.getFixedRangeOperation("QUARTER2", "CONDITION_DATERANGETYPE_QUARTER2", "FIXED.QUARTER", function() {
			var oStartDate = DateRangeType.getDateRange(1, "QUARTER", DateRangeType.getYearStartDate())[1];
			oStartDate.setMilliseconds(1000);
			return DateRangeType.getDateRange(1, "QUARTER", oStartDate);
		}),
		QUARTER3: DateRangeType.getFixedRangeOperation("QUARTER3", "CONDITION_DATERANGETYPE_QUARTER3", "FIXED.QUARTER", function() {
			var oStartDate = DateRangeType.getDateRange(2, "QUARTER", DateRangeType.getYearStartDate())[1];
			oStartDate.setMilliseconds(1000);
			return DateRangeType.getDateRange(1, "QUARTER", oStartDate);
		}),
		QUARTER4: DateRangeType.getFixedRangeOperation("QUARTER4", "CONDITION_DATERANGETYPE_QUARTER4", "FIXED.QUARTER", function() {
			var oStartDate = DateRangeType.getDateRange(3, "QUARTER", DateRangeType.getYearStartDate())[1];
			oStartDate.setMilliseconds(1000);
			return DateRangeType.getDateRange(1, "QUARTER", oStartDate);
		})
	};

	/**
	 * Returns the controls to be used for the given operation
	 *
	 * @param {object} oOperation the current operation of the condition type
	 * @returns [sap.ui.core.Control] Array of controls to be used to visualize the condition types operation
	 * @protected
	 */
	DateRangeType.prototype.getControls = function(oOperation) {
		var aControls = [];
		if (!oOperation) {
			return;
		}
		oOperation.getControls(this, aControls, oOperation);
		return aControls;
	};


	/**
	 * Property setter for the ignoreTime
	 *
	 * @param {boolean} bIgnoreTime new value of this property
	 * @public
	 */
	DateRangeType.prototype.setIgnoreTime = function(bIgnoreTime) {
		this._bIgnoreTime = bIgnoreTime;
	};

	/**
	 * Gets current value of property ignoreTime.
	 * When the value is true, the returned range enddate has a time stamp of 00:00:00. The default for the time stamp is 23:59:59:999
	 *
	 * Default value is false.
	 *
	 * @returns {boolean} of controls to be used to visualize the condition types operation
	 * @public
	 */
	Type.prototype.getIgnoreTime = function(bIgnoreTime) {
		return this._bIgnoreTime;
	};

	/**
	 * Returns the default values for the given operation
	 *
	 * @param {object} oOperation the current operation of the condition type
	 * @returns [object] Array of default values to be used for the operation
	 * @protected
	 */
	DateRangeType.prototype.getDefaultValues = function(oOperation) {
		if (!oOperation) {
			return [];
		}
		var aDefaultValues = oOperation.defaultValues || [];
		if (typeof aDefaultValues === "function") {
			aDefaultValues = oOperation.defaultValues();
		}
		var oCondition = this.getCondition(),
			oValue1 = aDefaultValues[0] || null,
			oValue2 = aDefaultValues[1] || null;
		if (oOperation.key === "DATERANGE" && oCondition && oCondition.value1 && oCondition.value2) {
			//Default fallback to a date range if value1 and value2 are already provided as dates
			oValue1 = oCondition.value1.oDate;
			oValue2 = oCondition.value2.oDate;
		}

		// make sure that both values are of type UniversalDate
		if (oValue1 instanceof Date) {
			oValue1 = new UniversalDate(oValue1);
		}
		if (oValue2 instanceof Date) {
			oValue2 = new UniversalDate(oValue2);
		}

		return [
			oValue1, oValue2
		];
	};

	DateRangeType.prototype.getOperations = function() {
		var aOperations = [];
		for ( var n in DateRangeType.Operations) {
			var oOperation = DateRangeType.Operations[n];
			if (this._filterOperation(oOperation)) {
				aOperations.push(oOperation);
			}
		}
		return aOperations;
	};

	DateRangeType.prototype._updateOperation = function(oOperation) {
		Type.prototype._updateOperation.apply(this,[oOperation]);
		if (oOperation.display) {
			var aDefaultValues = this.getDefaultValues(oOperation), oFormatSettings = {
				style: this.oDateFormat.style,
				pattern: this.oDateFormat.pattern
			};
			if (oOperation.display === "start") {
				oOperation.textValue = sap.ui.core.format.DateFormat.getInstance(oFormatSettings).format(aDefaultValues[0].oDate);
			} else if (oOperation.display === "range") {
				oOperation.textValue = sap.ui.core.format.DateFormat.getInstance(oFormatSettings).format(aDefaultValues[0].oDate) + " - " + sap.ui.core.format.DateFormat.getInstance(oFormatSettings).format(aDefaultValues[1].oDate);
			}
		}
	};

	DateRangeType.prototype.updateOperations = function() {
		var aOperations = this.getOperations();
		for (var i = 0; i < aOperations.length; i++) {
			this._updateOperation(aOperations[i]);
		}
		return this.oModel.setProperty("operations", aOperations, this.getContext(), true);
	};

	DateRangeType.prototype.isValidCondition = function() {
		var oCondition = this.getCondition(), oOperation = this.getOperation(oCondition.operation);
		if (oOperation && oCondition && oCondition.key && oCondition.operation) {
			if ("value1" in oOperation && "value2" in oOperation) {
				return oCondition.value1 !== null && oCondition.value2 !== null;
			} else if ("value1" in oOperation) {
				return oCondition.value1 !== null;
			} else if ("value2" in oOperation) {
				return oCondition.value2 !== null;
			} else if (!("value1" in oOperation) && !("value2" in oOperation)) {
				return true;
			}
		}
		return false;
	};

	DateRangeType.prototype.providerDataUpdated = function(aUpdatedFieldNames, oData) {
	};

	DateRangeType.prototype.initialize = function(oJson) {
		Type.prototype.initialize.apply(this, [oJson]);

		var oOrgJson = jQuery.extend({}, oJson, true);

		var sCalendarType = (new UniversalDate()).getCalendarType();
		if (!oJson.conditionTypeInfo) {
			if (oJson.ranges && oJson.ranges.length == 1) {
				// if no conditionTypeInfo exist but one ranges item we restore the date range as DATERANGE operation. This is required for a better deserialize handling of DataSuite format.
				oJson.conditionTypeInfo = {
						name: this.getName(),
						data: {
							key: this.sFieldName,
							operation: "DATERANGE",
								value1: oJson.ranges[0].value1,
								value2: oJson.ranges[0].value2,
								calendarType: sCalendarType
							}
					};
			} else {
				var oDefaultOperation = this.getDefaultOperation(),
					sKey = oDefaultOperation ? oDefaultOperation.key : "";
				oJson.conditionTypeInfo = {
					name: this.getName(),
					data: {
						key: this.sFieldName,
						operation: sKey,
						calendarType: sCalendarType
					}
				};
			}
		}
		if (oJson.conditionTypeInfo) {
			oJson = oJson.conditionTypeInfo;
		}
		if (oJson.name && oJson.data) {
			if (oJson.name !== this.getName()) {

				jQuery.sap.log.debug("ConditionType " + this.getName() + " tries to deserialize data from " + oJson.name);
			}
			oJson = oJson.data;
		}
		if (!oJson.operation) {
			return;
		}

		var oOperation = this.getOperation(oJson.operation);
		if (!oOperation) {
			// if no operation is found and the Type is async we wait for PendingChange
			if (this.getAsync()) {

				this.setPending(true);

				var that = this,
				fnHandler = function(bValue){
					if (bValue === false) {
						that.initialize(oOrgJson);
					}
				};
				this.oFilterProvider.attachPendingChange(fnHandler);

				return;
			}
			//TODO if not async we could use the DefaultOperation????
		}

		// handle transform from calendar type differences
		if (sCalendarType !== oJson.calendarType && (oJson.calendarType === "Islamic" || sCalendarType === "Islamic") && oJson.operation === "SPECIFICMONTH") {
			oJson.operation = "DATERANGE";
			var iValue = parseInt(oJson.value1, 10),
				oDate = UniversalDate.getInstance(new Date(), oJson.calendarType);
			oDate.setMonth(iValue);
			oDate = DateRangeType.getMonthStartDate(oDate);
			aValues = DateRangeType.getDateRange(1, "MONTH", oDate, true);
			oJson.value1 = aValues[0].oDate.toISOString();
			oJson.value2 = aValues[1].oDate.toISOString();
		}

		// it is important to first set the value properties to null.
		// Otherwise the binding will update the controls which might not be able to handle UniversalDate values
		this.oModel.setProperty("value1", null, this.getConditionContext());
		this.oModel.setProperty("value2", null, this.getConditionContext());

		this.oModel.setProperty("operation", oJson.operation, this.getConditionContext());
		this.oModel.setProperty("key", oJson.key, this.getConditionContext());

		if (oJson.operation === "DATERANGE") {
			if (typeof oJson.value1 === "string") {
				oJson.value1 = oJson.value1 === "" ? null : (new UniversalDate(oJson.value1)).oDate;
			}
			if (typeof oJson.value2 === "string") {
				oJson.value2 = oJson.value2 === "" ? null : (new UniversalDate(oJson.value2)).oDate;
			}
			this.oModel.setProperty("value1", oJson.value1, this.getConditionContext());
			this.oModel.setProperty("value2", oJson.value2, this.getConditionContext());
		} else if (oJson.operation === "FROM") {
			if (typeof oJson.value1 === "string") {
				oJson.value1 = oJson.value1 === "" ? null : (new UniversalDate(oJson.value1)).oDate;
				this.oModel.setProperty("value1", oJson.value1, this.getConditionContext());
			}
		} else if (oJson.operation === "TO") {
			if (typeof oJson.value1 === "string") {
				oJson.value1 = oJson.value1 === "" ? null : (new UniversalDate(oJson.value1)).oDate;
				this.oModel.setProperty("value1", oJson.value1, this.getConditionContext());
			}
		} else if ([
			"LASTDAYS", "LASTWEEKS", "LASTMONTHS", "LASTQUARTERS", "LASTYEARS"
		].indexOf(oJson.operation) > -1) {
			this.oModel.setProperty("value1", oJson.value1, this.getConditionContext());
		} else if (oJson.operation === "SPECIFICMONTH") {
			this.oModel.setProperty("value1", oJson.value1 + "", this.getConditionContext());
		} else {
			var aValues = this.getDefaultValues(this.getOperation(oJson.operation));
			this.setDefaultValues(aValues[0], aValues[1]);
		}
	};

	DateRangeType.prototype.serialize = function() {
		var oJson = {}, oCondition = this.getCondition();
		if (!oCondition.operation) {
			return;
		}
		var oOperation = this.getOperation(oCondition.operation);
		if (!oOperation || !("value1" in oOperation)) {
			oCondition.value1 = null;
		}
		if (!oOperation || !("value2" in oOperation)) {
			oCondition.value2 = null;
		}
		oCondition.calendarType = (new UniversalDate()).getCalendarType();
		oJson.conditionTypeInfo = {
			name: this.getName(),
			data: oCondition
		};

		if (this.iChangeTimer) {
			jQuery.sap.clearDelayedCall(this.iChangeTimer);
		}
		this.iChangeTimer = jQuery.sap.delayedCall(1, this, this._updateProvider, [oJson]);

		return oJson;
	};


	DateRangeType.prototype._updateProvider = function(oJson) {
		this.validate(false);
		oJson.ranges = this.getFilterRanges();
		oJson.items = [];
		if (this.oFilterProvider) {
			this.oFilterProvider.oModel.setProperty("/" + this.sFieldName, oJson);
			this.oFilterProvider.setFilterData({}, false, this.sFieldName);
			if (this.oFilterProvider._oSmartFilter) {
				this.oFilterProvider._oSmartFilter.fireFilterChange();
			}
		}
	};

	DateRangeType.prototype.getFilterRanges = function() {
		var oCondition = this.getCondition(),
			aValues = [];

		if (oCondition.operation === "LASTDAYS") {
			aValues = DateRangeType.getDateRange(-oCondition.value1, "DAY", true);
			oCondition.value1 = aValues[0];
			oCondition.value2 = aValues[1];
		} else if (oCondition.operation === "LASTWEEKS") {
			aValues = DateRangeType.getDateRange(-oCondition.value1, "WEEK", true);
			oCondition.value1 = aValues[0];
			oCondition.value2 = aValues[1];
		} else if (oCondition.operation === "LASTMONTHS") {
			aValues = DateRangeType.getDateRange(-oCondition.value1, "MONTH", true);
			oCondition.value1 = aValues[0];
			oCondition.value2 = aValues[1];
		} else if (oCondition.operation === "LASTQUARTERS") {
			aValues = DateRangeType.getDateRange(-oCondition.value1, "QUARTER", true);
			oCondition.value1 = aValues[0];
			oCondition.value2 = aValues[1];
		} else if (oCondition.operation === "LASTYEARS") {
			aValues = DateRangeType.getDateRange(-oCondition.value1, "YEAR", true);
			oCondition.value1 = aValues[0];
			oCondition.value2 = aValues[1];
		} else if (oCondition.operation === "SPECIFICMONTH") {
			var iValue = parseInt(oCondition.value1, 10),
				oDate = new UniversalDate();
			oDate.setMonth(iValue);
			oDate = DateRangeType.getMonthStartDate(oDate);
			aValues = DateRangeType.getDateRange(1, "MONTH", oDate, true);
			oCondition.value1 = aValues[0];
			oCondition.value2 = aValues[1];
		}

		if (oCondition.value1 instanceof UniversalDate) {
			oCondition.value1 = oCondition.value1.oDate;
		}
		if (oCondition.value2 instanceof UniversalDate) {
			oCondition.value2 = oCondition.value2.oDate;
		}

		if (oCondition.operation === "FROM") {
			if (!(this.isValidCondition() && oCondition.value1)) {
				return [];
			}
			oCondition.operation = "GE";
			delete oCondition.value2;
		} else if (oCondition.operation === "TO") {
			if (!(this.isValidCondition() && oCondition.value1)) {
				return [];
			}
			oCondition.operation = "LE";
			delete oCondition.value2;

			if (this._bIgnoreTime) {
				oCondition.value1 = DateRangeType.setStartTime(oCondition.value1).oDate;
			} else {
				oCondition.value1 = DateRangeType.setEndTime(oCondition.value1).oDate;
			}
		} else {
			if (!(this.isValidCondition() && oCondition.value1 && oCondition.value2)) {
				return [];
			}
			oCondition.operation = "BT";

			if (this._bIgnoreTime) {
				// set the time to 00:00:00
				oCondition.value2 = DateRangeType.setStartTime(oCondition.value2).oDate;
			} else {
				// include the day and set time to 23:59:59:999
				oCondition.value2 = DateRangeType.setEndTime(oCondition.value2).oDate;
			}
		}

		oCondition.exclude = false;
		oCondition.keyField = oCondition.key;
		delete oCondition.key;
		//TODO: CHECK WHY THIS FAILS IN PHANTOM
		//jQuery.sap.log.debug("RANGE:" + JSON.stringify(oCondition));
		return [
			oCondition
		];
	};

	DateRangeType.prototype.getTokenText = function() {
		return "";
	};

	DateRangeType.prototype.getName = function() {
		return this.getMetadata().getName();
	};

	DateRangeType.prototype.getType = function() {
		return "Edm.Date";
	};

	return DateRangeType;
}, /* bExport= */true);

}; // end of sap/ui/comp/config/condition/DateRangeType.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.odata.FieldSelectorModelConverter') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.comp.odata.FieldSelectorModelConverter'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/odata/FieldSelectorModelConverter",[
	'jquery.sap.global', './MetadataAnalyser'
], function(jQuery, MetadataAnalyser) {
	"use strict";

	/**
	 * Constructs a utility class to analyse the OData metadata document ($metadata), to resolve SAP-Annotations
	 *
	 * @constructor
	 * @param {sap.ui.model.odata.ODataModel} oDataModel - odata model
	 * @public
	 * @author Markus Viol
	 */
	var FieldSelectorModelConverter = function(oDataModel) {

		this._oMetadataAnalyzer = new MetadataAnalyser(oDataModel);
		this._aEntityTypes = [];
		this.invisibleFields = {};
	};

	/**
	 * Returns the OData MetaData Analyzer
	 *
	 * @returns {sap.ui.comp.odata.MetadataAnalyser} - metadata analyzer instance
	 * @public
	 * @name FieldSelectorModelConverter#getMetaDataAnalyzer
	 * @function
	 */
	FieldSelectorModelConverter.prototype.getMetaDataAnalyzer = function() {

		return this._oMetadataAnalyzer;
	};

	/**
	 * Returns the converted inner model for the FieldSelector control
	 *
	 * @param {string/array} vEntityType - entity type
	 * @param {Array} aIgnoredFields - List of fields which should be ignored.
	 * @returns {object} Internal json map
	 * @public
	 * @name FieldSelectorModelConverter#getConvertedModel
	 * @function
	 */
	FieldSelectorModelConverter.prototype.getConvertedModel = function(vEntityType, aIgnoredFields) {

		var oConvertedData = {};
		this._aEntityTypes = this._getEntityTypes(vEntityType);
		for (var e = 0; e < this._aEntityTypes.length; e++) {
			var aFields = this._oMetadataAnalyzer.getFieldsByEntityTypeName(this._aEntityTypes[e].key);
			if (aFields) {
				oConvertedData[this._aEntityTypes[e].key] = this._updateAndFilterFields(aFields, aIgnoredFields, false, this._aEntityTypes[e].key);
			}
		}

		return oConvertedData;
	};

	/**
	 * Returns the entity type name and labels as an array of map
	 *
	 * @returns {array} - object of label and EntityType name
	 * @private
	 * @name FieldSelectorModelConverter#getEntitySets
	 * @function
	 */
	FieldSelectorModelConverter.prototype.getEntityTypes = function() {

		return this._aEntityTypes;
	};

	/**
	 * Get an array with all entity type names
	 * @returns {Array} Returns an array with all entity type names
	 */
	FieldSelectorModelConverter.prototype.getAllEntityTypeNames = function() {
		if (this._oMetadataAnalyzer) {
			return this._oMetadataAnalyzer.getAllEntityTypeNames();
		}
		return null;
	};

	/**
	 * @param {array} aFields - fields array
	 * @param {Array} aIgnoredFields - List of fields which should be ignored.
	 * @param {Boolean} bIsComplexType Set to true if fields are children of a complex type
	 * @returns {array} - object of fields which are visible	 *
	 * @private
	 * @name FieldSelectorModelConverter#_updateAndFilterFields
	 * @function
	 */
	FieldSelectorModelConverter.prototype._updateAndFilterFields = function(aFields, aIgnoredFields, bIsComplexType, sKey) {

		var aValidFields = [];
		for (var f = 0; f < aFields.length; f++) {
			var oCurrentField = aFields[f];
			if (oCurrentField.visible === false) {
				this.invisibleFields[sKey] = this.invisibleFields[sKey] || [];
				if (this.invisibleFields[sKey].indexOf(oCurrentField) === -1) {
					oCurrentField.isComplexType = bIsComplexType;
					this.invisibleFields[sKey].push(oCurrentField);
				}
				continue;
			}
			// TODO: check if the label is overridden in an annotation

			// only add fields which are not in ignored list
			var bIsFieldOnIgnoreList = this._isFieldOnIgnoreList(oCurrentField, aIgnoredFields, bIsComplexType);
			var bIsFieldBlacklisted = this._isFieldBlacklisted(oCurrentField);
			if (!bIsFieldOnIgnoreList && !bIsFieldBlacklisted) {
				if (this._isComplexType(oCurrentField) === true) {
					var aValidComplexTypeFields = this._resolveComplexTypeToFlatFieldList(oCurrentField, aIgnoredFields);
					if (aValidComplexTypeFields) {
						aValidFields = aValidFields.concat(aValidComplexTypeFields);
					}
				} else {
					aValidFields.push(oCurrentField);
				}
			}
		}
		return aValidFields;
	};

	/**
	 * Is field using a complex type
	 *
	 * @param {Object} oField Field from entityType
	 * @returns {Boolean} Returns true if field is using a complex type
	 */
	FieldSelectorModelConverter.prototype._isComplexType = function(oField) {
		if (oField && oField.type) {
			if (oField.type.toLowerCase().indexOf("edm") !== 0) {
				return true;
			}
		}
		return false;
	};

	/**
	 * Resolves a field from the entity type which is using a complex type into the underlying fields
	 *
	 * @param {Object} oComplexTypeField Field from entity type which is using the complex type
	 * @param {Array} aIgnoredFields Fields which should be ignored
	 * @returns {Array} Returns an array with all fields of the requested complex type
	 */
	FieldSelectorModelConverter.prototype._resolveComplexTypeToFlatFieldList = function(oComplexTypeField, aIgnoredFields) {
		var aResult = [];
		var oSchemaDefinition = this._oMetadataAnalyzer.getSchemaDefinition();

		if (oComplexTypeField && oComplexTypeField.type && oSchemaDefinition) {
			var sTypeName = this._getComplexTypeName(oComplexTypeField);
			if (sTypeName) {
				var aComplexTypes = oSchemaDefinition.complexType;
				var i = 0;
				for (i = 0; i < aComplexTypes.length; i++) {
					var oCurrentComplexType = aComplexTypes[i];
					if (oCurrentComplexType.name === sTypeName) {
						aResult = this._getFieldsFromComplexType(oCurrentComplexType, aIgnoredFields);
						break;
					}
				}
			}
		}
		return aResult;
	};

	/**
	 * Get all fields of a complex type
	 * @param {Object} oComplexType
	 * @param {Array} aIgnoredFields Fields which should be ignored
	 * @returns Returns an array with fields from the complex type
	 */
	FieldSelectorModelConverter.prototype._getFieldsFromComplexType = function(oComplexType, aIgnoredFields) {
		var aFields = this._oMetadataAnalyzer.getFieldsByComplexTypeName(oComplexType.name);
		if (aFields) {
			return this._updateAndFilterFields(aFields, aIgnoredFields, true, oComplexType.name);
		}
		return [];
	};

	/**
	 * Get the name of a complex type without the namespace
	 * @param {Object} oComplexType
	 * @returns Returns the name of the complex type without its namespace
	 */
	FieldSelectorModelConverter.prototype._getComplexTypeName = function(oComplexType) {
		var aTypeDescription = oComplexType.type.split(".");
		if (aTypeDescription.length === 2) {
			return aTypeDescription[1];
		}
		return null;
	};

	/**
	 * Check if a odata property is on the list of ignored fields
	 *
	 * @param {Object} oCurrentField Current property on entityset
	 * @param {Array} aIgnoredFields List of ignored fields
	 * @param {Boolean} bIsComplexType Set to true if fields are children of a complex type
	 * @returns {Boolean} Returns true if field was found on ignore list else false
	 */
	FieldSelectorModelConverter.prototype._isFieldOnIgnoreList = function(oCurrentField, aIgnoredFields, bIsComplexType) {
		if (aIgnoredFields) {
			var numberOfEntitySets = this._aEntityTypes.length;
			var sQualifiedName = oCurrentField.entityName + "." + oCurrentField.name;
			// If number of entity sets is only one or fields are NOT children of a complex type,
			// then full qualified name or shortname is possible
			if (numberOfEntitySets === 1 && !bIsComplexType) {
				if (aIgnoredFields.indexOf(oCurrentField.name) !== -1 || aIgnoredFields.indexOf(sQualifiedName) !== -1) {
					return true;
				}
				// else only full qualified name is valid
			} else if (aIgnoredFields.indexOf(sQualifiedName) !== -1) {
				return true;
			}
		}
		return false;
	};

	/**
	 * Check if odata property matches specific checks which identify the field as non-listable
	 *
	 * @param {object} oCurrentField Current property of entity set
	 * @returns {Boolean} Returns true if field is blacklisted and false if field can be added to list.
	 */
	FieldSelectorModelConverter.prototype._isFieldBlacklisted = function(oCurrentField) {
		if (oCurrentField) {
			if (oCurrentField.name.toLowerCase().indexOf("uxfc") === 0) {
				return true;
			} else if (oCurrentField.type.toLowerCase() === "edm.time") {
				return true;
			}
		}
		return false;
	};

	/**
	 * @param {string/array} vEntityTypes - entity types
	 * @param {string} sAnnotation - annotation
	 * @returns {array} - object of label and EntityType name of the entitySet
	 * @private
	 * @name FieldSelectorModelConverter#_getEntitySets
	 * @function
	 */
	FieldSelectorModelConverter.prototype._getEntityTypes = function(vEntityTypes, sAnnotation) {

		var aEntityTypes = [];
		var sLabel;
		var aEntityTypeNames;

		if (!this._oMetadataAnalyzer || !this._oMetadataAnalyzer._oSchemaDefinition) {
			return [];
		}

		var aAllEntityTypList = this._oMetadataAnalyzer._oSchemaDefinition.entityType;
		// TODO:
		// if (sAnnotation) {
		// aEntityTypeNames = this._oMetadataAnalyzer.getEntityTypeNameByAnnotation(sAnnotation);
		// }
		if (!vEntityTypes) {
			aEntityTypeNames = [];
			for (var t = 0; t < aAllEntityTypList.length; t++) {
				aEntityTypeNames.push(aAllEntityTypList[t].name);
			}
		}
		if (!aEntityTypeNames) {
			aEntityTypeNames = this._convertEntityTypesToArray(vEntityTypes);
		}

		for (var e = 0; e < aEntityTypeNames.length; e++) {
			sLabel = this._oMetadataAnalyzer.getEntityLabelByEntityTypeName(aEntityTypeNames[e]);
			aEntityTypes.push({
				key: aEntityTypeNames[e],
				label: sLabel || aEntityTypeNames[e]
			});
		}

		return aEntityTypes;
	};

	/**
	 * @param {string/array} vEntityTypes - entity types
	 * @returns {array} - entity types
	 * @private
	 * @name sap.ui.comp.odata.FieldSelector#_convertEntityTypesToArray
	 * @function
	 */
	FieldSelectorModelConverter.prototype._convertEntityTypesToArray = function(vEntityTypes) {

		if (typeof (vEntityTypes) === "string") {
			var sRawString = vEntityTypes.replace(/ /g, '');
			return sRawString.split(',');
		}

		if (jQuery.isArray(vEntityTypes)) {
			return vEntityTypes;
		}

		return undefined;
	};

	/**
	 * Destroys the inner references
	 *
	 * @public
	 * @name sap.ui.comp.odata.FieldSelector#destroy
	 * @function
	 */
	FieldSelectorModelConverter.prototype.destroy = function() {

		if (this._oMetadataAnalyzer && this._oMetadataAnalyzer.destroy) {
			this._oMetadataAnalyzer.destroy();
		}
		this._oMetadataAnalyzer = null;
		this._aEntityTypes = null;
	};

	return FieldSelectorModelConverter;

}, /* bExport= */true);

}; // end of sap/ui/comp/odata/FieldSelectorModelConverter.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.ODataTypes') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

/**
 * Utility class to access OData Types. The implementation operates on OData meta data, so an instance of <code>sap.ui.model.odata.ODataModel</code>.
 * 
 * @private
 * @name sap.ui.comp.smartfield.ODataTypes
 * @author SAP SE
 * @version 1.36.12
 * @since 1.28.0
 * @param {jquery.sap.global} jQuery a reference to the jQuery implementation.
 * @param {sap.ui.core.format.NumberFormat} NumberFormat a reference to the number format implementation.
 * @param {sap.ui.model.odata.type.Boolean} BooleanType a reference to the boolean type implementation.
 * @param {sap.ui.comp.smartfield.type.DateTime} DateTimeType a reference to the date type implementation.
 * @param {sap.ui.comp.smartfield.type.DateTimeOffset} DateTimeOffsetType a reference to the date-time type implementation.
 * @param {sap.ui.comp.smartfield.type.Decimal} DecimalType a reference to the decimal type implementation.
 * @param {sap.ui.comp.smartfield.type.Int16} Int16Type a reference to the 16 bit integer type implementation.
 * @param {sap.ui.comp.smartfield.Int32} Int32Type a reference to the 32 bit integer type implementation.
 * @param {sap.ui.comp.smartfield.Int64} Int64Type a reference to the 32 bit integer type implementation.
 * @param {sap.ui.comp.smartfield.type.SByte} SByteType a reference to the SByte type implementation.
 * @param {sap.ui.comp.smartfield.type.String} StringType a reference to the string type implementation.
 * @param {sap.ui.comp.smartfield.type.AbapBool} AbapBoolean a reference to the simple boolean type implementation.
 * @param {sap.ui.model.type.Currency} CurrencyType a reference to the currency type implementation.
 * @returns {sap.ui.comp.smartfield.ODataTypes} the new instance.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.ODataTypes'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.format.NumberFormat'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.type.Boolean'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.type.Currency'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/ODataTypes",[
	"jquery.sap.global", "sap/ui/core/format/NumberFormat", "sap/ui/model/odata/type/Boolean", "sap/ui/comp/smartfield/type/DateTime", "sap/ui/comp/smartfield/type/DateTimeOffset", "sap/ui/comp/smartfield/type/Decimal", "sap/ui/comp/smartfield/type/Int16", "sap/ui/comp/smartfield/type/Int32", "sap/ui/comp/smartfield/type/Int64", "sap/ui/comp/smartfield/type/SByte", "sap/ui/comp/smartfield/type/String", "sap/ui/comp/smartfield/type/AbapBool", "sap/ui/model/type/Currency", "sap/ui/comp/smartfield/type/Time"
], function(jQuery, NumberFormat, BooleanType, DateTimeType, DateTimeOffsetType, DecimalType, Int16Type, Int32Type, Int64Type, SByteType, StringType, AbapBoolean, CurrencyType, TimeType) {
	"use strict";

	/**
	 * @private
	 * @constructor
	 * @param {sap.ui.core.Control} oParent the parent control.
	 */
	var ODataTypes = function(oParent) {
		this._oParent = oParent;
	};

	/**
	 * Returns an instance of a sub-class of <code>sap.ui.model.Type</code> depending on the OData property's EDM type.
	 * 
	 * @param {object} oProperty the definition of a property of an OData entity.
	 * @param {object} oFormatOptions optional format options as defined in e.g. {@link sap.ui.core.format.DateFormat}.
	 * @param {map} mConstraints optional constraints.
	 * @returns {sap.ui.model.Type} an instance of a sub-class of <code>sap.ui.model.Type</code>.
	 * @public
	 */
	ODataTypes.prototype.getType = function(oProperty, oFormatOptions, mConstraints) {
		var oConstraints, oInfo;

		// if a type is configured on the smart field, use it.
		oInfo = this._oParent.getBindingInfo("value");

		if (oInfo && oInfo.type) {
			return oInfo.type;
		}

		// select the type by EDM type.
		if (oProperty && oProperty.property && oProperty.property.type) {
			switch (oProperty.property.type) {
				case "Edm.Boolean":
					return new BooleanType();
				case "Edm.Decimal":
				case "Edm.Double":
				case "Edm.Float":
				case "Edm.Single":
					oConstraints = this._getDecimalConstraints(oProperty);
					return new DecimalType(oFormatOptions, oConstraints);
				case "Edm.Int16":
					return new Int16Type();
				case "Edm.Int32":
					return new Int32Type();
				case "Edm.Int64":
					return new Int64Type();
				case "Edm.Byte":
				case "Edm.SByte":
					return new SByteType();
				case "Edm.DateTimeOffset":
					return new DateTimeOffsetType(oFormatOptions, oConstraints);
				case "Edm.DateTime":
					oConstraints = this._getDateTimeConstraints(oProperty, mConstraints);
					return new DateTimeType(oFormatOptions, oConstraints);
				case "Edm.String":
					oConstraints = this._getStringConstraints(oProperty);
					return new StringType(oFormatOptions, oConstraints);
				case "Edm.Time":
					return new TimeType(oFormatOptions, mConstraints);
				default:
					return null;
			}
		}

		return null;
	};

	/**
	 * Calculates the constraints for <code>Edm.DateTime</code>.
	 * 
	 * @param {object} oProperty the definition of a property of an OData entity.
	 * @param {map} mConstraints optional constraints.
	 * @returns {map} the constraints.
	 * @private
	 */
	ODataTypes.prototype._getDateTimeConstraints = function(oProperty, mConstraints) {
		var oConstraints = {}, n;

		// this method is only invoked for Edm.DateTime,
		// so no need exists to replace it with V4 annotations,
		// as Edm.DateTime is "pruned" in V4.
		if (oProperty.property["sap:display-format"] === "Date") {
			oConstraints = {
				displayFormat: "Date"
			};
		}

		// constraints from control have priority.
		for (n in mConstraints) {
			oConstraints[n] = mConstraints[n];
		}

		return oConstraints;
	};

	/**
	 * Calculates the value of the control's <code>maxLength</code> property. The value can be configured in the <code>maxLength</code> attribute
	 * of the OData property to which the the control's <code>value</code> property is bound to. Alternatively it can be configured in the the
	 * control's <code>maxLength</code> property. If both are available the minimum value of both is returned.
	 * 
	 * @param {object} oProp the property from which to take the <code>maxLength</code>.
	 * @param {object} oBind the <code>value</code> binding of the parent smart field.
	 * @returns {integer} maximum number of characters, <code>0</code> means the feature is switched off.
	 * @public
	 */
	ODataTypes.prototype.getMaxLength = function(oProp, oBind) {
		var iProp, aVals = [], len, iVal, iField, iResult = 0;

		// is a max length available from binding.
		if (oBind && oBind.constraints) {
			if (oBind.constraints.maxLength && oBind.constraints.maxLength > -1) {
				aVals.push(oBind.constraints.maxLength);
			}
		}

		// is a max length available from binding type.
		if (oBind && oBind.type && oBind.type.oConstraints) {
			if (oBind.type.oConstraints.maxLength && oBind.type.oConstraints.maxLength > -1) {
				aVals.push(oBind.type.oConstraints.maxLength);
			}
		}

		// is a max length available from oData property.
		if (oProp && oProp.property && oProp.property.maxLength) {
			iProp = parseInt(oProp.property.maxLength, 10);

			if (iProp > -1) {
				aVals.push(iProp);
			}
		}

		// is a max length available from smart field property.
		iField = this._oParent.getMaxLength();

		if (iField > 0) {
			aVals.push(iField);
		}

		// now search for the minimum value larger than 0.
		// no value specified, return 0.
		len = aVals.length;

		while (len--) {
			iVal = aVals[len];

			if (iVal > 0) {
				if (iResult > 0) {
					if (iVal < iResult) {
						iResult = iVal;
					}
				} else {
					iResult = iVal;
				}
			}
		}

		return iResult;
	};

	/**
	 * Calculates the constraints for a numeric Edm.Type, with optional <code>scale</code> and <code>precision</code> attributes of the OData
	 * property set.
	 * 
	 * @param {object} oProperty the definition of a property of an OData entity.
	 * @returns {map} the constraints.
	 * @private
	 */
	ODataTypes.prototype._getDecimalConstraints = function(oProperty) {
		var mArgs = null;

		if (oProperty.property.precision) {
			mArgs = {};
			mArgs.precision = parseInt(oProperty.property.precision, 10);
		}

		if (oProperty.property.scale) {
			if (!mArgs) {
				mArgs = {};
			}

			mArgs.scale = parseInt(oProperty.property.scale, 10);
		}

		return mArgs;
	};

	/**
	 * Calculates the constraints for a property of type <code>Edm.String</code>.
	 * 
	 * @param {object} oProperty the definition of a property of an OData entity.
	 * @returns {map} the constraints.
	 */
	ODataTypes.prototype._getStringConstraints = function(oProperty) {
		var iMaxLength, oEquals, oBind, mConstraints;

		// get the binding.
		oBind = this._oParent.getBindingInfo("value");

		// get max length.
		iMaxLength = this.getMaxLength(oProperty, oBind);

		// get the constrains: equals
		if (oBind && oBind.type && oBind.type.oConstraints) {
			if (oBind.type.oConstraints.equals) {
				oEquals = oBind.type.oConstraints.equals;
			}
		}

		// now create the return value.
		if (iMaxLength > 0 || oEquals) {
			mConstraints = {};

			if (iMaxLength > 0) {
				mConstraints.maxLength = iMaxLength;
			}

			if (oEquals) {
				mConstraints.equals = oEquals;
			}
		}

		return mConstraints;
	};

	/**
	 * Returns formatter function for displaying a unit of measure.
	 * 
	 * @param {object} oProperty The definition of a property of an OData entity
	 * @param {boolean} bCurrency Flag indicating whether the formatter actually refers to a currency or just unit-of-measure
	 * @returns {function} Formatter function for displaying a unit of measure
	 * @public
	 */
	ODataTypes.prototype.getDisplayFormatter = function(oProperty, bCurrency) {
		if (bCurrency) {
			return this.getCurrencyDisplayFormatter(true);
		} else {
			return this.getUOMDisplayFormatter(oProperty);
		}
	};

	/**
	 * Returns formatter function for displaying a currency.
	 * 
	 * @param {boolean} bCurrency Flag indicating whether the formatter actually refers to a currency or just unit-of-measure
	 * @returns {function} Formatter function for displaying a currency
	 * @public
	 */
	ODataTypes.prototype.getCurrencyDisplayFormatter = function(bCurrency) {
		var oFormat = NumberFormat.getCurrencyInstance({
			showMeasure: false
		});

		return function(oAmount, sCurrency) {
			var sValue, iCurrencyDigits, iPadding;

			if (!oAmount || !sCurrency || sCurrency === "*") {
				return "";
			}

			if (!bCurrency) {
				sValue = oAmount += "\u2008";
				return sValue;
			}

			iCurrencyDigits = oFormat.oLocaleData.getCurrencyDigits(sCurrency);
			sValue = oFormat.format(oAmount, sCurrency);

			if (iCurrencyDigits === 0) {
				sValue += "\u2008";
			}

			iPadding = 3 - iCurrencyDigits;

			if (iPadding) {
				sValue = jQuery.sap.padRight(sValue, "\u2007", sValue.length + iPadding);
			}

			return sValue;
		};
	};

	/**
	 * Returns formatter function for displaying a measure.
	 * 
	 * @param {object} oProperty The definition of a property of an OData entity
	 * @returns {function} Formatter function for displaying a unit of measure
	 * @public
	 */
	ODataTypes.prototype.getUOMDisplayFormatter = function(oProperty) {
		var oFormatOptions = {};
		if (oProperty.scale) {
			oFormatOptions.maxFractionDigits = parseInt(oProperty.scale, 10);
			oFormatOptions.minFractionDigits = parseInt(oProperty.scale, 10);
			if (oProperty.precision) {
				oFormatOptions.maxIntegerDigits = parseInt(oProperty.precision, 10) - parseInt(oProperty.scale, 10);
			}
		}

		var oFormat = NumberFormat.getFloatInstance(oFormatOptions);

		return function(oMeasure, sUnit) {
			var sValue;

			if (!oMeasure || !sUnit || sUnit === "*") {
				return "";
			}

			if (isNaN(parseFloat(oMeasure))) {
				return oMeasure.toString() + "\u2008";
			}

			sValue = oFormat.format(oMeasure, sUnit);
			sValue += "\u2008";
			return sValue;
		};
	};

	/**
	 * Creates a new currency type instance and returns it.
	 * 
	 * @param {object} oProperty the OData property to use for constraint calculation, e.g. precision and scale.
	 * @returns {sap.ui.model.type.Currency} the new currency type instance.
	 * @public
	 */
	ODataTypes.prototype.getCurrencyType = function(oProperty) {
		var oConstraints, oFormat = {
			showMeasure: false,
			parseAsString: true,
			emptyString: 0
		};

		if (oProperty) {
			oConstraints = this._getDecimalConstraints(oProperty);

			if (oConstraints) {
				if (oConstraints.precision) {
					oFormat.maxIntegerDigits = oConstraints.precision;
					if (oConstraints.scale) {
						oFormat.maxIntegerDigits -= oConstraints.scale;
					}
				}

				if (oConstraints.precision && oConstraints.scale) {
					oConstraints.maximum = Math.pow(10, oFormat.maxIntegerDigits) - (1 / Math.pow(10, oConstraints.scale));
					oConstraints.minimum = -1 * oConstraints.maximum;
				}
			}

			return new CurrencyType(oFormat, oConstraints);
		}

		return null;
	};

	/**
	 * Creates a new ABAP Boolean type instance.
	 * 
	 * @returns {sap.ui.comp.smartfield.type.AbapBool} the new instance.
	 * @public
	 */
	ODataTypes.prototype.getAbapBoolean = function() {
		return new AbapBoolean();
	};

	/**
	 * Frees all resources claimed during the life-time of this instance.
	 * 
	 * @public
	 */
	ODataTypes.prototype.destroy = function() {
		this._oParent = null;
	};

	return ODataTypes;
}, true);

}; // end of sap/ui/comp/smartfield/ODataTypes.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.flexibility.Registration') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartform.flexibility.Registration'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.registry.ChangeRegistry'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.registry.SimpleChanges'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/flexibility/Registration",[
		'jquery.sap.global',
		'sap/ui/fl/registry/ChangeRegistry',
		'sap/ui/fl/registry/SimpleChanges',
		'sap/ui/comp/smartform/flexibility/changes/RemoveField',
		'sap/ui/comp/smartform/flexibility/changes/RemoveGroup',
		'sap/ui/comp/smartform/flexibility/changes/RenameField',
		'sap/ui/comp/smartform/flexibility/changes/RenameGroup',
		'sap/ui/comp/smartform/flexibility/changes/AddField',
		'sap/ui/comp/smartform/flexibility/changes/AddFields',
		'sap/ui/comp/smartform/flexibility/changes/AddGroup',
		'sap/ui/comp/smartform/flexibility/changes/MoveGroups',
		'sap/ui/comp/smartform/flexibility/changes/MoveFields',
		'sap/ui/comp/smartform/flexibility/changes/OrderGroups',
		'sap/ui/comp/smartform/flexibility/changes/OrderFields'
	], function(jQuery, ChangeRegistry, SimpleChanges, RemoveField, RemoveGroup, RenameField, RenameGroup, AddField, AddFields, AddGroup, MoveGroups, MoveFields, OrderGroups, OrderFields) {
		"use strict";

		/**
		 * Change handler for adding a smart form group element (representing a field).
		 * @name sap.ui.comp.smartform.flexibility.Registration
		 * @namespace
		 * @author SAP SE
		 * @version 1.36.12
		 * @experimental Since 1.29.0
		 */
		return {
			registerLibrary: function(){
				var compChanges = {
					orderFields: {
						changeType: "orderFields",
						changeHandler: OrderFields
					},
					orderGroups: {
						changeType: "orderGroups",
						changeHandler: OrderGroups
					},
					removeField: {
						changeType: "removeField",
						changeHandler: RemoveField
					},
					removeGroup: {
						changeType: "removeGroup",
						changeHandler: RemoveGroup
					},
					renameField: {
						changeType: "renameField",
						changeHandler: RenameField
					},
					renameGroup: {
						changeType: "renameGroup",
						changeHandler: RenameGroup
					},
					addField: {
						changeType: "addField",
						changeHandler: AddField
					},
					addFields: {
						changeType: "addFields",
						changeHandler: AddFields
					},
					addGroup: {
						changeType: "addGroup",
						changeHandler: AddGroup
					},
					moveGroups: {
						changeType: "moveGroups",
						changeHandler: MoveGroups
					},
					moveFields: {
						changeType: "moveFields",
						changeHandler: MoveFields
					}
				};

				var oChangeRegistry = ChangeRegistry.getInstance();

				oChangeRegistry.registerControlsForChanges({
					"sap.ui.comp.smartform.SmartForm": [
						compChanges.removeGroup,
						compChanges.addGroup,
						compChanges.moveGroups,
						compChanges.renameField,
						SimpleChanges.propertyChange
					],
					"sap.ui.comp.smartform.Group": [
						SimpleChanges.hideControl,
						SimpleChanges.unhideControl,
						compChanges.renameGroup,
						compChanges.addField,
						compChanges.addFields,
						compChanges.moveFields
					],
					"sap.ui.comp.smartform.GroupElement": [
						SimpleChanges.unhideControl,
						SimpleChanges.hideControl,
						compChanges.renameField
					],
					"sap.ui.comp.smarttable.SmartTable": [
						SimpleChanges.propertyChange
					],
					"sap.ui.comp.smartfilterbar.SmartFilterBar": [
						SimpleChanges.propertyChange
					]
				});

			}
		};
	},
	/* bExport= */true);


}; // end of sap/ui/comp/smartform/flexibility/Registration.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.library') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

/**
 * Initialization Code and shared classes of library sap.ui.comp.
 */
jQuery.sap.declare('sap.ui.comp.library'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.library'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/library",[
		'jquery.sap.global',
		'sap/ui/core/Core',
		'sap/ui/core/library',
		'sap/ui/fl/library',
		'sap/ui/comp/smartform/flexibility/Registration'],
	function(jQuery, Core, library1, library2, flexRegistration) {
	"use strict";

	/**
	 * SAPUI5 library with smart controls.
	 *
	 * @namespace
	 * @name sap.ui.comp
	 * @public
	 */


	// delegate further initialization of this library to the Core
	sap.ui.getCore().initLibrary({
		name : "sap.ui.comp",
		version: "1.36.12",
		dependencies : [
			"sap.ui.core",
			"sap.ui.fl"
		],
		types: [
			"sap.ui.comp.smartfield.ControlProposalType",
			"sap.ui.comp.smartfield.ControlContextType",
			"sap.ui.comp.smartfield.ControlType",
			"sap.ui.comp.smartfield.DisplayBehaviour",
			"sap.ui.comp.smartfield.JSONType",
			"sap.ui.comp.smarttable.TableType",
			"sap.ui.comp.personalization.AggregationRole",
			"sap.ui.comp.personalization.ResetType",
			"sap.ui.comp.personalization.ChangeType"
		],
		interfaces: [],
		controls: [
			"sap.ui.comp.filterbar.FilterBar",
			"sap.ui.comp.navpopover.NavigationPopover",
			"sap.ui.comp.navpopover.SmartLink",
			"sap.ui.comp.odata.FieldSelector",
			"sap.ui.comp.smartchart.SmartChart",
			"sap.ui.comp.smartfield.SmartField",
			"sap.ui.comp.smartfield.SmartLabel",
			"sap.ui.comp.smartfilterbar.SmartFilterBar",
			"sap.ui.comp.smartform.Group",
			"sap.ui.comp.smartform.GroupElement",
			"sap.ui.comp.smartform.SmartForm",
			"sap.ui.comp.smartform.flexibility.DialogContent",
			"sap.ui.comp.smartform.flexibility.FieldList",
			"sap.ui.comp.smartform.flexibility.FieldListNode",
			"sap.ui.comp.smartform.flexibility.Input",
			"sap.ui.comp.smartmicrochart.SmartAreaMicroChart",
			"sap.ui.comp.smartmicrochart.SmartBulletMicroChart",
			"sap.ui.comp.smarttable.SmartTable",
			"sap.ui.comp.smartvariants.SmartVariantManagement",
			"sap.ui.comp.smartvariants.SmartVariantManagementUi2",
			"sap.ui.comp.transport.TransportDialog",
			"sap.ui.comp.valuehelpdialog.ValueHelpDialog",
			"sap.ui.comp.variants.EditableVariantItem",
			"sap.ui.comp.variants.VariantManagement"
		],
		elements: [
			"sap.ui.comp.filterbar.FilterGroupItem",
			"sap.ui.comp.filterbar.FilterItem",
			"sap.ui.comp.navpopover.LinkData",
			"sap.ui.comp.navpopover.SemanticObjectController",
			"sap.ui.comp.smartfield.Configuration",
			"sap.ui.comp.smartfield.ControlProposal",
			"sap.ui.comp.smartfield.ObjectStatus",
			"sap.ui.comp.smartfilterbar.ControlConfiguration",
			"sap.ui.comp.smartfilterbar.GroupConfiguration",
			"sap.ui.comp.smartfilterbar.SelectOption",
			"sap.ui.comp.smartform.Layout",
			"sap.ui.comp.smartvariants.PersonalizableInfo",
			"sap.ui.comp.variants.VariantItem"
		]
	});

	/**
	 * The available control types to configure the internal control selection of a SmartField control.
	 *
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.ui.comp.smartfield.ControlType = {

		/**
		 * The SmartField chooses the control.
		 * @public
		 */
		auto : "auto",

		/**
		 * The SmartField uses a drop down list box.
		 * @public
		 */
		dropDownList : "dropDownList",

		/**
		 * The SmartField displays an input field.
		 * @public
		 */
		input : "input",

		/**
		 * The SmartField displays a date picker.
		 * @public
		 */
		datePicker : "datePicker",

		/**
		 * The SmartField displays a check box.
		 * @public
		 */
		checkBox : "checkBox",

		/**
		 * The SmartField displays a <code>sap.m.Selection</code>.
		 * @public
		 */
		selection : "selection"
	};

	/**
	 * The different options to define display behavior for the value help of a SmartField control.
	 *
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.ui.comp.smartfield.DisplayBehaviour = {

		/**
		 * The SmartField chooses the display behavior.
		 * @public
		 */
		auto : "auto",

		/**
		 * Only the description of the available values is displayed.
		 * @public
		 */
		descriptionOnly : "descriptionOnly",

		/**
		 * Description and ID are displayed for available values.
		 * @public
		 */
		descriptionAndId : "descriptionAndId",

		/**
		 * ID and description are displayed for available values.
		 * @public
		 */
		idAndDescription : "idAndDescription",

		/**
		 * Shows the ID only.
		 * @public
		 */
		idOnly : "idOnly",

		/**
		 * Shows Boolean value as True/False
		 * @public
		 */
		TrueFalse : "TrueFalse",

		/**
		 * Shows Boolean value as On/Off
		 * @public
		 */
		OnOff : "OnOff",

		/**
		 * Shows Boolean value as Yes/No
		 * @public
		 */
		YesNo : "YesNo"

	};
	/**
	 * Enumeration of the different data types supported by the SmartField control, if it is using a JSON model.
	 *
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.ui.comp.smartfield.JSONType = {

		/**
		 * The JavaScript primary type String
		 * @public
		 */
		String : "String",

		/**
		 * The JavaScript Date Object
		 * @public
		 */
		Date : "Date",

		/**
		 * Float type
		 * @public
		 */
		Float : "Float",

		/**
		 * Integer type
		 * @public
		 */
		Integer : "Integer",

		/**
		 * Boolean Type
		 * @public
		 */
		Boolean : "Boolean",

		/**
		 * Date Time Type
		 * @public
		 */
		DateTime : "DateTime"

	};

	/**
	 * Enumeration of the different contexts supported by the SmartField, if it is using an OData model.
	 *
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.ui.comp.smartfield.ControlContextType = {
		/**
		 * No special context is selected. The Smart Field applies its internal defaults.
		 * @public
			 */
		None: "",

		/**
		 * Also the UoM layout is influenced.
		 * @public
		 */
		ResponsiveTable: "responsiveTable",

		/**
		 * Behaves currently exactly like <code>sap.ui.comp.smartfield.ControlContextType.None</code>.
		 * @public
		 */
		Form: "form",

		/**
		 * If this is selected the UoM layout is influenced.
		 * @public
		 */
		Table: "table",

		/**
		 * If this is selected the UoM layout is influenced.
		 * @public
		 */
		SmartFormGrid: "smartFormGrid"
	};

	/**
	 * Enumeration of the different control proposals supported by the Smart Field, if it is using an OData model.
	 *
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.ui.comp.smartfield.ControlProposalType = {
		/**
		 * No special context is selected. The Smart Field applies its internal defaults.
		 * @public
		 */
		None: "",

		/**
		 * If this is selected, the sap.m.ObjectNumber control is used to display units of measure.
		 * If the value property of the Smart Field is not bound to a unit of measure, the property is ignored.
		 * @public
		 */
		ObjectNumber: "ObjectNumber",

		/**
		 * If this is selected, the sap.m.ObjectIdentifier control is used to display IDs, if they are not editable.
		 * The current OData property is assumed to have a text annotation. Otherwise the configuration is ignored.
		 * @public
		 */
	ObjectIdentifier: "ObjectIdentifier"

		/**
		 * If this is selected, the sap.m.ObjectStatus control is used to display values, if they are not editable.
		 *
		 * @public
		 */
	//ObjectStatus: "ObjectStatus"
	};

	/**
	 * Provides enumeration sap.ui.comp.smarttable.TableType A subset of table types that fit to a simple API returning one string.
	 *
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.ui.comp.smarttable.TableType = {

		/**
		 * A table (sap.ui.table.Table) control shall be created as the content of the SmartTable, if no table already exists (default)
		 * @public
		 */
		Table : "Table",

		/**
		 * A responsive table (sap.m.Table) control that can be used on mobile devices shall be created as the content of the SmartTable, if no table already exists
		 * @public
		 */
		ResponsiveTable : "ResponsiveTable",

		/**
		 * An analytical table (sap.ui.table.AnalyticalTable) control shall be created as the content of the SmartTable, if no table already exists
		 * @public
		 */
		AnalyticalTable : "AnalyticalTable",

		/**
		 * A tree table (sap.ui.table.TreeTable) control shall be created as the content of the SmartTable, if no table already exists (TODO)
		 * @public
		 */
		TreeTable : "TreeTable"

	};

	/**
	 *
	 * Provides enumeration sap.ui.comp.personalization.ResetType.
	 * A subset of reset types used in table personalization.
	 *
	 *
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.ui.comp.personalization.ResetType = {

		/**
		 * Reset back to Restore (i.e. the version of the table with which the controller was instantiated or via setter
		 * updated) was triggered (either via API or via reset button)
		 * @public
		 */
		ResetFull : "ResetFull",

		/**
		 * Reset back to the CurrentVariant was triggered
		 * @public
		 */
		ResetPartial: "ResetPartial"
	};

/**
	 *
	 * Provides enumeration sap.ui.comp.personalization.AggregationRole.
	 * A subset of aggregation roles used in table personalization.
	 *
	 *
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.ui.comp.personalization.AggregationRole = {

		/**
		 * Dimension role.
		 * @public
		 */
		Dimension: "Dimension",

		/**
		 * Measure role.
		 * @public
		 */
		Measure: "Measure",

		/**
		 * Role which is neither dimension nor measure.
		 * @public
		 */
		NotDimeasure: "NotDimeasure"
	};

	/**
	 *
	 * Provides enumeration sap.ui.comp.personalization.ChangeType.
	 * A subset of changes done during table personalization.
	 *
	 *
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.ui.comp.personalization.ChangeType = {

		/**
		 * Not changed
		 * @public
		 */
		Unchanged: "Unchanged",

		/**
		 * Change is applied to model but not applied to table
		 * @public
		 */
		ModelChanged: "ModelChanged",

		/**
		 * Change is applied to model and to table
		 * @public
		 */
		TableChanged: "TableChanged"
	};

	flexRegistration.registerLibrary();

	return sap.ui.comp;

}, /* bExport= */ true);
}; // end of sap/ui/comp/library.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.navpopover.LinkData') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.navpopover.LinkData.
jQuery.sap.declare('sap.ui.comp.navpopover.LinkData'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/navpopover/LinkData",[
	'jquery.sap.global', 'sap/ui/comp/library', 'sap/ui/core/Element'
], function(jQuery, library, Element) {
	"use strict";

	/**
	 * Constructor for a new navpopover/LinkData.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * @class Stores display text together with a navigation target hyperlink.<br>
	 *        The LinkData class is used by {@link sap.ui.comp.navpopover.SmartLink SmartLink} and
	 *        {@link sap.ui.comp.navpopover.SemanticObjectController SemanticObjectController} to define the visible links on
	 *        {@link sap.ui.comp.navpopover.NavigationPopover NavigationPopover}.
	 * @extends sap.ui.core.Element
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.navpopover.LinkData
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var LinkData = Element.extend("sap.ui.comp.navpopover.LinkData", /** @lends sap.ui.comp.navpopover.LinkData.prototype */
	{
		metadata: {

			library: "sap.ui.comp",
			properties: {

				/**
				 * Text which can be displayed on the UI
				 *
				 * @since 1.28.0
				 */
				text: {
					type: "string",
					defaultValue: null
				},

				/**
				 * Destination link for a navigation operation in internal format. <b>Note</b>: The link will be encoded before it is shown in external
				 * format using the <code>hrefForExternal</code> method of the CrossApplicationNavigation service.
				 *
				 * @since 1.28.0
				 */
				href: {
					type: "string",
					defaultValue: null
				},

				/**
				 * The standard values for the <code>target</code> property are: _self, _top, _blank, _parent, _search. Alternatively, a frame name
				 * can be entered. This property is only used if the <code>href</code> property is set.
				 */
				target: {
					type: "string",
					defaultValue: null
				}
			}
		}
	});

	return LinkData;

}, /* bExport= */true);

}; // end of sap/ui/comp/navpopover/LinkData.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.navpopover.NavigationPopoverHandler') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.navpopover.NavigationPopoverHandler.
jQuery.sap.declare('sap.ui.comp.navpopover.NavigationPopoverHandler'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/navpopover/NavigationPopoverHandler",[
	'jquery.sap.global', "sap/ui/base/ManagedObject", 'sap/ui/comp/navpopover/LinkData'
], function(jQuery, ManagedObject, LinkData) {
	"use strict";

	/**
	 * Constructor for a new navpopover/NavigationPopoverHandler.
	 * 
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * @class The NavigationPopoverHandler control uses a semantic object to display
	 *        {@link sap.ui.comp.navpopover.NavigationPopover NavigationPopover} for further navigation steps.
	 * @extends sap.ui.base.ManagedObject
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.navpopover.NavigationPopoverHandler
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var NavigationPopoverHandler = ManagedObject.extend("sap.ui.comp.navpopover.NavigationPopoverHandler", /** @lends sap.ui.comp.navpopover.NavigationPopoverHandler.prototype */
	{
		metadata: {

			library: "sap.ui.comp",
			properties: {

				/**
				 * The semantic object which is used to fill the navigation popover.
				 */
				semanticObject: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * The semantic object controller controls events for several NavigationPopoverHandler controls. If the controller is not manually
				 * set, the NavigationPopoverHandler tries to find a SemanticObjectController in the parent hierarchy.0
				 */
				semanticObjectController: {
					type: "any",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * The metadata fieldname for this NavigationPopoverHandler.
				 */
				fieldName: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * The semantic objects's display name.
				 */
				semanticObjectLabel: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * If set to 'false', the NavigationPopoverHandler will not replace its field name with the according semantic object name during the
				 * calculation of the semantic attributes. This enables the usage of several NavigationPopoverHandlers on the same semantic object.
				 */
				mapFieldToSemanticObject: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				}
			},
			associations: {
				/**
				 * The parent control.
				 */
				control: {
					type: "sap.ui.core.Control",
					multiple: false
				}
			},
			events: {

				/**
				 * Event is fired before the semantic object navigation popup opens and before navigation targets are getting retrieved. Event can be
				 * used to set the required business attributes.
				 * 
				 * @since 1.28.0
				 */
				beforePopoverOpens: {
					parameters: {
						/**
						 * The semantic object for which the navigation targets must be retrieved.
						 */
						semanticObject: {
							type: "string"
						},

						/**
						 * Map containing the semantic attributes calculated based on the binding that will be used to retrieve the navigation
						 * targets.
						 */
						semanticAttributes: {
							type: "object"
						},

						/**
						 * The ID of the NavigationPopoverHandler.
						 */
						originalId: {
							type: "string"
						},

						/**
						 * This callback function enables you to define a changed semantic attributes map. Signatures:
						 * <code>setSemanticAttributes(oSemanticAttributesMap)</code> Parameter:
						 * <ul>
						 * <li>{object} oSemanticAttributesMap - The new map containing the semantic attributes to be used.</li>
						 * </ul>
						 */
						setSemanticAttributes: {
							type: "function"
						},

						/**
						 * This callback function sets an application state key that is used over the cross-application navigation. Signatures:
						 * <code>setAppStateKey(sAppStateKey)</code> Parameter:
						 * <ul>
						 * <li>{string} sAppStateKey - The application state key.</li>
						 * </ul>
						 */
						setAppStateKey: {
							type: "function"
						},

						/**
						 * This callback function triggers the retrieval of navigation targets and results in the opening of the navigation popover.
						 * Signatures: <code>open()</code> If the beforePopoverOpens event has been registered, the 'open' function has to be called
						 * in order to open the navigation popover.
						 */
						open: {
							type: "function"
						}
					}
				},

				/**
				 * Event is fired after navigation targets for a semantic object have been retrieved. The event can be used to change the navigation
				 * targets.
				 * 
				 * @since 1.28.0
				 */
				navigationTargetsObtained: {
					parameters: {
						/**
						 * Array of available navigation targets. Each entry in this array contains a 'text' and 'href' property.
						 */
						actions: {
							type: "sap.ui.comp.navpopover.LinkData[]"
						},

						/**
						 * The main navigation, containing a 'text' and 'href' property.
						 */
						mainNavigation: {
							type: "sap.ui.comp.navpopover.LinkData"
						},

						/**
						 * The navigation object for the current application, containing a 'text' and 'href' property. This navigation option is by
						 * default not visible on the popover.
						 */
						ownNavigation: {
							type: "sap.ui.comp.navpopover.LinkData"
						},

						/**
						 * The semantic object for which the navigation targets have been retrieved.
						 */
						semanticObject: {
							type: "string"
						},

						/**
						 * The ID of the NavigationPopoverHandler.
						 */
						originalId: {
							type: "string"
						},

						/**
						 * This callback function shows the actual navigation popover. Signatures: <code>show()</code>
						 *  <code>show(oMainNavigation, aAvailableActions, oExtraContent)</code>
						 *  <code>show(sMainNavigationId, oMainNavigation, aAvailableActions, oExtraContent)</code>
						 * Parameters:
						 * <ul>
						 * <li>{string} sMainNavigationId - The visible text for the main navigation. If empty, the navigationPopover will try to get
						 * the ID from the given sourceObject.</li>
						 * <li>{sap.ui.comp.navpopover.LinkData} oMainNavigation - The main navigation link data containing a 'text" and 'href'
						 * property.</li>
						 * <li>{sap.ui.comp.navpopover.LinkData[]} aAvailableActions - Array containing the cross application navigation links.</li>
						 * <li>{sap.ui.core.Control} oExtraContent - Custom control that will be placed on the popover.</li>
						 * </ul>
						 * If the navigationTargetsObtained event has been registered, the 'show' function has to be called in order to open the
						 * navigation popover.
						 */
						show: {
							type: "function"
						}
					}
				},

				/**
				 * This event is fired after a navigation link on the navigation popover has been clicked. This event is only fired, if the user
				 * left-clicks the link. Right-clicking the link and selecting 'Open in New Window' etc. in the context menu does not fire the event.
				 * 
				 * @since 1.28.0
				 */
				innerNavigate: {
					parameters: {
						/**
						 * The UI text shown in the clicked link.
						 */
						text: {
							type: "string"
						},

						/**
						 * The navigation target of the clicked link.
						 */
						href: {
							type: "string"
						},

						/**
						 * The semantic object used to retrieve this target.
						 */
						semanticObject: {
							type: "string"
						},

						/**
						 * Map containing the semantic attributes used to retrieve this target.
						 */
						semanticAttributes: {
							type: "object"
						},

						/**
						 * The ID of the NavigationPopoverHandler.
						 */
						originalId: {
							type: "string"
						}
					}
				}
			}
		}
	});

	NavigationPopoverHandler.prototype.init = function() {
		this._oSemanticAttributes = null;
	};

	NavigationPopoverHandler.prototype.setSemanticObjectLabel = function(sLabel) {

		this.setProperty("semanticObjectLabel", sLabel);

		if (this._oPopover) {
			this._oPopover.setTitle(sLabel);
		}
	};

	/**
	 * Eventhandler for link's press event
	 * 
	 * @param {object} oEvent the event parameters.
	 * @private
	 */
	NavigationPopoverHandler.prototype._handlePressed = function(oEvent) {
		if (this._processingPressed) {
			window.console.warn("SmartLink is still processing last press event. This press event is omitted.");
			return; // avoid multiple link press events while data is still fetched
		}

		this._processingPressed = true;

		var sAppStateKey;
		this._calculateSemanticAttributes();

		var that = this;
		var fOpen = function() {
			that._createPopover();

			that._oPopover.setTitle(that.getSemanticObjectLabel());
			that._oPopover.setSemanticObjectName(that.getSemanticObject());

			if (that._oSemanticAttributes) {
				that._oPopover.setSemanticAttributes(that._oSemanticAttributes);
			}

			if (sAppStateKey) {
				that._oPopover.setAppStateKey(sAppStateKey);
			}

			that._oPopover.retrieveNavTargets();
		};

		if (this.hasListeners("beforePopoverOpens")) {
			this.fireBeforePopoverOpens({
				semanticObject: this.getSemanticObject(),
				semanticAttributes: that._oSemanticAttributes,
				setSemanticAttributes: function(oMap) {
					that._oSemanticAttributes = oMap;
				},
				setAppStateKey: function(sKey) {
					sAppStateKey = sKey;
				},
				originalId: this.getId(),
				open: fOpen
			});
		} else {
			fOpen();
		}
	};

	/**
	 * Eventhandler for NavigationPopover's targetObtained event, exposes event or - if not registered - directly opens the dialog
	 * 
	 * @private
	 */
	NavigationPopoverHandler.prototype._onTargetsObtainedOpenDialog = function() {
		var that = this;

		if (!this._oPopover.getMainNavigation()) { // main navigation could not be resolved, so only set link text as MainNavigation
			this._oPopover.setMainNavigation(new LinkData({
				text: this.getSemanticObjectLabel()
			}));
		}

		this.fireNavigationTargetsObtained({
			actions: this._oPopover.getAvailableActions(),
			mainNavigation: this._oPopover.getMainNavigation(),
			ownNavigation: this._oPopover.getOwnNavigation(),
			semanticObject: this.getSemanticObject(),
			semanticAttributes: this.getSemanticAttributes(),
			originalId: this.getId(),
			show: function(sMainNavigationId, oMainNavigation, aAvailableActions, oExtraContent) {
				if (sMainNavigationId != null && typeof sMainNavigationId === "string") {
					that._oPopover.setMainNavigationId(sMainNavigationId);
				} else {
					oExtraContent = aAvailableActions;
					aAvailableActions = oMainNavigation;
					oMainNavigation = sMainNavigationId;
				}

				if (oMainNavigation) {
					that._oPopover.setMainNavigation(oMainNavigation);
				}

				if (aAvailableActions) {
					that._oPopover.removeAllAvailableActions();
					if (aAvailableActions && aAvailableActions.length) {
						var i, length = aAvailableActions.length;
						for (i = 0; i < length; i++) {
							that._oPopover.addAvailableAction(aAvailableActions[i]);
						}
					}
				}

				if (oExtraContent) {
					that._oPopover.setExtraContent(oExtraContent);
				}

				that._oPopover.show();
				that._processingPressed = false;
			}
		});

		if (!this.hasListeners("navigationTargetsObtained")) {
			this._oPopover.show();
			this._processingPressed = false;
		}
	};

	/**
	 * Eventhandler for NavigationPopover's navigate event, exposes event
	 * 
	 * @param {object} oEvent - the event parameters
	 * @private
	 */
	NavigationPopoverHandler.prototype._onInnerNavigate = function(oEvent) {
		var aParameters = oEvent.getParameters();
		this.fireInnerNavigate({
			text: aParameters.text,
			href: aParameters.href,
			originalId: this.getId(),
			semanticObject: this.getSemanticObject(),
			semanticAttributes: this.getSemanticAttributes()
		});
	};

	/**
	 * Creates the NavigationPopover.
	 * 
	 * @private
	 */
	NavigationPopoverHandler.prototype._createPopover = function() {

		if (this._oPopover) {
			this._oPopover.destroy();
			this._oPopover = null;
		}

		if (!this._oPopover) {
			var oComponent = this._getComponent();
			jQuery.sap.require("sap.ui.comp.navpopover.NavigationPopover");
			var NavigationPopover = sap.ui.require("sap/ui/comp/navpopover/NavigationPopover");
			this._oPopover = new NavigationPopover({
				title: this.getSemanticObjectLabel(),
				semanticObjectName: this.getSemanticObject(),
				targetsObtained: jQuery.proxy(this._onTargetsObtainedOpenDialog, this),
				navigate: jQuery.proxy(this._onInnerNavigate, this),
				component: oComponent
			});

			this._oPopover.setSource(this._getControl());
		}
	};

	NavigationPopoverHandler.prototype._getControl = function() {
		var sHostingControlId = this.getControl();
		if (sHostingControlId) {
			return sap.ui.getCore().byId(sHostingControlId);
		}

		return null;
	};

	/**
	 * Finds the parental component.
	 * 
	 * @private
	 * @returns {sap.ui.core.Component} the found parental component or null
	 */
	NavigationPopoverHandler.prototype._getComponent = function() {

		var oHostingControl = this._getControl();
		if (oHostingControl) {

			var oParent = oHostingControl.getParent();
			while (oParent) {

				if (oParent instanceof sap.ui.core.Component) {
					return oParent;
				}
				oParent = oParent.getParent();
			}
		}

		return null;
	};

	/**
	 * Gets the current binding context and creates a copied map where all empty and unnecessary data is deleted from.
	 * 
	 * @private
	 */
	NavigationPopoverHandler.prototype._calculateSemanticAttributes = function() {
		var oResult = null;
		var oContext = this.getBindingContext();
		if (oContext) {
			oResult = {};
			var oSourceObject = oContext.getObject(oContext.getPath());
			var oKey, oValue;
			var that = this;
			var fMap;

			if (this.getMapFieldToSemanticObject()) { // map all available fields to their semanticObjects
				fMap = function(oKey) {
					return that._mapFieldToSemanticObject(oKey);
				};
			} else { // map all available fields to their semanticObjects excluding NavigationPopoverHandler's own SemanticObject
				var sSemanticObject = this.getSemanticObject();
				fMap = function(oKey) {
					var sFoundSemanticObject = that._mapFieldToSemanticObject(oKey);
					if (sFoundSemanticObject === sSemanticObject) {
						return oKey;
					}
					return sFoundSemanticObject;
				};
			}

			// copy the source object and ignore empty values / metadata
			for (oKey in oSourceObject) {
				if (oKey !== "__metadata") {
					oValue = oSourceObject[oKey];
					if (oValue) {
						oKey = fMap(oKey);
						oResult[oKey] = oValue;
					}
				}
			}
		}

		this._oSemanticAttributes = oResult;
	};

	/**
	 * Gets the semantic object calculated at the last Link press event
	 * 
	 * @returns {object} Map containing the copy of the available binding context.
	 * @public
	 */
	NavigationPopoverHandler.prototype.getSemanticAttributes = function() {
		if (this._oSemanticAttributes === null) {
			this._calculateSemanticAttributes();
		}
		return this._oSemanticAttributes;
	};

	/**
	 * Maps the given field to the corresponding semantic object if available
	 * 
	 * @param {string} oField - the field name which should be mapped to a semantic object;
	 * @returns {string} The corresponding semantic object, or if semantic object is not available, the original field.
	 * @private
	 */
	NavigationPopoverHandler.prototype._mapFieldToSemanticObject = function(oField) {
		var oSOController = this.getSemanticObjectController();
		if (oSOController) {
			var oMap = oSOController.getFieldSemanticObjectMap();
			if (oMap) {
				var oSemanticObject = oMap[oField];
				if (oSemanticObject) {
					return oSemanticObject;
				}
			}
		}
		return oField;
	};

	NavigationPopoverHandler.prototype.setFieldName = function(sFieldName) {
		this.setProperty("fieldName", sFieldName);

		var oSemanticController = this.getSemanticObjectController();
		if (oSemanticController) {
			oSemanticController.setIgnoredState(this);
		}
	};

	NavigationPopoverHandler.prototype.setSemanticObjectController = function(oController) {
		var oOldController = this.getProperty("semanticObjectController");
		if (oOldController) {
			oOldController.unregisterControl(this);
		}

		this.setProperty("semanticObjectController", oController, true);

		if (oController) {
			oController.registerControl(this);
		}
	};

	NavigationPopoverHandler.prototype.getSemanticObjectController = function() {
		var oController = this.getProperty("semanticObjectController");

		if (!oController) {

			var oParent = this.getParent();
			while (oParent) {
				if (oParent.getSemanticObjectController) {
					oController = oParent.getSemanticObjectController();
					if (oController) {
						this.setSemanticObjectController(oController);
						break;
					}
				}

				oParent = oParent.getParent();
			}
		}

		return oController;
	};

	/**
	 * Gets the current value assigned to the field with the NavigationPopoverHandler's semantic object name.
	 * 
	 * @returns {object} The semantic object's value.
	 * @public
	 */
	NavigationPopoverHandler.prototype.getSemanticObjectValue = function() {
		var oSemanticAttributes = this.getSemanticAttributes();
		if (oSemanticAttributes) {
			var sSemanticObjectName = this.getSemanticObject();
			return oSemanticAttributes[sSemanticObjectName];
		}

		return null;
	};

	NavigationPopoverHandler.prototype.exit = function() {
		this.setSemanticObjectController(null); // disconnect from SemanticObjectController
		if (this._oPopover) {
			this._oPopover.destroy();
			this._oPopover = null;
		}
	};

	return NavigationPopoverHandler;

}, /* bExport= */true);

}; // end of sap/ui/comp/navpopover/NavigationPopoverHandler.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.navpopover.SmartLink') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.navpopover.SmartLink.
jQuery.sap.declare('sap.ui.comp.navpopover.SmartLink'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.Link'); // unlisted dependency retained
jQuery.sap.require('sap.m.LinkRenderer'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/navpopover/SmartLink",[
	'jquery.sap.global', 'sap/m/Link', 'sap/m/LinkRenderer', 'sap/ui/comp/navpopover/LinkData'
], function(jQuery, Link, LinkRenderer, LinkData) {
	"use strict";

	/**
	 * Constructor for a new navpopover/SmartLink.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * @class The SmartLink control uses a semantic object to display {@link sap.ui.comp.navpopover.NavigationPopover NavigationPopover} for further
	 *        navigation steps.
	 * @extends sap.m.Link
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.navpopover.SmartLink
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var SmartLink = Link.extend("sap.ui.comp.navpopover.SmartLink", /** @lends sap.ui.comp.navpopover.SmartLink.prototype */
	{
		metadata: {

			library: "sap.ui.comp",
			properties: {

				/**
				 * Name of semantic object which is used to fill the navigation popover.
				 *
				 * @since 1.28.0
				 */
				semanticObject: {
					type: "string",
					defaultValue: null
				},

				/**
				 * The semantic object controller controls events for several SmartLink controls. If the controller is not set manually, it tries to
				 * find a SemanticObjectController in its parent hierarchy.
				 *
				 * @since 1.28.0
				 */
				semanticObjectController: {
					type: "any",
					defaultValue: null
				},

				/**
				 * The metadata field name for this SmartLink control.
				 *
				 * @since 1.28.0
				 */
				fieldName: {
					type: "string",
					defaultValue: null
				},

				/**
				 * Shown label of semantic object.
				 *
				 * @since 1.28.0
				 */
				semanticObjectLabel: {
					type: "string",
					defaultValue: null
				},

				/**
				 * Function that enables the SmartLink control to create an alternative control, which is displayed if no navigation targets are
				 * available. The function has no parameters and has to return an instance of sap.ui.core.Control.
				 *
				 * @since 1.28.0
				 */
				createControlCallback: {
					type: "object",
					defaultValue: null
				},

				/**
				 * If set to <code>false</code>, the SmartLink control will not replace its field name with the according
				 * <code>semanticObject</code> property during the calculation of the semantic attributes. This enables the usage of several
				 * SmartLinks on the same semantic object.
				 */
				mapFieldToSemanticObject: {
					type: "boolean",
					defaultValue: true
				},

				/**
				 * If set to <code>true</code>, the SmartLink control will render the <code>innerControl</code> or the control provided by
				 * <code>createControlCallback</code> instead of the actual link. This is used for example by the SemanticObjectController if this
				 * SmartLink is listed in its <code>ignoredFields</code> or no navigation targets were found during prefetch.
				 *
				 * @since 1.28.0
				 */
				ignoreLinkRendering: {
					type: "boolean",
					defaultValue: false
				}
			},
			aggregations: {

				/**
				 * Control that is displayed instead of SmartLink, if the SmartLink is disabled (for example, if no navigation targets are available).
				 * If <code>innerControl</code> is not provided, the SmartLink control tries to create one with property
				 * <code>createControlCallback</code>.
				 *
				 * @since 1.28.0
				 */
				innerControl: {
					type: "sap.ui.core.Control",
					multiple: false
				}
			},
			events: {

				/**
				 * Event is fired before the navigation popover opens and before navigation target links are getting retrieved. Event can be used to
				 * change the parameters used to retrieve the navigation targets. In case of SmartLink, the <code>beforePopoverOpens</code> is fired
				 * after the link has been clicked.
				 *
				 * @since 1.28.0
				 */
				beforePopoverOpens: {
					parameters: {
						/**
						 * The semantic object for which the navigation targets will be retrieved.
						 */
						semanticObject: {
							type: "string"
						},

						/**
						 * Map containing the semantic attributes calculated from the binding that will be used to retrieve the navigation targets.
						 * targets.
						 */
						semanticAttributes: {
							type: "object"
						},

						/**
						 * This callback function enables you to define a changed semantic attributes map. Signatures:
						 * <code>setSemanticAttributes(oSemanticAttributesMap)</code> Parameter:
						 * <ul>
						 * <li>{object} oSemanticAttributesMap New map containing the semantic attributes to be used.</li>
						 * </ul>
						 */
						setSemanticAttributes: {
							type: "function"
						},

						/**
						 * This callback function sets an application state key that is used over the cross-application navigation. Signatures:
						 * <code>setAppStateKey(sAppStateKey)</code> Parameter:
						 * <ul>
						 * <li>{string} sAppStateKey</li>
						 * </ul>
						 */
						setAppStateKey: {
							type: "function"
						},

						/**
						 * The ID of the SmartLink.
						 */
						originalId: {
							type: "string"
						},

						/**
						 * This callback function triggers the retrieval of navigation targets and leads to the opening of the navigation popover.
						 * Signatures: <code>open()</code> If the <code>beforePopoverOpens</code> has been registered, the <code>open</code>
						 * function has to be called manually in order to open the navigation popover.
						 */
						open: {
							type: "function"
						}
					}
				},

				/**
				 * After the navigation targets are retrieved, <code>navigationTargetsObtained</code> is fired and provides the possibility to
				 * change the targets.
				 *
				 * @since 1.28.0
				 */
				navigationTargetsObtained: {
					parameters: {
						/**
						 * The main navigation object.
						 */
						mainNavigation: {
							type: "sap.ui.comp.navpopover.LinkData"
						},

						/**
						 * Array of available navigation target objects.
						 */
						actions: {
							type: "sap.ui.comp.navpopover.LinkData[]"
						},

						/**
						 * The navigation object for the own application. This navigation option is by default not visible on the popover.
						 */
						ownNavigation: {
							type: "sap.ui.comp.navpopover.LinkData"
						},

						/**
						 * The semantic object for which the navigation targets have been retrieved.
						 */
						semanticObject: {
							type: "string"
						},

						/**
						 * The ID of the SmartLink.
						 */
						originalId: {
							type: "string"
						},

						/**
						 * This callback function shows the actual navigation popover. If the <code>navigationTargetsObtained</code> has been
						 * registered, the <code>show</code> function has to be called manually in order to open the navigation popover. Signatures:
						 * <code>show()</code>
						 *  <code>show(oMainNavigation, aAvailableActions, oExtraContent)</code>
						 *  <code>show(sMainNavigationId, oMainNavigation, aAvailableActions, oExtraContent)</code>
						 * Parameters:
						 * <ul>
						 * <li>{string} sMainNavigationId The visible text for the main navigation section. If empty, the main navigation ID is
						 * calculated using binding context of given source object (for example SmartLink).</li>
						 * <li>{sap.ui.comp.navpopover.LinkData} oMainNavigation The main navigation object. If empty, property
						 * <code>mainNavigation</code> will be used.</li>
						 * <li>{sap.ui.comp.navpopover.LinkData[]} aAvailableActions Array containing the cross application navigation links. If
						 * empty, property <code>actions</code> will be used.</li>
						 * <li>{sap.ui.core.Control} oExtraContent Control that will be displayed in extra content section on the popover.</li>
						 * </ul>
						 */
						show: {
							type: "function"
						}
					}
				},

				/**
				 * This event is fired after a navigation link on the navigation popover has been clicked. This event is only fired, if the user
				 * left-clicks the link. Right-clicking the link and selecting 'Open in New Window' etc. in the context menu does not fire the event.
				 *
				 * @since 1.28.0
				 */
				innerNavigate: {
					parameters: {
						/**
						 * The UI text shown in the clicked link.
						 */
						text: {
							type: "string"
						},

						/**
						 * The navigation target of the clicked link.
						 */
						href: {
							type: "string"
						},

						/**
						 * The semantic object used to retrieve this target.
						 */
						semanticObject: {
							type: "string"
						},

						/**
						 * Map containing the semantic attributes used to retrieve this target.
						 */
						semanticAttributes: {
							type: "object"
						},

						/**
						 * The ID of the SmartLink.
						 */
						originalId: {
							type: "string"
						}
					}
				}
			}
		},
		renderer: function(oRm, oControl) {
			var bRenderLink = true;

			if (oControl.getIgnoreLinkRendering()) {
				var oReplaceControl = oControl._getInnerControl();
				if (oReplaceControl) {
					oRm.write("<div ");
					oRm.writeControlData(oControl);
					oRm.writeClasses();
					oRm.write(">");

					oRm.renderControl(oReplaceControl);

					oRm.write("</div>");

					bRenderLink = false;
				}
			}

			if (bRenderLink) {
				LinkRenderer.render.call(LinkRenderer, oRm, oControl);
			}
		}
	});

	SmartLink.prototype.init = function() {
		// sap.m.Link.prototype.init.call(this);
		this.attachPress(this._linkPressed);
		this.addStyleClass("sapUiCompSmartLink");
		this._oSemanticAttributes = null;
	};

	/**
	 * Eventhandler for link's press event
	 *
	 * @param {object} oEvent the event parameters.
	 * @private
	 */
	SmartLink.prototype._linkPressed = function(oEvent) {
		if (this._processingLinkPressed) {
			window.console.warn("SmartLink is still processing last press event. This press event is omitted.");
			return; // avoid multiple link press events while data is still fetched
		}

		if (this.getIgnoreLinkRendering()) {
			window.console.warn("SmartLink should ignore link rendering. Press event is omitted.");
			return; // actual link is not rendered -> ignore press event
		}

		this._processingLinkPressed = true;

		var sAppStateKey;
		this._oSemanticAttributes = this._calculateSemanticAttributes();

		var that = this;
		var fOpen = function() {
			that._createPopover();

			if (that._oSemanticAttributes) {
				that._oPopover.setSemanticAttributes(that._oSemanticAttributes);
			}

			if (sAppStateKey) {
				that._oPopover.setAppStateKey(sAppStateKey);
			}

			that._oPopover.retrieveNavTargets();
		};

		if (this.hasListeners("beforePopoverOpens")) {
			this.fireBeforePopoverOpens({
				semanticObject: this.getSemanticObject(),
				semanticAttributes: that._oSemanticAttributes,
				setSemanticAttributes: function(oMap) {
					that._oSemanticAttributes = oMap;
				},
				setAppStateKey: function(sKey) {
					sAppStateKey = sKey;
				},
				originalId: this.getId(),
				open: fOpen
			});
		} else {
			fOpen();
		}
	};

	/**
	 * Eventhandler for NavigationPopover's targetObtained event, exposes event or - if not registered - directly opens the dialog
	 *
	 * @private
	 */
	SmartLink.prototype._onTargetsObtainedOpenDialog = function() {
		var that = this;

		if (!this._oPopover.getMainNavigation()) { // main navigation could not be resolved, so only set link text as MainNavigation
			this._oPopover.setMainNavigation(new LinkData({
				text: this.getText()
			}));
		}

		this.fireNavigationTargetsObtained({
			actions: this._oPopover.getAvailableActions(),
			mainNavigation: this._oPopover.getMainNavigation(),
			ownNavigation: this._oPopover.getOwnNavigation(),
			semanticObject: this.getSemanticObject(),
			semanticAttributes: this.getSemanticAttributes(),
			originalId: this.getId(),
			show: function(sMainNavigationId, oMainNavigation, aAvailableActions, oExtraContent) {
				if (sMainNavigationId != null && typeof sMainNavigationId === "string") {
					that._oPopover.setMainNavigationId(sMainNavigationId);
				} else {
					oExtraContent = aAvailableActions;
					aAvailableActions = oMainNavigation;
					oMainNavigation = sMainNavigationId;
				}

				if (oMainNavigation) {
					that._oPopover.setMainNavigation(oMainNavigation);
				}

				if (aAvailableActions) {
					that._oPopover.removeAllAvailableActions();
					if (aAvailableActions && aAvailableActions.length) {
						var i, length = aAvailableActions.length;
						for (i = 0; i < length; i++) {
							that._oPopover.addAvailableAction(aAvailableActions[i]);
						}
					}
				}

				if (oExtraContent) {
					that._oPopover.setExtraContent(oExtraContent);
				}

				that._oPopover.show();
				that._processingLinkPressed = false;
			}
		});

		if (!this.hasListeners("navigationTargetsObtained")) {
			this._oPopover.show();
			this._processingLinkPressed = false;
		}
	};

	/**
	 * Eventhandler for NavigationPopover's navigate event, exposes event
	 *
	 * @param {object} oEvent - the event parameters
	 * @private
	 */
	SmartLink.prototype._onInnerNavigate = function(oEvent) {
		var aParameters = oEvent.getParameters();
		this.fireInnerNavigate({
			text: aParameters.text,
			href: aParameters.href,
			originalId: this.getId(),
			semanticObject: this.getSemanticObject(),
			semanticAttributes: this.getSemanticAttributes()
		});
	};

	/**
	 * Creates the NavigationPopover.
	 *
	 * @private
	 */
	SmartLink.prototype._createPopover = function() {
		if (!this._oPopover) {
			var oComponent = this._getComponent();
			jQuery.sap.require("sap.ui.comp.navpopover.NavigationPopover");
			var NavigationPopover = sap.ui.require("sap/ui/comp/navpopover/NavigationPopover");
			this._oPopover = new NavigationPopover({
				title: this.getSemanticObjectLabel(),
				semanticObjectName: this.getSemanticObject(),
				targetsObtained: jQuery.proxy(this._onTargetsObtainedOpenDialog, this),
				navigate: jQuery.proxy(this._onInnerNavigate, this),
				component: oComponent
			});

			this._oPopover.setSource(this);
		}
	};

	/**
	 * Finds the parental component.
	 *
	 * @private
	 * @returns {sap.ui.core.Component} the found parental component or null
	 */
	SmartLink.prototype._getComponent = function() {
		var oParent = this.getParent();
		while (oParent) {

			if (oParent instanceof sap.ui.core.Component) {
				return oParent;
			}
			oParent = oParent.getParent();
		}

		return null;
	};

	/**
	 * Gets the current binding context and creates a copied map where all empty and unnecessary data is deleted from.
	 *
	 * @private
	 */
	SmartLink.prototype._calculateSemanticAttributes = function() {
		var oContext = this.getBindingContext();
		if (!oContext) {
			return null;
		}

		var oBinding = this.getBinding("text");
		var sCurrentField = oBinding.getPath();

		var oResult = {};
		var oContext = oContext.getObject(oContext.getPath());
		for ( var sAttributeName in oContext) {
			// Ignore metadata
			if (sAttributeName === "__metadata") {
				continue;
			}
			// Ignore empty values
			if (!oContext[sAttributeName]) {
				continue;
			}

			// Map attribute name by semantic object name
			var sSemanticObjectName = this._mapFieldToSemanticObject(sAttributeName);
			if (sAttributeName === sCurrentField && this.getSemanticObject()) {
				sSemanticObjectName = this.getSemanticObject();
			}

			// Map all available attribute fields to their semanticObjects excluding SmartLink's own SemanticObject
			if (sSemanticObjectName === this.getSemanticObject() && !this.getMapFieldToSemanticObject()) {
				sSemanticObjectName = sAttributeName;
			}

			// If more then one attribute fields maps to the same semantic object we take the value of the current binding path.
			var oAttributeValue = oContext[sAttributeName];
			if (oResult[sSemanticObjectName]) {
				if (oContext[sCurrentField]) {
					oAttributeValue = oContext[sCurrentField];
				}
			}

			// Copy the value replacing the attribute name by semantic object name
			oResult[sSemanticObjectName] = oAttributeValue;
		}

		return oResult;
	};

	/**
	 * Gets the semantic object calculated at the last Link press event
	 *
	 * @returns {object} Map containing the copy of the available binding context.
	 * @public
	 */
	SmartLink.prototype.getSemanticAttributes = function() {
		if (this._oSemanticAttributes === null) {
			this._oSemanticAttributes = this._calculateSemanticAttributes();
		}
		return this._oSemanticAttributes;
	};

	/**
	 * Maps the given field name to the corresponding semantic object.
	 *
	 * @param {string} sFieldName The field name which should be mapped to a semantic object
	 * @returns {string} Corresponding semantic object, or the original field name if semantic object is not available.
	 * @private
	 */
	SmartLink.prototype._mapFieldToSemanticObject = function(sFieldName) {
		var oSOController = this.getSemanticObjectController();
		if (!oSOController) {
			return sFieldName;
		}
		var oMap = oSOController.getFieldSemanticObjectMap();
		if (!oMap) {
			return sFieldName;
		}
		return oMap[sFieldName] || sFieldName;
	};

	SmartLink.prototype.setFieldName = function(sFieldName) {
		this.setProperty("fieldName", sFieldName);

		var oSemanticController = this.getSemanticObjectController();
		if (oSemanticController) {
			oSemanticController.setIgnoredState(this);
		}
	};

	// BCP 1670108744: when semanticObjectController is set first then semanticObject is still not known in the step where ignoredState is determined
	SmartLink.prototype.setSemanticObject = function(sSemanticObject) {
		this.setProperty("semanticObject", sSemanticObject, true);

		var oSemanticObjectController = this.getSemanticObjectController();
		if (oSemanticObjectController) {
			oSemanticObjectController.setIgnoredState(this);
		}
	};

	SmartLink.prototype.setSemanticObjectController = function(oController) {
		var oOldController = this.getProperty("semanticObjectController");
		if (oOldController) {
			oOldController.unregisterControl(this);
		}

		this.setProperty("semanticObjectController", oController, true);
		if (oController) {
			oController.registerControl(this);
		}
		this._oSemanticAttributes = null;
	};

	SmartLink.prototype.getSemanticObjectController = function() {
		var oController = this.getProperty("semanticObjectController");

		if (!oController) {

			var oParent = this.getParent();
			while (oParent) {
				if (oParent.getSemanticObjectController) {
					oController = oParent.getSemanticObjectController();
					if (oController) {
						this.setSemanticObjectController(oController);
						break;
					}
				}

				oParent = oParent.getParent();
			}
		}

		return oController;
	};

	/**
	 * Gets the current value assigned to the field with the SmartLink's semantic object name.
	 *
	 * @returns {object} The semantic object's value.
	 * @public
	 */
	SmartLink.prototype.getSemanticObjectValue = function() {
		var oSemanticAttributes = this.getSemanticAttributes();
		if (oSemanticAttributes) {
			var sSemanticObjectName = this.getSemanticObject();
			return oSemanticAttributes[sSemanticObjectName];
		}

		return null;
	};

	SmartLink.prototype.setText = function(sText) {
		if (this._isRenderingInnerControl()) {
			// SmartLink renders inner control => overwrite base setText as it changes the DOM directly
			this.setProperty("text", sText, true);
		} else {
			Link.prototype.setText.call(this, sText);
		}
	};

	SmartLink.prototype._isRenderingInnerControl = function() {
		return this.getIgnoreLinkRendering() && this._getInnerControl() != null;
	};

	/**
	 * Gets the inner control which is provided by the CreateControlCallback
	 *
	 * @returns {sap.ui.core.Control} The control.
	 * @private
	 */
	SmartLink.prototype._getInnerControl = function() {
		var oInnerControl = this.getAggregation("innerControl");
		if (!oInnerControl) {
			var fCreate = this.getCreateControlCallback();
			if (fCreate) {
				oInnerControl = fCreate();
				this.setAggregation("innerControl", oInnerControl, true);
			}
		}

		return oInnerControl;
	};

	/**
	 * Gets the inner control's value, if no inner control is available, the SmartLink's text will be returned
	 *
	 * @returns {object} the value
	 * @public
	 */
	SmartLink.prototype.getInnerControlValue = function() {
		if (this._isRenderingInnerControl()) {
			var oInnerControl = this._getInnerControl();

			if (oInnerControl) {
				if (oInnerControl.getText) {
					return oInnerControl.getText();
				}

				if (oInnerControl.getValue) {
					return oInnerControl.getValue();
				}
			}
		}

		return this.getText();
	};

	/**
	 * Called before rendering
	 */
	SmartLink.prototype.onBeforeRendering = function() {
		// ensure that the semantic object controller exists, do this first as retrieving the SemanticObjectController can lead to setting the
		// ignoreLinkRendering flag
		this.getSemanticObjectController();

		// if link should not be rendered, but no inner control is available, deactivate SmartLink
		if (this.getIgnoreLinkRendering() && this._getInnerControl() == null) {
			this.setEnabled(false);
		} else {
			this.setEnabled(true);
		}
	};

	SmartLink.prototype.exit = function() {
		this.setSemanticObjectController(null); // disconnect from SemanticObjectController
	};

	return SmartLink;

}, /* bExport= */true);

}; // end of sap/ui/comp/navpopover/SmartLink.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.odata.FieldSelectorController') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.comp.odata.FieldSelectorController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/odata/FieldSelectorController",["jquery.sap.global", "./FieldSelectorModelConverter"],
	function(jQuery, ModelConverter) {
	"use strict";


	/**
	 * Constructs a utility class to analyse the OData metadata document ($metadata), to resolve SAP-Annotations
	 *
	 * @constructor
	 * @public
	 * @author Niels Hebling
	 */
	var FieldSelectorController = function() {
		this._oModelConverter = null;
		this._oFields = {};
		this._aIgnoredFields = [];
	};

	/**
	 * Initialize the controller by providing a reference to the OData model and optionally a special entity set and/or a list of fields which should be ignored.
	 * @param {sap.ui.model.odata.ODataModel} oODataModel - OData model
	 * @param {string|array} [vEntityTypes] - Entity type name(s) separated by comma-character or array. If empty all available EntityTypes will be taken into account.
	 * @param {Array} [aIgnoredFields] - List of fields which should be ignored
	 * @param {Object.<bindingPath:string, fieldListElement:Object>} [mBindingPathToFieldListElement] - Map absolute odata binding paths to the field list elements
	 * @param {Object.<id:string, fieldListElement:Object>} [mIdToFieldListElement] - Map field list element ids to the field list elements
	 */
	FieldSelectorController.prototype.init = function(oODataModel, vEntityTypes, aIgnoredFields, mBindingPathToFieldListElement, mIdToFieldListElement){

		if (!oODataModel) {
			jQuery.sap.log.error("oModel has to be set otherwise nothing will be displayed");
		}

		this._oModelConverter = new ModelConverter(oODataModel);
		if (!vEntityTypes){
			vEntityTypes = this._oModelConverter.getAllEntityTypeNames();
		}

		if (!aIgnoredFields){
			aIgnoredFields = [];
		}

		var oConvertedModel = this._oModelConverter.getConvertedModel(vEntityTypes, aIgnoredFields);
		if (mBindingPathToFieldListElement && mIdToFieldListElement) {
			var aFieldsNotBoundToODataService = this._updateFieldLabelsAndDetermineFieldsNotBoundToODataService(oConvertedModel, mBindingPathToFieldListElement, mIdToFieldListElement);
			this._addFieldsNotBoundToODataService(oConvertedModel, aFieldsNotBoundToODataService);
		}
		this._sortFields(oConvertedModel);
	};

	/**
	 * Check each label of the field selector if it is in synch with the corresponding label of the field list.
	 * If a label of the field selector is not in synch, then set it to the label of the field list.
	 * @param {Object} oConvertedModel Model of the OData service converted into a simple list
	 * @param {Object.<bindingPath:string, fieldListElement:Object>} [mBindingPathToFieldListElement] - Map absolute odata binding paths to the field list elements
	 * @param {Object.<id:string, fieldListElement:Object>} [mIdToFieldListElement] - Map field list element ids to the field list elements
	 */
	FieldSelectorController.prototype._updateFieldLabelsAndDetermineFieldsNotBoundToODataService = function(oConvertedModel, mBindingPathToFieldListElement, mIdToFieldListElement) {
		var that = this;
		jQuery.each(oConvertedModel, function(key, aDataServiceFields) {
			jQuery.each(aDataServiceFields, function(index, oDataServiceField) {
				if (oDataServiceField.entityName && oDataServiceField.name) {
					if (key !== oDataServiceField.entityName) { // complex type case
						var oMetaDataAnalyzer = that.getMetaDataAnalyzer();
						var sPropertyNameOfCmplxField = oMetaDataAnalyzer._getNameOfPropertyUsingComplexType(key, oDataServiceField.entityName);
						if (sPropertyNameOfCmplxField){
							var oFieldListElement = mBindingPathToFieldListElement[key + "/" + sPropertyNameOfCmplxField + "/" + oDataServiceField.name];
							if (oFieldListElement) {
								oFieldListElement.isBoundToODataService = true;
								var sFieldListLabel = oFieldListElement.label;
								if (sFieldListLabel && (sFieldListLabel !== oDataServiceField.fieldLabel)) {
									oDataServiceField.fieldLabel = sFieldListLabel;
								}
								if (mIdToFieldListElement) {
									// reduce mIdToFieldListElement by removing all mBindingPathToFieldListElement[x].id, where x is a valid odata service binding path
									delete mIdToFieldListElement[oFieldListElement.id];
								}
							}
						} else {
							jQuery.sap.log.error("FieldSelector: Property of complex type " + oDataServiceField.name + " not found on entityType " + key);
						}
					} else { // non complex type case
						var oFieldListElement = mBindingPathToFieldListElement[oDataServiceField.entityName + '/' + oDataServiceField.name];
						if (oFieldListElement) {
							oFieldListElement.isBoundToODataService = true;
							var sFieldListLabel = oFieldListElement.label;
							if (sFieldListLabel && (sFieldListLabel !== oDataServiceField.fieldLabel)) {
								oDataServiceField.fieldLabel = sFieldListLabel;
							}
							if (mIdToFieldListElement) {
								// reduce mIdToFieldListElement by removing all mBindingPathToFieldListElement[x].id, where x is a valid odata service binding path
								delete mIdToFieldListElement[oFieldListElement.id];
							}
						}
					}
				}
			});
		});

		this._removeFieldsFromList(mIdToFieldListElement, mBindingPathToFieldListElement, this._oModelConverter.invisibleFields);

		var aFieldsNotBoundToODataService = [];
		jQuery.each(mIdToFieldListElement, function(key, oFieldListElement) {
			aFieldsNotBoundToODataService.push(oFieldListElement);
		});

		return aFieldsNotBoundToODataService;
	};

	FieldSelectorController.prototype._removeFieldsFromList = function (mFieldsList, mBindingPathToFieldListElement, mFieldsToRemove) {
		var that = this;

		if (!mFieldsList || !mFieldsToRemove) {
			return;
		}

		jQuery.each(mFieldsToRemove, function(key, oFields) {
			jQuery.each(oFields, function(index, oField) {
				if (oField.entityName && oField.name) {
					if (key !== oField.entityName) { // complex type case
						var oMetaDataAnalyzer = that.getMetaDataAnalyzer();
						var sPropertyNameOfCmplxField = oMetaDataAnalyzer._getNameOfPropertyUsingComplexType(key, oField.entityName);
						if (sPropertyNameOfCmplxField) {
							var oFieldListElement = mBindingPathToFieldListElement[key + "/" + sPropertyNameOfCmplxField + "/" + oField.name];
							if (oFieldListElement) {
								delete mFieldsList[oField.id];
							}
						} else {
							jQuery.sap.log.error("FieldSelector: Property of complex type " + oField.name + " not found on entityType " + key);
						}
					} else { // non complex type case
						var oFieldListElement = mBindingPathToFieldListElement[oField.entityName + '/' + oField.name];
						if (oFieldListElement) {
							delete mFieldsList[oField.id];
						}
					}
				}
			});
		});
	};

	FieldSelectorController.prototype._addFieldsNotBoundToODataService = function(oConvertedModel, aFieldsNotBoundToODataService) {
		var fnEntityTypePushConvertelModelElementToConvertedModel = function(oConvertedModelElement, oEntityType) {
			if (!oConvertedModel[oEntityType.key]) {
				oConvertedModel[oEntityType.key] = [];
			}
			oConvertedModel[oEntityType.key].push(oConvertedModelElement);
		};

		var fnAddFieldsToConvertedModel = function(oFieldListElement){
			oFieldListElement.isBoundToODataService = false;
			// id property is used in the converted model for identifying fields, which are not bound to odata service
			// fieldLabel property stores the label of the field, which is not bound to odata service
			var oConvertedModelElement = { id: oFieldListElement.id, fieldLabel: oFieldListElement.label };
			var aEntityTypes = this._oModelConverter.getEntityTypes();
			aEntityTypes.forEach(fnEntityTypePushConvertelModelElementToConvertedModel.bind(null, oConvertedModelElement));
		};

		aFieldsNotBoundToODataService.forEach(fnAddFieldsToConvertedModel.bind(this));
	};

	/**
	 * Sort all fields from the converted model into a map of fields arranged by entity sets.
	 * @param {Object} oConvertedModel Model of the OData service converted into a simple list.
	 */
	FieldSelectorController.prototype._sortFields = function(oConvertedModel){
		var that = this;
		jQuery.each(oConvertedModel, function(key, value) {
			that._oFields[key] = value;
			that.sortFieldsForEntity.call(that, key);
		});
	};

	/**
	 * Sort all fields of an entity.
	 * @param {string} sEntityName name of the entity.
	 */
	FieldSelectorController.prototype.sortFieldsForEntity = function(sEntityName){
		this._oFields[sEntityName] = this._oFields[sEntityName].sort(function(a, b) {
			if (a.fieldLabel > b.fieldLabel) {
				return 1;
			}
			if (a.fieldLabel < b.fieldLabel) {
				return -1;
			}
			// a must be equal to b
			return 0;
		});
	};

	/**
	 * Get all fields of the service sorted by entity set. The fields itself are sorted by the alphabet.
	 * @returns {Object} Returns all fields of the service ordered by entity set
	 * @example {
	 * 				"entitySet_1":{
	 * 					"Field_D",
	 * 					"Field_E"
	 * 				},
	 * 				"entitySet_2":{
	 * 					"Field_A",
	 * 					"Field_B"
	 * 				}
	 * 			}
	 */
	FieldSelectorController.prototype.getFields = function(){
		return this._oFields;
	};

	/**
	 * Get all entity types of the OData service
	 * @returns {Array} Returns the list of entity types of the OData service
	 */
	FieldSelectorController.prototype.getEntityTypes = function(){
		return this._oModelConverter.getEntityTypes();
	};

	/**
	 * Get the metadata analyzer
	 * @returns {Object} Returns a reference to the metadata analyzer of the current service
	 */
	FieldSelectorController.prototype.getMetaDataAnalyzer = function(){
		return this._oModelConverter.getMetaDataAnalyzer();
	};

	/**
	 * Get maximum number of rows in all entitysets returned in the table data.
	 * @returns {Number} Returns the maximum number of rows available in the largest EntitySet.
	 */
	FieldSelectorController.prototype.getMaxEntitySetSize = function(){
		var maxCount = 0;
		if (this._oFields){
			jQuery.each(this._oFields, function(key, value){
				if (value && value.length){
					if (value.length > maxCount){
						maxCount = value.length;
					}
				}
			});
		}
		return maxCount;
	};

	/**
	 * Destroy the current instance
	 */
	FieldSelectorController.prototype.destroy = function(){
		if (this._oModelConverter){
			this._oModelConverter.destroy();
		}
		this._oModelConverter = null;
		this._oFields = null;

	};

	return FieldSelectorController;
}, /* bExport= */ true);

}; // end of sap/ui/comp/odata/FieldSelectorController.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.personalization.Util') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

/**
 * @namespace Provides utitlity functions for the personalization dialog
 * @name sap.ui.comp.personalization.Util
 * @author SAP SE
 * @version 1.36.12
 * @private
 * @since 1.25.0
 */
jQuery.sap.declare('sap.ui.comp.personalization.Util'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.MessageType'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/personalization/Util",[
	'sap/ui/base/Object', 'sap/ui/core/MessageType', './ChartWrapper', './ColumnWrapper', 'sap/ui/comp/library'
], function(BaseObject, MessageType, ChartWrapper, ColumnWrapper, CompLibrary) {
	"use strict";
	var Util = {

		// TODO: improve the performance adding map <oColumn, columnKey>. Use this map for all relevant methods. Consider life cycle aspects [garbage
		// collection !!].

		/**
		 * 
		 */
		splitDimeasures: function(aDimeasureItems, aItems, aDimensions, aMeasures) {
			aDimeasureItems.forEach(function(oDimeasureItem) {
				var oItem = this.getArrayElementByKey("columnKey", oDimeasureItem.columnKey, aItems);
				if (oItem.aggregationRole === sap.ui.comp.personalization.AggregationRole.Dimension) {
					aDimensions.push(oDimeasureItem);
				} else if (oItem.aggregationRole === sap.ui.comp.personalization.AggregationRole.Measure) {
					aMeasures.push(oDimeasureItem);
				}
			}, this);
		},

		/**
		 * 
		 */
		createChartWrapper: function(oChart, aAdditionalData) {
			var oRb = sap.ui.getCore().getLibraryResourceBundle("sap.m");
			var aColumns = [], oColumn, oP13nData;
			oChart.getDimensions().forEach(function(oDimension) {
				oP13nData = oDimension.data("p13nData");
				oColumn = new ColumnWrapper({
					label: oDimension.getLabel(),
					tooltip: oDimension.getTooltip(),
					// visible: true,
					selected: oChart.getVisibleDimensions().indexOf(oDimension.getName()) > -1,
					aggregationRole: sap.ui.comp.personalization.AggregationRole.Dimension,
					role: oDimension.getRole() ? oDimension.getRole() : oRb.getText('COLUMNSPANEL_CHARTROLE_CATEGORY')
				});
				oColumn.data("p13nData", oP13nData);
				aColumns.push(oColumn);
			});
			oChart.getMeasures().forEach(function(oMeasure) {
				oP13nData = oMeasure.data("p13nData");
				oColumn = new ColumnWrapper({
					label: oMeasure.getLabel(),
					tooltip: oMeasure.getTooltip(),
					// visible: true,
					selected: oChart.getVisibleMeasures().indexOf(oMeasure.getName()) > -1,
					aggregationRole: sap.ui.comp.personalization.AggregationRole.Measure,
					role: oMeasure.getRole() ? oMeasure.getRole() : oRb.getText('COLUMNSPANEL_CHARTROLE_AXIS1')
				});
				oColumn.data("p13nData", oP13nData);
				aColumns.push(oColumn);
			});
			if (aAdditionalData) {
				aAdditionalData.forEach(function(oP13nData) {
					oColumn = new ColumnWrapper({
						label: oP13nData.label,
						tooltip: oP13nData.tooltip,
						// visible: false,
						selected: false,
						aggregationRole: sap.ui.comp.personalization.AggregationRole.NotDimeasure
					});
					oColumn.data("p13nData", oP13nData);
					aColumns.push(oColumn);
				});
			}

			return new ChartWrapper({
				chart: oChart,
				columns: aColumns
			});
		},

		/**
		 * Sort the columns in alphabetical order.
		 * 
		 * @param {sap.m.P13nItem} aP13nItems
		 */
		sortItemsByText: function(aP13nItems) {
			var sLanguage;
			try {
				var sLanguage = sap.ui.getCore().getConfiguration().getLocale().toString();
				if (typeof window.Intl !== 'undefined') {
					var oCollator = window.Intl.Collator(sLanguage, {
						numeric: true
					});
					aP13nItems.sort(function(a, b) {
						return oCollator.compare(a.text, b.text);
					});
				} else {
					aP13nItems.sort(function(a, b) {
						return a.text.localeCompare(b.text, sLanguage, {
							numeric: true
						});
					});
				}
			} catch (oException) {
				// this exception can happen if the configured language is not convertible to BCP47 -> getLocale will deliver an exception
			}
		},

		/**
		 * Converts string value to Date instance in filter model data <code>oPersonalisationData</code>.
		 * 
		 * @param {object} oPersonalisationData
		 * @param {sap.m.Table | sap.ui.table.Table} oTable
		 * @param {array} aColumnKeysOfDateType Optional parameter which can be passed to improve performance
		 */
		recoverPersonalisationData: function(oPersonalisationData, oTable, aColumnKeysOfDateType) {
			if (!oTable) {
				return;
			}
			if (!aColumnKeysOfDateType) {
				aColumnKeysOfDateType = this.getColumnKeysOfDateType(oTable);
			}
			if (aColumnKeysOfDateType.length && oPersonalisationData && oPersonalisationData.filter) {
				oPersonalisationData.filter.filterItems.forEach(function(oFilterItem) {
					if (aColumnKeysOfDateType.indexOf(oFilterItem.columnKey) > -1) {
						if (oFilterItem.value1 && typeof (oFilterItem.value1) === "string") {
							oFilterItem.value1 = new Date(oFilterItem.value1);
						}
						if (oFilterItem.value2 && typeof (oFilterItem.value2) === "string") {
							oFilterItem.value2 = new Date(oFilterItem.value2);
						}
					}
				}, this);
			}
		},

		recoverPersonalisationTimeData: function(oPersonalisationData, oTable, aColumnKeysOfTimeType) {
			if (!oTable) {
				return;
			}
			if (!aColumnKeysOfTimeType) {
				aColumnKeysOfTimeType = this.getColumnKeysOfTimeType(oTable);
			}
			if (aColumnKeysOfTimeType.length && oPersonalisationData && oPersonalisationData.filter) {
				oPersonalisationData.filter.filterItems.forEach(function(oFilterItem) {
					if (aColumnKeysOfTimeType.indexOf(oFilterItem.columnKey) > -1) {
						if (oFilterItem.value1 && typeof (oFilterItem.value1) === "string") {
							oFilterItem.value1 = new Date(oFilterItem.value1);
						}
						if (oFilterItem.value2 && typeof (oFilterItem.value2) === "string") {
							oFilterItem.value2 = new Date(oFilterItem.value2);
						}
					}
				}, this);
			}
		},

		/**
		 * Converts string value to Boolean instance in filter model data <code>oPersonalisationData</code>.
		 * 
		 * @param {object} oPersonalisationData
		 * @param {sap.m.Table | sap.ui.table.Table} oTable
		 * @param {array} aColumnKeysOfDateType Optional parameter which can be passed to improve performance
		 */
		recoverPersonalisationBooleanData: function(oPersonalisationData, oTable, aColumnKeysOfDateType) {
			if (!oTable) {
				return;
			}
			if (!aColumnKeysOfDateType) {
				aColumnKeysOfDateType = this.getColumnKeysOfDateType(oTable);
			}
			if (aColumnKeysOfDateType.length && oPersonalisationData && oPersonalisationData.filter) {
				oPersonalisationData.filter.filterItems.forEach(function(oFilterItem) {
					if (aColumnKeysOfDateType.indexOf(oFilterItem.columnKey) > -1) {
						if (oFilterItem.value1 && typeof (oFilterItem.value1) === "string") {
							oFilterItem.value1 = oFilterItem.value1 === "true";
						}
						if (oFilterItem.value2 && typeof (oFilterItem.value2) === "string") {
							oFilterItem.value2 = oFilterItem.value2 === "true";
						}
					}
				}, this);
			}
		},

		/**
		 * Determines <code>columnKeys</code> of a specific type.
		 * 
		 * @param {sap.m.Table | sap.ui.table.Table} oTable
		 * @param {string} sType
		 * @return {array} Array of strings representing the <code>columnKeys</code>
		 */
		getColumnKeysOfType: function(oTable, sType) {
			if (!oTable) {
				return [];
			}
			var aColumnKeysOfDataType = [];
			oTable.getColumns().forEach(function(oColumn) {
				if (this.getColumnType(oColumn) === sType) {
					aColumnKeysOfDataType.push(this.getColumnKey(oColumn));
				}
			}, this);
			return aColumnKeysOfDataType;
		},

		/**
		 * Determines <code>columnKeys</code> of type <code>Date</code>.
		 * 
		 * @param {sap.m.Table | sap.ui.table.Table} oTable
		 * @return {array} Array of strings representing the <code>columnKeys</code>
		 */
		getColumnKeysOfDateType: function(oTable) {
			return this.getColumnKeysOfType(oTable, "date");
		},

		getColumnKeysOfTimeType: function(oTable) {
			return this.getColumnKeysOfType(oTable, "time");
		},

		/**
		 * Determines <code>columnKeys</code> of type <code>Boolean</code>.
		 * 
		 * @param {sap.m.Table | sap.ui.table.Table} oTable
		 * @return {array} Array of strings representing the <code>columnKeys</code>
		 */
		getColumnKeysOfBooleanType: function(oTable) {
			return this.getColumnKeysOfType(oTable, "boolean");
		},

		validate: function(oSetting, oPayload, oTable, oPersistentData) {
			var aResult = [];
			var oRB = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp");

			if (oTable instanceof sap.ui.table.AnalyticalTable && oSetting.group && oSetting.columns) {
				oTable.getColumns().forEach(function(oColumn) {
					if (oColumn.getInResult()) {
						// if inResult=true then grouping will work 'always' (independent of visible or not) according to Sebastian Ried
						return;
					}
					var sColumnKey = this.getColumnKey(oColumn);
					var bColumnSelected = oSetting.columns.controller.isColumnSelected(oPayload.columns, oPersistentData.columns, sColumnKey);
					var bGroupSelected = oSetting.group.controller.isGroupSelected(oPayload.group, oPersistentData.group, sColumnKey);

					if (bGroupSelected && !bColumnSelected) {
						aResult.push({
							columnKey: sColumnKey,
							panelTypes: [
								sap.m.P13nPanelType.group, sap.m.P13nPanelType.columns
							],
							messageType: MessageType.Warning,
							messageText: oRB.getText("PERSODIALOG_MSG_GROUPING_NOT_POSSIBLE_DESCRIPTION")
						});
					}
				}, this);
			}
			return aResult;
		},

		getUnionOfAttribute: function(oSetting, sAttributeName) {
			var aUnion = [];
			var fAddColumnKey = function(sColumnKey) {
				if (aUnion.indexOf(sColumnKey) < 0) {
					aUnion.push(sColumnKey);
				}
			};
			for ( var sNamespace in oSetting) {
				var oNamespace = oSetting[sNamespace];
				if (!oNamespace[sAttributeName]) {
					continue;
				}
				oNamespace[sAttributeName].forEach(fAddColumnKey);
			}
			return aUnion;
		},

		getVisibleColumnKeys: function(oTable) {
			var aColumnKeys = [];
			oTable.getColumns().forEach(function(oColumn) {
				if (oColumn.getVisible()) {
					aColumnKeys.push(this.getColumnKey(oColumn));
				}
			}, this);
			return aColumnKeys;
		},

		copy: function(oObject) {
			if (oObject instanceof Array) {
				return jQuery.extend(true, [], oObject);
			}
			return jQuery.extend(true, {}, oObject);
		},

		sort: function(sKeyName, aArray) {
			var aResult = this.copy(aArray);
			aResult.sort(function(a, b) {
				var aText = a[sKeyName].toLocaleLowerCase();
				var bText = b[sKeyName].toLocaleLowerCase();

				if (aText < bText) {
					return -1;
				}
				if (aText > bText) {
					return 1;
				}
				// a must be equal to b
				return 0;
			});
			return aResult;
		},

		removeEmptyProperty: function(oObject) {
			for ( var type in oObject) {
				if (oObject[type] === null || oObject[type] === undefined) {
					delete oObject[type];
				}
			}
			return oObject;
		},

		semanticEqual: function(oItemA, oItemB) {
			if (!oItemA || !oItemB) {
				return false;
			}
			for ( var property in oItemA) {
				if (oItemB[property] === undefined || oItemA[property] !== oItemB[property]) {
					return false;
				}
			}
			return true;
		},

		/**
		 * @param {sap.ui.comp.personalization.ResetType}
		 * @returns {boolean} true if at least one property of oChangeType has 'ModelChanged' or 'TableChanged'.
		 */
		hasChangedType: function(oChangeType) {
			for ( var type in oChangeType) {
				if (oChangeType[type] === sap.ui.comp.personalization.ChangeType.ModelChanged || oChangeType[type] === sap.ui.comp.personalization.ChangeType.TableChanged) {
					return true;
				}
			}
			return false;
		},

		/**
		 * @param {sap.ui.comp.personalization.ResetType}
		 * @returns {boolean} true if at least one property of oChangeType has 'ModelChanged' or 'TableChanged'.
		 */
		isNamespaceChanged: function(oChangeType, sNamespace) {
			if (oChangeType[sNamespace]) {
				return oChangeType[sNamespace] === sap.ui.comp.personalization.ChangeType.ModelChanged || oChangeType[sNamespace] === sap.ui.comp.personalization.ChangeType.TableChanged;
			}
			return false;
		},

		/**
		 * @param {object}
		 * @returns {boolean} true if at least one property of oChangeType has 'ModelChanged' or 'TableChanged'.
		 */
		isTrueForAll: function(oObjectOfBoolean) {
			for ( var type in oObjectOfBoolean) {
				if (oObjectOfBoolean[type] === false) {
					return false;
				}
			}
			return true;
		},

		/**
		 * Returns an array of elements coming from sElements that are separated by commas.
		 * 
		 * @param {string} sElements
		 * @returns {array}
		 */
		createArrayFromString: function(sElements) {
			if (!sElements) {
				return [];
			}
			var aElements = [];
			var aRowElements = sElements.split(",");
			aRowElements.forEach(function(sField) {
				if (sField !== "") {
					aElements.push(sField.trim());
				}
			});
			return aElements;
		},

		/**
		 * @param {string} sKey
		 * @param {sap.ui.table.Column[] | sap.m.Column[]} aColumns
		 * @returns {sap.ui.table.Column | sap.m.Column | null}
		 */
		getColumn: function(sColumnKey, aColumns) {
			var oResultColumn = null;
			aColumns.some(function(oColumn) {
				if (this.getColumnKey(oColumn) === sColumnKey) {
					oResultColumn = oColumn;
					return true;
				}
			}, this);
			return oResultColumn;
		},

		/**
		 * @param {sap.m.P13nSortItem[]} aSortItems
		 * @param {string} sKey
		 * @returns {integer} Index of sKey or -1 if not found
		 */
		getIndexByKey: function(aModelItems, sColumnKey) {
			var iIndex = -1;
			aModelItems.some(function(oModelItem, i) {
				if (oModelItem.columnKey === sColumnKey) {
					iIndex = i;
					return true;
				}
			});
			return iIndex;
		},

		/**
		 * @param {sap.m.Column | sap.ui.table.Column} oColumn
		 * @returns {string | null}
		 */
		getColumnKey: function(oColumn) {
			return this._getCustomProperty(oColumn, "columnKey") || oColumn.getId();
		},

		/**
		 * @param {sap.m.Column | sap.ui.table.Column} oColumn
		 * @returns {string | null}
		 */
		getColumnType: function(oColumn) {
			return this._getCustomProperty(oColumn, "type");
		},

		/**
		 * @param {sap.m.Column | sap.ui.table.Column} oColumn
		 * @returns {boolean}
		 */
		isGroupable: function(oColumn) {
			if (oColumn instanceof sap.ui.table.AnalyticalColumn) {
				// cf. implementation of sap.ui.table.AnalyticalColumnMenu.prototype._addGroupMenuItem
				var oTable = oColumn.getParent();
				var oBinding = oTable && oTable.getBinding("rows");
				var oResultSet = oBinding && oBinding.getAnalyticalQueryResult();

				if (oTable && oResultSet && oResultSet.findDimensionByPropertyName(oColumn.getLeadingProperty()) && jQuery.inArray(oColumn.getLeadingProperty(), oBinding.getSortablePropertyNames()) > -1 && jQuery.inArray(oColumn.getLeadingProperty(), oBinding.getFilterablePropertyNames()) > -1) {
					return true;
				}
			}

			if (oColumn instanceof sap.m.Column) {
				return this.isSortable(oColumn);
			}

			// Not yet supported
			// if (oColumn instanceof sap.ui.table.Column) {
			// return oColumn.getParent().getEnableGrouping() && this.isSortable(oColumn);
			// }

			return false;
		},

		/**
		 * @param {sap.m.Column | sap.ui.table.Column} oColumn
		 * @returns {boolean}
		 */
		isSortable: function(oColumn) {
			// If oColumn implements "sortProperty" property then we take it
			if (oColumn.getSortProperty) {
				return !!oColumn.getSortProperty();
			}
			// Only if oColumn does not implement "sortProperty" property then we take "p13nData"
			if (this._getCustomProperty(oColumn, "sortProperty")) {
				return true;
			}
			return false;
		},

		/**
		 * @param {sap.m.Column | sap.ui.table.Column} oColumn
		 * @returns {boolean}
		 */
		isFilterable: function(oColumn) {
			// If oColumn implements "filterProperty" property then we take it.
			if (oColumn.getFilterProperty) {
				return !!oColumn.getFilterProperty();
			}
			// Only if oColumn does not implement "filterProperty" property then we take "p13nData".
			if (this._getCustomProperty(oColumn, "filterProperty")) {
				return true;
			}
			return false;
		},

		/**
		 * @param {sap.m.Column[] || sap.ui.table.Column[]} aColumns
		 * @returns {boolean} True if all columns support 'columnKey' or all columns do not support 'columnKey'. False in case of mixed situation.
		 */
		isConsistent: function(aColumns) {
			if (!aColumns || !aColumns.length) {
				return true;
			}
			var bConsistent = true;
			var bHasColumnKeyFirst = !!this._getCustomProperty(aColumns[0], "columnKey");
			aColumns.some(function(oColumn) {
				var bHasColumnKeyCurrent = !!this._getCustomProperty(oColumn, "columnKey");
				if (bHasColumnKeyCurrent !== bHasColumnKeyFirst) {
					bConsistent = false;
					return true; // leave some()
				}
			}, this);
			return bConsistent;
		},

		/**
		 * @param {string} sKeyName: property name for key
		 * @param {string} sKeyValue: kay value which is looking for
		 * @param {Array} aArray: array where the element with key value 'sKeyValue' is looking for
		 * @returns {object | null} either found array element or null if 'sKeyValue' does not exist in aArray
		 */
		getArrayElementByKey: function(sKeyName, sKeyValue, aArray) {
			if (!aArray || !aArray.length) {
				return null;
			}
			var oElement = null;
			aArray.some(function(oElement_) {
				if (oElement_[sKeyName] !== undefined && oElement_[sKeyName] === sKeyValue) {
					oElement = oElement_;
					return true;
				}
			});
			return oElement;
		},

		/**
		 * Checks whether <code>columnKey</code> of <code>oColumn</code> exists in <code>aIgnoredColumnKeys</code>.
		 * 
		 * @param {sap.ui.table.Column|sap.m.Column} oColumn The column to be checked whether it is ignored
		 * @param {array} aIgnoredColumnKeys The array with ignored column keys
		 * @returns {boolean} <code>true</code> if oColumn exists in aIgnoredColumnKeys; <code>false</code> else
		 * @public
		 */
		isColumnIgnored: function(oColumn, aIgnoredColumnKeys) {
			if (!aIgnoredColumnKeys) {
				return false;
			}
			return aIgnoredColumnKeys.indexOf(this.getColumnKey(oColumn)) > -1;
		},

		/**
		 * this method will make a json snapshot of the given table instance and stores the column sorting information in the given array
		 * 
		 * @param {sap.ui.table.Table} oTable - the table where the sort data has to be extracted
		 * @param {array} aDestination - the array where the sort json data should be stored
		 * @public
		 */
		createSort2Json: function(oTable, aDestination, aIgnoreColumnKeys) {
			if (oTable) {
				if (oTable instanceof sap.ui.table.Table) {
					oTable.getColumns().forEach(function(oColumn) {
						var sColumnKey = this.getColumnKey(oColumn);
						if (this.isColumnIgnored(oColumn, aIgnoreColumnKeys)) {
							return;
						}
						if (oColumn.getSorted()) {
							aDestination.push({
								columnKey: sColumnKey,
								operation: oColumn.getSortOrder()
							});
						}
					}, this);
				}
			}
		},

		/**
		 * @param {sap.m.Column | sap.ui.table.Column} oColumn
		 * @param {string} sProperty
		 * @param {boolean} bParse
		 * @returns {object | null} either value of custom data property or null
		 */
		_getCustomProperty: function(oColumn, sProperty) {
			var oCustomData = this._getCustomData(oColumn);
			if (!oCustomData || !sProperty) {
				return null;
			}
			return oCustomData[sProperty];
		},

		/**
		 * @param {sap.m.Column | sap.ui.table.Column} oColumn
		 * @returns {object | null} either custom data object or null
		 */
		_getCustomData: function(oColumn) {
			if (!oColumn) {
				return null;
			}
			var oCustomData = oColumn.data("p13nData");
			if (typeof oCustomData === "string") {
				try {
					oCustomData = JSON.parse(oCustomData);
					oColumn.data("p13nData", oCustomData);
				} catch (oException) {
					// do not update the custom data, go ahead
				}
			}
			return oCustomData;
		}

	};
	return Util;
}, /* bExport= */true);

}; // end of sap/ui/comp/personalization/Util.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.Configuration') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartfield.Configuration.
jQuery.sap.declare('sap.ui.comp.smartfield.Configuration'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/Configuration",["jquery.sap.global", "sap/ui/comp/library", "sap/ui/core/Element"], function(jQuery, library, Element) {
	"use strict";
	
	/**
	 * Constructor for a new smartfield/Configuration.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * The configuration allows to further define the behavior of a SmartField.
	 * @extends sap.ui.core.Element
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartfield.Configuration
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var Configuration = Element.extend("sap.ui.comp.smartfield.Configuration", /** @lends sap.ui.comp.smartfield.Configuration.prototype */ { metadata : {
	
		library : "sap.ui.comp",
		properties : {
	
			/**
			 * By default the SmartField chooses the controls it hosts by interpreting OData meta data. This property allows to overwrite the default behavior to some
			 * extent; for example this property allows to define that an OData property of type Edm.Boolean is displayed as combo box.
			 */
			controlType : {type : "sap.ui.comp.smartfield.ControlType", group : "Misc", defaultValue : null},
	
			/**
			 * The property specifies how value helps available for input fields are presented; for example whether for the result of a value help request
			 * descriptions of the values that can possibly be chosen from the value help are displayed.
			 */
			displayBehaviour : {type : "sap.ui.comp.smartfield.DisplayBehaviour", group : "Misc", defaultValue : null}			
		}
	}});
	

	return Configuration;

}, /* bExport= */ true);

}; // end of sap/ui/comp/smartfield/Configuration.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.ControlProposal') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartfield.Configuration.
jQuery.sap.declare('sap.ui.comp.smartfield.ControlProposal'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/ControlProposal",["jquery.sap.global", "sap/ui/comp/library", "sap/ui/core/Element"], function(jQuery, library, Element) {
	"use strict";
	
	/**
	 * Constructor for a new smartfield/ControlProposal.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * Proposes a control to be rendered. The smart field may ignore the proposal.
	 * @extends sap.ui.core.Element
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartfield.ControlProposal
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var ControlProposal = Element.extend("sap.ui.comp.smartfield.ControlProposal", /** @lends sap.ui.comp.smartfield.ControlProposal.prototype */ { metadata : {
	
		library : "sap.ui.comp",
		properties : {
	
			/**
			 * By default the SmartField chooses the controls it hosts by interpreting OData meta data. This property allows to overwrite the default behavior to some
			 * extent; for example this property allows to define that an OData property of type Edm.Boolean is displayed as combo box.
			 */
			controlType : {type : "sap.ui.comp.smartfield.ControlProposalType", group : "Misc", defaultValue : sap.ui.comp.smartfield.ControlProposalType.None}
			
		},
		aggregations: {
			
			/**
			 * Optional definition to further qualify how an object status control should be rendered.
			 * 
			 * @since 1.34.0
			 */
			objectStatus : {type: "sap.ui.comp.smartfield.ObjectStatus", multiple : false}
		}
	}});
	

	return ControlProposal;

}, /* bExport= */ true);

}; // end of sap/ui/comp/smartfield/ControlProposal.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.ObjectStatus') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartfield.Configuration.
jQuery.sap.declare('sap.ui.comp.smartfield.ObjectStatus'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/ObjectStatus",[
	"jquery.sap.global", "sap/ui/comp/library", "sap/ui/core/Element"
], function(jQuery, library, Element) {
	"use strict";

	/**
	 * Constructor for a new smartfield/ObjectStatus.
	 * 
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class Defines a possible object status control to be rendered. The smart field may ignore the proposal.
	 * @extends sap.ui.core.Element
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartfield.ObjectStatus
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var ObjectStatus = Element.extend("sap.ui.comp.smartfield.ObjectStatus", /** @lends sap.ui.comp.smartfield.ControlProposal.prototype */
	{
		metadata: {

			library: "sap.ui.comp",
			properties: {

				/**
				 * Optional attribute, which can be set, if the control type has the value ObjectStatus.
				 */
				criticality: {
					type: "any",
					group: "Misc",
					defaultValue: null
				}
			}
		}
	});

	return ObjectStatus;

}, /* bExport= */true);

}; // end of sap/ui/comp/smartfield/ObjectStatus.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfilterbar.ControlConfiguration') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartfilterbar.ControlConfiguration.
jQuery.sap.declare('sap.ui.comp.smartfilterbar.ControlConfiguration'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfilterbar/ControlConfiguration",[
	'jquery.sap.global', 'sap/ui/comp/library', 'sap/ui/core/Element'
], function(jQuery, library, Element) {
	"use strict";

	/**
	 * Constructor for a new smartfilterbar/ControlConfiguration.
	 * 
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class ControlConfiguration can be used to add additional configuration for filter fields in the SmartFilterBar control, in order to overwrite
	 *        the default settings from the OData metadata. For instance, it is possible to change the label, index or control type of a filter field.
	 * @extends sap.ui.core.Element
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartfilterbar.ControlConfiguration
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var ControlConfiguration = Element.extend("sap.ui.comp.smartfilterbar.ControlConfiguration", /** @lends sap.ui.comp.smartfilterbar.ControlConfiguration.prototype */
	{
		metadata: {

			library: "sap.ui.comp",
			properties: {

				/**
				 * The key property corresponds to the field name from the OData service $metadata document.
				 */
				key: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * The groupId can be used to move a field from one group to another. The groupId corresponds to the EntityName from the OData
				 * metadata. It is also possible to move a field from the advanced area to the basic area by specifying the groupId _BASIC.
				 */
				groupId: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Using this property it is possible to overwrite the label of a filter field in the SmartFilterBar.
				 */
				label: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Using this flag it is possible to hide fields from the OData metadata.
				 */
				visible: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Specifies whether a value help dialog is available or not.
				 */
				hasValueHelpDialog: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * The SmartFilterBar calculates which kind of control will be used for a filter fields based on multiple OData Attributes and
				 * annotations. Using this property it is possible to overwrite the OData metadata. Possible values can be found here:
				 * sap.ui.comp.smartfilterbar.ControlConfiguration.CONTROLTYPE
				 */
				controlType: {
					type: "string",
					group: "Misc",
					defaultValue: 'auto'
				},

				/**
				 * The filter type specifies whether the filter fields is e.g. type single value, multi-value,or interval. The filter type is being
				 * calculated by the martFilterBar based on the OData metadata. Using this property the filter type can be configured manually.
				 * Possible value scan be found here: sap.ui.comp.smartfilterbar.ControlConfiguration.FILTERTYPE
				 */
				filterType: {
					type: "string",
					group: "Misc",
					defaultValue: 'auto'
				},

				/**
				 * The zero based index can be used to specify the order of fields.
				 */
				index: {
					type: "any",
					group: "Misc",
					defaultValue: undefined
				},

				/**
				 * Property can be used to enable the TypeAhead service. TypeAhead does not work with all controls, e.g it does not work for
				 * DrodDownListbox
				 */
				hasTypeAhead: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Property can be used to overwrite the mandatory state of a filter field. Possible values:
				 * sap.ui.comp.smartfilterbar.ControlConfiguration.MANDATORY Property can only be set during initialisation. Changes at runtime will
				 * be ignored.
				 */
				mandatory: {
					type: "string",
					group: "Misc",
					defaultValue: 'auto'
				},

				/**
				 * The width of the filter field in a CSS compatible format. The width can be set only once during initialisation. Changes at runtime
				 * will not be reflected. The width will not be applied to custom controls.
				 */
				width: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * If set to true this field will be added to the advanced area (aka. Dynamic Selection) by default.
				 */
				visibleInAdvancedArea: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * In case there are value help annotations for this filter field, it is possible to specify whether the table in the value help
				 * dialog for this field will be filled initially. The default value is flase, which menas the table will be filled as the data fetch
				 * is not being prevented.
				 */
				preventInitialDataFetchInValueHelpDialog: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * The displayBehaviour specifies how the content should be displayed on certain controls. Ex: DescriptionOnly for Combobox (DropDown
				 * text) , Description and ID for MultiInput (token text) Possible values can be found here:
				 * sap.ui.comp.smartfilterbar.ControlConfiguration.DISPLAYBEHAVIOUR
				 */
				displayBehaviour: {
					type: "string",
					group: "Misc",
					defaultValue: 'auto'
				},
				
				/**
				 * The condition Type class name to use for this filter item
				 * Implemantation should derive from sap.ui.comp.config.condition.Type
				 */
				conditionType : {
					type : "any", 
					group : "Misc", 
					defaultValue : null
				}
			},
			aggregations: {

				/**
				 * Default value for a filter field.
				 */
				defaultFilterValues: {
					type: "sap.ui.comp.smartfilterbar.SelectOption",
					multiple: true,
					singularName: "defaultFilterValue"
				},

				/**
				 * If a custom control is specified, the Smart Filter Bar will not create a control but use the custom control. Additional services
				 * like TypeAhead have to implemented manually.
				 */
				customControl: {
					type: "sap.ui.core.Control",
					multiple: false
				}
			},
			events: {

				/**
				 * Fired when the value of a property, for example isVisible, has changed.
				 */
				change: {
					parameters: {

						/**
						 * Name of the changed property
						 */
						propertyName: {
							type: "string"
						}
					}
				}
			}
		}
	});

	ControlConfiguration.prototype.setFilterType = function(sFilterType) {
		if (!ControlConfiguration.FILTERTYPE[sFilterType]) {
			throw "FilterType " + sFilterType + " is invalid";
		}
		this.setProperty("filterType", sFilterType);
	};

	ControlConfiguration.prototype.setControlType = function(sControlType) {
		if (!ControlConfiguration.CONTROLTYPE[sControlType]) {
			throw "ControlType " + sControlType + " is invalid";
		}
		this.setProperty("controlType", sControlType);
	};

	ControlConfiguration.prototype.setMandatory = function(sMandatory) {
		if (!ControlConfiguration.MANDATORY[sMandatory]) {
			throw "Mandatory state " + sMandatory + " is invalid";
		}
		this.setProperty("mandatory", sMandatory);
	};

	ControlConfiguration.prototype.setVisible = function(bIsVisible) {
		this.setProperty("visible", bIsVisible);
		this.fireChange({
			propertyName: "visible"
		});
	};

	ControlConfiguration.prototype.setLabel = function(sLabel) {
		this.setProperty("label", sLabel);
		this.fireChange({
			propertyName: "label"
		});
	};

	ControlConfiguration.prototype.setVisibleInAdvancedArea = function(bVisible) {
		this.setProperty("visibleInAdvancedArea", bVisible);
		this.fireChange({
			propertyName: "visibleInAdvancedArea"
		});
	};

	ControlConfiguration.prototype.setDisplayBehaviour = function(sDisplayBehaviour) {
		if (!ControlConfiguration.DISPLAYBEHAVIOUR[sDisplayBehaviour]) {
			throw "DisplayBehaviour " + sDisplayBehaviour + " is invalid";
		}
		this.setProperty("displayBehaviour", sDisplayBehaviour);
	};

	ControlConfiguration.FILTERTYPE = {
		auto: "auto",
		single: "single",
		multiple: "multiple",
		interval: "interval"
	};

	ControlConfiguration.CONTROLTYPE = {
		auto: "auto",
		input: "input",
		dropDownList: "dropDownList",
		date: "date"
	};

	ControlConfiguration.MANDATORY = {
		auto: "auto",
		mandatory: "mandatory",
		notMandatory: "notMandatory"
	};

	ControlConfiguration.DISPLAYBEHAVIOUR = {
		auto: "auto",
		descriptionOnly: "descriptionOnly",
		descriptionAndId: "descriptionAndId",
		idOnly: "idOnly",
		idAndDescription: "idAndDescription"
	};

	return ControlConfiguration;

}, /* bExport= */true);

}; // end of sap/ui/comp/smartfilterbar/ControlConfiguration.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfilterbar.GroupConfiguration') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartfilterbar.GroupConfiguration.
jQuery.sap.declare('sap.ui.comp.smartfilterbar.GroupConfiguration'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfilterbar/GroupConfiguration",['jquery.sap.global', 'sap/ui/comp/library', 'sap/ui/core/Element'],
	function(jQuery, library, Element) {
	"use strict";


	
	/**
	 * Constructor for a new smartfilterbar/GroupConfiguration.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * A GroupConfiguration can be used to add additional configurations for groups in the SmartFilterBar. A group in the SmartFilterBar is a group of filter fields in the advanced search.
	 * @extends sap.ui.core.Element
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartfilterbar.GroupConfiguration
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var GroupConfiguration = Element.extend("sap.ui.comp.smartfilterbar.GroupConfiguration", /** @lends sap.ui.comp.smartfilterbar.GroupConfiguration.prototype */ { metadata : {
	
		library : "sap.ui.comp",
		properties : {
	
			/**
			 * The key property shall correspond to the name EntityTypeName from the OData service $metadata document.
			 */
			key : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * Zero based integer index.
			 * The index can be used to specify the order of groups. If no index is specified, the order like in the OData metadata will be used.
			 */
			index : {type : "any", group : "Misc", defaultValue : undefined},
	
			/**
			 * Using this property it is possible to overwrite the label of a group in the advanced area of the SmartFilterBar.
			 */
			label : {type : "any", group : "Misc", defaultValue : undefined}
		},
		events : {
	
			/**
			 * Fired when the value of a property, for example label, has changed
			 */
			change : {
				parameters : {
	
					/**
					 * Name of the changed property
					 */
					propertyName : {type : "string"}
				}
			}
		}
	}});
	
	GroupConfiguration.prototype.setLabel = function(sLabel) {
		this.setProperty("label", sLabel);
		this.fireChange({
			propertyName: "label"
		});
	};

	return GroupConfiguration;

}, /* bExport= */ true);

}; // end of sap/ui/comp/smartfilterbar/GroupConfiguration.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfilterbar.SelectOption') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartfilterbar.SelectOption.
jQuery.sap.declare('sap.ui.comp.smartfilterbar.SelectOption'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfilterbar/SelectOption",['jquery.sap.global', 'sap/ui/comp/library', 'sap/ui/core/Element'],
	function(jQuery, library, Element) {
	"use strict";


	
	/**
	 * Constructor for a new smartfilterbar/SelectOption.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * A Select Option can be used to specify default filter values for a control configuration of the SmartFilterBar.
	 * @extends sap.ui.core.Element
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartfilterbar.SelectOption
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var SelectOption = Element.extend("sap.ui.comp.smartfilterbar.SelectOption", /** @lends sap.ui.comp.smartfilterbar.SelectOption.prototype */ { metadata : {
	
		library : "sap.ui.comp",
		properties : {
	
			/**
			 * The sign for a Select Option. Possible values are I for include or E for exclude. Constants can be found here: sap.ui.comp.smartfilterbar.SelectOption.SIGN
			 */
			sign : {type : "string", group : "Misc", defaultValue : 'I'},
	
			/**
			 * The operator for a select option. The default value is EQ "for equals". Possible values can be found here: sap.ui.comp.smartfilterbar.SelectOption.OPERATOR.
			 */
			operator : {type : "string", group : "Misc", defaultValue : 'EQ'},
	
			/**
			 * The low value for a select option.
			 */
			low : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * The high value for a select option. The high value is only required for a few operators, e.g. BT (between).
			 */
			high : {type : "string", group : "Misc", defaultValue : null}
		}
	}});
	
	SelectOption.SIGN = {
		I: "I",
		include: "I",
		E: "E",
		exclude: "E"
	};
	
	SelectOption.OPERATOR = {
		EQ: "EQ",
		NE: "NE",
		CP: "CP",
		GT: "GT",
		GE: "GE",
		LT: "LT",
		LE: "LE",
		NP: "NP",
		BT: "BT",
		NB: "NB"
	};

	return SelectOption;

}, /* bExport= */ true);

}; // end of sap/ui/comp/smartfilterbar/SelectOption.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.Layout') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartform.Layout.
jQuery.sap.declare('sap.ui.comp.smartform.Layout'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/Layout",[
	'jquery.sap.global', 'sap/ui/comp/library', 'sap/ui/core/Element'
], function(jQuery, library, Element) {
	"use strict";

	/**
	 * Constructor for a new smartform/Layout.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class Layout settings to adjust ResponsiveGridLayout.
	 * @extends sap.ui.core.Element
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartform.Layout
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var Layout = Element.extend("sap.ui.comp.smartform.Layout", /** @lends sap.ui.comp.smartform.Layout.prototype */
	{
		metadata: {

			library: "sap.ui.comp",
			properties: {

				/**
				 * Default span for labels in large size. This span is only used if more than 1 container is in one line, if only 1 container is in
				 * the line the labelSpanM value is used.
				 */
				labelSpanL: {
					type: "int",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Default span for labels in medium size. This property is used for full size containers. If more than one Container is in one line,
				 * labelSpanL is used.
				 */
				labelSpanM: {
					type: "int",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Default span for labels in small size.
				 */
				labelSpanS: {
					type: "int",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Number of grid cells that are empty at the end of each line on large size.
				 */
				emptySpanL: {
					type: "int",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Number of grid cells that are empty at the end of each line on medium size.
				 */
				emptySpanM: {
					type: "int",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Number of grid cells that are empty at the end of each line on small size.
				 */
				emptySpanS: {
					type: "int",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Number of columns for large size.<br>
				 * The number of columns for large size must not be smaller than the number of columns for medium size.
				 */
				columnsL: {
					type: "int",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Number of columns for medium size.
				 */
				columnsM: {
					type: "int",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * If the SmartForm contains only one single Group and this property is set, the Group is displayed using the full size of the
				 * SmartForm. In this case the properties columnsL and columnsM are ignored.<br>
				 * In all other cases the Group is displayed in the size of one column.
				 *
				 * @since 1.34.1
				 */
				singleGroupFullSize: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Breakpoint (in pixel) between Medium size and Large size.
				 */
				breakpointL: {
					type: "int",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * reakpoint (in pixel) between Small size and Medium size.
				 */
				breakpointM: {
					type: "int",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * A string type that represents Grid's span values for large, medium and small screens. Allowed values are separated by space Letters
				 * L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: "L2 M4 S6", "M12", "s10" or "l4
				 * m4". Note that the parameters has to be provided in the order large medium small.<br>
				 * The value set here will be set to all group elements when used with horizontal layout (smart form property useHorizontalLayout)
				 */
				gridDataSpan: {
					type: "sap.ui.layout.GridSpan",
					group: "Misc",
					defaultValue: ""
				}
			}
		}
	});

	return Layout;

}, /* bExport= */true);

}; // end of sap/ui/comp/smartform/Layout.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.SmartForm') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

/* global Promise */

// Provides control sap.ui.comp.smartform.SmartForm.
jQuery.sap.declare('sap.ui.comp.smartform.SmartForm'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.form.Form'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.form.ResponsiveLayout'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.registry.Settings'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.m.Title'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.ButtonType'); // unlisted dependency retained
jQuery.sap.require('sap.m.Panel'); // unlisted dependency retained
jQuery.sap.require('sap.m.OverflowToolbar'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarSpacer'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarSeparator'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/SmartForm",[
	'jquery.sap.global', 'sap/ui/comp/library', 'sap/m/MessageBox', 'sap/ui/core/Control', 'sap/ui/layout/form/Form', 'sap/ui/layout/form/ResponsiveLayout', 'sap/ui/fl/Utils', 'sap/ui/fl/registry/Settings', 'sap/m/Label', 'sap/m/Title', 'sap/m/Button', 'sap/m/ButtonType', 'sap/m/Panel', 'sap/m/OverflowToolbar', 'sap/m/ToolbarSpacer', 'sap/m/ToolbarSeparator'
], function(jQuery, library, MessageBox, Control, Form, ResponsiveLayout, Utils, Settings, Label, Title, Button, ButtonType, Panel, OverflowToolbar, ToolbarSpacer, ToolbarSeparator) {
	"use strict";

	/**
	 * Constructor for a new smartform/SmartForm.
	 * 
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class The SmartForm control renders a form (sap.ui.layout.form.Form) and supports key user personalization, such as adding/hiding fields and
	 *        groups, changing the order of fields and groups, and changing labels. When used with the SmartField control the label is taken from the
	 *        metadata annotation <code>sap:label</code> if not specified in the XML view.
	 * @extends sap.ui.core.Control
	 * @author Alexander Fürbach
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartform.SmartForm
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var SmartForm = Control.extend("sap.ui.comp.smartform.SmartForm", /**
																		 * @lends sap.ui.comp.smartform.SmartForm.prototype
																		 */
	{
		metadata: {

			library: "sap.ui.comp",
			properties: {

				/**
				 * Title of the form.
				 */
				title: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Specifies whether the groups are rendered in a {@link sap.ui.layout.form.ResponsiveLayout ResponsiveLayout} with the label above
				 * the field. Each group is rendered in a new line.
				 */
				useHorizontalLayout: {
					type: "boolean",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Specifies the minimal size in pixels of all group elements of the form if the horizontal layout is used.
				 */
				horizontalLayoutGroupElementMinWidth: {
					type: "int",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Specifies whether a check button is added to the toolbar.
				 */
				checkButton: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * CSV of entity types for which the flexibility features are available.<br>
				 * For more information about SAPUI5 flexibility, refer to the Developer Guide.<br>
				 * <i>Note:</i><br>
				 * No validation is done. Please ensure that you do not add spaces or special characters.
				 */
				entityType: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Specifies whether the control is expandable. Per default the control is not rendered as expanded.
				 */
				expandable: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * If expandable, this property indicates whether the state is expanded or not. If expanded, then the toolbar (if available) and the
				 * content is rendered; if expanded is false, then only the headerText/headerToolbar is rendered.
				 */
				expanded: {
					type: "boolean",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Specifies whether the editable property is togglable via button.
				 */
				editTogglable: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * Specifies whether the form is editable.
				 */
				editable: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * CSV of fields that must be ignored in the OData metadata by the SmartForm control.<br>
				 * <i>Note:</i><br>
				 * No validation is done. Please ensure that you do not add spaces or special characters.
				 */
				ignoredFields: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Specifies whether the form enables flexibility features, such as adding new fields.<br>
				 * For more information about SAPUI5 flexibility, refer to the Developer Guide.
				 */
				flexEnabled: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				}
			},
			defaultAggregation: "groups",
			aggregations: {

				/**
				 * Groups are used to group form elements.
				 */
				groups: {
					type: "sap.ui.comp.smartform.Group",
					multiple: true,
					singularName: "group"
				},

				/**
				 * Content to be rendered.
				 */
				content: {
					type: "sap.ui.core.Control",
					multiple: false,
					visibility: "hidden"
				},

				/**
				 * Layout settings to adjust ResponsiveGridLayout
				 */
				layout: {
					type: "sap.ui.comp.smartform.Layout",
					multiple: false
				},

				/**
				 * The Semantic Object Controller allows the user to specify and overwrite functionality for semantic object navigation.
				 */
				semanticObjectController: {
					type: "sap.ui.comp.navpopover.SemanticObjectController",
					multiple: false
				},

				/**
				 * An additional toolbar that can be added by the users, which can contain further custom buttons, controls, etc.
				 */
				customToolbar: {
					type: "sap.m.Toolbar",
					multiple: false
				},

				/**
				 * Toolbar
				 */
				toolbar: {
					type: "sap.m.Toolbar",
					multiple: false,
					visibility: "hidden"
				}
			},
			events: {

				/**
				 * This event is fired when the editable property is toggled.
				 */
				editToggled: {},

				/**
				 * This event is fired after check was performed.
				 */
				checked: {}
			}
		},
		renderer: function(oRm, oControl) {
			var oToolbar = oControl._getCustomToolbar() || oControl._oToolbar;

			oRm.write("<div");
			oRm.writeControlData(oControl);
			oRm.addClass("sapUiCompSmartForm");
			oRm.writeClasses();
			oRm.write(">");

			if (oControl.mProperties["expandable"]) {
				oRm.renderControl(oControl._oPanel);
			} else {
				if (oToolbar) {
					oRm.renderControl(oToolbar);
				}
				oRm.renderControl(oControl._oForm);
			}

			oRm.write("</div>");
		}
	});

	/**
	 * Initialize the control.
	 * 
	 * @private
	 */
	SmartForm.prototype.init = function() {
		this._bisLayoutCreated = false;
		this._oForm = null;
		this._oPanel = null;
		this._oTitle = new Title(this.getId() + "-title-sfmain").addStyleClass("title");
		this._bUpdateToolbar = true;
		this._sResizeListenerId = "";
		this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp");

	};

	SmartForm.prototype._resizeHandlerRegId = "";

	SmartForm.prototype.onBeforeRendering = function() {

		this._updateToolbar();
		this._createLayout();
		this._updatePanel();

		if (this.getUseHorizontalLayout() && this.getLayout() && this.getLayout().getGridDataSpan()) {
			this._propagateGridDataSpan();
			this._registerResizeHandler();
		}
	};

	/**
	 * Adds a group to the aggregation named groups.
	 * 
	 * @public
	 * @param {object} Group to be added
	 */
	SmartForm.prototype.addGroup = function(oGroup) {
		this.addAggregation("groups", oGroup, true);
	};

	/**
	 * Adds some entity oObject to the aggregation identified by sAggregationName.
	 * 
	 * @public
	 * @param {string} Name of the aggregation
	 * @param {object} The object representing a group
	 */
	SmartForm.prototype.addAggregation = function(sAggregationName, oObject) {
		if (sAggregationName === "groups") {
			this._insertGroup(oObject);
		} else {
			Control.prototype.addAggregation.apply(this, arguments);
		}
	};

	/**
	 * Returns the content of aggregation groups.
	 * 
	 * @public
	 * @returns {array} of groups
	 */
	SmartForm.prototype.getGroups = function() {
		var aGroups = this.getAggregation('groups');

		return ((aGroups === null) ? [] : aGroups);
	};

	/**
	 * Returns the aggregated object(s) for the named aggregation.
	 * 
	 * @public
	 * @param {string} Name of the aggregation
	 * @returns {array} Content of an aggregation
	 */
	SmartForm.prototype.getAggregation = function(sAggregationName) {
		var aResult = null;
		if (sAggregationName === "groups") {
			aResult = this._oForm ? this._oForm.getFormContainers() : [];
		} else {
			aResult = Control.prototype.getAggregation.apply(this, arguments);
		}

		return aResult;
	};

	/**
	 * Creates a ResponsiveGridLayout and applies settings from aggregation <code>layout together with default settings
	 *
	 * @return {sap.ui.layout.form.ResponsiveGridLayout} the layout to be used for the form.
	 * @private
	 */
	SmartForm.prototype._getLayout = function() {

		var oLayout = this.getLayout();
		var oFormLayout = null;
		var aGroups = this.getGroups();

		if (oLayout) {
			oFormLayout = new sap.ui.layout.form.ResponsiveGridLayout({
				"labelSpanL": oLayout.mProperties["labelSpanL"] ? oLayout.mProperties["labelSpanL"] : 4,
				"labelSpanM": oLayout.mProperties["labelSpanM"] ? oLayout.mProperties["labelSpanM"] : 4,
				"emptySpanL": oLayout.mProperties["emptySpanL"] ? oLayout.mProperties["emptySpanL"] : 0,
				"emptySpanM": oLayout.mProperties["emptySpanM"] ? oLayout.mProperties["emptySpanM"] : 0,
				"columnsL": oLayout.mProperties["columnsL"] ? oLayout.mProperties["columnsL"] : 3,
				"columnsM": oLayout.mProperties["columnsM"] ? oLayout.mProperties["columnsM"] : 2,
				"singleContainerFullSize": oLayout.mProperties["singleGroupFullSize"],
				"breakpointL": oLayout.mProperties["breakpointL"] ? oLayout.mProperties["breakpointL"] : 1024,
				"breakpointM": oLayout.mProperties["breakpointL"] ? oLayout.mProperties["breakpointL"] : 600
			});

		} else {
			oFormLayout = new sap.ui.layout.form.ResponsiveGridLayout({
				"labelSpanL": 4,
				"labelSpanM": 4,
				"emptySpanL": 0,
				"emptySpanM": 0,
				"columnsL": 3,
				"columnsM": 2,
				"breakpointL": 1024,
				"breakpointM": 600
			});
		}

		if (aGroups && aGroups.length < oFormLayout.getColumnsL() && oFormLayout.mProperties["singleContainerFullSize"]) {
			oFormLayout.setColumnsL(aGroups.length);
		}

		return oFormLayout;
	};

	/**
	 * Creates a toolbar and sets it into the content aggregation
	 * 
	 * @private
	 */
	SmartForm.prototype._createToolbar = function() {
		if (this._oToolbar) {
			var oContent = this._oToolbar.removeContent(this._oToolbar.getId() + "-button-sfmain-editToggle");
			if (oContent) {
				oContent.destroy();
				this._oEditToggleButton = null;
			}
			oContent = this._oToolbar.removeContent(this.getId() + "-" + this._oToolbar.getId() + "-button-sfmain-check");
			if (oContent) {
				oContent.destroy();
			}
			oContent = this._oToolbar.removeContent(this.getId() + "-" + this._oToolbar.getId() + "-AdaptationButton");
			if (oContent) {
				oContent.destroy();
			}
			this._oToolbar.removeContent(this.getId() + "-title-sfmain");
		}
		this._oToolbar = new OverflowToolbar({
			"height": "3rem",
			"design": sap.m.ToolbarDesign.Transparent
		});
		this.setAggregation("toolbar", this._oToolbar);
	};

	SmartForm.prototype._updateToolbar = function() {
		var oCustomToolbar = this._getCustomToolbar();

		if (this._bUpdateToolbar) {
			if (oCustomToolbar) {
				this._cleanToolbar();
				this._addHeaderToToolbar();
				this._addSeparatorToToolbar();
				this._addEditTogglableToToolbar();
				this._addCheckToToolbar();
				this._addChangeModeToToolbar();
				this._removeSeparatorFromToolbar();
			} else {
				this._createToolbar();
				this._addHeaderToToolbar();
				this._addEditTogglableToToolbar();
				this._addCheckToToolbar();
				this._addChangeModeToToolbar();
				if (this._oToolbar.getContent().length === 1 && !this.getExpandable()) {
					this._oToolbar.destroyContent();
					this._oToolbar.destroy();
					this._oToolbar = null;
					this.setAggregation("toolbar", null);
				}
			}
			this._bUpdateToolbar = false;
		}
	};

	SmartForm.prototype._getToolbar = function() {
		var oCustomToolbar = this._getCustomToolbar();
		return oCustomToolbar || this._oToolbar;
	};

	SmartForm.prototype._updatePanel = function() {
		var that = this;
		var oToolbar = this._getToolbar();

		if (this.mProperties["expandable"]) {
			if (!this._oPanel) {
				this._oPanel = new Panel({
					"expanded": this.mProperties["expanded"],
					"expandable": true,
					"headerText": this.getTitle(),
					"headerToolbar": oToolbar
				});
				this._oPanel.attachExpand(function(oEvent) {
					that.setProperty("expanded", oEvent.getParameters()["expand"], false);
				});

				this._oPanel.addContent(this._oForm);
				this.setAggregation("content", this._oPanel);
			} else {
				this._oPanel.setExpanded(this.mProperties["expanded"]);
				this._oPanel.setHeaderToolbar(oToolbar);
			}
		} else {
			this.setAggregation("content", this._oForm);
		}
	};

	/**
	 * Removes content from customToolbar
	 * 
	 * @private
	 */
	SmartForm.prototype._cleanToolbar = function() {
		var oCustomToolbar = this._getCustomToolbar();

		var oContent = oCustomToolbar.removeContent(oCustomToolbar.getId() + "-button-sfmain-editToggle");
		if (oContent) {
			oContent.destroy();
			this._oEditToggleButton = null;
		}
		oContent = oCustomToolbar.removeContent(this.getId() + "-" + oCustomToolbar.getId() + "-button-sfmain-check");
		if (oContent) {
			oContent.destroy();
		}
		oContent = oCustomToolbar.removeContent(this.getId() + "-" + oCustomToolbar.getId() + "-AdaptationButton");
		if (oContent) {
			oContent.destroy();
		}
		oCustomToolbar.removeContent(this.getId() + "-title-sfmain");
	};

	/**
	 * Adds a title and a toolbar separator to the toolbar.
	 * 
	 * @private
	 */
	SmartForm.prototype._addHeaderToToolbar = function() {
		var oCustomToolbar = this._getCustomToolbar();
		var oToolbar = oCustomToolbar || this._oToolbar;
		var aContent = [];
		var i = 0;
		var oToolbarSpacer = null;

		if (this.getTitle() || this.mBindingInfos['title']) {
			oToolbar.insertContent(this._oTitle, 0);
		}

		if (this._oToolbar) {
			oToolbar.insertContent(new ToolbarSpacer(), 1);
		} else {
			aContent = oToolbar.getContent();
			for (i; i < aContent.length; i++) {
				if (aContent[i].getMetadata().getName() === "sap.m.ToolbarSpacer") {
					oToolbarSpacer = aContent[i];
				}
			}
			if (!oToolbarSpacer) {
				oToolbar.addContent(new ToolbarSpacer());
			}
		}
	};

	/**
	 * Adds the button to change between edit and read only mode if property <code>editTogglable</code> equals true
	 * 
	 * @private
	 */
	SmartForm.prototype._addEditTogglableToToolbar = function() {
		var oCustomToolbar = this._getCustomToolbar();
		var oToolbar = oCustomToolbar || this._oToolbar;
		var that = this;
		var sIconSrc = this.getEditable() ? "sap-icon://display" : "sap-icon://edit";
		var sTooltip = this._oRb.getText(this.getEditable() ? "FORM_TOOLTIP_DISPLAY" : "FORM_TOOLTIP_EDIT");

		if (this.getEditTogglable()) {
			if (!this._oEditToggleButton) {
				this._oEditToggleButton = new Button(oToolbar.getId() + "-button-sfmain-editToggle", {
					type: ButtonType.Default,
					icon: sIconSrc,
					tooltip: sTooltip,
					press: function() {
						that._toggleEditMode();
					}
				});
			}

			oToolbar.addContent(this._oEditToggleButton);
		}
	};

	/**
	 * Sets the span of the GridData of group elements (LayoutData)
	 * 
	 * @private
	 */
	SmartForm.prototype._propagateGridDataSpan = function() {
		var aGroups, sSpan = "", oLayout = this.getLayout();

		if (oLayout) {
			sSpan = oLayout.getGridDataSpan();
		}

		aGroups = this.getGroups();

		// set gridDataSpan to all group elements
		aGroups.forEach(function(oGroup) {

			var aElements = oGroup.getGroupElements();

			aElements.forEach(function(oElement) {

				var oLayout = oElement.getFields()[0].getLayoutData();

				if (oLayout) {
					oLayout.setSpan(sSpan);
				} else {
					oLayout = new sap.ui.layout.GridData({
						span: sSpan
					});
					oElement.getFields()[0].setLayoutData(oLayout);
				}

				if (oElement.getFields()[0] instanceof sap.m.VBox) {
					var oSmartField = oElement.getFields()[0].getItems()[1];
					if (oSmartField && oSmartField.setControlContext) {
						oSmartField.setControlContext(sap.ui.comp.smartfield.ControlContextType.SmartFormGrid);
					}
				}

			});
		});
	};

	/**
	 * Sets default span for GridData layout of group elements when used with horizontal layout.
	 * 
	 * @return {sap.ui.comp.smartform.SmartForm} <code>this</code> to allow method chaining.
	 * @public
	 */
	SmartForm.prototype.propagateGridDataSpan = function() {
		this._propagateGridDataSpan();
		return this;
	};

	/**
	 * Registers a resize handler to update the linebreaks
	 * 
	 * @private
	 */
	SmartForm.prototype._registerResizeHandler = function() {

		if (this._resizeHandlerRegId) {
			return;
		}

		var that = this;
		var fResizeHandler = function() {

			var aGroups = that.getGroups();

			aGroups.forEach(function(oGroup) {
				oGroup._updateLineBreaks();
			});
		};
		this._resizeHandlerRegId = sap.ui.core.ResizeHandler.register(this._oForm, fResizeHandler);
	};

	/**
	 * Gets the span based on the current screen size
	 * 
	 * @private
	 */
	SmartForm.prototype._getCurrentSpan = function() {
		var sSpan = this.getLayout().getGridDataSpan();
		var iCurrentSpan = 0;
		var aResult = [];

		if (this.getDomRef() && this._oForm) {
			if (this.getDomRef().clientWidth > this._oForm.getLayout().getBreakpointL()) {
				var L = /L([1-9]|1[0-2])/i;
				aResult = L.exec(sSpan);
				iCurrentSpan = aResult[1];
			} else if (this.getDomRef().clientWidth > this._oForm.getLayout().getBreakpointM()) {
				var M = /M([1-9]|1[0-2])/i;
				aResult = M.exec(sSpan);
				iCurrentSpan = aResult[1];
			} else {
				var S = /S([1-9]|1[0-2])/i;
				aResult = S.exec(sSpan);
				iCurrentSpan = aResult[1];
			}
		}
		return iCurrentSpan;
	};

	/**
	 * Change to edit/read only depending on the current state.
	 * 
	 * @private
	 */
	SmartForm.prototype._toggleEditMode = function() {
		var bEditable = this.getEditable();
		this.setEditable(!bEditable);
	};

	/**
	 * Triggers the addition of the button for personalization to the toolbar, if change mode supported.
	 * 
	 * @returns {Promise} the promise for flexibility settings
	 * @private
	 */
	SmartForm.prototype._addChangeModeToToolbar = function() {
		if (Settings.isFlexChangeMode() && Settings.isFlexibilityAdaptationButtonAllowed()) {
			return this._getAddChangeModelToToolbarPromise();
		}

		return Promise.resolve();
	};

	/**
	 * @returns {Promise} the promise for the addition of the toolbar modification.
	 * @private
	 */
	SmartForm.prototype._getAddChangeModelToToolbarPromise = function() {
		var that = this;
		var sComponentName = Utils.getComponentClassName(this);
		var mPropertyBag = {
			appDescriptor: Utils.getAppDescriptor(this),
			siteId: Utils.getSiteId(this)
		};

		var bIsFlexEnabled = this.getFlexEnabled();
		if (bIsFlexEnabled) {
			return Settings.getInstance(sComponentName, mPropertyBag).then(function(oSettings) {
				if (oSettings.isKeyUser() && Utils.checkControlId(that)) {
					that._setToolbarAndAddContent();
				}
			}, function(oError) {
			});
		} else {
			return Promise.resolve();
		}
	};

	SmartForm.prototype._setToolbarAndAddContent = function() {
		var oCustomToolbar = this._getCustomToolbar();
		var oToolbar = oCustomToolbar || this._oToolbar;

		if (!oToolbar || oToolbar.bIsDestroyed) {
			this._createToolbar();
			this._oToolbar.addStyleClass("titleBar");
			this._addHeaderToToolbar();
			oToolbar = this._oToolbar;
			this.invalidate();
		}

		oToolbar.addContent(new Button(this.getId() + "-" + oToolbar.getId() + "-AdaptationButton", {
			type: ButtonType.Default,
			icon: "sap-icon://action-settings",
			tooltip: this._oRb.getText("FORM_TOOLTIP_SETTINGS"),
			press: this._handleAdaptationButtonPress.bind(this)
		}));
	};

	SmartForm.prototype._handleAdaptationButtonPress = function() {
		var that = this;
		var oMetaModel = this.getModel().getMetaModel();
		oMetaModel.loaded().then(that._openAdaptationDialog.bind(that));
	};

	SmartForm.prototype._openAdaptationDialog = function() {
		jQuery.sap.require('sap.ui.comp.smartform.flexibility.FormP13nHandler');
		var handler = new sap.ui.comp.smartform.flexibility.FormP13nHandler();
		handler.init(this);
		handler.show();
	};

	/**
	 * Adds the button for checking.
	 * 
	 * @private
	 */
	SmartForm.prototype._addCheckToToolbar = function() {
		if (!this.getEditable()) {
			return;
		}

		var oCustomToolbar = this._getCustomToolbar();
		var oToolbar = oCustomToolbar || this._oToolbar;
		var that = this;

		if (this.getCheckButton()) {
			oToolbar.addContent(new Button(this.getId() + "-" + oToolbar.getId() + "-button-sfmain-check", {
				type: ButtonType.Default,
				text: this._oRb.getText("SMART_FORM_CHECK"),
				press: function() {
					var aErroneousFields = [];
					aErroneousFields = that.check();
					that.fireChecked({
						erroneousFields: aErroneousFields
					});
				}
			}));
		}

	};

	/**
	 * Checks smart fields for client errors.
	 * 
	 * @param {boolean} Determines is only visible fields in visible groups should be considered. default: <code>true</code>
	 * @returns {string[]} An array of fields with errors
	 * @public
	 */
	SmartForm.prototype.check = function(bConsiderOnlyVisible) {

		if (bConsiderOnlyVisible === undefined) {
			bConsiderOnlyVisible = true;
		}

		var aErroneousFields = this._checkClientError(bConsiderOnlyVisible);
		return aErroneousFields;
	};

	/**
	 * Check smart fields for client errors.
	 * 
	 * @param {boolean} bConsiderOnlyVisible determines if only visible filters of visible groups should be considered. Default. <code>true</code>
	 * @returns {string[]} an array of fields with errors
	 * @private
	 */
	SmartForm.prototype._checkClientError = function(bConsiderOnlyVisible) {

		if (bConsiderOnlyVisible === undefined) {
			bConsiderOnlyVisible = true;
		}

		var aFields = this.getSmartFields(bConsiderOnlyVisible);
		var aErroneousFields = [];
		aFields.forEach(function(oField) {
			if (oField.checkClientError()) {

				if (bConsiderOnlyVisible && oField.getVisible) {
					if (!oField.getVisible()) {
						return;
					}
				}

				aErroneousFields.push(oField.getId());
			}
		});
		return aErroneousFields;
	};

	/**
	 * Adds a separator to the toolbar.
	 * 
	 * @private
	 */
	SmartForm.prototype._addSeparatorToToolbar = function() {
		var oCustomToolbar = this._getCustomToolbar();
		var oToolbar = oCustomToolbar || this._oToolbar;
		oToolbar.addContent(new ToolbarSeparator());
	};

	/**
	 * Removes useless separators.
	 * 
	 * @private
	 */
	SmartForm.prototype._removeSeparatorFromToolbar = function() {
		var oCustomToolbar = this._getCustomToolbar();
		var oToolbar = oCustomToolbar || this._oToolbar;
		var oContent = oToolbar.getContent();
		var oLastElement = null;
		var aRemoveElement = [];
		var i = 0;

		// remove last separator
		oLastElement = oContent[oContent.length - 1];
		if (oLastElement.getMetadata().getName() === "sap.m.ToolbarSeparator") {
			oToolbar.removeContent(oLastElement);
		}

		// remove superfluous separator
		oLastElement = null;
		for (i; i < oContent.length; i++) {
			if (oContent[i].getMetadata().getName() === "sap.m.ToolbarSeparator" && oLastElement.getMetadata().getName() != "sap.m.Button") {
				aRemoveElement.push(oContent[i]);
			}
			oLastElement = oContent[i];
		}
		for (i = 0; i < aRemoveElement.length; i++) {
			oToolbar.removeContent(aRemoveElement[i]);
		}
	};

	SmartForm.prototype._displayError = function(aErroneousFields) {
		var sErrorMessage, sErrorTitle;

		sErrorTitle = this._oRb.getText("FORM_CLIENT_CHECK_ERROR_TITLE");
		sErrorMessage = this._oRb.getText("FORM_CLIENT_CHECK_ERROR");

		MessageBox.show(sErrorMessage, {
			icon: MessageBox.Icon.ERROR,
			title: sErrorTitle,
			styleClass: (this.$() && this.$().closest(".sapUiSizeCompact").length) ? "sapUiSizeCompact" : ""
		});
	};

	/**
	 * Setter for property <code>editable</code>.
	 * 
	 * @param {boolean} New value for property <code>editable</code>.
	 * @return {sap.ui.comp.smartform.SmartForm} <code>this</code> to allow method chaining.
	 * @public
	 */
	SmartForm.prototype.setEditable = function(bEditable) {
		var sTooltip;
		var bOldEditable = this.getEditable();
		if (bOldEditable === bEditable) {
			return this;
		}

		if (!bEditable && this.hasListeners("editToggled")) {
			var aErroneousFields = [];
			aErroneousFields = this.check(true);
			if (aErroneousFields && aErroneousFields.length > 0) {

				this._displayError(aErroneousFields);
				return this;
			}
		}

		this.setProperty("editable", bEditable);
		if (this._oForm) {
			this._oForm.setEditable(bEditable);
		}

		this.fireEditToggled({
			editable: bEditable
		});

		if (this._oEditToggleButton) {
			this._oEditToggleButton.setIcon(bEditable ? "sap-icon://display" : "sap-icon://edit");
			sTooltip = this._oRb.getText(bEditable ? "FORM_TOOLTIP_DISPLAY" : "FORM_TOOLTIP_EDIT");
			this._oEditToggleButton.setTooltip(sTooltip);
		}

		var aGroup = this.getGroups();
		aGroup.forEach(function(oGroup) {
			oGroup.setEditMode(bEditable);
		});

		this._bUpdateToolbar = true;
		return this;
	};

	/**
	 * Setter for property <code>editTogglable</code>. Default value is <code>undefined</code>.
	 * 
	 * @param {boolean} New value for property <code>editTogglable</code>.
	 * @return {sap.ui.comp.smartform.SmartForm} <code>this</code> to allow method chaining.
	 * @public
	 */
	SmartForm.prototype.setEditTogglable = function(bTogglable) {
		this.setProperty("editTogglable", bTogglable);
		this._bUpdateToolbar = true;
		return this;
	};

	/**
	 * Setter for property <code>title</code>. Default value is <code>undefined</code>.
	 * 
	 * @param {string} sTitle new value for property <code>title</code>.
	 * @return {sap.ui.comp.smartform.SmartForm} <code>this</code> to allow method chaining.
	 * @public
	 */
	SmartForm.prototype.setTitle = function(sTitle) {
		Control.prototype.setProperty.apply(this, [
			"title", sTitle
		]);
		this._oTitle.setText(sTitle);
		return this;
	};

	/**
	 * Setter for property <code>useHorizontalLayout</code>.
	 * 
	 * @param {boolean} New value for property <code>useHorizontalLayout</code>.
	 * @return {sap.ui.comp.smartform.SmartForm} <code>this</code> to allow method chaining.
	 * @public
	 */
	SmartForm.prototype.setUseHorizontalLayout = function(bUseHorizontalLayout) {
		var oldUseHorizontalLayout = this.getProperty("useHorizontalLayout");

		if (oldUseHorizontalLayout !== bUseHorizontalLayout) {
			this.setProperty("useHorizontalLayout", bUseHorizontalLayout);

			if (bUseHorizontalLayout) {
				this.addStyleClass("sapUiCompSmartFormHorizontalLayout");
			} else {
				this.removeStyleClass("sapUiCompSmartFormHorizontalLayout");
			}

			// add groups
			var aGroup = this.getGroups();
			if (aGroup) {
				aGroup.forEach(function(oGroup) {
					oGroup.setUseHorizontalLayout(bUseHorizontalLayout);
				});
			}

			// new layout is created in OnBeforeRendering
			this._bisLayoutCreated = false;
		}

		return this;
	};

	SmartForm.prototype.setHorizontalLayoutGroupElementMinWidth = function(nMinWidth) {

		this.setProperty("horizontalLayoutGroupElementMinWidth", nMinWidth);

		// add groups
		var aGroup = this.getGroups();
		if (aGroup) {
			aGroup.forEach(function(oGroup) {
				oGroup.setHorizontalLayoutGroupElementMinWidth(nMinWidth);
			});
		}
		return this;
	};

	/**
	 * Returns the array of properties currently visible on the UI.
	 * 
	 * @return {string[]} The properties currently visible
	 * @public
	 */
	SmartForm.prototype.getVisibleProperties = function() {

		var aProperty = [];

		var aGroup = this.getGroups();
		if (aGroup) {
			aGroup.forEach(function(oGroup) {
				var aGroupElement = oGroup.getGroupElements();
				if (aGroupElement) {
					aGroupElement.forEach(function(oGroupElement) {
						var aField = oGroupElement.getFields();
						if (aField) {
							aField.forEach(function(oField) {
								if (oField.getVisible()) {
									var sPath = oField.getBindingPath("value");
									if (sPath) {
										aProperty.push(sPath);
									}
								}
							});
						}
					});
				}
			});
		}

		return aProperty;

	};

	/**
	 * Setter for aggregation <code>customToolbar</code>. Default value is <code>undefined</code>.
	 * 
	 * @param {sap.m.Toolbar} New value for aggregation <code>customToolbar</code>.
	 * @return {sap.ui.comp.smartform.SmartForm} <code>this</code> to allow method chaining.
	 * @public
	 */
	SmartForm.prototype.setCustomToolbar = function(oCustomToolbar) {
		if (oCustomToolbar) {
			oCustomToolbar.data('bIsSmartFormCustomToolbar', true);
		}

		this.setAggregation("customToolbar", oCustomToolbar);

		if (oCustomToolbar) {
			this._bUpdateToolbar = true;
		}
		return this;
	};

	/**
	 * Getter for aggregation <code>customToolbar</code>.
	 * 
	 * @return {sap.m.Toolbar} The custom toolbar
	 * @public
	 */
	SmartForm.prototype.getCustomToolbar = function() {
		var oCustomToolbar = this._getCustomToolbar();
		return oCustomToolbar;
	};

	/**
	 * Determine CustomToolbar from own aggregation of from internal panel
	 * 
	 * @return {sap.m.Toolbar} the custom toolbar
	 * @private
	 */
	SmartForm.prototype._getCustomToolbar = function() {
		var oCustomToolbar = this.getAggregation("customToolbar");
		if (!oCustomToolbar && this._oPanel) {
			oCustomToolbar = this._oPanel.getHeaderToolbar();
			if (!oCustomToolbar.data('bIsSmartFormCustomToolbar')) {
				oCustomToolbar = null;
			}
		}
		return oCustomToolbar;
	};

	/**
	 * Inserts a <code>group</code> into the aggregation named groups.
	 * 
	 * @param {sap.ui.comp.smartform.Group} The group to insert
	 * @param {int} The 0-based index the group should be inserted at
	 * @return {sap.ui.comp.smartform.SmartForm} <code>this</code> to allow method chaining.
	 * @public
	 */
	SmartForm.prototype.insertGroup = function(oGroup, iIndex) {
		this.insertAggregation("groups", oGroup, iIndex);
		return this;
	};

	SmartForm.prototype.insertAggregation = function(sAggregationName, oObject, iIndex) {
		if (sAggregationName === "groups") {
			this._insertGroup(oObject, iIndex);
		} else {
			Control.prototype.insertAggregation.apply(this, arguments);
		}
	};

	/**
	 * Removes a <code>group</code> from the aggregation named groups.
	 * 
	 * @param {sap.ui.comp.smartform.Group} The group to be removed
	 * @return {sap.ui.comp.smartform.SmartForm} <code>this</code> to allow method chaining.
	 * @public
	 */
	SmartForm.prototype.removeGroup = function(oGroup) {
		this.removeAggregation("groups", oGroup);
		return this;
	};

	SmartForm.prototype.removeAggregation = function(sAggregationName, oObject) {
		if (sAggregationName === "groups") {
			return this._oForm.removeFormContainer(oObject);
		} else {
			return Control.prototype.removeAggregation.apply(this, arguments);
		}
	};

	SmartForm.prototype.removeAllAggregation = function(sAggregationName) {
		if (sAggregationName === "groups") {
			return this.removeAllGroups();
		} else {
			return Control.prototype.removeAllAggregation.apply(this, arguments);
		}
	};

	/**
	 * Destroys a <code>group</code> from the aggregation named groups.
	 * 
	 * @return {sap.ui.comp.smartform.SmartForm} <code>this</code> to allow method chaining.
	 * @public
	 */
	SmartForm.prototype.destroyGroups = function() {
		this.destroyAggregation("groups");
		return this;
	};

	SmartForm.prototype.destroyAggregation = function(sAggregationName) {
		if (sAggregationName === "groups") {
			this._oForm.destroyFormContainers();
		} else {
			Control.prototype.destroyAggregation.apply(this, arguments);
		}
	};

	/**
	 * Checks if the internal form control already exist and if not it will be created
	 * 
	 * @private
	 */
	SmartForm.prototype._createForm = function() {
		if (!this._oForm) {
			this._oForm = new Form({
				"editable": this.getEditable()
			// if the form is NOT editable, only label / static texts are allowed -> no editable controls
			});
		}
	};

	/**
	 * Creates a layout for the internal form
	 * 
	 * @private
	 */
	SmartForm.prototype._createLayout = function() {
		var oLayout = null;

		this._createForm();

		if (!this._bisLayoutCreated && this._oForm) {

			// Remove old existing layout from From
			oLayout = this._oForm.getLayout();
			if (oLayout) {
				oLayout.destroy();
			}

			// Create new layout based on grid or form
			if (this.mProperties["useHorizontalLayout"]) {
				if (this.getLayout() && this.getLayout().getGridDataSpan()) {
					oLayout = new sap.ui.layout.form.ResponsiveGridLayout({
						columnsL: 1,
						columnsM: 1
					});
					if (this.getLayout().getBreakpointM() > 0) {
						oLayout.setBreakpointM(this.getLayout().getBreakpointM());
					}
					if (this.getLayout().getBreakpointL() > 0) {
						oLayout.setBreakpointM(this.getLayout().getBreakpointL());
					}
				} else {
					oLayout = new sap.ui.layout.form.ResponsiveLayout();
				}
			} else {
				oLayout = this._getLayout();
			}
			this._oForm.setLayout(oLayout);
			this._bisLayoutCreated = true;
		}
	};

	/**
	 * Adds existing custom data to a given group instance
	 * 
	 * @private
	 * @param {object} oGroup for which the custom data should be propagated
	 */
	SmartForm.prototype._addCustomData = function(oGroup) {
		var aCustomData = null;

		if (oGroup) {
			aCustomData = this.getCustomData();
			if (aCustomData && aCustomData.length > 0) {
				aCustomData.forEach(function(oCustomData) {
					oGroup.addCustomData(oCustomData.clone());
				});
			}
		}
	};

	/**
	 * Delegates the edit mode from the SmartForm to the given group
	 * 
	 * @private
	 * @param {object} oGroup on which the editable property should be set
	 */
	SmartForm.prototype._delegateEditMode = function(oGroup) {
		if (oGroup) {
			oGroup.setEditMode(this.mProperties["editable"]);
		}
	};

	/**
	 * Inserts a given group to aggregation FormContainer in the internal Form instance at the given iIndex.
	 * 
	 * @private
	 * @param {object} Group to be added
	 * @param {numeric} Position where group is inserted
	 */
	SmartForm.prototype._insertGroup = function(oGroup, iIndex) {

		// check if internal form exist and creates one if not
		this._createForm();

		// calculate index value if it is not given via interface
		if (iIndex === undefined || iIndex === null) {
			iIndex = this._oForm.getFormContainers().length;
		} else if (iIndex === -1) {
			iIndex = 0;
		}

		oGroup.setHorizontalLayoutGroupElementMinWidth(this.getHorizontalLayoutGroupElementMinWidth());
		oGroup.setUseHorizontalLayout(this.getUseHorizontalLayout());

		this._addCustomData(oGroup);
		this._delegateEditMode(oGroup);
		this._oForm.insertFormContainer(oGroup, iIndex);
	};

	/**
	 * Removes all the groups in the aggregation named groups.
	 * 
	 * @return {sap.ui.comp.smartform.Group[]} an array of the removed groups (might be empty).
	 * @public
	 */
	SmartForm.prototype.removeAllGroups = function() {
		if (this._oForm) {
			return this._oForm.removeAllFormContainers();
		}
	};

	/**
	 * Generic method which is called, whenever an aggregation binding is changed. This method deletes all elements in this aggregation and recreates
	 * them according to the data model. In case a managed object needs special handling for a aggregation binding, it can create a typed
	 * update-method (e.g. "updateRows") which will be used instead of the default behaviour.
	 * 
	 * @private
	 */
	SmartForm.prototype.updateAggregation = function(sAggregation) {

		Control.prototype.updateAggregation.apply(this, arguments);

		if (sAggregation === "groups") {
			this._updateClonedElements(this);
		}
	};

	/**
	 * Retrieves all the smart fields of the form.
	 * 
	 * @param {boolean} Determines if only visible groups are considered; default is true
	 * @return {sap.ui.comp.smartfield.SmartField[]} An array of smart fields (might be empty).
	 * @public
	 */
	SmartForm.prototype.getSmartFields = function(bConsiderOnlyVisibleGroups) {
		var aGroups = [];
		var aGroupElements = [];
		var aElements = [];
		var aFields = [];
		var aSmartFields = [];

		if (bConsiderOnlyVisibleGroups === undefined) {
			bConsiderOnlyVisibleGroups = true;
		}

		aGroups = this.getGroups();

		aGroups.forEach(function(oGroup) {

			if (!bConsiderOnlyVisibleGroups || (bConsiderOnlyVisibleGroups && oGroup.getVisible())) {
				aGroupElements = oGroup.getGroupElements();

				aGroupElements.forEach(function(oGroupElement) {

					aFields = [];
					aElements = oGroupElement.getElements();

					aFields = oGroupElement._extractFields(aElements, true);

					aFields = aFields.filter(function(oField) {
						return oField instanceof sap.ui.comp.smartfield.SmartField;
					});

					aSmartFields = aSmartFields.concat(aFields);
				});
			}
		});

		return aSmartFields;
	};

	/**
	 * Sets the focus on the first editable control.
	 * 
	 * @since 1.36.0
	 * @public
	 */
	SmartForm.prototype.setFocusOnEditableControl = function() {
		var aControls = [];
		this.getGroups().forEach(function(oGroup) {
			oGroup.getGroupElements().forEach(function(oGroupElement) {
				aControls = aControls.concat(oGroupElement.getElements());
			});
		});
		/* eslint-disable no-loop-func */
		while (aControls.some(function(oControl) {
			return oControl instanceof sap.m.FlexBox;
		})) {
			for (var i = 0; i < aControls.length; i++) {
				if (aControls[i] instanceof sap.m.FlexBox) {
					Array.prototype.splice.apply(aControls, [
						i, 1
					].concat(aControls[i].getItems()));
				}
			}
		}
		/* eslint-enable no-loop-func */

		aControls.some(function(oControl) {
			if (oControl.getEditable && oControl.getEditable() && oControl.focus) {
				oControl.focus();
				return true;
			}
		});
	};

	/**
	 * Clones the SmartForm control.
	 * 
	 * @param {string} [sIdSuffix] A suffix to be appended to the cloned element id
	 * @param {string[]} [aLocalIds] An array of local IDs within the cloned hierarchy (internally used)
	 * @return {sap.ui.base.ManagedObject} A reference to the newly created clone
	 * @protected
	 */
	SmartForm.prototype.clone = function(sIdSuffix, aLocalIds) {
		var oClone = Control.prototype.clone.apply(this, arguments);

		var oAggregations = this.getMetadata().getAggregations();
		var sAggregation;
		var oAggregation;

		for (sAggregation in oAggregations) {
			oAggregation = this.getAggregation(sAggregation);

			// do not clone aggregation if aggregation is bound (already done by Control.prototype.clone); aggregation is filled on update
			// do not clone aggregation if already done by Control.prototype.clone
			if (this.getMetadata().hasAggregation(sAggregation) && !this.isBound(sAggregation) && ((oClone.getAggregation(sAggregation) === null) || oClone.getAggregation(sAggregation).length === 0)) {
				if (oAggregation instanceof sap.ui.base.ManagedObject) {
					oClone.addAggregation(sAggregation, oAggregation.clone(sIdSuffix, aLocalIds));
				} else if (jQuery.isArray(oAggregation)) {
					for (var i = 0; i < oAggregation.length; i++) {
						oClone.addAggregation(sAggregation, oAggregation[i].clone(sIdSuffix, aLocalIds));
					}

					if (sAggregation === "groups") {
						this._updateClonedElements(oClone);
					}

				} else if (oAggregation != null) {
					// must be an alt type
					oClone.setAggregation(sAggregation, oAggregation.clone(sIdSuffix, aLocalIds));
				}
			}
		}

		return oClone;
	};

	/**
	 * Updates controls in the hierarchy of a cloned smart form.
	 * 
	 * @param {sap.ui.comp.smartform.SmartForm} The cloned smart form
	 * @protected
	 */
	SmartForm.prototype._updateClonedElements = function(oSmartForm) {
		var oField = null, oLabel = null;
		var aGroupElements = [];
		var aElements = [];
		var aFields = [];

		var aGroups = oSmartForm.getGroups();

		aGroups.forEach(function(oGroup) {

			aGroupElements = oGroup.getGroupElements();

			aGroupElements.forEach(function(oGroupElement) {

				// set the link between cloned SmartLabel and SmartField
				oField = oGroupElement._getFieldRelevantForLabel();
				oLabel = oGroupElement._getLabel();

				if (oField && oLabel) {
					oLabel.setLabelFor(oField);
				}

				// update registration for smart field events
				// cloned group elements still registered for template smart fields
				aElements = oGroupElement.getElements();

				aFields = [];

				aFields = oGroupElement._extractFields(aElements, true);

				aFields.forEach(function(oField) {

					if (oField.getEditable) {
						if (!oField.getEditable()) {
							oField.data("editable", false);
						}
					}
					if (oField.attachVisibleChanged) {
						oField.attachVisibleChanged(function(oEvent) {
							oGroupElement._updateFormElementVisibility();
						});
					}

					if (oField.attachContextEditableChanged) {
						oField.attachContextEditableChanged(function(oEvent) {
							oGroupElement._updateFormElementEditable(oEvent);
						});
					}

					if (oField.attachInnerControlsCreated) {
						oField.attachInnerControlsCreated(function(oEvent) {
							oGroupElement._updateFormElementLabel(oEvent);
						});
					}

				});
			});
		});

	};

	/**
	 * Cleans up the resources associated with this element and all its children.
	 * 
	 * @public
	 */
	SmartForm.prototype.exit = function() {
		if (this._oForm) {
			this._oForm.destroy();
		}
		if (this._oPanel) {
			this._oPanel.destroy();
		}
		if (this._oTitle) {
			this._oTitle.destroy();
		}
		if (this._oToolbar) {
			this._oToolbar.destroy();
		}
		if (this._oEditToggleButton) {
			this._oEditToggleButton.destroy();
		}

		this._oForm = null;
		this._oPanel = null;
		this._oTitle = null;
		this._bUpdateToolbar = true;
		this._sResizeListenerId = "";
		this._oRb = null;
		this._oToolbar = null;
		this._oEditToggleButton = null;
		if (this._resizeHandlerRegId) {
			sap.ui.core.ResizeHandler.deregister(this._resizeHandlerRegId);
			this._resizeHandlerRegId = "";
		}
	};

	return SmartForm;

}, /* bExport= */true);

}; // end of sap/ui/comp/smartform/SmartForm.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.flexibility.FieldList') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartform.flexibility.FieldList.
jQuery.sap.declare('sap.ui.comp.smartform.flexibility.FieldList'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/flexibility/FieldList",['jquery.sap.global', 'sap/ui/comp/library', 'sap/ui/core/Control'],
	function(jQuery, library, Control) {
	"use strict";



	/**
	 * Constructor for a new smartform/flexibility/FieldList.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * Contains list of forms, groups and fields which can could be modified by the SAPUI5 flexibility services
	 * @extends sap.ui.core.Control
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartform.flexibility.FieldList
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var FieldList = Control.extend("sap.ui.comp.smartform.flexibility.FieldList", /** @lends sap.ui.comp.smartform.flexibility.FieldList.prototype */ { metadata : {

		library : "sap.ui.comp",
		aggregations : {

			/**
			 * Nodes representing either a Form, a Group or a field
			 */
			nodes : {type : "sap.ui.comp.smartform.flexibility.FieldListNode", multiple : true, singularName : "node"}
		},
		events : {

			/**
			 * Event is fired when the selected node has changed
			 */
			selectionChanged : {},

			/**
			 * Event is fired when the label of the node has changed
			 */
			labelChanged : {},

			/**
			 * Event is fired when a node was hidden
			 */
			nodeHidden : {}
		}
	}});

	/**
	 * init
	 *
	 * @public
	 */
	FieldList.prototype.init = function() {
		// do something for initialization...
		this._oSelectedNode = null;
	};

	/**
	 * Returns the currently selected field list node
	 *
	 * @returns {sap.ui.comp.smartform.flexibility.FieldListNode} field list node
	 * @public
	 */
	FieldList.prototype.getSelectedNode = function() {
		return this._oSelectedNode;
	};

	/**
	 * Registers to the Selected event of the provided field list node
	 *
	 * @param {sap.ui.comp.smartform.flexibility.FieldListNode} oNode field list node
	 * @private
	 */
	FieldList.prototype._registerNodeSelectionChangedEvent = function(oNode) {
		if (oNode) {
			oNode.attachSelected(this._handleSelectionChanged.bind(this));
		}
	};

	/**
	 * Registers to the LabelChanged event of the provided field list node
	 *
	 * @param {sap.ui.comp.smartform.flexibility.FieldListNode} oNode field list node
	 * @private
	 */
	FieldList.prototype._registerNodeLabelChangedEvent = function(oNode) {
		if (oNode) {
			oNode.attachLabelChanged(this._handleLabelChanged.bind(this));
		}
	};

	/**
	 * Registers to the NodeHidden event of the provided field list node
	 *
	 * @param {sap.ui.comp.smartform.flexibility.FieldListNode} oNode field list node
	 * @private
	 */
	FieldList.prototype._registerNodeHiddenEvent = function(oNode) {
		if (oNode) {
			oNode.attachNodeHidden(this._handleNodeHidden.bind(this));
		}
	};

	/**
	 * Deregisters to the Selected event of the provided field list node
	 *
	 * @param {sap.ui.comp.smartform.flexibility.FieldListNode} oNode field list node
	 * @private
	 */
	FieldList.prototype._deregisterNodeSelectionChangedEvent = function(oNode) {
		if (oNode) {
			oNode.detachSelected(this._handleSelectionChanged.bind(this));
		}
	};

	/**
	 * Deregisters to the LabelChanged event of the provided field list node
	 *
	 * @param {sap.ui.comp.smartform.flexibility.FieldListNode} oNode field list node
	 * @private
	 */	FieldList.prototype._deregisterNodeLabelChangedEvent = function(oNode) {
		if (oNode) {
			oNode.detachLabelChanged(this._handleLabelChanged.bind(this));
		}
	};

	/**
	 * Deregisters to the NodeHidden event of the provided field list node
	 *
	 * @param {sap.ui.comp.smartform.flexibility.FieldListNode} oNode field list node
	 * @private
	 */	FieldList.prototype._deregisterNodeHiddenEvent = function(oNode) {
		if (oNode) {
			oNode.detachNodeHidden(this._handleNodeHidden.bind(this));
		}
	};

	/**
	 * Event handler for Selected event of the field list node
	 *
	 * @param {object} oEvent event
	 * @private
	 */
	FieldList.prototype._handleSelectionChanged = function(oEvent) {
		var oNode;
		oNode = oEvent.getParameter("target");
		if (oNode) {
			// this._setSelectedNode(oNode);
			this.fireSelectionChanged({
				node: oNode
			});
		}
	};

	/**
	 * Event handler for LabelChanged event of the field list node
	 *
	 * @param {object} oEvent event
	 * @private
	 */
	FieldList.prototype._handleLabelChanged = function(oEvent) {
		var oNode;
		oNode = oEvent.getParameter("target");
		if (oNode) {
			this.fireLabelChanged({
				node: oNode
			});
		}
	};

	/**
	 * Event handler for NodeHidden event of the field list node
	 *
	 * @param {object} oEvent event
	 * @private
	 */
	FieldList.prototype._handleNodeHidden = function(oEvent) {
		var oNode;
		oNode = oEvent.getParameter("target");
		if (oNode) {
			this.fireNodeHidden({
				node: oNode
			});
		}
	};

	/**
	 * Unselects the previoulsy registered field list node and selects the new field list node
	 *
	 * @param {sap.ui.comp.smartform.flexibility.FieldListNode} oNode field list node
	 * @private
	 */
	FieldList.prototype._setSelectedNode = function(oNode) {
		if (!oNode) {
			return;
		}

		if (this._oSelectedNode) {
			this._oSelectedNode.setIsSelected(false);
		}
		this._oSelectedNode = oNode;
		this._oSelectedNode.setIsSelected(true);
	};

	/**
	 * @private Overwritten - called when field list node is added
	 * @param {sap.ui.comp.smartform.flexibility.FieldListNode} oNode field list node
	 * @returns {sap.ui.comp.smartform.flexibility.FieldListNode} added field list node
	 */
	FieldList.prototype.addNode = function(oNode) {
		this.addAggregation("nodes", oNode, true);
		this._registerNodeSelectionChangedEvent(oNode);
		this._registerNodeLabelChangedEvent(oNode);
		this._registerNodeHiddenEvent(oNode);
		return this;
	};

	/**
	 * @private Overwritten - called when field list node is destroyed
	 * @param {sap.ui.comp.smartform.flexibility.FieldListNode} oNode field list node
	 * @returns {sap.ui.comp.smartform.flexibility.FieldListNode} destroyed field list node
	 */
	FieldList.prototype.destroyNodes = function(oNode) {
		var aNodes, length, i;
		aNodes = this.getNodes();
		length = aNodes.length;
		for (i = 0; i < length; i++) {
			this._deregisterNodeSelectionChangedEvent(aNodes[i]);
			this._deregisterNodeLabelChangedEvent(aNodes[i]);
			this._deregisterNodeHiddenEvent(aNodes[i]);
		}
		this.destroyAggregation("nodes");
		return this;
	};

	/**
	 * @private Overwritten - called when field list node is removed
	 * @param {sap.ui.comp.smartform.flexibility.FieldListNode} oNode field list node
	 * @returns {sap.ui.comp.smartform.flexibility.FieldListNode | number} removed field list node
	 */
	FieldList.prototype.removeNode = function(oNode) {
		this.removeAggregation("nodes", oNode);

		if (typeof oNode === 'number') {
			oNode = this.getNodes([
				oNode
			]);
		}
		this._deregisterNodeSelectionChangedEvent(oNode);
		this._deregisterNodeLabelChangedEvent(oNode);
		this._deregisterNodeHiddenEvent(oNode);

		return this;
	};


	return FieldList;

}, /* bExport= */ true);

}; // end of sap/ui/comp/smartform/flexibility/FieldList.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.flexibility.Input') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartform.flexibility.Input.
jQuery.sap.declare('sap.ui.comp.smartform.flexibility.Input'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.Input'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/flexibility/Input",['jquery.sap.global', 'sap/m/Input', 'sap/ui/comp/library'],
	function(jQuery, Input1, library) {
	"use strict";


	/**
	 * Constructor for a new smartform/flexibility/Input.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * Input field with special focus handling
	 * @extends sap.m.Input
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartform.flexibility.Input
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var Input = Input1.extend("sap.ui.comp.smartform.flexibility.Input", /** @lends sap.ui.comp.smartform.flexibility.Input.prototype */ { metadata : {

		library : "sap.ui.comp",
		events : {

			/**
			 * Fired when the field is readonly, focused and user pressed Space
			 */
			selectedByKeyboard : {}
		}
	}});

	Input.prototype.init = function() {
		Input1.prototype.init.call(this);
	};

	Input.prototype.onAfterRendering = function() {
		var oDomRef;

		Input1.prototype.onAfterRendering.apply(this);
		oDomRef = this.getDomRef();
		if (oDomRef) {
			oDomRef.tabIndex = 0;
		}
	};

	Input.prototype.onkeydown = function(oEvent) {
		var nKeyCode;

		Input1.prototype.onkeydown.apply(this, arguments);
		nKeyCode = oEvent.keyCode;
		if (nKeyCode === 32) { // Blank pressed
			if (this.getEditable() === false) {
				this.fireSelectedByKeyboard();
			}
		}
	};

	Input.prototype.onsapescape = function(oEvent) {
		Input1.prototype.onsapescape.apply(this, arguments);
		oEvent.stopPropagation(); // Prevent closing the dialog
		this.setEditable(false);
	};

	// onsapenter (compared to onkeydown) is called before the value is saved
	Input.prototype.onsapenter = function (oEvent) {
		if (!this.getValue()) {
			this.resetOnEmptyValue();
		}

		Input1.prototype.onsapenter.apply(this, arguments);
		this.setEditable(false);
	};

	Input.prototype.resetOnEmptyValue = function (oEvent) {
		if (!this.getValue()) {
			this.setValue(this._lastValue);
			this.onValueRevertedByEscape(this._lastValue);
		}
	};

	Input.prototype.onsapfocusleave = function (oEvent) {
		this.resetOnEmptyValue();
		Input1.prototype.onsapfocusleave.apply(this, arguments);
	};

	return Input;

}, /* bExport= */ true);

}; // end of sap/ui/comp/smartform/flexibility/Input.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartvariants.PersonalizableInfo') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartvariants.PersonalizableInfo.
jQuery.sap.declare('sap.ui.comp.smartvariants.PersonalizableInfo'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartvariants/PersonalizableInfo",['jquery.sap.global', 'sap/ui/comp/library', 'sap/ui/core/Element'],
	function(jQuery, library, Element) {
	"use strict";


	
	/**
	 * Constructor for a new smartvariants/PersonalizableInfo.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * The PersonalizableInfo class describes the personalizable control associated with the SmartVariantManagement control.
	 * @extends sap.ui.core.Element
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartvariants.PersonalizableInfo
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var PersonalizableInfo = Element.extend("sap.ui.comp.smartvariants.PersonalizableInfo", /** @lends sap.ui.comp.smartvariants.PersonalizableInfo.prototype */ { metadata : {
	
		library : "sap.ui.comp",
		properties : {
	
			/**
			 * Describes the type of variant management.
			 */
			type : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * Name of the data service
			 */
			dataSource : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * Defines the property name of the personalization key.
			 */
			keyName : {type : "string", group : "Misc", defaultValue : null}
		},
		associations : {
	
			/**
			 * Contains the control that can be personalized.
			 */
			control : {type : "sap.ui.core.Control", multiple : false}
		}
	}});
	
	PersonalizableInfo.prototype.addControl = function(oControl) {
		this.addAssociation("control", oControl, true);
	};

	return PersonalizableInfo;

}, /* bExport= */ true);

}; // end of sap/ui/comp/smartvariants/PersonalizableInfo.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.transport.TransportDialog') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.transport.TransportDialog.
jQuery.sap.declare('sap.ui.comp.transport.TransportDialog'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.ComboBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained
jQuery.sap.require('sap.m.DialogRenderer'); // unlisted dependency retained
jQuery.sap.require('sap.m.Input'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ListItem'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Transports'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.Grid'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.GridData'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/transport/TransportDialog",['jquery.sap.global', 'sap/m/Button', 'sap/m/ComboBox', 'sap/m/Dialog', 'sap/m/DialogRenderer', 'sap/m/Input', 'sap/m/Label', 'sap/m/MessageToast', 'sap/ui/comp/library', 'sap/ui/core/ListItem', 'sap/ui/fl/Transports', 'sap/ui/layout/Grid', 'sap/ui/layout/GridData'],
	function(jQuery, Button, ComboBox, Dialog, DialogRenderer, Input, Label, MessageToast, library, ListItem, Transports, Grid, GridData) {
	"use strict";


	
	/**
	 * Constructor for a new transport/TransportDialog.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * The Transport Dialog Control can be used to implement a value help for selecting an ABAP package and transport request. It is not a generic utility, but part of the Variantmanament and therefore cannot be used in any other application.
	 * @extends sap.m.Dialog
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.transport.TransportDialog
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var TransportDialog = Dialog.extend("sap.ui.comp.transport.TransportDialog", /** @lends sap.ui.comp.transport.TransportDialog.prototype */ { metadata : {
	
		library : "sap.ui.comp",
		properties : {
	
			/**
			 * An ABAP package that can be used as default for the ABAP package selection.
			 */
			pkg : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * The set of ABAP transport requests that can be selected by a user.
			 */
			transports : {type : "any", group : "Misc", defaultValue : null},
	
			/**
			 * The LREP object for which as transport request has to be selected
			 */
			lrepObject : {type : "any", group : "Misc", defaultValue : null},
	
			/**
			 * Flag indicating whether the selection of an ABAP package is to be hidden or not.
			 */
			hidePackage : {type : "boolean", group : "Misc", defaultValue : null}
		},
		events : {
	
			/**
			 * This event will be fired when the user clicks the OK button on the dialog.
			 */
			ok : {}, 
	
			/**
			 * This event will be fired when the user clicks the Cancel button on the dialog.
			 */
			cancel : {}
		}
	},
	renderer: DialogRenderer.render
	});
	
	
	/**
	 * Initialize the control.
	 * 
	 * @private
	 */
	TransportDialog.prototype.init = function() {

		Dialog.prototype.init.apply(this);
	
		// initialize dialog and create member variables.
		this._oResources = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp");
		this.setTitle(this._oResources.getText("TRANSPORT_DIALOG_TITLE"));
		this.addStyleClass("sapUiCompTransportDialog");
	
		// add the content.
		this._oPackageLabel = null;
		this._oPackage = this._createPackageField();
		this._oTransport = this._createTransportCombo();
		this.addContent(this._createContentGrid());
		this.setContentWidth("250px");
	
		// okay, cancel and local-object buttons.
		this._createButtons();
	};
	
	/**
	 * Creates the content grid and places its content.
	 * @returns {sap.ui.layout.Grid} the content grid.
	 * 
	 * @private
	 */
	TransportDialog.prototype._createContentGrid = function() {

		var oTransportLabel;
	
		this._oPackageLabel = new Label({
			text: this._oResources.getText("TRANSPORT_DIALOG_PACKAGE"),
			required : true,
			layoutData: new GridData({
				span: "L3 M3 S3"
			})
		}).addStyleClass("compFieldMargin");
		this._oPackageLabel.setLabelFor(this._oPackage);
		oTransportLabel = new Label({
			text: this._oResources.getText("TRANSPORT_DIALOG_TRANSPORT"),
			required : true,
			layoutData: new GridData({
				span: "L3 M3 S3",
				linebreakL: true,
				linebreakM: true,
				linebreakS: true
			})
		}).addStyleClass("compFieldMargin");
		oTransportLabel.setLabelFor(this._oTransport);
		
		return new Grid({
			width: "100%",
			defaultSpan: "L9 M9 S9",
			vSpacing: 0,
			hSpacing: 0,
			content: [ this._oPackageLabel, this._oPackage, oTransportLabel, this._oTransport ]
		}).addStyleClass("compTransportPadding");
	};
	
	/**
	 * Creates the footer buttons.
	 * 
	 * @private
	 */
	TransportDialog.prototype._createButtons = function() {

		var that = this;
	
		this.addButton(new Button({
			text: this._oResources.getText("TRANSPORT_DIALOG_LOCAL_OBJECT"),
			tooltip: this._oResources.getText("TRANSPORT_DIALOG_LOCAL_OBJECT"),
			press: function() {
				that._onLocal();			
			}
		})); 
		this.addButton(new Button({
			text: this._oResources.getText("TRANSPORT_DIALOG_OK"),
			tooltip: this._oResources.getText("TRANSPORT_DIALOG_OK"),
			enabled: false,
			press: function() {
				that._onOkay();
			}
		}));
		this.addButton(new Button({
			text: this._oResources.getText("TRANSPORT_DIALOG_CANCEL"),
			tooltip: this._oResources.getText("TRANSPORT_DIALOG_CANCEL"),
			press: function() {
				that.fireCancel();
				that.close();
				that.destroy();
			}
		}));
	};
	
	/**
	 * Event handler for local object button.
	
	 * @private
	 */
	TransportDialog.prototype._onLocal = function() {

		this.fireOk({
			selectedTransport: "",
			selectedPackage: this.getPkg() || "$TMP",
			dialog: true
		});
		this.close();
		this.destroy();
	};
	
	/**
	 * Event handler for okay button.
	 * 
	 * @private
	 */
	TransportDialog.prototype._onOkay = function() {

		var sTransport = this._oTransport.getSelectedKey();
	
		if (this._checkOkay(sTransport)) {
			this.fireOk({
				selectedTransport: sTransport,
				selectedPackage: this.getPkg() || this._oPackage.getValue(),
				dialog: true
			});
			this.close();
			this.destroy();
		} else {
			this.getButtons()[1].setEnabled(false);
			this._oTransport.setValueState(sap.ui.core.ValueState.Error);
			this._oTransport.setValueStateText(this.getTitle());
		}
	};
	
	/**
	 * Checks whether the Okay button triggers the okay callback.
	 * 
	 * @param {string} sTransport the ID of a transport request, can be <code>null</code>.
	 * @returns {boolean} <code>true</code>, if the okay callback can be triggered, <code>false</code> otherwise.
	 * 
	 * @private
	 */
	TransportDialog.prototype._checkOkay = function(sTransport) {

		if (sTransport) {
			return true;
		}
		
		return false;
	};
	
	/**
	 * Creates the transport <code>sap.ui.commons.ComboBox</code>.
	 * @returns {sap.ui.commons.ComboBox} the transport <code>sap.ui.commons.ComboBox</code>.
	 * 
	 * @private
	 */
	TransportDialog.prototype._createTransportCombo = function() {

		var that = this;
	
		return new ComboBox({
			enabled: false,
			tooltip: this._oResources.getText("TRANSPORT_DIALOG_TRANSPORT_TT"),
			width: "100%",
			selectionChange: function() {
				if (that._oPackage.getEnabled() && that._oPackage.getVisible() && (!that._oPackage.getValue() || that._oPackage.getValue() === "")) {
					return;
				}
				
				that.getButtons()[1].setEnabled(true);	
				that._oTransport.setValueState(sap.ui.core.ValueState.None);		
			},
			change : function(oEvent) {	
				var fCheck = function(oItem) {
					if ((oItem && oEvent.mParameters.newValue !== oItem.getText()) || !oItem) {
						return true;
					}
					
					return false;
				};
				
				if (oEvent && oEvent.mParameters && oEvent.mParameters.newValue) {
					if (fCheck(that._oTransport.getSelectedItem())) {
						that.getButtons()[1].setEnabled(false);
						that._oTransport.setValueState(sap.ui.core.ValueState.Error);
						that._oTransport.setValueStateText(that._oResources.getText("TRANSPORT_DIALOG_TRANSPORT_TT"));				
					}			
				}			
			}
		});
	};
	
	/**
	 * Creates the package <code>sap.ui.commons.ComboBox</code>.
	 * @returns {sap.ui.commons.ComboBox} the package <code>sap.ui.commons.ComboBox</code>.
	 * 
	 * @private
	 */
	TransportDialog.prototype._createPackageField = function() {

		var that = this;
	
		return new Input({
			tooltip: this._oResources.getText("TRANSPORT_DIALOG_PACKAGE_TT"),
			width: "100%",
			change: function() {
				var oTransports, oPromise, oObject;
				
				oObject = that._createObjectInfo();
				oTransports = new sap.ui.fl.Transports(); // FIXME workaround to make test stub work with AMD
				oPromise = oTransports.getTransports(oObject);
				oPromise.then(function(oResult) {
					that._onPackageChangeSuccess(oResult);
				}, function(oResult) {
					that._onPackageChangeError(oResult);
				});			
			},
			liveChange: function(oEvent) {
				if (oEvent.mParameters.liveValue && oEvent.mParameters.liveValue.length > 3) {
					that._oTransport.setEnabled(true);
				}
			}
		}); //.addStyleClass("compFieldMargin");
	};
	
	/**
	 * Creates the object info which serves as input for the transport service and returns it.
	 * @returns {object} the object info which serves as input for the transport service.
	 * 
	 * @private
	 */
	TransportDialog.prototype._createObjectInfo = function() {

		var oObject, oResult = {
			"package" : this._oPackage.getValue() || ""
		};
		
		oObject = this.getProperty("lrepObject");
		
		if (oObject) {		
			if (oObject.name) {
				oResult.name = oObject.name;
			}
			
			if (oObject.type) {
				oResult.type = oObject.type;
			}
			
			if (oObject.namespace) {
				oResult.namespace = oObject.namespace;
			}
		}
		
		return oResult;
	};
	
	/**
	 * Event handler reacting to package change.
	 * @param {object}
	 *            oTransports the possible transport requests.
	 *            
	 * @private
	 */
	TransportDialog.prototype._onPackageChangeSuccess = function(oTransports) {

		if (oTransports) {
			if (oTransports.localonly) {
				this._oTransport.setEnabled(false);
				this.getButtons()[1].setEnabled(true);
			} else if (oTransports.transports && oTransports.transports.length > 0) {
				this._oTransport.setEnabled(true);
				this._setTransports(oTransports);
			} else if (oTransports.errorCode) {
				this.getButtons()[1].setEnabled(false);
				this._oPackage.setValueState(sap.ui.core.ValueState.Error);
				this._oPackage.setValueStateText(this._oResources.getText("TRANSPORT_DIALOG_" + oTransports.errorCode));
				this._setTransports(oTransports);
			} else {			
				MessageToast.show(this._oResources.getText("TRANSPORT_DIALOG_NO_TRANSPORTS"));
			}
		}
	};
	
	/**
	 * Sets the transport requests into the drop down.
	 * @param {object}
	 *            oTransports the possible transport requests.
	 *            
	 * @private
	 */
	TransportDialog.prototype._setTransports = function(oTransports) {

		var oLock, aTransports;
		
		//get the transports into an array.
		oLock = this._hasLock(oTransports.transports);
	
		if (oLock) {
			aTransports = [ oLock ];
		} else {
			aTransports = oTransports.transports;
		}
		
		//set the transports.
		this.setTransports(aTransports);
		
		//pre-select one, if necessary.
		if (aTransports && aTransports.length === 1) {
			this._oTransport.setValue(aTransports[0].description, true);
			this.getButtons()[1].setEnabled(true);
		}
		
		//clear the transport combo-box, if necessary.
		if (!aTransports || aTransports.length === 0) {
			this._oTransport.setSelectedKey(null);
			this._oTransport.setValueState(sap.ui.core.ValueState.None);
			this.getButtons()[1].setEnabled(false);
		}
	};
	
	/**
	 * Event handler reacting to package change.
	 * @param {object}
	 *            oResult response to requesting packages.
	 *            
	 * @private
	 */
	TransportDialog.prototype._onPackageChangeError = function(oResult) {

		MessageToast.show(oResult);
		this.setTransports([]);
	};
	
	/**
	 * Returns whether the LREP object is already locked in one of the transports.
	 * @param {array}
	 *            aTransports the available transports.
	 * @returns {object} the transport, if the LREP object is already locked in one of the transports, <code>null</code> otherwise.
	 * 
	 * @private
	 */
	TransportDialog.prototype._hasLock = function(aTransports) {

		var oTransport, len = aTransports.length;
	
		while (len--) {
			oTransport = aTransports[len];
	
			if (oTransport.locked) {
				return oTransport;
			}
		}
	
		return null;
	};
	
	/**
	 * An ABAP package that can be used as default for the ABAP package selection.
	 * The property can only be set once and afterwards it cannot be changed.
	 * @param {string}
	 *            sPackage an ABAP package that can be used as default for the ABAP package selection.
	 *
	 * @public
	 */
	TransportDialog.prototype.setPkg = function(sPackage) {

		if (sPackage && !this.getProperty("pkg")) {
			// set the property itself.
			this.setProperty("pkg", sPackage);
	
			// disable package selection.
			this._oPackage.setValue(sPackage);
			this._oPackage.setEnabled(false);
	
			// enable transport selection.
			this._oTransport.setEnabled(true);
	
			// correct the title.
			this.setTitle(this._oResources.getText("TRANSPORT_DIALOG_TITLE_SIMPLE"));
			
			//disable local object button, as package has been set from outside and therefore should not be changed.
			this.getButtons()[0].setVisible(false);
		}
	};
	
	/**
	 * The set of ABAP transport requests that can be selected by a user.
	 * @param {array}
	 *            aSelection the set of ABAP transport requests that can be selected by a user.
	 *            
	 * @public          
	 */
	TransportDialog.prototype.setTransports = function(aSelection) {

		var i, len = 0, oItem;
	
		if (aSelection) {
			this.setProperty("transports", aSelection);
			this._oTransport.removeAllItems();
			len = aSelection.length;
			
			for (i = 0; i < len; i++) {
				oItem = aSelection[i];
				this._oTransport.addItem(new ListItem({
					key: oItem.transportId,
					text: oItem.description
				}));
			}
			
			if (len === 1) {
				this._oTransport.setSelectedKey(aSelection[0].transportId);
				this.getButtons()[1].setEnabled(true);
			}
			
			// enable transport selection.
			if (len > 0) {
				this._oTransport.setEnabled(true);
			}
		}
	};
	
	/**
	 * The LREP object for which as transport request has to be selected. 
	 * The property can only be set once and afterwards it cannot be changed.
	 * @param {object}
	 *            oObject an LREP object for which as transport request has to be selected. The object has the attributes name, namespace and type.
	 *
	 * @public
	 */
	TransportDialog.prototype.setLrepObject = function(oObject) {

		if (oObject && !this.getProperty("lrepObject")) {
			this.setProperty("lrepObject", oObject);
		}
	};
	
	/**
	 * Flag indicating whether the selection of an ABAP package is to be hidden or not.
	 * @param {boolean}
	 *            bHide if set to <code>true</code>, the package selection is hidden.
	 *
	 * @public
	 */
	TransportDialog.prototype.setHidePackage = function(bHide) {

		//set the property itself.
		this.setProperty("hidePackage", bHide);
		
		//toggle package visibility.
		this._oPackage.setVisible(!bHide);
		this._oPackageLabel.setVisible(!bHide);
	
		if (bHide) {
			//set the local object button to enabled, 
			//as the end-user might want to "just" save the object without selecting a transport.
			this.getButtons()[0].setEnabled(bHide);
			
			//correct the title.
			this.setTitle(this._oResources.getText("TRANSPORT_DIALOG_TITLE_SIMPLE"));
		}
	};

	return TransportDialog;

}, /* bExport= */ true);

}; // end of sap/ui/comp/transport/TransportDialog.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.transport.TransportSelection') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

/**
 * @public
 * @name sap.ui.comp.transport.TransportSelection
 * @author SAP SE
 * @version 1.36.12
 * @since 1.26.0 
 * Helper object to select an ABAP transport for an LREP object. This is not a generic utility to select a transport request, but part
 *        of the SmartVariant control.
 * @param {jquery.sap.global} jQuery a reference to the jQuery implementation.
 * @param {sap.ui.fl.Utils} Utils a reference to the flexibility utilities implementation.
 * @param {sap.ui.fl.Transports} Transports a reference to the transport service implementation.
 * @param {sap.ui.comp.transport.TransportDialog} TransportDialog a reference to the transport dialog implementation.
 * @param {sap.ui.fl.registry.Settings} FlexSettings a reference to the settings implementation
 * @returns {sap.ui.comp.transport.TransportSelection} a new instance of <code>sap.ui.comp.transport.TransportSelection</code>.
 */
jQuery.sap.declare('sap.ui.comp.transport.TransportSelection'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Transports'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.registry.Settings'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/transport/TransportSelection",[	"jquery.sap.global", "sap/ui/fl/Utils", "sap/ui/fl/Transports", "sap/ui/comp/transport/TransportDialog", "sap/ui/fl/registry/Settings" ], function(jQuery, Utils, Transports, TransportDialog, FlexSettings) {
	"use strict";
	/**
	 * @public
	 * @constructor
	 */
	var TransportSelection = function() {
		this.oTransports = new sap.ui.fl.Transports();
		this.oUtils = sap.ui.fl.Utils;
	};

	/**
	 * Selects a transport request for a given LREP object.
	 * First checks if the Adaptation Transport Organizer (ATO) is enabled
	 * If ATO is enabled and LREP object is in CUSTOMER layer the request 'ATO_NOTIFICATION' has to be used which in the backend triggers that the change is added to an ATO collection
	 * If ATO is not enabled or LREP object not in CUSTOMER layer:
	 * If the LREP object is already assigned to an open transport request or the LREP object is
	 * assigned to a local ABAP package, no dialog to select a transport is started. Instead the success callback is invoked directly. The transport
	 * dialog is shown if a package or a transport request has still to be selected, so if more than one transport request is available for the
	 * current user and the LREP object is not locked in an open transport request.
	 * 
	 * @param {object} oObjectInfo the LREP object, which has the attributes name, name space, type, layer and package.
	 * @param {function} fOkay call-back to be invoked when a transport request has successfully been selected.
	 * @param {function} fError call-back to be invoked when an error occurred during selection of a transport request.
	 * @param {boolean} bCompactMode flag indicating whether the transport dialog should be opened in compact mode.
	 * @param {object} oControl Control instance
	 * @public
	 */
	TransportSelection.prototype.selectTransport = function(oObjectInfo, fOkay, fError, bCompactMode, oControl) {
		var sComponentName, mPropertyBag;
		var that = this;

		if (oObjectInfo) {
			var sLayerType = Utils.getCurrentLayer(false);
			
			if (oControl) {
				sComponentName = Utils.getComponentClassName(oControl);
				var mPropertyBag = {
				                    appDescriptor: Utils.getAppDescriptor(oControl),
				                    siteId: Utils.getSiteId(oControl)
				};
			}
			// if component name and object layer are known and layer is CUSTOMER
			// check in settings if the adaptation transport organizer (ATO) is enabled
			if (sComponentName && sLayerType && sLayerType === 'CUSTOMER') {
				// retrieve the settings and check if ATO is enabled
				FlexSettings.getInstance(sComponentName, mPropertyBag).then(function(oSettings) {
					// ATO is enabled - signal that change is to be added to an ATO collection
					// instead of a transport
					if (oSettings.isAtoEnabled()) {
						var oTransport = { transportId: "ATO_NOTIFICATION" };
						fOkay(that._createEventObject(oObjectInfo, oTransport));
					// ATO is not enabled - use CTS 
					} else {
						that._selectTransport(oObjectInfo, fOkay, fError, bCompactMode);
					}
				});
			// do not have the required info to check for ATO or not CUSTOMER layer - use CTS
			} else {
				that._selectTransport(oObjectInfo, fOkay, fError, bCompactMode);
			}
		}
	};
	
	/**
	 * Selects a transport request for a given LREP object. If the LREP object is already assigned to an open transport request or the LREP object is
	 * assigned to a local ABAP package, no dialog to select a transport is started. Instead the success callback is invoked directly. The transport
	 * dialog is shown if a package or a transport request has still to be selected, so if more than one transport request is available for the
	 * current user and the LREP object is not locked in an open transport request.
	 * 
	 * @param {object} oObjectInfo the LREP object, which has the attributes name, name space, type, layer and package.
	 * @param {function} fOkay call-back to be invoked when a transport request has successfully been selected.
	 * @param {function} fError call-back to be invoked when an error occurred during selection of a transport request.
	 * @param {boolean} bCompactMode flag indicating whether the transport dialog should be opened in compact mode.
	 * @private
	 */
	TransportSelection.prototype._selectTransport = function(oObjectInfo, fOkay, fError, bCompactMode) {
		var oPromise, that = this;

		if (oObjectInfo) {
			oPromise = this.oTransports.getTransports(oObjectInfo);
			oPromise.then(function(oResult) {
				var oTransport;

				if (that._checkDialog(oResult)) {
					that._openDialog({
						hidePackage: !that.oUtils.doesSharedVariantRequirePackage(),
						pkg: oObjectInfo["package"],
						transports: oResult.transports,
						lrepObject: that._toLREPObject(oObjectInfo)
					}, fOkay, fError, bCompactMode);
				} else {
					oTransport = that._getTransport(oResult);
					fOkay(that._createEventObject(oObjectInfo, oTransport));
				}
			}, function(oResult) {
				fError(oResult);
			});
		}
	};

	/**
	 * Creates an event object similar to the UI5 event object.
	 * 
	 * @param {object} oObjectInfo identifies the LREP object.
	 * @param {object} oTransport the transport request that has been selected.
	 * @return {object} event object.
	 * @private
	 */
	TransportSelection.prototype._createEventObject = function(oObjectInfo, oTransport) {
		return {
			mParameters: {
				selectedTransport: oTransport.transportId,
				selectedPackage: oObjectInfo["package"],
				dialog: false
			},
			getParameters: function() {
				return this.mParameters;
			},
			getParameter: function(sName) {
				return this.mParameters[sName];
			}
		};
	};

	/**
	 * Creates an LREP object description for the transport dialog.
	 * 
	 * @param {object} oObjectInfo identifies the LREP object.
	 * @return {object} LREP object description for the transport dialog.
	 * @private
	 */
	TransportSelection.prototype._toLREPObject = function(oObjectInfo) {
		var oObject = {};

		if (oObjectInfo.namespace) {
			oObject.namespace = oObjectInfo.namespace;
		}

		if (oObjectInfo.name) {
			oObject.name = oObjectInfo.name;
		}

		if (oObjectInfo.type) {
			oObject.type = oObjectInfo.type;
		}

		return oObject;
	};

	/**
	 * Opens the dialog to select a transport request.
	 * 
	 * @param {object} oConfig configuration for the dialog, e.g. package and transports.
	 * @param {function} fOkay call-back to be invoked when a transport request has successfully been selected.
	 * @param {function} fError call-back to be invoked when an error occurred during selection of a transport request.
	 * @param {boolean} bCompactMode flag indicating whether the transport dialog should be opened in compact mode.
	 * @returns {sap.ui.comp.transport.TransportDialog} the dialog.
	 * @private
	 */
	TransportSelection.prototype._openDialog = function(oConfig, fOkay, fError, bCompactMode) {
		var oDialog = new TransportDialog(oConfig);
		oDialog.attachOk(fOkay);
		oDialog.attachCancel(fError);

		// toggle compact style.
		if (bCompactMode) {
			oDialog.addStyleClass("sapUiSizeCompact");
		} else {
			oDialog.removeStyleClass("sapUiSizeCompact");
		}

		oDialog.open();

		return oDialog;
	};

	/**
	 * Returns a transport to assign an LREP object to.
	 * 
	 * @param {object} oTransports the available transports.
	 * @returns {object} a transport to assign an LREP object to, can be <code>null</code>.
	 * @private
	 */
	TransportSelection.prototype._getTransport = function(oTransports) {
		var oTransport;

		if (!oTransports.localonly) {
			oTransport = this._hasLock(oTransports.transports);
		} else {
			oTransport = {
				transportId: ""
			};
		}

		return oTransport;
	};

	/**
	 * Returns whether the dialog to select a transport should be started.
	 * 
	 * @param {object} oTransports the available transports.
	 * @returns {boolean} <code>true</code>, if the LREP object is already locked in one of the transports, <code>false</code> otherwise.
	 * @private
	 */
	TransportSelection.prototype._checkDialog = function(oTransports) {
		if (oTransports) {
			if (oTransports.localonly || this._hasLock(oTransports.transports)) {
				return false;
			}
		}

		return true;
	};

	/**
	 * Returns whether the LREP object is already locked in one of the transports.
	 * 
	 * @param {array} aTransports the available transports.
	 * @returns {object} the transport, if the LREP object is already locked in one of the transports, <code>null</code> otherwise.
	 * @private
	 */
	TransportSelection.prototype._hasLock = function(aTransports) {
		var oTransport, len = aTransports.length;

		while (len--) {
			oTransport = aTransports[len];

			if (oTransport.locked) {
				return oTransport;
			}
		}

		return false;
	};

	return TransportSelection;
}, true);

}; // end of sap/ui/comp/transport/TransportSelection.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.valuehelpdialog.ValueHelpDialog') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.valuehelpdialog.ValueHelpDialog.
jQuery.sap.declare('sap.ui.comp.valuehelpdialog.ValueHelpDialog'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.MultiInput'); // unlisted dependency retained
jQuery.sap.require('sap.m.Token'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.format.NumberFormat'); // unlisted dependency retained
jQuery.sap.require('sap.m.VBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.HBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.ButtonType'); // unlisted dependency retained
jQuery.sap.require('sap.m.DialogRenderer'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/valuehelpdialog/ValueHelpDialog",['jquery.sap.global', 'sap/m/Dialog', 'sap/m/MessageBox', 'sap/m/MultiInput', 'sap/m/Token', 'sap/ui/comp/library', './ItemsCollection', 'sap/ui/core/Control', 'sap/ui/core/format/DateFormat', 'sap/ui/core/format/NumberFormat', 'sap/m/VBox', 'sap/m/HBox', 'sap/m/ButtonType', 'sap/ui/comp/util/FormatUtil', 'sap/m/DialogRenderer'],
	function(jQuery, Dialog, MessageBox, MultiInput, Token, library, ItemsCollection, Control, DateFormat, NumberFormat, VBox, HBox, ButtonType, FormatUtil, DialogRenderer) {
	"use strict";

	/**
	 * Constructor for a new valuehelpdialog/ValueHelpDialog.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * The ValueHelpDialog control can be used to implement a value help for an input field.
	 * @extends sap.m.Dialog
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.valuehelpdialog.ValueHelpDialog
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var ValueHelpDialog = Dialog.extend("sap.ui.comp.valuehelpdialog.ValueHelpDialog", /** @lends sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype */ { metadata : {

		library : "sap.ui.comp",
		properties : {
			/**
			 * Defines the value for the basic search field.
			 * The value is set into the basic search field of the filter bar used.
			 * @since 1.24
			 */
			basicSearchText : {type : "string", group : "Misc", defaultValue : null},

			/**
			 * Enables multi-selection in the table used.
			 * @since 1.24
			 */
			supportMultiselect : {type : "boolean", group : "Misc", defaultValue : true},

			/**
			 * Enables the ranges (conditions) feature in the dialog.
			 * @since 1.24
			 */
			supportRanges : {type : "boolean", group : "Misc", defaultValue : false},

			/**
			 * If this property is set to true, the value help dialog only supports the ranges (conditions) feature.
			 * @since 1.24
			 */
			supportRangesOnly : {type : "boolean", group : "Misc", defaultValue : false},

			/**
			 * Defines the key of the column used for the internal key handling. The value of the column is used for the token key and also to identify the row in the table.
			 * @since 1.24
			 */
			key : {type : "string", group : "Misc", defaultValue : null},

			/**
			 * Defines the list of additional keys of the column used for the internal key handling.
			 * @since 1.24
			 */
			keys : {type : "string[]", group : "Misc", defaultValue : null},

			/**
			 * Defines the key of the column used for the token text.
			 * @since 1.24
			 */
			descriptionKey : {type : "string", group : "Misc", defaultValue : null},

			/**
			 * Defines the maximum number of include ranges.
			 * @since 1.24
			 */
			maxIncludeRanges : {type : "string", group : "Misc", defaultValue : '-1'}, // TODO string -->int

			/**
			 * Defines the maximum number of exclude ranges.
			 * @since 1.24
			 */
			maxExcludeRanges : {type : "string", group : "Misc", defaultValue : '-1'},  // TODO string -->int

			/**
			 * Represents the display format of the range values. With the <code>displayFormat</code> value UpperCase, the entered value of the range (condition) is converted to uppercase letters.
			 * @since 1.24
			 */
			displayFormat : {type : "string", group : "Misc", defaultValue : null},

			/**
			 * Represents how the item token text should be displayed in ValueHelpDialog.
			 * Use one of the valid sap.ui.comp.smartfilterbar.ControlConfiguration.DISPLAYBEHAVIOUR values.
			 * @since 1.24
			 */
			tokenDisplayBehaviour : {type : "string", group : "Misc", defaultValue : null},

			/**
			 * Sets the dialog into a filter mode, which only shows ranges (conditions) and hides the tokens.
			 * @since 1.24
			 */
			filterMode : {type : "boolean", group : "Misc", defaultValue : false}
		},
		aggregations : {

			/**
			 *  Allows you to add a {@link sap.ui.comp.filterbar.FilterBar FilterBar} or {@link sap.ui.comp.smartfilterbar.SmartFilterBar SmartFilterBar} control to the value help dialog.
			 */
			filterBar : {type : "sap.ui.comp.filterbar.FilterBar", multiple : false}
		},
		events : {

			/**
			 * This event is fired when the OK button is pressed.
			 * @since 1.24
			 */
			ok : {
				parameters: {
					/**
					*  The array of tokens created or modified on the ValueHelpDialog.
				 	*/
					tokens: { type : "sap.m.Token[]" }
				}
			},

			/**
			 * This event is fired when the Cancel button is pressed.
			 * @since 1.24
			 */
			cancel : {},

			/**
			 * This event is fired when the user selects an item in the items table.
			 * The event will only be raised when the dialog gets a table instance from outside via setTable.
			 * @since 1.32
			 */
			selectionChange : {
				parameters: {
					/**
					*  The RowSelectionChange event parameter from the hosted table that contains the selected items.
				 	*/
					tableSelectionParams : { type : "object" },

					/**
					*  Returns an array of objects which represents all selected row tokens.
					*  The object contains the token key, the row object data from the model, and the information if the token is selected.
					*  <code>
					*  [{sKey, oRow, bSelect}, ...]
					*  </code>
				 	*/
					updateTokens : { type : "object[]" },

					/**
					*  Can be set to true to execute the default behaviour of the ValueHelpDialog.
				 	*/
					useDefault : { type : "boolean", defaultValue : false }
				}
			},

			/**
			 * This event is fired when the user removes one or multiple existing token(s) from the dialog.
			 * The event will only be raised when the dialog gets a table instance from outside via setTable.
			 * @since 1.32
			 */
			tokenRemove: {
				parameters: {
					/**
					*  The array of token keys that has been removed.
				 	*/
					tokenKeys : { type : "string[]" },

					/**
					*  Can be set to true to execute the default behaviour of ValueHelpDialog.
				 	*/
					useDefault : { type : "boolean", defaultValue : false }
				}

			},

			/**
			 * This event is fired when the table gets an update and all existing tokens must be selected in the table.
			 * The event will only be raised when the dialog gets a table instance from outside via setTable.
			 * @since 1.32
			 */
			updateSelection: {
				parameters: {
					/**
					*  The array of existing token keys for which the selection in the table has to be updated.
				 	*/
					tokenKeys : { type : "string[]" },

					/**
					*  Can be set to true to execute the default behavior of ValueHelpDialog.
				 	*/
					useDefault : { type : "boolean", defaultValue : false }
				}

			}
		}
	},
	  renderer: DialogRenderer.render
	});

	ValueHelpDialog.prototype.setSupportMultiselect = function(bEnabled) {
		this.setProperty("supportMultiselect", bEnabled);

		this._updatePropertySupportMultiselect(bEnabled);

		this._oTokenizerGrid.setVisible(bEnabled);
		this._oButtonOk.setVisible(bEnabled);
		return this;
	};

	ValueHelpDialog.prototype._updatePropertySupportMultiselect = function(bEnabled) {
		if (!this._oTable) {
			return;
		}

		if (!this._isPhone()) {
			if (this._oTable.setSelectionMode) {
				this._oTable.setSelectionMode(bEnabled ? sap.ui.table.SelectionMode.MultiToggle : sap.ui.table.SelectionMode.Single);
			}
		} else {
			if (this._oTable.setMode) {
				this._oTable.setMode(bEnabled ? sap.m.ListMode.MultiSelect : sap.m.ListMode.SingleSelectLeft);
			}
		}

		return this;
	};


	ValueHelpDialog.prototype.setSupportRanges = function(bEnabled) {
		this.setProperty("supportRanges", bEnabled);

		this._updateNavigationControl();

		return this;
	};


	ValueHelpDialog.prototype.setSupportRangesOnly = function(bEnabled) {
		this.setProperty("supportRangesOnly", bEnabled);

		this._updateNavigationControl();
		return this;
	};


	// Sets the Title of the dialog.
	// The value is used for the different titles which we display during runtime on the dialog header.
	// The dialog title changes depending on the content.
	ValueHelpDialog.prototype.setTitle = function(sTitle) {
		this.setProperty("title", sTitle);

		this._updateDlgTitle();
	};


	ValueHelpDialog.prototype.setFilterBar = function(oCtrl) {
		this.setAggregation("filterBar", oCtrl);

		var oGrid = this._oTableGrid;

		if (oGrid && oCtrl) {
			if (this._isPhone()) {
				if (this._oFilterBar) {
					// Remove the old filterbar.
					this._oVBox.removeItem(this._oFilterBar);
				}

			} else {
				if (this._oFilterBar) {
					// Remove the old filterbar.
					oGrid.removeContent(this._oFilterBar);
				}
			}

			this._oFilterBar = oCtrl;
			if (this._oFilterBar) {

				this._oFilterBar.addStyleClass("compVHSearch");

				if (this._isPhone()) {
					// Let the Search Field on a phone show the search icon.
					var oSearchField = sap.ui.getCore().byId(this._oFilterBar.getBasicSearch());
					if (oSearchField instanceof sap.m.SearchField) {
						oSearchField.setShowSearchButton(true);
						oSearchField.attachSearch( jQuery.proxy( function(oEvent) {
							if (oEvent.mParameters.refreshButtonPressed !== undefined) { // Workaround to ignore the remove icon click on the Search control.
								this.getFilterBar().search();
							}
						}, this));
					}
					this._oFilterBar.setShowGoOnFB(false);


					// Add the Collective Search as first item into the VBox.
					this._oColSearchBox.setLayoutData(new sap.m.FlexItemData({
						shrinkFactor: 0
					}));
					this._oVBox.insertItem( this._oColSearchBox, 0);

					// The Filterbar with the Basic Search is the second item.
					this._oFilterBar.setLayoutData(new sap.m.FlexItemData({
						shrinkFactor: 0
					}));
					this._oVBox.insertItem( this._oFilterBar, 1);

					// On the phone listen on the Search event to show the LIST_VIEW.
					this._oFilterBar.attachSearch(jQuery.proxy( function(oEvent) {
						this._updateView(sap.ui.comp.valuehelpdialog._ValueHelpViewMode.PHONE_LIST_VIEW);
					}, this));


					if (this._currentViewMode === sap.ui.comp.valuehelpdialog._ValueHelpViewMode.PHONE_LIST_VIEW) {
						// update the Filterbar states
						this._oFilterBar.setVisible(true);
						this._oFilterBar.setFilterBarExpanded(false);
						this._oFilterBar._handleVisibilityOfToolbar();

						var bShowAdvancedSearch = this._oFilterBar.getFilterGroupItems() && this._oFilterBar.getFilterGroupItems().length > 0;
						this._oAdvancedSearchLink.setVisible(bShowAdvancedSearch);
					}
				} else {
					// for Tablet and Desktop add the Filterbar into the mainGrid and place the CollectiveSearch inside the Filterbar.
					this._oFilterBar._setCollectiveSearch(this._oColSearchBox);
					oGrid.insertContent(this._oFilterBar, 0);
				}
			}

			// Try to fill the basic search text into the SmartFilterBar and set the initial Focus.
			if (this._oFilterBar._oBasicSearchField) {
				var oBasicSearchField = this._oFilterBar._oBasicSearchField;
				oBasicSearchField.setValue(this.getBasicSearchText());

				this.setInitialFocus(oBasicSearchField);
			}
		}
	};

	ValueHelpDialog.prototype.getFilterBar = function() {
		return this._oFilterBar;
	};

	ValueHelpDialog.prototype.setBasicSearchText = function(sText) {
		this.setProperty("basicSearchText", sText);

		if (this._oFilterBar && this._oFilterBar._oBasicSearchField) {
			this._oFilterBar._oBasicSearchField.setValue(sText);
		}
	};


	/**
	 * Sets the array of tokens. The sap.m.Tokens are added to the dialog tokenizer Selected Items or Excluded Items.
	 * Normal tokens are added to the Selected Items tokenizer only and are selected in the table.
	 *
	 * <code>
	 * new sap.m.Token({key: "0001", text:"SAP A.G. (0001)"});
	 * </code>
	 *
	 * Tokens with the extra data with value 'range' are handled as range tokens or exclude range tokens.
	 *
	 * <code>
	 * new sap.m.Token({key: "i1", text: "ID: a..z"}).data("range", { "exclude": false, "operation": sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.BT, "keyField": "CompanyCode", "value1": "a", "value2": "z"});
	 * </code>
	 *
	 * The selected items or range tokens are returned in the event parameters of the Ok event.
	 *
	 * @public
	 * @since 1.24
	 * @param {sap.m.Token[]} aTokens
	 * 							An array of token controls
	 */
	ValueHelpDialog.prototype.setTokens = function(aTokens) {
		if (aTokens.length) {
			var n = 0, sKey;
			for (var i = 0; i < aTokens.length; i++) {
				var token = aTokens[i];
				if (token.data("range")) {
					var range = token.data("range");
					sKey = token.getKey();
					if (!sKey) {
						sKey = "range_" + n;
						n++;
					}
					var theTokenText = this._getFormatedRangeTokenText(range.operation, range.value1, range.value2, range.exclude, range.keyField);
					this._addToken2Tokenizer(sKey, theTokenText, range.exclude ? this._oExcludedTokens : this._oSelectedTokens);

					this._oSelectedRanges[sKey] = range;
				} else {
					sKey = token.getKey();
					var sText = token.getText();
					var sLongKey = token.data("longKey");
					var oRowData = token.data("row");
					if (!sLongKey) {
						sLongKey = sKey;
					}
					this._oSelectedItems.add(sLongKey, oRowData ? oRowData : token.getText());

					this._oSelectedTokens.addToken(new Token({
						key: sLongKey,
						text: sText,
						tooltip: sText
					}));
				}
			}
		} else {
			this._oSelectedItems.removeAll();
			this._oSelectedRanges = {};
		}
	};

	ValueHelpDialog.prototype.open = function() {

		// take the current visibility of the title and button for the visibility of the colSearchBox
		this.bCollectiveSearchActive = this.oSelectionTitle.getVisible() && this.oSelectionButton.getVisible();
		if (this._oColSearchBox) {
			this._oColSearchBox.setVisible(this.bCollectiveSearchActive);
		}

		if (!this._isPhone()) {
			if (this.getSupportRangesOnly() || this.getFilterMode()) {
				this._updateView(sap.ui.comp.valuehelpdialog._ValueHelpViewMode.DESKTOP_CONDITIONS_VIEW);
			} else {
				if (!this._oTable) {
					this._createDefaultTable();
				}
			}

			// set the default dialog width for Tablet/Desktop
			this.setContentWidth(this._getDefaultContentWidth());
		} else {
			if (!this._oTable) {
				this._createDefaultTable();
			}
			this._updateView(sap.ui.comp.valuehelpdialog._ValueHelpViewMode.PHONE_MAIN_VIEW);
		}

		Dialog.prototype.open.apply(this);
	};

	/**
	 * Gives access to the internal table instance.
	 *
	 * @public
	 * @returns {object} the used table instance
	 * @since 1.28
	 */
	ValueHelpDialog.prototype.getTable = function() {
		if (!this._oTable) {
			this._createDefaultTable();
		}

		return this._oTable;
	};

	/**
	 * Sets the table used in the value help dialog. If not used, the dialog creates a sap.ui.table.Table or sap.m.Table instance internally.
	 *
	 * @public
	 * @since 1.32
	 * @param {object} aTable The used table control instance
	 */
	ValueHelpDialog.prototype.setTable = function( oTable) {
		if (oTable instanceof sap.ui.comp.smarttable.SmartTable) {
			this._oTable = oTable.getTable();
		} else {
			this._oTable = oTable;
		}
		this.theTable = this._oTable; // support old public theTable property for usage outside the class

		this._initializeTable();
		this._oTableGrid.addContent(oTable);
	};

	/**
	 * return the default ContentWidth for the dialog
	 *
	 * @private
	 * @returns {string} The width in px
	 */
	ValueHelpDialog.prototype._getDefaultContentWidth = function() {
		var nColumns = 0;
		if (this._oTable) {
			nColumns = this._oTable.getColumns().length;
		}
		var nWidth = Math.max(1080, nColumns * 130);
		return nWidth + "px";
	};

	/**
	 * Resets the table binding and changes the table NoDataText to "Please press Search Button".
	 *
	 * @private
	 * @since 1.24
	*/
	ValueHelpDialog.prototype.resetTableState = function() {
		if (this._oTable) {
			if (this._oTable.unbindRows) {
				this._oTable.unbindRows();
			}
			this._oTable.setNoDataText(this._oRb.getText("VALUEHELPDLG_TABLE_PRESSSEARCH"));
		}
	};

	/**
	 * Changes the table NoDataText to "Please press Search Button".
	 *
	 * @private
	 * @since 1.24
	 */
	ValueHelpDialog.prototype.TableStateSearchData = function() {
		if (this._oTable) {
			this._oTable.setNoDataText(this._oRb.getText("VALUEHELPDLG_TABLE_PRESSSEARCH"));
		}
	};

	/**
	 * Changes the table NoDataText to "No Data found!".
	 *
	 * @private
	 * @since 1.24
	 */
	ValueHelpDialog.prototype.TableStateDataFilled = function() {
		if (this._oTable) {
			this._oTable.setNoDataText(this._oRb.getText("VALUEHELPDLG_TABLE_NODATA"));
		}
	};

	/**
	 * Changes the table NoDataText to "Searching...".
	 *
	 * @private
	 * @since 1.28
	 */
	ValueHelpDialog.prototype.TableStateDataSearching = function() {
		if (this._oTable) {
			this._oTable.setNoDataText(this._oRb.getText("VALUEHELPDLG_TABLE_SEARCHING"));
		}
	};

	/**
	 * Initializes the control.
	 * @private
	 */
	ValueHelpDialog.prototype.init = function() {
		Dialog.prototype.init.apply(this);

		this._aIncludeRangeOperations = {};
		this._aExcludeRangeOperations = {};

		this.setStretch(this._isPhone());
		this.setResizable(!this._isPhone());
		this.setDraggable(!this._isPhone());

		this.bCollectiveSearchActive = false;

		// init the Dialog itself
		this.addStyleClass("compValueHelpDialog");

		// init some resources
		this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp");
		this._sTableTitle1 = this._oRb.getText("VALUEHELPDLG_TABLETITLE1");
		this._sTableTitle2 = this._oRb.getText("VALUEHELPDLG_TABLETITLE2");
		this._sTableTitleNoCount = this._oRb.getText("VALUEHELPDLG_TABLETITLENOCOUNT");

		this._currentViewMode = null; // sap.ui.comp.valuehelpdialog._ValueHelpViewMode
		this._oSelectedItems = new ItemsCollection();
		this._oSelectedRanges = {};

		this._createHeaderBar();

		this._createCollectiveSearch();

		this._createTokenizer();
		this._updateTokenizer();

		this._oVBox = new VBox( { fitContainer: true });
		this.addContent(this._oVBox);

		this._oTableGrid = new sap.ui.layout.Grid({
			width: "100%",
			defaultSpan: "L12 M12 S12",
			vSpacing: 0,
			hSpacing: 0,
			content: [ this._oFilterBar ]
		});

		this._oMainGrid = new sap.ui.layout.Grid({
			width: "100%",
			defaultSpan: "L12 M12 S12",
			vSpacing: 0,
			hSpacing: 0,
			content: [
				this._oTableGrid
			]
		});

		this._createNavigationControl();
		this._updateNavigationControl();

		this._oMainGrid.setLayoutData(new sap.m.FlexItemData({
			growFactor: 1,
			shrinkFactor: 0
		}));
		this._oVBox.addItem(this._oMainGrid);

		if (this.getMaxIncludeRanges() === "-1" && this.getMaxExcludeRanges() !== "0" && !this.getFilterMode()) {
			this._oVBox.addItem(this._oTokenizerGrid);
		}

		this._createFooterControls();


		// vertical scrolling of the dialog content is disabled to get the expected layout of the used VBox in the content.
		// scrolling itself is enabled  via css overflow-y: auto
		this.setVerticalScrolling(false);
		this.setHorizontalScrolling(false);

		// to support touch scrolling we have to set the event to marked, otherwise when using a sap.m.App touch events are not handled.
		if (!sap.ui.Device.system.desktop) {
			this._oVBox.attachBrowserEvent("touchmove", function(event) {
		        event.setMarked();
		    });
		}

		if (!this._isPhone()) {
			this._updateView(sap.ui.comp.valuehelpdialog._ValueHelpViewMode.DESKTOP_LIST_VIEW);
		}
	};


	/**
	 * Update the visible view of the dialog.
	 * The method is changing the visibility of the used controls to only show the required parts of the view.
	 *
	 * @private
	 * @param {sap.ui.comp.valuehelpdialog._ValueHelpViewMode} newViewMode View mode which should be shown
	 */
	ValueHelpDialog.prototype._updateView = function(newViewMode) {
		if (this._currentViewMode === newViewMode) {
			return;
		}

		switch (newViewMode) {
			case sap.ui.comp.valuehelpdialog._ValueHelpViewMode.DESKTOP_LIST_VIEW:
				this._validateRanges(jQuery.proxy(function() {
					// when valid show the Items Table
					this._oTokenizerGrid.setVisible(this.getSupportMultiselect());
					this._oMainGrid.removeAllContent();
					if (this._oTabBar && this._oTabBar.getSelectedKey() !== sap.ui.comp.valuehelpdialog._ValueHelpViewMode.DESKTOP_LIST_VIEW) {
						this._oTabBar.setSelectedKey(sap.ui.comp.valuehelpdialog._ValueHelpViewMode.DESKTOP_LIST_VIEW);
					}
					this._oMainGrid.addContent(this._oTableGrid);
					this._updateDlgTitle();
				}, this), jQuery.proxy(function() {
					// if not valid go back to the Ranges Tab
					this._oTabBar.setSelectedKey(sap.ui.comp.valuehelpdialog._ValueHelpViewMode.DESKTOP_CONDITIONS_VIEW);
					this._updateView(sap.ui.comp.valuehelpdialog._ValueHelpViewMode.DESKTOP_CONDITIONS_VIEW);
				}, this));
				break;

			case sap.ui.comp.valuehelpdialog._ValueHelpViewMode.DESKTOP_CONDITIONS_VIEW:

				if (this.getSupportRanges()) {
					this.bCollectiveSearchActive = this.oSelectionTitle.getVisible() && this.oSelectionButton.getVisible();
					this._oMainGrid.removeAllContent();
					if (this._oTabBar && this._oTabBar.getSelectedKey() !== sap.ui.comp.valuehelpdialog._ValueHelpViewMode.DESKTOP_CONDITIONS_VIEW) {
						this._oTabBar.setSelectedKey(sap.ui.comp.valuehelpdialog._ValueHelpViewMode.DESKTOP_CONDITIONS_VIEW);
					}
					this._oMainGrid.addContent(this._getRanges());
					this._oButtonOk.setVisible(this.getSupportRangesOnly() || this.getSupportMultiselect());

					this._oTokenizerGrid.setVisible(this.getSupportMultiselect());
					if (!(this.getMaxIncludeRanges() === "-1" && this.getMaxExcludeRanges() !== "0" && !this.getFilterMode())) {
						this._oTokenizerGrid.setVisible(false);
					}
				}
				break;

			case sap.ui.comp.valuehelpdialog._ValueHelpViewMode.PHONE_MAIN_VIEW:
				this.setVerticalScrolling(false);

				this._oColSearchBox.setVisible(false);
				this._oMainListMenu.setVisible(true);
				this._updateNavigationControl();
				this._oAdvancedSearchLink.setVisible(false);
				if (this._oFilterBar) {
					this._oFilterBar.setVisible(false); this._oFilterBar.setFilterBarExpanded(false);
				}
				this._oTable.setVisible(false);

				this._oTokenizerGrid.setVisible(this.getSupportMultiselect());
				if (!(this.getMaxIncludeRanges() === "-1" && this.getMaxExcludeRanges() !== "0" && !this.getFilterMode())) {
					this._oTokenizerGrid.setVisible(false);
				}

				if (this._oRanges) {
					this._oRanges.setVisible(false);
				}

				this._oButtonGo.setVisible(false);
				this._oButtonClear.setVisible(false);
				this._oButtonOk.setVisible(true);
				this._oButtonCancel.setVisible(true);
				this._oBackButton.setVisible(false);

				this._bNoneMainView = false;
				if (!this._oTokenizerGrid.getVisible() && !(this._oSelectItemLI.getVisible() && this._oDefineConditionsLI.getVisible())) {
					this._bNoneMainView = true;  // used to not show the backbutton on the list and condition view
					if (this._oSelectItemLI.getVisible()) {
						// make the Selection Table visible by default
						this._updateView(sap.ui.comp.valuehelpdialog._ValueHelpViewMode.PHONE_LIST_VIEW);
					}
					if (this._oDefineConditionsLI.getVisible()) {
						// make the condition screen visible by default
						this._updateView(sap.ui.comp.valuehelpdialog._ValueHelpViewMode.PHONE_CONDITIONS_VIEW);
					}
					return;
				}

				break;

			case sap.ui.comp.valuehelpdialog._ValueHelpViewMode.PHONE_LIST_VIEW:
				this.setVerticalScrolling(true);

				this._oColSearchBox.setVisible(this.bCollectiveSearchActive);
				this._oMainListMenu.setVisible(false);
				var fUpdateAdvancedSearchLink = function() {
					var bShowAdvancedSearch = this._oFilterBar && this._oFilterBar.getFilterGroupItems() && this._oFilterBar.getFilterGroupItems().length > 0;
					this._oAdvancedSearchLink.setVisible(bShowAdvancedSearch);
					this._oFilterBar.setShowGoButton(!(this._oFilterBar && this._oFilterBar.getBasicSearch()));
				}.bind(this);
				fUpdateAdvancedSearchLink();
				if (this._oFilterBar && this._oFilterBar.attachInitialise) {
					this._oFilterBar.detachInitialise(fUpdateAdvancedSearchLink);
					this._oFilterBar.attachInitialise(fUpdateAdvancedSearchLink);
				}

				if (this._oFilterBar) {
					this._oFilterBar.setVisible(true); this._oFilterBar.setFilterBarExpanded(false);
				}
				this._oTable.setVisible(true);
				this._oTokenizerGrid.setVisible(false);
				if (this._oRanges) {
					this._oRanges.setVisible(false);
				}

				this._oButtonGo.setVisible(false);
				this._oButtonClear.setVisible(false);
				this._oButtonOk.setVisible(this.getSupportMultiselect());
				this._oButtonCancel.setVisible(true);
				this._oBackButton.setVisible(!this._bNoneMainView);
				break;

			case sap.ui.comp.valuehelpdialog._ValueHelpViewMode.PHONE_SEARCH_VIEW:
				this.setVerticalScrolling(true);

				this._oColSearchBox.setVisible(false);
				this._oMainListMenu.setVisible(false);
				if (this._oFilterBar) {
					this._oFilterBar.setVisible(true); this._oFilterBar.setFilterBarExpanded(true);
				}
				this._oAdvancedSearchLink.setVisible(false);
				this._oTable.setVisible(false);
				this._oTokenizerGrid.setVisible(false);
				if (this._oRanges) {
					this._oRanges.setVisible(false);
				}

				this._oButtonGo.setVisible(true);
				this._oButtonClear.setVisible(true);
				this._oButtonOk.setVisible(false);
				this._oButtonCancel.setVisible(true);
				this._oBackButton.setVisible(true);
				break;

			case sap.ui.comp.valuehelpdialog._ValueHelpViewMode.PHONE_CONDITIONS_VIEW:
				this.setVerticalScrolling(true);

				this._oColSearchBox.setVisible(false);
				this._oMainListMenu.setVisible(false);
				if (this._oFilterBar) {
					this._oFilterBar.setVisible(false);
				}
				this._oAdvancedSearchLink.setVisible(false);
				this._oTable.setVisible(false);
				this._oTokenizerGrid.setVisible(false);
				if (!this._oRanges) {
					this._oMainGrid.addContent(this._getRanges());
				}
				this._oRanges.setVisible(true);

				this._oButtonGo.setVisible(false);
				this._oButtonClear.setVisible(false);
				this._oButtonOk.setVisible(true);
				this._oButtonCancel.setVisible(true);
				this._oBackButton.setVisible(!this._bNoneMainView);
				break;

			default:
				break;
		}

		if (this._oMainListMenu && this._oVBox) {

			// check if the Toolbar of the FilterBar is empty and make the toolbar invisible
			if (this._oFilterBar) {
				this._oFilterBar._handleVisibilityOfToolbar();
			}

			this._oVBox.rerender();
		}

		this._currentViewMode = newViewMode;
		this._updateDlgTitle();
	};

	/**
	 * select or deselect the row in the table with the given key
	 *
	 * @private
	 * @param {string} sKey the key of the row
	 * @param {boolean} bSelect specifies if the row should be selected or deselected
	 */
	ValueHelpDialog.prototype._changeTableRowSelectionForKey = function(sKey, bSelect) {
		var i;
		var oTable = this._oTable;

		this._bIgnoreSelectionChange = true;

		if (sap.ui.table.Table && oTable instanceof sap.ui.table.Table) {
			var rows = oTable.getBinding("rows");
			if (rows) {
				if (rows.aKeys) {
					for (i = 0; i < rows.aKeys.length; i++) {
						if (rows.aKeys[i] === sKey) {
							if (bSelect) {
								oTable.addSelectionInterval(i, i);
							} else {
								oTable.removeSelectionInterval(i, i);
							}
							break;
						}
					}
				} else {
					this.oRows = oTable.getBinding("rows");
					if (this.oRows.aIndices) {
						for (i = 0; i < this.oRows.aIndices.length; i++) {
							var oContext = oTable.getContextByIndex(this.oRows.aIndices[i]);
							if (oContext) {
								var oRow = oContext.getObject();
								if (oRow[this.getKey()] === sKey) {
									if (bSelect) {
										oTable.addSelectionInterval(i, i);
									} else {
										oTable.removeSelectionInterval(i, i);
									}
									break;
								}
							}
						}
					}
				}
			}
		} else {

			// Handle selection update of the m.table
			for (i = 0; i < oTable.getItems().length; i++) {
				var oColListItem = oTable.getItems()[i];
				var oRowData = oColListItem.getBindingContext().getObject();
				if (oRowData[this.getKey()] === sKey) {
					oTable.setSelectedItem(oColListItem, bSelect);
					break;
				}
			}

		}

		this._bIgnoreSelectionChange = false;

	};

	/**
	 * Updates the selection of rows in the table. This function must be called after a first binding or binding update of the table.
	 * It will set a table row as selected if a token for this row exists.
	 *
	 * @public
	 * @since 1.24
	*/
	ValueHelpDialog.prototype.update = function() {
		var i, j, oRow, oContext;
		var aItems = this._oSelectedItems.getItems();
		var eventArgs = {
			tokenKeys: aItems,
			useDefault: false
		};

		this._bIgnoreSelectionChange = true;

		if (this._hasListeners("updateSelection")) {
			this.fireUpdateSelection(eventArgs);

//			if (eventArgs.useDefault) {
//				sap.m.MessageToast.show("useDefault");
//			}

		} else {
			eventArgs.useDefault = true;
		}

		if (eventArgs.useDefault) {
			if (sap.ui.table.Table && this._oTable instanceof sap.ui.table.Table) {

				this.oRows = this._oTable.getBinding("rows");
				this._oTable.clearSelection();

				if (this.oRows.aKeys) {
					var aKeys = this.getKeys();
					var sRowKeyPartPrefix = aKeys && aKeys.length > 1 ? this.getKey() + "=" : "";

					// in case of an oDataModel binding the aKeys exist and the row will be found via the keys.
					for (j = 0; j < aItems.length; j++) {
						var sKey = aItems[j];
						var sRowKeyPart = sRowKeyPartPrefix + "'" + sKey + "'";

						for (i = 0; i < this.oRows.aKeys.length; i++) {
							var sRowKey = this.oRows.aKeys[i];
							var bIsRow = sRowKey === sKey;
							if (bIsRow || // either the rowKey is equal the token key or we search if the main key with the value is part of the rowKey
								sRowKey.indexOf(sRowKeyPart) >= 0) {

								if (!bIsRow) { // in this case we will update the old key and use the longKey from the rows
									this._oSelectedItems.remove(sKey); // remove the old  key
									// and update the Token key
									var token = this._getTokenByKey(sKey, this._oSelectedTokens);
									if (token) {
										token.setKey(sRowKey);
									}
								}

								// update the row data in the selectedItems List
								oContext = this._oTable.getContextByIndex(i);
								if (oContext) {
									oRow = oContext.getObject();
									this._oSelectedItems.add(sRowKey, oRow);
								}

								// make the row selected
								this._oTable.addSelectionInterval(i, i);
								break;
							}
						}
					}
				} else {
					if (this.oRows.aIndices) {
						this._oTable.clearSelection();

						for (j = 0; j < aItems.length; j++) {
							var key = aItems[j];
							for (i = 0; i < this.oRows.aIndices.length; i++) {
								oContext = this._oTable.getContextByIndex(this.oRows.aIndices[i]);
								if (oContext) {
									oRow = oContext.getObject();
									if (oRow[this.getKey()] === key) {
										this._oSelectedItems.add(oRow[this.getKey()], oRow);
										this._oTable.addSelectionInterval(i, i);
										break;
									}
								}
							}
						}
					}
				}

			} else {
				// Handle selection update of the m.table
				var oTable = this._oTable;
				for (j = 0; j < aItems.length; j++) {
					var sKey = aItems[j];
					for (i = 0; i < oTable.getItems().length; i++) {
						var oColListItem = oTable.getItems()[i];
						var oRowData = oColListItem.getBindingContext().getObject();
						if (oRowData[this.getKey()] === sKey) {
							oTable.setSelectedItem(oColListItem, true);
							break;
						}
					}
				}

			}
		}

		this._bIgnoreSelectionChange = false;

		this._updateTitles();
	};

	/**
	 * Create the header bar, the controls for the header and adds it into the custom header.
	 *
	 * @private
	 */
	ValueHelpDialog.prototype._createHeaderBar = function() {
		this._oTitle = new sap.m.Text({
			wrapping: false
		}).addStyleClass("compVHTitleText").unbindText(); // Text is not set via binding, but by calling setText

		var oBackButton = null;
		if (this._isPhone()) {
			oBackButton = new sap.m.Button({
				visible: false,
				type: ButtonType.Back,
				press:  jQuery.proxy( function(oEvent) {
					if (this._currentViewMode === sap.ui.comp.valuehelpdialog._ValueHelpViewMode.PHONE_SEARCH_VIEW) {
						this._updateView(sap.ui.comp.valuehelpdialog._ValueHelpViewMode.PHONE_LIST_VIEW);
					} else {
						this._updateView(sap.ui.comp.valuehelpdialog._ValueHelpViewMode.PHONE_MAIN_VIEW);
					}
				}, this)
			});

			this._oBackButton = oBackButton;
		}

		this.setCustomHeader(new sap.m.Bar({
			contentLeft: oBackButton,
			contentMiddle: this._oTitle
		}));
	};


	/**
	 * Creates the collective search elements which are placed beside the filter bar.
	 *
	 * @private
	 */
	ValueHelpDialog.prototype._createCollectiveSearch = function() {
		// the oSelectionText and oSelectionButton are accessed outside the dialog!!!
		this.oSelectionTitle = new sap.m.Text({
			visible: false,
			wrapping: false
		}).addStyleClass("compVHColSearchText");

		this.oSelectionButton = new sap.m.Button({
			icon: "sap-icon://arrow-down",
			type: sap.m.ButtonType.Transparent,
			visible: false
		}).addStyleClass("compVHColSearchBtn");

		this._oColSearchBox = new HBox( {
			fitContainer: true,
			visible: this.oSelectionButton.getVisible(),
			items: [this.oSelectionTitle, this.oSelectionButton]
		});
	};

	/**
	 * Creates the footer buttons.
	 *
	 * @private
	 */
	ValueHelpDialog.prototype._createFooterControls = function() {
		this._oButtonOk = new sap.m.Button({
			text: this._oRb.getText("VALUEHELPDLG_OK"),
			press: jQuery.proxy(this._onCloseAndTakeOverValues, this),
			visible: this.getSupportMultiselect(),
			layoutData: new sap.m.OverflowToolbarLayoutData({priority: sap.m.OverflowToolbarPriority.NeverOverflow})
		});

		this._oButtonCancel = new sap.m.Button({
			text: this._oRb.getText("VALUEHELPDLG_CANCEL"),
			press: jQuery.proxy(this._onCancel, this),
			layoutData: new sap.m.OverflowToolbarLayoutData({priority: sap.m.OverflowToolbarPriority.NeverOverflow})
		});

		if (this._isPhone()) {
			this._oButtonGo = new sap.m.Button({
				text: this._oRb.getText("VALUEHELPDLG_GO"),
				type: sap.m.ButtonType.Emphasized,
				press: jQuery.proxy(this._onGo, this),
				visible: false,
				layoutData: new sap.m.OverflowToolbarLayoutData({priority: sap.m.OverflowToolbarPriority.NeverOverflow})
			});

			this._oButtonClear = new sap.m.Button({
				text: this._oRb.getText("VALUEHELPDLG_CLEAR"),
				press: jQuery.proxy(this._onClear, this),
				visible: false,
				layoutData: new sap.m.OverflowToolbarLayoutData({priority: sap.m.OverflowToolbarPriority.NeverOverflow})
			});

			this.addButton(this._oButtonGo);
			this.addButton(this._oButtonClear);
		}
		this.addButton(this._oButtonOk);
		this.addButton(this._oButtonCancel);
	};

	/**
	 * Creates the tokenizer part of the dialog.
	 *
	 * @private
	 * @returns {sap.ui.layout.Grid} with all elements
	 */
	ValueHelpDialog.prototype._createTokenizer = function() {
		if (this._oTokenizerGrid) {
			return this._oTokenizerGrid;
		}

		this._oSelectedTokenTitle = new sap.m.Text().addStyleClass("compVHSelectedItemsText");

		this._oSelectedTokens = new sap.m.Tokenizer({
			tokenChange: jQuery.proxy( function(oControlEvent) {
				if (this._ignoreRemoveToken) {
					return;
				}

				if (oControlEvent.getParameter("type") === sap.m.MultiInput.TokenChangeType.TokensChanged) {
					var aRemovedTokens = oControlEvent.getParameter("removedTokens");
					var aTokenKeys = [];
					var aRangeTokenKeys = [];

					for ( var j = 0; j < aRemovedTokens.length; j++) {
						var oToken = aRemovedTokens[j];
						var sKey = oToken.getKey();

						if (this._oSelectedRanges && this._oSelectedRanges[sKey]) {
							aRangeTokenKeys.push(sKey);
						} else {
							aTokenKeys.push(sKey);

							// remove single selected item
							this._oSelectedItems.remove(sKey);
							this._removeTokenFromTokenizer(sKey, this._oSelectedTokens);
						}
					}

					// remove range tokens
					this._removeRangeByKey(aRangeTokenKeys, false);
					this._updateTitles();

					var eventArgs = {
						tokenKeys: aTokenKeys,
						useDefault: false
					};

					if (this._hasListeners("tokenRemove")) {
						this._bIgnoreSelectionChange = true;
						this.fireTokenRemove(eventArgs);
						this._bIgnoreSelectionChange = false;

//						if (eventArgs.useDefault) {
//							sap.m.MessageToast.show("useDefault");
//						}

					} else {
						eventArgs.useDefault = true;
					}

					if (eventArgs.useDefault) {
						aTokenKeys.forEach(jQuery.proxy(function(sTokenKey) {
							this._changeTableRowSelectionForKey(sTokenKey, false);
						}, this));
					}

					// try to set the focus to other token - Workaround because the Tokenizer does not set the focus to other token
					if (aRemovedTokens.length === 1) {
						setTimeout( jQuery.proxy( function() {
							if (this._oSelectedTokens.getTokens()) {
								var i = this._oSelectedTokens.getTokens().length - 1;
								if (i >= 0) {
									this._oSelectedTokens.getTokens()[i].focus();
								}
							}
						}, this));
					}

					this._updateTitles();
				}

			}, this)
		}).addStyleClass("compVHTokensDiv");

		// this "remove all" button is a workaround and should be part of the Tokenizer itself
		this._oRemoveAllSelectedItemsBtn = new sap.m.Button({
			type: sap.m.ButtonType.Transparent,
			icon: sap.ui.core.IconPool.getIconURI("sys-cancel"),
			tooltip: this._oRb.getText("VALUEHELPVALDLG_REMOVETOKENS_TOOLTIP"),
			press: jQuery.proxy( function() {
				this._oSelectedTokens.destroyTokens();

				this._removeRangeByKey(Object.keys( this._oSelectedRanges), false);

				this._oSelectedItems.removeAll();
				this._bIgnoreSelectionChange = true;
				if (this._oTable && this._oTable.clearSelection) {
					this._oTable.clearSelection();
				}
				if (this._oTable && this._oTable.removeSelections) {
					this._oTable.removeSelections();
				}
				this._bIgnoreSelectionChange = false;

				this._updateTitles();
				this._onResize();
			}, this)
		}).addStyleClass("compVHRemoveAllBtn");

		var oHContainer1 = new sap.ui.layout.HorizontalLayout({
			content: [
				this._oSelectedTokens, this._oRemoveAllSelectedItemsBtn
			]
		}).addStyleClass("compVHTokenizerHLayout");

		this._oIncludeTokenGrid = new sap.ui.layout.Grid({
			width: "100%",
			defaultSpan: "L12 M12 S12",
			hSpacing: 0,
			vSpacing: 0,
			content: [
				this._oSelectedTokenTitle, oHContainer1
			]
		});

		this._oExcludedTokenTitle = new sap.m.Text().addStyleClass("compVHSelectedItemsText");

		this._oExcludedTokens = new sap.m.Tokenizer({
			tokenChange: jQuery.proxy( function(oControlEvent) {
				if (this._ignoreRemoveToken) {
					return;
				}

				if (oControlEvent.getParameter("type") === sap.m.MultiInput.TokenChangeType.TokensChanged) {
					var aRemovedTokens = oControlEvent.getParameter("removedTokens");
					var aTokenKeys = [];

					for ( var j = 0; j < aRemovedTokens.length; j++) {
						var oToken = aRemovedTokens[j];
						var sKey = oToken.getKey();
						if (this._oSelectedRanges && this._oSelectedRanges[sKey]) {
							aTokenKeys.push(sKey);
						}
					}

					// remove range
					this._removeRangeByKey(aTokenKeys, true);
					this._updateTitles();
				}
			}, this)
		}).addStyleClass("compVHTokensDiv");

		// this "remove all" button is a workaround and should be part of the Tokenizer itself
		this._oRemoveAllExcludeItemsBtn = new sap.m.Button({
			type: sap.m.ButtonType.Transparent,
			icon: sap.ui.core.IconPool.getIconURI("sys-cancel"),
			tooltip: this._oRb.getText("VALUEHELPVALDLG_REMOVETOKENS_TOOLTIP"),
			press: jQuery.proxy( function() {
				this._oExcludedTokens.destroyTokens();

				this._removeRangeByKey(Object.keys( this._oSelectedRanges), true);

				this._updateTitles();
				this._onResize();
			}, this)
		}).addStyleClass("compVHRemoveAllBtn");

		var oHContainer2 = new sap.ui.layout.HorizontalLayout({
			content: [
				this._oExcludedTokens, this._oRemoveAllExcludeItemsBtn
			]
		}).addStyleClass("compVHTokenizerHLayout");

		this._oExcludeTokenGrid = new sap.ui.layout.Grid({
			width: "100%",
			defaultSpan: "L12 M12 S12",
			hSpacing: 0,
			vSpacing: 0,
			content: [
				this._oExcludedTokenTitle, oHContainer2
			]
		});

		// only on tablet and desktop we use the expandable panel
		this._oTokenizerPanel = new sap.m.Panel({
			expanded: sap.ui.Device.system.desktop,
			expandable: true, //this._isPhone() ? false : true,
			expandAnimation: true,
			headerText: "",
			width: "auto",
			content: [this._oIncludeTokenGrid, this._oExcludeTokenGrid],
			expand: jQuery.proxy(function (oEvent) {
				this._updateTokenizer();

				var that = this;
				setTimeout(function() {
					that._onResize();
				}, 100);

				if (oEvent.mParameters.expand && !(this._oTable instanceof sap.m.Table)) {
					// when we open the tokens scroll the dialog content to the end
					var sId = "#" + this.getId() + "-scrollCont";
					var oScrollDiv = this.$().find(sId);
					if (oScrollDiv && oScrollDiv.scrollTop) {
						oScrollDiv.stop().animate({
							  scrollTop: "1000" //oScrollDiv.prop("scrollHeight") - oScrollDiv.height()
						}, 1000);
					}
				}
			}, this)
		}).addStyleClass("compVHBackgroundTransparent").addStyleClass("compVHTokensPanel");

		if (this._isPhone()) {
			//workaround to get a vertical layout of the Tokens in the tokenizer
			this._oSelectedTokens.addStyleClass("sapMTokenizerMultiLine");
			this._oExcludedTokens.addStyleClass("sapMTokenizerMultiLine");
		}

		this._oTokenizerGrid = new sap.ui.layout.Grid({
			width: "100%",
			defaultSpan: "L12 M12 S12",
			hSpacing: 0,
			vSpacing: 0,
			content: this._oTokenizerPanel
		}).addStyleClass("compVHDarkBackground");

		return this._oTokenizerGrid;
	};

	/**
	 * Add/Modify a token in a tokenizer control.
	 *
	 * @private
	 * @param {string} sKey of the token
	 * @param {string} sText the token text
	 * @param {sap.m.Tokenizer} oTokenizer the Tokenizer which contain the token
	 */
	ValueHelpDialog.prototype._addToken2Tokenizer = function(sKey, sText, oTokenizer) {
		var token = this._getTokenByKey(sKey, oTokenizer);

		var sTooltip = (typeof sText === "string") ? sText : "";

		if (token) {
			// update existing token
			token.setText(sText);
			token.setTooltip(sTooltip);
		} else {
			// create a new token
			oTokenizer.addToken(new Token({
				key: sKey,
				text: sText,
				tooltip: sTooltip
			}));
			this._updateTokenizer();
		}
	};

	/**
	 * Search a token by key in the given tokenizer.
	 *
	 * @private
	 * @param {string} sKey of the token
	 * @param {sap.m.Tokenizer} oTokenizer the Tokenizer which contain the token
	 * @returns {sap.m.Token} the found token instance or null
	 */
	ValueHelpDialog.prototype._getTokenByKey = function(sKey, oTokenizer) {
		var aTokens = oTokenizer.getTokens();
		for (var i = 0; i < aTokens.length; i++) {
			var token = aTokens[i];
			if (token.getKey() === sKey) {
				return token;
			}
		}
		return null;
	};

	/**
	 * Removes a token from the selected or excluded tokenizer.
	 *
	 * @private
	 * @param {string} sKey of the token
	 */
	ValueHelpDialog.prototype._removeToken = function(sKey) {
		if (!this._removeTokenFromTokenizer(sKey, this._oSelectedTokens)) {
			this._removeTokenFromTokenizer(sKey, this._oExcludedTokens);
		}
	};

	/**
	 * Removes a token from a tokenizer.
	 *
	 * @private
	 * @param {string} sKey of the token
	 * @param {sap.m.Tokenizer} oTokenizer the Tokenizer which contain the token
	 * @returns {boolean} true when the token hase been foudna removed, else false
	 */
	ValueHelpDialog.prototype._removeTokenFromTokenizer = function(sKey, oTokenizer) {
		var token = this._getTokenByKey(sKey, oTokenizer);
		if (token) {
			this._ignoreRemoveToken = true;
			oTokenizer.removeToken(token);
			this._ignoreRemoveToken = false;
			this._updateTokenizer();
			return true;
		}
		return false;
	};

	/**
	 * Updating the tokenizer title and RemoveAll buttons.
	 *
	 * @private
	 */
	ValueHelpDialog.prototype._updateTokenizer = function() {
		var bExpanded = false;
		if (this._oTokenizerPanel) {
			bExpanded = this._oTokenizerPanel.getExpanded();
			this._oSelectedTokenTitle.setVisible(false);
		}

		var n1 = this._oSelectedTokens.getTokens().length;
		var n2 = this._oExcludedTokens.getTokens().length;

		var sSelectedItemsTitle = this._oRb.getText("VALUEHELPDLG_SELECTEDITEMS");
		var sNoneSelectedItemsTitle = this._oRb.getText("VALUEHELPDLG_NONESELECTEDITEMS");

		var sSelectedItemsText = sSelectedItemsTitle.replace("{0}", n1.toString());
		var sExcludedItemsText = this._oRb.getText("VALUEHELPDLG_EXCLUDEDITEMS", n2.toString());
		var sText = n1 === 0 ? sNoneSelectedItemsTitle : sSelectedItemsText;

		if (this._oTokenizerPanel) {
			if (!bExpanded) {
				if (this._isPhone()) {
					sSelectedItemsText = this._oRb.getText("VALUEHELPDLG_SELECTEDITEMS_SHORT", n1.toString());
					sExcludedItemsText = this._oRb.getText("VALUEHELPDLG_EXCLUDEDITEMS_SHORT", n2.toString());
				}
				sText = "";
				if (n1 !== 0) { sText = sSelectedItemsText; }
				if (n2 !== 0) { sText += (n1 !== 0 ? " / " : "") + sExcludedItemsText; }
				if (sText === "") { sText = sNoneSelectedItemsTitle; }
			} else {
				if (n1 === 0 && n2 !== 0) {
					sText = sExcludedItemsText;
					sExcludedItemsText = "";
				}
			}
			this._oTokenizerPanel.setHeaderText(sText);
		} else {
			this._oSelectedTokenTitle.setText(sText);
		}
		this._oRemoveAllSelectedItemsBtn.setEnabled(n1 !== 0);

		this._oExcludedTokenTitle.setText(sExcludedItemsText);


		if (n1 === 0 && n2 !== 0) {
			// hide all when only exclude items exist
			this._oIncludeTokenGrid.addStyleClass("displayNone");
			if (!this._isPhone()) {
				this._oExcludedTokenTitle.addStyleClass("displayNone");
			}
		}else {
			this._oIncludeTokenGrid.removeStyleClass("displayNone");
			this._oExcludedTokenTitle.removeStyleClass("displayNone");
		}

		if (n2 === 0) {
			this._oExcludeTokenGrid.addStyleClass("displayNone");
		} else {
			this._oExcludeTokenGrid.removeStyleClass("displayNone");
		}
	};


	/**
	 * Create the TabBar or on Phone the ListItems as navigation control.
	 *
	 * @private
	 */
	ValueHelpDialog.prototype._createNavigationControl = function() {
		if (!this._isPhone()) {
			this._oTabBar = new sap.m.IconTabBar({
				upperCase: true,
				expandable: false,
				items: [
					new sap.m.IconTabFilter({
						visible: true,
						text: this._oRb.getText("VALUEHELPDLG_ITEMSTABLE"),
						key: sap.ui.comp.valuehelpdialog._ValueHelpViewMode.DESKTOP_LIST_VIEW
					}),
					new sap.m.IconTabFilter({
						visible: true,
						text: this._oRb.getText("VALUEHELPDLG_RANGES"),
						key: sap.ui.comp.valuehelpdialog._ValueHelpViewMode.DESKTOP_CONDITIONS_VIEW
					})
				],
				select: jQuery.proxy( function(oControlEvent) {
					this._updateView(oControlEvent.getParameters().key);
				}, this)
			});

			this._oTabBar.setLayoutData(new sap.m.FlexItemData({
				shrinkFactor: 0
			}));
			this._oVBox.addItem(this._oTabBar);

		} else {

			this._oSelectItemLI = new sap.m.StandardListItem({
				type: sap.m.ListType.Navigation,
			    title: this._oRb.getText("VALUEHELPDLG_ITEMSTABLE")
			}).data("key", sap.ui.comp.valuehelpdialog._ValueHelpViewMode.PHONE_LIST_VIEW);

			this._oDefineConditionsLI = new sap.m.StandardListItem({
				type: sap.m.ListType.Navigation,
				title: this._oRb.getText("VALUEHELPDLG_RANGES")
			}).data("key", sap.ui.comp.valuehelpdialog._ValueHelpViewMode.PHONE_CONDITIONS_VIEW);

			this._oMainListMenu = new sap.m.List({
				mode: sap.m.ListMode.None,
				items: [this._oSelectItemLI, this._oDefineConditionsLI],
				itemPress:  jQuery.proxy( function(oEvent) {
					if (oEvent) {
						this._updateView(oEvent.mParameters.listItem.data("key"));
					}
				}, this)
			});

			this._oMainListMenu.setLayoutData(new sap.m.FlexItemData({
				shrinkFactor: 0
			}));
			this._oVBox.addItem(this._oMainListMenu);


			this._oAdvancedSearchLink = new sap.m.Link(sap.ui.comp.valuehelpdialog._ValueHelpViewMode.PHONE_SEARCH_VIEW, {
				text: this._oRb.getText("VALUEHELPDLG_ADVANCEDSEARCH"),
				press: jQuery.proxy(function() {
					this._updateView(sap.ui.comp.valuehelpdialog._ValueHelpViewMode.PHONE_SEARCH_VIEW);
				}, this)
			}).addStyleClass("compVHAdvancedSearchLink");

			this._oAdvancedSearchLink.setLayoutData(new sap.m.FlexItemData({
				shrinkFactor: 0
			}));
			this._oVBox.addItem(this._oAdvancedSearchLink);
		}
	};


	/**
	 * Update the TabBar or on Phone the Listitems.
	 *
	 * @private
	 */
	ValueHelpDialog.prototype._updateNavigationControl = function() {
		var bListTabVisible = !this.getSupportRangesOnly();
		var bRangesTabVisible = this.getSupportRangesOnly() || this.getSupportRanges();

		if (this._oTabBar) {

			var aTabItems = this._oTabBar.getItems();
			aTabItems[0].setVisible(bListTabVisible );
			aTabItems[1].setVisible(bRangesTabVisible);

			this._oTabBar.setVisible(bListTabVisible && bRangesTabVisible);
			this._updateDlgTitle();
		}

		if (this._oMainListMenu) {
			this._oSelectItemLI.setVisible(bListTabVisible);
			this._oDefineConditionsLI.setVisible(bRangesTabVisible);
		}

	};



    /**
	 * Remove a single/multiple range(s) from the UI and the internal selectedRanges list.
	 *
	 * @private
	 * @param {string|array} single or multiple sKey of the range
	 * @param {boolean} isExclude specifies if the removed range must be an included or excluded range
	 */
	ValueHelpDialog.prototype._removeRangeByKey = function(sKey, isExclude) {
		var aKeys = sKey;

		if (typeof aKeys === "string") {
			aKeys = [ aKeys ];
		}

		aKeys.forEach(function(sKey, index, aKeys) {
			var range = this._oSelectedRanges[sKey];
			if (range.exclude === isExclude) {
				if (!range._oGrid) {
					delete this._oSelectedRanges[sKey];

					if (this._oFilterPanel) {
						var oConditionPanel =  range.exclude ? this._oFilterPanel._oExcludeFilterPanel : this._oFilterPanel._oIncludeFilterPanel;

						if (aKeys.length == 1) {
							// only in case  of a single key we remove the condition
							oConditionPanel.removeCondition(sKey);
						} else {
							// to make it faster we only remove the key from the internal oConditionMap and later make a refresh on the conditionPanel
							oConditionPanel._removeConditionFromMap(sKey);
						}
					}
				}
			}
		}, this);

		if (aKeys.length > 1 && this._oFilterPanel) {
			var oConditionPanel =  isExclude ? this._oFilterPanel._oExcludeFilterPanel : this._oFilterPanel._oIncludeFilterPanel;
			oConditionPanel._clearConditions();
			oConditionPanel._fillConditions();
		}
	};


	// ################################################################################
	// Start Ranges handling
	// ################################################################################

	/**
	 * Create and returns the ranges grid
	 *
	 * @private
	 * @returns {sap.ui.layout.Grid} the ranges grid
	 */
	ValueHelpDialog.prototype._getRanges = function() {
		if (!this._oRanges) {
			this._oRanges = this._createRanges();
		}
		return this._oRanges;
	};

	/**
	 * Create a new instance of ranges grid with all inner controls.
	 *
	 * @private
	 * @returns {sap.ui.layout.Grid} the ranges grid
	 */
	ValueHelpDialog.prototype._createRanges = function() {

		jQuery.sap.require("sap.m.P13nConditionPanel");
		jQuery.sap.require("sap.m.P13nFilterPanel");

		this._oFilterPanel = new sap.m.P13nFilterPanel({
			maxIncludes: this.getMaxIncludeRanges(),
			maxExcludes: this.getMaxExcludeRanges(),
			containerQuery: true,
			addFilterItem: jQuery.proxy(function(oEvent) {
				// sap.m.MessageToast.show("AddFilterItem");

				var params = oEvent.mParameters;
				var oRange = {
					exclude: params.filterItemData.getExclude(),
					keyField: params.filterItemData.getColumnKey(),
					operation: params.filterItemData.getOperation(),
					value1: params.filterItemData.getValue1(),
					value2: params.filterItemData.getValue2()
				};
				this._oSelectedRanges[params.key] = oRange;

				var oCurrentKeyField = this._getKeyFieldByKey(oRange.keyField);
				oRange.value1 = this._convertValue2Object(oRange.value1, oCurrentKeyField.type);
				oRange.value2 = this._convertValue2Object(oRange.value2, oCurrentKeyField.type);

				// the new added filterItemData instance must be passed back into the filterpanel aggregation, otherwise the index of the add, update or remove events is not correct.
				this._oFilterPanel.addFilterItem(params.filterItemData);

				var sTokenText = this._getFormatedRangeTokenText(oRange.operation, oRange.value1, oRange.value2, oRange.exclude, oRange.keyField);
				this._addToken2Tokenizer(params.key, sTokenText, oRange.exclude ? this._oExcludedTokens : this._oSelectedTokens);
				this._updateTokenizer();
			}, this),
			removeFilterItem: jQuery.proxy(function(oEvent) {
				// sap.m.MessageToast.show("RemoveFilterItem");

				var params = oEvent.mParameters;
				delete this._oSelectedRanges[params.key];
				this._removeToken(params.key);
				this._updateTokenizer();
			}, this),
			updateFilterItem: jQuery.proxy(function(oEvent) {
				// sap.m.MessageToast.show("UpdateFilterItem");

				var params = oEvent.mParameters;
				var oRange = this._oSelectedRanges[params.key];
				oRange.exclude = params.filterItemData.getExclude();
				oRange.keyField = params.filterItemData.getColumnKey();
				oRange.operation = params.filterItemData.getOperation();
				oRange.value1 = params.filterItemData.getValue1();
				oRange.value2 = params.filterItemData.getValue2();

				var oCurrentKeyField = this._getKeyFieldByKey(oRange.keyField);
				oRange.value1 = this._convertValue2Object(oRange.value1, oCurrentKeyField.type);
				oRange.value2 = this._convertValue2Object(oRange.value2, oCurrentKeyField.type);

				var sTokenText = this._getFormatedRangeTokenText(oRange.operation, oRange.value1, oRange.value2, oRange.exclude, oRange.keyField);
				this._addToken2Tokenizer(params.key, sTokenText, oRange.exclude ? this._oExcludedTokens : this._oSelectedTokens);
				this._updateTokenizer();
			}, this)
		});

		this._oFilterPanel._oIncludeFilterPanel.setDisplayFormat(this.getDisplayFormat());
		this._oFilterPanel._oExcludeFilterPanel.setDisplayFormat(this.getDisplayFormat());

		this._oFilterPanel._oIncludeFilterPanel._sAddRemoveIconTooltipKey = "CONDITION";
		this._oFilterPanel._oExcludeFilterPanel._sAddRemoveIconTooltipKey = "CONDITION";

		if (this._aIncludeRangeOperations) {
			for ( var sType in this._aIncludeRangeOperations) {
				this._oFilterPanel.setIncludeOperations(this._aIncludeRangeOperations[sType], sType);
			}
		}
		if (this._aExcludeRangeOperations) {
			for ( var sType in this._aExcludeRangeOperations) {
				this._oFilterPanel.setExcludeOperations(this._aExcludeRangeOperations[sType], sType);
			}
		}

		// this._oFilterPanel.setKeyFields([{key: "KeyField1", text: "Field1"}, {key: "KeyField2", text: "Field2", type : "date", isDefault: true}]);
		if (this._aRangeKeyFields) {
			this._aRangeKeyFields.forEach( function(item) {
				this._oFilterPanel.addItem(new sap.m.P13nItem({
					columnKey: item.key,
					text: item.label,
					type: item.type,
					maxLength: item.maxLength,
					scale: item.scale,
					precision: item.precision,
					isDefault: item.isDefault,
					values: item.type === "boolean" ? this._getBooleanValues() : null
				}));
			}, this);
		}

		if (this._oSelectedRanges) {
			for ( var rangeId in this._oSelectedRanges) {
				var rangeData = this._oSelectedRanges[rangeId];
				this._oFilterPanel.addFilterItem(new sap.m.P13nFilterItem({
					key: rangeId,
					exclude: rangeData.exclude,
					columnKey: rangeData.keyField,
					operation: rangeData.operation,
					value1: rangeData.value1,
					value2: rangeData.value2
				}));
			}
		}

		var oRangeFieldsGrid = new sap.ui.layout.Grid({
			width: "100%",
			defaultSpan: "L12 M12 S12",
			vSpacing: 0,
			hSpacing: 0,
			content: [
				this._oFilterPanel
			]
		});

		this._sValidationDialogTitle = this._oRb.getText("VALUEHELPVALDLG_TITLE");
		this._sValidationDialogMessage = this._oRb.getText("VALUEHELPVALDLG_MESSAGE");
		this._sValidationDialogFieldMessage = this._oRb.getText("VALUEHELPVALDLG_FIELDMESSAGE");

		return oRangeFieldsGrid;
	};


	/**
	 * creates an array for boolean value representation (using the odata.type.Boolean) used on the selected control for boolean conditions.
	 * @returns {string[]} ["", "No", "Yes"]
	 */
	ValueHelpDialog.prototype._getBooleanValues = function() {
		jQuery.sap.require("sap.ui.model.odata.type.Boolean");
		var oBooleanType = new sap.ui.model.odata.type.Boolean();
		var aBooleanValues = null;
		if (oBooleanType) {
			aBooleanValues = [
				"", oBooleanType.formatValue(false, "string"), oBooleanType.formatValue(true, "string")
			];
		}

		return aBooleanValues;
	};


	/**
	 * converts a string value back into a real object.
  	 * @private
	 * @param {string} sValue string representation of the value
	 * @param {string} sType supported type string, date, time or boolean
	 * @returns string, date or float
	 */
	ValueHelpDialog.prototype._convertValue2Object = function(sValue, sType) {
		if (!sValue) {
			return sValue;
		}

		var value = sValue;

		if (sType === "date") {
			value = new Date(sValue);
		}
		if (sType === "time") {
			value = new Date(sValue);
		}
		if (sType === "numeric") {
			value = parseFloat(sValue);
		}
		if (sType === "boolean") {
			if (sValue === "") {
				value = null;
			} else {
				value = sValue == 'true';
			}
		}

		return value;
	};

	/**
	 * returns the KeyField definition with the key sKey
  	 * @private
	 */
	ValueHelpDialog.prototype._getKeyFieldByKey = function(sKey) {
		var oCurrentKeyField;
		if (this._aRangeKeyFields) {
			// search the current KeyField
			this._aRangeKeyFields.some( function(keyField) {
				if (typeof keyField !== "string") {
					if (keyField.key === sKey) {
						oCurrentKeyField = keyField;
						return true;
					}
				}
				return false;
			});
		}
		return oCurrentKeyField;
	};


	/**
	 * Check if the entered/modified ranges are correct, marks invalid fields yellow (Warning state) and opens a popup message dialog to give the user the
	 * feedback that some values are wrong or missing.
	 *
	 * @private
	 * @param {function} fnCallback will be called when all ranges are valid or the user ignores the wrong/missing fields by pressing Ok on a message
	 *         dialog
	 * @param {function} fnCancelCallback will be called when ranges are invalid and the user press Cancel on a message dialog
	 */
	ValueHelpDialog.prototype._validateRanges = function(fnCallback, fnCancelCallback) {
		if (this._oRanges) {
			if (!this._oRanges.getParent()) {
				fnCallback();
				return;
			}

			// show warnings on invalid fields.
			var bIsIncludeRangesValid = this._oFilterPanel.validateConditions();

			if (!bIsIncludeRangesValid) {
				// open a simple confirm box
				MessageBox.show(this._sValidationDialogMessage, {
					icon: MessageBox.Icon.WARNING,
					title: this._sValidationDialogTitle,
					actions: [
						MessageBox.Action.OK, MessageBox.Action.CANCEL
					],
					styleClass: !!this.$().closest(".sapUiSizeCompact").length ? "sapUiSizeCompact" : "",
					onClose: function(sResult) {
						if (sResult === MessageBox.Action.OK && fnCallback) {
							fnCallback();
						}
						if (sResult === MessageBox.Action.CANCEL && fnCancelCallback) {
							fnCancelCallback();
						}
					}
				});
				return;
			}

		}

		fnCallback();
	};

	// ################################################################################
	// Start Selected Items handling
	// ################################################################################

	/**
	 * Setter for the singleRowCallback function.
	 *
	 * @private
	 * @deprecated
	 * @since 1.30
	 */
	ValueHelpDialog.prototype.setUpdateSingleRowCallback = function(fSingleRowCallback) {
		this.fSingleRowCallback = fSingleRowCallback;

		this._updateNavigationControl();
	};


	// ################################################################################
	// Start main Table handling
	// ################################################################################

	ValueHelpDialog.prototype._createDefaultTable = function() {
		this._bTableCreatedInternal = true;

		if (!this._isPhone()) {
			sap.ui.getCore().loadLibrary("sap.ui.table");
			jQuery.sap.require("sap.ui.table.Table");

			this.setTable( new sap.ui.table.Table());
		} else {
			this.setTable( new sap.m.Table());
			this.TableStateSearchData();
		}
	};

	/**
	 * initialize the table instance
	 *
	 * @private
	 */
	ValueHelpDialog.prototype._initializeTable = function() {

		if (sap.ui.table.Table && this._oTable instanceof sap.ui.table.Table) {

			this._oTable.setTitle( sap.ui.Device.system.desktop ? this._sTableTitleNoCount : null);
			if (this._bTableCreatedInternal) {
				this._oTable.setSelectionBehavior( sap.ui.table.SelectionBehavior.Row);
			}
			this._oTable.setSelectionMode( this.getSupportMultiselect() ? sap.ui.table.SelectionMode.MultiToggle : sap.ui.table.SelectionMode.Single);
			this._oTable.setNoDataText( this._oRb.getText("VALUEHELPDLG_TABLE_PRESSSEARCH"));
			this._oTable.setVisibleRowCountMode( sap.ui.table.VisibleRowCountMode.Auto);
			this._oTable.setMinAutoRowCount( sap.ui.Device.system.desktop ? 5 : 4);

			this._oTable.attachRowSelectionChange( jQuery.proxy(function(oControlEvent) {
				if (this._bIgnoreSelectionChange || !oControlEvent.getParameter("userInteraction")) {
					return;
				}

				var eventArgs = {
					tableSelectionParams: oControlEvent.mParameters,
					updateTokens: [], //[{sKey, oRow, bSelect}, {}],
					useDefault: false
				};

				if (this._hasListeners("selectionChange")) {
					this._bIgnoreSelectionChange = true;
					this.fireSelectionChange(eventArgs);
					this._bIgnoreSelectionChange = false;

//					if (eventArgs.useDefault) {
//						sap.m.MessageToast.show("useDefault");
//					}

					eventArgs.updateTokens.forEach(jQuery.proxy( function(currentValue) {
						this._addRemoveTokenByKey(currentValue.sKey, currentValue.oRow, currentValue.bSelected);
					}, this));

				} else {
					eventArgs.useDefault = true;
				}

				if (eventArgs.useDefault) {
					// collect all the new selected or removed items
					var oTable = oControlEvent.getSource();
					var aIndices = oControlEvent.getParameter("rowIndices");
					var i, n = aIndices.length;
					var index;
					var oContext;
					var oRow;

					// check if we can select all items, if not we show an error dialog
					for (i = 0; i < n; i++) {
						index = aIndices[i];
						oContext = oTable.getContextByIndex(index);
						oRow = oContext ? oContext.getObject() : null;

						if (!oRow) {
							MessageBox.show(this._oRb.getText("VALUEHELPDLG_SELECTIONFAILED"), {
								icon: MessageBox.Icon.ERROR,
								title: this._oRb.getText("VALUEHELPDLG_SELECTIONFAILEDTITLE"),
								actions: [
									MessageBox.Action.OK
								],
								styleClass: !!this.$().closest(".sapUiSizeCompact").length ? "sapUiSizeCompact" : ""
							});
							return;
						}
					}

					var bUsePath = false;
					if (oTable.getBinding("rows").aKeys) {
						bUsePath = true;
					}

					for (i = 0; i < n; i++) {
						index = aIndices[i];
						oContext = oTable.getContextByIndex(index);
						oRow = oContext ? oContext.getObject() : null;

						if (oRow) {
							var sKey;
							if (bUsePath) {
								sKey = oContext.sPath.substring(1);
							} else {
								sKey = oRow[this.getKey()];
							}

							this._addRemoveTokenByKey(sKey, oRow, oTable.isIndexSelected(index));
						}
					}
				}

				this._updateTitles();

				if (!this.getSupportMultiselect()) {
					// in case of single select we fireOk
					this._onCloseAndTakeOverValues();
				}
			}, this));

			this._oTable.addStyleClass("compVHMainTable");

			if (!(this._oTable.getParent() instanceof sap.ui.comp.smarttable.SmartTable)) { // && !(this._oTable instanceof sap.ui.table.AnalyticalTable) && !(this._oTable instanceof sap.ui.table.TreeTable)) {
				this._oTable.bindAggregation("columns", "columns>/cols", jQuery.proxy( function(sId, oContext) {
					var ctrl, oTooltip;

					// Tooltip is only possible for certain (string) fields
					// ignore it for all types other than string!
					if (oContext.getProperty("type") === "string") {
						oTooltip = {
							path: oContext.getProperty("template")
						};
					}

					if (oContext.getProperty("type") === "boolean") {
						ctrl = new sap.m.CheckBox({
							enabled: false,
							selected: {
								path: oContext.getProperty("template")
							}
						});
					} else {
						ctrl = new sap.m.Text({
							wrapping: false,
							text: {
								path: oContext.getProperty("template"),
								type: oContext.getProperty("oType")
							},
							tooltip: oTooltip
						});
					}

					if (this._oTable instanceof sap.ui.table.AnalyticalTable) {
						return new sap.ui.table.AnalyticalColumn(sId, {
							label: "{columns>label}",
							tooltip: "{columns>label}",
							template: ctrl,
							width: "{columns>width}",
							hAlign: ctrl instanceof sap.m.CheckBox ? sap.ui.core.HorizontalAlign.Center : sap.ui.core.HorizontalAlign.Begin,
							filterProperty: oContext.getProperty("filter")
						});

					} else {
						return new sap.ui.table.Column(sId, {
							label: "{columns>label}",
							tooltip: "{columns>label}",
							template: ctrl,
							width: "{columns>width}",
							hAlign: ctrl instanceof sap.m.CheckBox ? sap.ui.core.HorizontalAlign.Center : sap.ui.core.HorizontalAlign.Begin,
							// sorting is removed at the moment
							// sortProperty: oContext.getProperty("sort"),
							// sorted: oContext.getProperty("sorted"),
							filterProperty: oContext.getProperty("filter")
						});
					}
				}, this));
			}
		} else {

			this._oTable.setMode(this.getSupportMultiselect() ? sap.m.ListMode.MultiSelect : sap.m.ListMode.SingleSelectLeft);
			this._oTable.setGrowing(true);

			this._oTable.attachSelectionChange( jQuery.proxy(function(oControlEvent) {
				if (this._bIgnoreSelectionChange) {
					return;
				}

				var eventParams = oControlEvent.mParameters;

				var eventArgs = {
					tableSelectionParams: oControlEvent.mParameters,
					updateTokens: [], //[{sKey, oRow, bSelect}, {}],
					useDefault: false
				};

				if (this._hasListeners("selectionChange")) {
					this._bIgnoreSelectionChange = true;
					this.fireSelectionChange(eventArgs);
					this._bIgnoreSelectionChange = false;

//					if (eventArgs.useDefault) {
//						sap.m.MessageToast.show("useDefault");
//					}

					eventArgs.updateTokens.forEach(jQuery.proxy( function(currentValue) {
						this._addRemoveTokenByKey(currentValue.sKey, currentValue.oRow, currentValue.bSelected);
					}, this));

				} else {
					eventArgs.useDefault = true;
				}

				if (eventArgs.useDefault) {
					var bSelected = eventParams.selected;
					var i, n = eventParams.listItems.length;

					for (i = 0; i < n; i++) {
						var oColListItem = eventParams.listItems[i];
						var oContext = oColListItem.getBindingContext();
						var oRow = oContext ? oContext.getObject() : null;

						if (oRow) {
							var sKey = oRow[this.getKey()];
							this._addRemoveTokenByKey(sKey, oRow, bSelected);
						}
					}
				}

				if (!this.getSupportMultiselect()) {
					// in case of single select we fireOk
					this._onCloseAndTakeOverValues();
				}
			}, this));


			if (!(this._oTable.getParent() instanceof sap.ui.comp.smarttable.SmartTable)) {  //this._bTableCreatedInternal) {
				this._oTable.bindAggregation("columns", "columns>/cols", jQuery.proxy( function(sId, oContext) {
					var colLabel = oContext.getProperty("label");
					var bDemandPopin = this._oTable.getColumns().length >= 2;

					return new sap.m.Column({
						header: new sap.m.Label({ text: colLabel }),
						demandPopin: bDemandPopin,
						//popinDisplay: sap.m.PopinDisplay.Inline,
						minScreenWidth: bDemandPopin ? (this._oTable.getColumns().length + 1) * 10 + "rem" : "1px"
					});
				}, this));


//				this._oTable.bindAggregation("items", "/", jQuery.proxy(function(sId, oContext) {
//					var aCols = this._oTable.getModel("columns").getData().cols;
//
//					return new sap.m.ColumnListItem({
//						cells: aCols.map(function (column) {
//							var colname = column.template;
//							return new sap.m.Label({ text: "{" + colname + "}" });
//						})
//					});
//				}, this));
			}
		}
	};


	ValueHelpDialog.prototype._addRemoveTokenByKey = function(sKey, oRow, bAdd) {
		if (bAdd) {
			this._oSelectedItems.add(sKey, oRow);
			this._addToken2Tokenizer(sKey, this._getFormatedTokenText(sKey), this._oSelectedTokens);
		} else {
			this._oSelectedItems.remove(sKey);
			this._removeTokenFromTokenizer(sKey, this._oSelectedTokens);
		}
	};


	/**
	 * Handler for the Ok close handling. The function prepares the list of all selected items and token and fires the Ok event.
	 *
	 * @private
	 */
	ValueHelpDialog.prototype._onCloseAndTakeOverValues = function() {
		var that = this;

		var fnCallback = function() {
			var range;
			var aTokens = that._oSelectedItems.getSelectedItemsTokenArray(that.getKey(), that.getDescriptionKey(), that.getTokenDisplayBehaviour());

			if (that._oSelectedRanges) {
				var i = 0;
				// if the user has changed the ranges we return the new ranges from the selectedRanges
				for ( var rangeId in that._oSelectedRanges) {
					range = that._oSelectedRanges[rangeId];
					var sTokenValue = range.tokenValue;
					if (!sTokenValue) {
						sTokenValue = that._getFormatedRangeTokenText(range.operation, range.value1, range.value2, range.exclude, range.keyField);
					}

					if (!range._oGrid || range._oGrid.select.getSelected()) {
						aTokens.push(new Token({
							key: "range_" + i,
							text: sTokenValue,
							tooltip: typeof sTokenValue === "string" ? sTokenValue : null  // Token text must be of type string
						}).data("range", {
							"exclude": range.exclude,
							"operation": range.operation,
							"keyField": range.keyField,
							"value1": range.value1,
							"value2": range.value2
						}));

						i++;
					}
				}
			}

			that.fireOk({
				"tokens": aTokens
			});
		};

		this._validateRanges(fnCallback);
	};

	/**
	 * Handler for the cancel button. The function fires the Cancel event.
	 *
	 * @private
	 */
	ValueHelpDialog.prototype._onCancel = function() {
		this.fireCancel();
	};

	/**
	 * Handler for the Go button. Go button is used on Phone Device and calls the search of the integrated filterbar
	 *
	 * @private
	 */
	ValueHelpDialog.prototype._onGo = function() {
		this._oFilterBar.search();
	};

	/**
	 * Handler for the Clear button. Clear button is used on Phone Device and calls the clear of the integrated filterbar.
	 *
	 * @private
	 */
	ValueHelpDialog.prototype._onClear = function() {
		this._oFilterBar.clear();
	};

	/**
	 * Update all titles (table and tokenizer).
	 *
	 * @private
	 */
	ValueHelpDialog.prototype._updateTitles = function() {
		this._updateTableTitle();
		this._updateTokenizer();
	};

	/**
	 * Update the dialog title.
	 *
	 * @private
	 */
	ValueHelpDialog.prototype._updateDlgTitle = function() {
		var sMsgKey = "";
		var sMsg;

		if (this._oTitle) {

			if (this._oTabBar && !this._oTabBar.getVisible() && !this.getFilterMode()) {
				// title handling on a normal dialog (on Dekstop and Tablet) when the tabBar is not visible
				if (this._oTabBar.getSelectedKey() === sap.ui.comp.valuehelpdialog._ValueHelpViewMode.DESKTOP_LIST_VIEW) {
					sMsgKey = "VALUEHELPDLG_TITLE";
				} else {
					if (this._oTabBar.getSelectedKey() === sap.ui.comp.valuehelpdialog._ValueHelpViewMode.DESKTOP_CONDITIONS_VIEW) {
						if (this.getMaxIncludeRanges() === "1" && this.getMaxExcludeRanges() === "0") {
							sMsgKey = "VALUEHELPDLG_SINGLECONDITION_TITLE";
						} else {
							sMsgKey = "VALUEHELPDLG_RANGESTITLE";
						}
					}
				}

			} else {
				if (this._isPhone() && !this.getFilterMode()) {
					// on a phone we show the title which depends on the current viewmode
					switch (this._currentViewMode) {
						  case sap.ui.comp.valuehelpdialog._ValueHelpViewMode.PHONE_MAIN_VIEW:
							  sMsgKey = "";
							  break;
						  case sap.ui.comp.valuehelpdialog._ValueHelpViewMode.PHONE_LIST_VIEW:
							  sMsgKey = "VALUEHELPDLG_ITEMSTABLE";
							  break;
						  case sap.ui.comp.valuehelpdialog._ValueHelpViewMode.PHONE_SEARCH_VIEW:
							  sMsgKey = "VALUEHELPDLG_ADVANCEDSEARCH";
							  break;
						  case sap.ui.comp.valuehelpdialog._ValueHelpViewMode.PHONE_CONDITIONS_VIEW:
							  if (this.getMaxIncludeRanges() === "1" && this.getMaxExcludeRanges() === "0") {
								  sMsgKey = "VALUEHELPDLG_SINGLECONDITION_TITLE";
							  } else {
								  sMsgKey = "VALUEHELPDLG_RANGES";
							  }
							  break;
						  default:
							  break;
					}

				}
			}


			if (!sMsg)  {
				sMsg = this.getTitle();
			}

			if (sMsgKey)  {
				sMsg = this._oRb.getText(sMsgKey, sMsg);
			}

			if (sMsg)  {
				this._oTitle.setText(sMsg);
			}
		}
	};

	/**
	 * Update title of the main table.
	 *
	 * @private
	 */
	ValueHelpDialog.prototype._updateTableTitle = function() {
		if (!this._oTable) {
			return;
		}
		var length = 0;
		this.oRows = this._oTable.getBinding("rows");
		var bSupportCount = false; // at the moment we do not support the Items Count in the table header
		if (bSupportCount && this.getModel() && this.getModel().isCountSupported) {
			bSupportCount = this.getModel().isCountSupported();
		}

		if (bSupportCount) {
			if (this.oRows) {
				length = this.oRows.getLength();
			}
			this._setTableTitle(this._sTableTitle1.replace("{0}", length));
		} else {
			this._setTableTitle(this._sTableTitleNoCount);
		}
	};

	/**
	 * Setting the title of the table will remove the focus on a table cell.
	 * Because of this we check if the Title control exist and set the Text of the title instead.
	 */
	ValueHelpDialog.prototype._setTableTitle = function(sTitle) {
		if (sap.ui.Device.system.desktop && !(this._oTable instanceof sap.m.Table)) {
			if (this._oTable.getTitle()) {
				this._oTable.getTitle().setText(sTitle);
			} else {
				this._oTable.setTitle(sTitle);
			}
		}
	};

	ValueHelpDialog.prototype.onAfterRendering = function() {
		Dialog.prototype.onAfterRendering.apply(this);

		if (this._oTable) {
			this._updateTitles();
		}

		if (!this._isPhone() &&  this.getContentHeight() === "") {
			// if the content height is not set we fetch the current clientHeight from the ScrollContainer and set it as fixed height
			var oResizeDomRef = this.getDomRef("scroll");
			var _iResizeDomHeight = oResizeDomRef.clientHeight;
			this.setContentHeight(_iResizeDomHeight + "px");
		}

		// Add resize handler for Table height update
		this._sContainerResizeListener = sap.ui.core.ResizeHandler.register(this._oMainGrid, jQuery.proxy(this._onResize, this));
		this._onResize();
	};

	ValueHelpDialog.prototype.onBeforeRendering = function() {
		Dialog.prototype.onBeforeRendering.apply(this);
		this._cleanup();
	};

	ValueHelpDialog.prototype._cleanup = function() {
		sap.ui.core.ResizeHandler.deregister(this._sContainerResizeListener);
		this._sContainerResizeListener = null;
	};


	// Overwriting the Dialog._getDialogOffset function. In our case we will return some other left and top margin values!
	ValueHelpDialog.prototype._getDialogOffset = function(windowWidth) {
		var iWindowWidth = windowWidth || this._$Window.width();
		var screenSizes = {
			small: 600,
			large: 1024
		};
		var remToPixelMargin = function (rem) {
			var iRemInPx = parseInt(window.getComputedStyle(document.body).fontSize, 10);
			return (rem * iRemInPx) * 2;
		};
		var rem = 1;

		if (iWindowWidth > screenSizes.small && iWindowWidth < screenSizes.large) {
			rem = 2;
		} else if (iWindowWidth >= screenSizes.large) {
			rem = 2;
		}

		return {
			top: remToPixelMargin(rem),
			left: remToPixelMargin(rem)
		};
	};


	ValueHelpDialog.prototype._onResize = function() {
		if (this._isPhone() || !this._oTabBar || this._oTabBar.getSelectedKey() !== sap.ui.comp.valuehelpdialog._ValueHelpViewMode.DESKTOP_LIST_VIEW) {
			// do nothing when we are on the Condition Tab
			return;
		}

		var maxH = this.getDomRef("scroll").clientHeight;

		var oVBox = this._oVBox.getDomRef();
		var iTabsHeight = oVBox.children[0].clientHeight; // height of Tabs
		var iTokensHeight = oVBox.children[2].children.length === 0 ? 0 : oVBox.children[2].children[0].clientHeight; // height of Tokens

		var oTableGrid = this._oTableGrid.getDomRef();

		if (oTableGrid.children[1]) {
			var iFilterBarHeight = oTableGrid.children[0].clientHeight;	// height of Filterbar
			var newH = maxH - iTabsHeight - iTokensHeight - iFilterBarHeight - 1;
			var minHeight = sap.ui.Device.system.desktop ? 360 : 270;
			newH = Math.max(newH, minHeight);
			//		if (window.console) {
			//			window.console.log(" newH ---> " + newH);
			//		}
			oTableGrid.children[1].style.height = newH + "px";
		}
	};

	ValueHelpDialog.prototype.exit = function() {

		this._cleanup();

		var destroyHelper = function(o) {
			if (o && o.destroy) {
				o.destroy();
			}
			return null;
		};

		this._oTokenizerGrid = destroyHelper(this._oTokenizerGrid);
		this._oRanges = destroyHelper(this._oRanges);
		this._oFilterPanel = destroyHelper(this._oFilterPanel);
		if (this._bTableCreatedInternal) {
			this._oTable = destroyHelper(this._oTable);
		}
		this._oTable = null;
		this.theTable = null;

		this._oTabBar = destroyHelper(this._oTabBar);
		this._oMainListMenu = destroyHelper(this._oMainListMenu);
		this._oVBox = destroyHelper(this._oVBox);
		this._oVarManagment = destroyHelper(this._oVarManagment);

		this._aRangeKeyFields = destroyHelper(this._aRangeKeyFields);
		this._aIncludeRangeOperations = destroyHelper(this._aIncludeRangeOperations);
		this._aExcludeRangeOperations = destroyHelper(this._aExcludeRangeOperations);

		this._oFilterBar = destroyHelper(this._oFilterBar);

		this._oRb = destroyHelper(this._oRb);
		this._sTableTitle1 = destroyHelper(this._sTableTitle1);
		this._sTableTitle2 = destroyHelper(this._sTableTitle2);
		this._sTableTitleNoCount = destroyHelper(this._sTableTitleNoCount);

		this._sValidationDialogTitle = destroyHelper(this._sValidationDialogTitle);
		this._sValidationDialogMessage = destroyHelper(this._sValidationDialogMessage);
		this._sValidationDialogFieldMessage = destroyHelper(this._sValidationDialogFieldMessage);

		this._oSelectedItems = destroyHelper(this._oSelectedItems);
		this._oSelectedRanges = destroyHelper(this._oSelectedRanges);

		this._oButtonOk = destroyHelper(this._oButtonOk);
		this._oButtonCancel = destroyHelper(this._oButtonCancel);
		if (this._oButtonGo) {
			this._oButtonGo = destroyHelper(this._oButtonGo);
		}
		if (this._oButtonClear) {
			this._oButtonClear = destroyHelper(this._oButtonClear);
		}
	};


	/**
	 * Sets a RangeKeyFields array.
	 * This method allows you to specify the KeyFields for the ranges. You can set an array of objects with Key and Label properties to define the key fields.
	 *
	 * @public
	 * @since 1.24
	 * @param {object[]} aRangeKeyFields
	 * 					An array of range KeyFields <code>[{key: "CompanyCode", label: "ID"}, {key:"CompanyName", label : "Name"}]</code>
	 */
	ValueHelpDialog.prototype.setRangeKeyFields = function(aRangeKeyFields) {
		this._aRangeKeyFields = aRangeKeyFields;
	};

	ValueHelpDialog.prototype.getRangeKeyFields = function() {
		return this._aRangeKeyFields;
	};

	/**
	 * Sets the array for the supported include range operations.
	 *
	 * @public
	 * @since 1.24
	 * @param {sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation[]} aOperation
	 * 		An array of range operations
	 * @param {string} sType the type for which the operations are defined
	 */
	ValueHelpDialog.prototype.setIncludeRangeOperations = function(aOperation, sType) {
		sType = sType || "default";
		this._aIncludeRangeOperations[sType] = aOperation;

		if (this._oFilterPanel) {
			this._oFilterPanel.setIncludeOperations(this._aIncludeRangeOperations[sType], sType);
		}
	};

	/**
	 * Sets the array for the supported exclude range operations.
	 *
	 * @public
	 * @since 1.24
	 * @param {sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation[]} aOperation
	 * 		An array of range operations
	 * @param {string} sType the type for which the operations are defined
	 */
	ValueHelpDialog.prototype.setExcludeRangeOperations = function(aOperation, sType) {
		sType = sType || "default";
		this._aExcludeRangeOperations[sType] = aOperation;

		if (this._oFilterPanel) {
			this._oFilterPanel.setExcludeOperations(this._aExcludeRangeOperations[sType], sType);
		}
	};

	/**
	 * Creates and returns the token text for the selected item.
	 *
	 * @private
	 * @param {string} sKey the key of the selectedItems item
	 * @returns {string} the token text for the selected items with the sKey
	 */
	ValueHelpDialog.prototype._getFormatedTokenText = function(sKey) {
		var oItem = this._oSelectedItems.getItem(sKey);
		var sTokenText = oItem[this.getDescriptionKey()];
		var sDisplayKey = oItem[this.getKey()];
		if (sTokenText === undefined) {
			if (typeof oItem === "string") {
				sTokenText = oItem;
			} else {
				sTokenText = sKey;
			}
		} else {
			if (sTokenText === "") {
				sTokenText = sKey;
			} else {
				// format the token text
				sTokenText = FormatUtil.getFormattedExpressionFromDisplayBehaviour(this.getTokenDisplayBehaviour() ? this.getTokenDisplayBehaviour() : sap.ui.comp.smartfilterbar.ControlConfiguration.DISPLAYBEHAVIOUR.descriptionAndId, sDisplayKey, sTokenText);
			}
		}

		return sTokenText;
	};

	/**
	 * Creates and returns the token text for a range.
	 *
	 * @private
	 * @param {string} sOperation the operation type sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation
	 * @param {string} sValue1 text of the first range field
	 * @param {string} sValue2 text of the seoncd range field
	 * @param {boolean} bExclude indicates if the range is a Exclude range
	 * @param {string} sKeyField id
	 * @returns {string} the range token text
	 */
	ValueHelpDialog.prototype._getFormatedRangeTokenText = function(sOperation, sValue1, sValue2, bExclude, sKeyField) {
		var sTokenText = "";
		var oFormatter;
		var oCurrentKeyField = this._getKeyFieldByKey(sKeyField);

		if (oCurrentKeyField) {
			switch (oCurrentKeyField.type) {
				case "numeric":
					var oFloatFormatOptions;
					if (oCurrentKeyField.precision || oCurrentKeyField.scale) {
						oFloatFormatOptions = {};
						if (oCurrentKeyField.precision) {
							oFloatFormatOptions["maxIntegerDigits"] = parseInt(oCurrentKeyField.precision, 10);
						}
						if (oCurrentKeyField.scale) {
							oFloatFormatOptions["maxFractionDigits"] = parseInt(oCurrentKeyField.scale, 10);
						}
					}
					oFormatter = NumberFormat.getFloatInstance(oFloatFormatOptions);
					break;
				case "date":
					oFormatter = DateFormat.getDateInstance();
					sValue1 = new Date(sValue1);
					sValue2 = new Date(sValue2);
					break;
				case "time":
					oFormatter = DateFormat.getTimeInstance();
					sValue1 = new Date(sValue1);
					sValue2 = new Date(sValue2);
					break;
				case "boolean":
					var aBooleanValues = this._getBooleanValues();
					sValue1 = aBooleanValues[sValue1 ? 2 :  1];
					sValue2 = aBooleanValues[sValue2 ? 2 :  1];
					break;
			}

			if (oFormatter) {
				if (sValue1) {
					sValue1 = oFormatter.format(sValue1);
				}
				if (sValue2) {
					sValue2 = oFormatter.format(sValue2);
				}
			}
		}

		if (sValue1 !== "") {
			switch (sOperation) {
				case sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.Initial:
					sTokenText = "=''";
					break;

				case sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.EQ:
					sTokenText = "=" + sValue1;
					break;

				case sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.GT:
					sTokenText = ">" + sValue1;
					break;

				case sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.GE:
					sTokenText = ">=" + sValue1;
					break;

				case sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.LT:
					sTokenText = "<" + sValue1;
					break;

				case sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.LE:
					sTokenText = "<=" + sValue1;
					break;

				case sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.Contains:
					sTokenText = "*" + sValue1 + "*";
					break;

				case sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.StartsWith:
					sTokenText = sValue1 + "*";
					break;

				case sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.EndsWith:
					sTokenText = "*" + sValue1;
					break;

				case sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.BT:
					if (sValue2 !== "") {
						sTokenText = sValue1 + "..." + sValue2;
						break;
					}
			}

		}

		if (bExclude && sTokenText !== "") {
			sTokenText = "!(" + sTokenText + ")";
		}

		if (this._aRangeKeyFields && this._aRangeKeyFields.length > 1 && oCurrentKeyField && oCurrentKeyField.label && sTokenText !== "") {
			sTokenText = oCurrentKeyField.label + ": " + sTokenText;
		}

		return sTokenText;
	};

	ValueHelpDialog.prototype._isPhone = function() {
		return sap.ui.Device.system.phone;
	};

	ValueHelpDialog.prototype._hasListeners = function(sEventName) {
		if (this._bTableCreatedInternal) {
			return false;
		}

		return this.hasListeners(sEventName);
	};


	/**
	 * The range operations supported by the ValueHelpDialog control.
	 *
	 * @enum {string}
	 * @public
	 */
	sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation = {
		/**
		 * The Between operation for the ranges.
		 *
		 * @public
		 */
		BT: "BT",
		/**
		 * The Equals operation for the ranges.
		 *
		 * @public
		 */
		EQ: "EQ",
		/**
		 * The Contains operation for the ranges.
		 *
		 * @public
		 */
		Contains: "Contains",
		/**
		 * The StartsWith operation for the ranges.
		 *
		 * @public
		 */
		StartsWith: "StartsWith",
		/**
		 * The EndsWith operation for the ranges.
		 *
		 * @public
		 */
		EndsWith: "EndsWith",
		/**
		 * The Less operation for the ranges.
		 *
		 * @public
		 */
		LT: "LT",
		/**
		 * The Less or equals operation for the ranges.
		 *
		 * @public
		 */
		LE: "LE",
		/**
		 * The Greater operation for the ranges.
		 *
		 * @public
		 */
		GT: "GT",
		/**
		 * The Between or equals operation for the ranges.
		 *
		 * @public
		 */
		GE: "GE",
		/**
		 * The Initial operation for the ranges.
		 *
		 * @private
		 */
		Initial: "Initial"
	};

	sap.ui.comp.valuehelpdialog._ValueHelpViewMode = {
		DESKTOP_LIST_VIEW: "DESKTOP_LIST_VIEW",
		DESKTOP_CONDITIONS_VIEW: "DESKTOP_CONDITIONS_VIEW",
		PHONE_MAIN_VIEW: "PHONE_MAIN_VIEW",
		PHONE_SEARCH_VIEW: "PHONE_SEARCH_VIEW",
		PHONE_LIST_VIEW: "PHONE_LIST_VIEW",
		PHONE_CONDITIONS_VIEW: "PHONE_CONDITIONS_VIEW"
	};

	return ValueHelpDialog;

}, /* bExport= */ true);

}; // end of sap/ui/comp/valuehelpdialog/ValueHelpDialog.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.variants.EditableVariantItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.variants.EditableVariantItem.
jQuery.sap.declare('sap.ui.comp.variants.EditableVariantItem'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.ColumnListItem'); // unlisted dependency retained
jQuery.sap.require('sap.m.ColumnListItemRenderer'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/variants/EditableVariantItem",['jquery.sap.global', 'sap/m/ColumnListItem', 'sap/m/ColumnListItemRenderer', 'sap/ui/comp/library'],
	function(jQuery, ColumnListItem, ColumnListItemRenderer, library) {
	"use strict";


	
	/**
	 * Constructor for a new variants/EditableVariantItem.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * The EditableVariantItem class describes an editable variant list item for the Manage Variants popup.
	 * @extends sap.m.ColumnListItem
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.variants.EditableVariantItem
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var EditableVariantItem = ColumnListItem.extend("sap.ui.comp.variants.EditableVariantItem", /** @lends sap.ui.comp.variants.EditableVariantItem.prototype */ { metadata : {
	
		library : "sap.ui.comp",
		properties : {
	
			/**
			 * Key of the List Item
			 * @since 1.22.0
			 */
			key : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * Indicator if a variant is visible for all users.
			 * @since 1.26.0
			 */
			global : {type : "boolean", group : "Misc", defaultValue : null},
	
			/**
			 * ABAP Package the variant is assigned. Used for transport functionality
			 * @since 1.26.0
			 */
			lifecyclePackage : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * Identifier of the transport object the variant is assigned to.
			 * @since 1.26.0
			 */
			lifecycleTransportId : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * Variant namespace
			 * @since 1.26.0
			 */
			namespace : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * Indication if variant can be changed
			 * @since 1.26.0
			 */
			readOnly : {type : "boolean", group : "Misc", defaultValue : false},
	
			/**
			 * Flags for a variant to indicate why it might be read-only
			 * @since 1.26.0
			 * @deprecated Since version 1.28.0. Replaced by property <code>labelReadOnly</code> 
			 */
			accessOptions : {type : "string", group : "Misc", defaultValue : null, deprecated: true},
	
			/**
			 * Indicates if the variant label can be changed
			 * @since 1.28.0
			 */
			labelReadOnly : {type : "boolean", group : "Misc", defaultValue : false}
		}
	},
	renderer: ColumnListItemRenderer.render
	});
	

	return EditableVariantItem;

}, /* bExport= */ true);

}; // end of sap/ui/comp/variants/EditableVariantItem.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.variants.VariantItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.variants.VariantItem.
jQuery.sap.declare('sap.ui.comp.variants.VariantItem'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Item'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/variants/VariantItem",['jquery.sap.global', 'sap/ui/comp/library', 'sap/ui/core/Item'],
	function(jQuery, library, Item) {
	"use strict";


	
	/**
	 * Constructor for a new variants/VariantItem.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given 
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * The VariantItem class describes a variant item.
	 * @extends sap.ui.core.Item
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.variants.VariantItem
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var VariantItem = Item.extend("sap.ui.comp.variants.VariantItem", /** @lends sap.ui.comp.variants.VariantItem.prototype */ { metadata : {
	
		library : "sap.ui.comp",
		properties : {
	
			/**
			 * Attribute for usage in Smart Filter Bar
			 * @since 1.26.0
			 */
			executeOnSelection : {type : "boolean", group : "Misc", defaultValue : false},
	
			/**
			 * Is the user allowed to change the item's data
			 * @since 1.26.0
			 */
			readOnly : {type : "boolean", group : "Misc", defaultValue : false},
	
			/**
			 * Identifier of the transport object the variant is assigned to.
			 * @since 1.26.0
			 */
			lifecycleTransportId : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * Indicator if a variant is visible for all users.
			 * @since 1.26.0
			 */
			global : {type : "boolean", group : "Misc", defaultValue : null},
	
			/**
			 * ABAP package the variant is assigned to. Used for transport functionality.
			 * @since 1.26.0
			 */
			lifecyclePackage : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * Variant namespace
			 * @since 1.26.0
			 */
			namespace : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * Flags for a variant to indicate why it might be read-only.
			 * @since 1.26.0
			 * @deprecated Since version 1.28.0. Replaced by property <code>labelReadOnly</code> 
			 */
			accessOptions : {type : "string", group : "Misc", defaultValue : null, deprecated: true},
	
			/**
			 * Indicates if the variant title can be changed.
			 * @since 1.26.0
			 */
			labelReadOnly : {type : "boolean", group : "Misc", defaultValue : false}
		}
	}
	//,	renderer: ItemRenderer.render
	});
	

	return VariantItem;

}, /* bExport= */ true);

}; // end of sap/ui/comp/variants/VariantItem.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.variants.VariantManagement') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.variants.VariantManagement.
jQuery.sap.declare('sap.ui.comp.variants.VariantManagement'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.SearchField'); // unlisted dependency retained
jQuery.sap.require('sap.m.RadioButton'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.TextAlign'); // unlisted dependency retained
jQuery.sap.require('sap.m.ScreenSize'); // unlisted dependency retained
jQuery.sap.require('sap.m.PopinDisplay'); // unlisted dependency retained
jQuery.sap.require('sap.m.Column'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.m.Bar'); // unlisted dependency retained
jQuery.sap.require('sap.m.Table'); // unlisted dependency retained
jQuery.sap.require('sap.m.Page'); // unlisted dependency retained
jQuery.sap.require('sap.m.PlacementType'); // unlisted dependency retained
jQuery.sap.require('sap.m.ButtonType'); // unlisted dependency retained
jQuery.sap.require('sap.m.Toolbar'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarSpacer'); // unlisted dependency retained
jQuery.sap.require('sap.m.ActionSheet'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.CheckBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained
jQuery.sap.require('sap.m.Input'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.m.ResponsivePopover'); // unlisted dependency retained
jQuery.sap.require('sap.m.SelectList'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Item'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ValueState'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.VerticalAlign'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.HorizontalLayout'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.Grid'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/variants/VariantManagement",[
	'jquery.sap.global', 'sap/ui/Device', 'sap/ui/model/json/JSONModel', 'sap/m/SearchField', 'sap/m/RadioButton', 'sap/ui/core/TextAlign', 'sap/m/ScreenSize', 'sap/m/PopinDisplay', 'sap/m/Column', 'sap/m/Text', 'sap/m/Bar', 'sap/m/Table', 'sap/m/Page', 'sap/m/PlacementType', 'sap/m/ButtonType', 'sap/m/Toolbar', 'sap/m/ToolbarSpacer', 'sap/m/ActionSheet', 'sap/m/Button', 'sap/m/CheckBox', 'sap/m/Dialog', 'sap/m/Input', 'sap/m/Label', 'sap/m/ResponsivePopover', 'sap/m/SelectList', 'sap/ui/comp/library', 'sap/ui/comp/transport/TransportSelection', './EditableVariantItem', './VariantItem', 'sap/ui/core/Control', 'sap/ui/core/Item', 'sap/ui/core/ValueState', 'sap/ui/core/VerticalAlign', 'sap/ui/layout/HorizontalLayout', 'sap/ui/layout/Grid'
], function(jQuery, Device, JSONModel, SearchField, RadioButton, TextAlign, ScreenSize, PopinDisplay, Column, Text, Bar, Table, Page, PlacementType, ButtonType, Toolbar, ToolbarSpacer, ActionSheet, Button, CheckBox, Dialog, Input, Label, ResponsivePopover, SelectList, library, TransportSelection, EditableVariantItem, VariantItem, Control, Item, ValueState, VerticalAlign, HorizontalLayout, Grid) {
	"use strict";

	/**
	 * Constructor for a new VariantManagement.
	 * 
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * @class The VariantManagement control can be used to manage variants, such as filter bar variants or table variants.
	 * @extends sap.ui.core.Control
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.variants.VariantManagement
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var VariantManagement = Control.extend("sap.ui.comp.variants.VariantManagement", /** @lends sap.ui.comp.variants.VariantManagement.prototype */
	{
		metadata: {
			library: "sap.ui.comp",
			properties: {

				/**
				 * Enables the setting of the initially selected variant.
				 * 
				 * @since 1.22.0
				 */
				initialSelectionKey: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Can be set to true or false depending on whether you want to enable or disable the control.
				 * 
				 * @since 1.22.0
				 */
				enabled: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Provides a string value to set the default variant. Used for the save dialog. Has no effect on the selected variant.
				 * 
				 * @since 1.22.0
				 */
				defaultVariantKey: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * The key of the currently selected item. Returns null if the default item list is selected.
				 * 
				 * @since 1.24.0
				 */
				selectionKey: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Indicates that a Create Tile is visible in the Create dialog.
				 * 
				 * @since 1.26.0
				 * @deprecated Since version 1.32.0.
				 */
				showCreateTile: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * Indicates that Execute on Selection is visible in the Save Variant and the Manage Variants dialogs.
				 * 
				 * @since 1.26.0
				 */
				showExecuteOnSelection: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * Indicates that Share is visible in the Save Variant and the Manage Variants dialogs. Share allows you to share variants with other
				 * users.
				 * 
				 * @since 1.26.0
				 */
				showShare: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * Enables the lifecycle support. If set to true, the VariantManagement control handles the transport information for shared variants.
				 * 
				 * @since 1.26.0
				 */
				lifecycleSupport: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * Overwrites the default Standard variant title.
				 * 
				 * @since 1.28.0
				 */
				standardItemText: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * If set to true, the scenario is an industry-specific solution. This flag is only used internally in the app variant scenarios.
				 * 
				 * @since 1.32.0
				 */
				industrySolutionMode: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				}
			},
			defaultAggregation: "items",
			aggregations: {

				/**
				 * Items displayed by the VariantManagement control.
				 * 
				 * @since 1.22.0
				 * @deprecated Since version 1.26.0. Replaced by association <code>variantItems</code>
				 */
				items: {
					type: "sap.ui.core.Item",
					multiple: true,
					singularName: "item",
					deprecated: true
				},

				/**
				 * Variant items displayed by the VariantManagement control.
				 * 
				 * @since 1.26.0
				 */
				variantItems: {
					type: "sap.ui.comp.variants.VariantItem",
					multiple: true,
					singularName: "variantItem"
				}
			},
			events: {

				/**
				 * This event is fired when the Save Variant dialog is closed with OK for a variant.
				 * 
				 * @since 1.22.0
				 */
				save: {
					parameters: {
						/**
						 * The variant title
						 */
						name: {
							type: "string"
						},

						/**
						 * Indicates if an existing variant is overwritten or if a new variant is created
						 */
						overwrite: {
							type: "boolean"
						},

						/**
						 * The variant key
						 */
						key: {
							type: "string"
						},

						/**
						 * The Execute on Selection indicator
						 */
						exe: {
							type: "boolean"
						},

						/**
						 * The default variant indicator
						 */
						def: {
							type: "boolean"
						},

						/**
						 * The shared variant indicator
						 */
						global: {
							type: "boolean"
						},

						/**
						 * The package name
						 */
						lifecyclePackage: {
							type: "string"
						},

						/**
						 * The transport ID
						 */
						lifecycleTransportId: {
							type: "string"
						}
					}
				},

				/**
				 * This event is fired when users apply changes to variants in the Manage Variants dialog.
				 * 
				 * @since 1.22.0
				 */
				manage: {
					parameters: {
						/**
						 * List of changed variant keys
						 */
						renamed: {
							type: "string[]"
						},

						/**
						 * List of deleted variant keys
						 */
						deleted: {
							type: "string[]"
						},

						/**
						 * List of variant keys and the associated Execute on Selection indicator
						 */
						exe: {
							type: "object[]"
						},

						/**
						 * The default variant key
						 */
						def: {
							type: "boolean"
						}
					}
				},

				/**
				 * This event is fired when a new variant is selected.
				 * 
				 * @since 1.22.0
				 */
				select: {
					parameters: {
						/**
						 * The variant key
						 */
						key: {
							type: "string"
						}
					}
				}
			}
		},
		/**
		 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
		 * 
		 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
		 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
		 */
		renderer: function(oRm, oControl) {
			oRm.write("<div ");
			oRm.writeControlData(oControl);
			oRm.addClass("sapUiCompVarMngmt");
			oRm.writeClasses();
			oRm.write(">");
			oRm.renderControl(oControl.oVariantLayout);
			oRm.write("</div>");
		}
	});

	VariantManagement.STANDARD_NAME = "STANDARD";
	VariantManagement.MAX_NAME_LEN = 100;

	/**
	 * Constructs and initializes the VariantManagement control.
	 */
	VariantManagement.prototype.init = function() {
		var that = this;

		this.STANDARDVARIANTKEY = "*standard*";
		this.setStandardVariantKey(this.STANDARDVARIANTKEY);
		this.aRemovedVariants = [];
		this.aRenamedVariants = [];
		this.aRemovedVariantTransports = [];
		this.aExeVariants = [];
		this.oResourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp");
		this.lastSelectedVariantKey = this._sStandardVariantKey;
		this.bVariantItemMode = false;
		this.oSelectedItem = null;
		this.sNewDefaultKey = "";
		this.bDirty = false;
		this.bManagementTableInitialized = false;
		this.sTransport = null;
		this.sPackage = null;
		this.aEvents = [];
		this.bEventRunning = false;
		this.bPopoverOpen = false;
		this.oVariantSelectionPage = null;
		this.oActions = null;
		this.oActionSheet = null;
		this.oActionSheetManage = null;
		this.oActionSheetSave = null;
		this.oActionSheetSaveAs = null;
		this.bManualVariantKey = false;
		this.bFireSelect = false;
		this.bExecuteOnSelectForStandard = false;
		this._isVendorLayer = false;

		this.oModel = new JSONModel({
			enabled: false
		});
		this.setModel(this.oModel, "save_enablement");

		this.oVariantManage = new Button(this.getId() + "-manage", {
			text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_MANAGE"),
			enabled: false,
			press: function() {
				that._openVariantManagementDialog();
			}
		});
		this.oVariantManage.addStyleClass("sapUiHideOnPhone");

		this.oVariantSave = new Button(this.getId() + "-mainsave", {
			text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_SAVE"),
			press: function() {
				var oEvent = that._createEvent("variantSavePressed", that._variantSavePressed);
				that._addEvent(oEvent);
			},
			enabled: false
		});
		this.oVariantSave.setModel(this.oModel);
		this.oVariantSave.addStyleClass("sapUiHideOnPhone");

		this.oVariantSaveAs = new Button(this.getId() + "-saveas", {
			text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_SAVEAS"),
			press: function() {
				that._openSaveAsDialog();
			}
		});
		this.oVariantSaveAs.addStyleClass("sapUiHideOnPhone");

		this.oVariantText = new Label(this.getId() + "-text");
		this._setStandardText();
		this.oVariantText.addStyleClass("sapUICompVarMngmtText");
		this.oVariantText.addStyleClass("sapUICompVarMngmtEnabled");
		this.oVariantText.addStyleClass("sapMH4Style");

		if (Device.system.phone) {
			this.oVariantText.addStyleClass("sapUICompVarMngmtTextMaxWidth");
		}

		this.oVariantModifiedText = new Label(this.getId() + "-modified", {
			visible: false
		});
		this.oVariantModifiedText.setText("*");// (" + this.oResourceBundle.getText("VARIANT_MANAGEMENT_MODIFIED")
		// + ")");
		this.oVariantModifiedText.addStyleClass("sapUICompVarMngmtText");
		this.oVariantModifiedText.addStyleClass("sapUICompVarMngmtModified");
		this.oVariantModifiedText.addStyleClass("sapUICompVarMngmtEnabled");
		this.oVariantModifiedText.addStyleClass("sapMH4Style");

		this.oVariantPopoverTrigger = new Button(this.getId() + "-trigger", {
			type: ButtonType.Transparent,
			icon: "sap-icon://arrow-down",
			press: function() {
				that._openVariantSelection();
			},
			tooltip: this.oResourceBundle.getText("VARIANT_MANAGEMENT_TRIGGER_TT")
		});

		this.oVariantPopoverTrigger.addStyleClass("sapUICompVarMngmtTriggerBtn");

		this.oVariantText.setLabelFor(this.oVariantPopoverTrigger);
		this.oVariantLayout = new HorizontalLayout({
			content: [
				this.oVariantText, this.oVariantModifiedText, this.oVariantPopoverTrigger
			]
		});
		this.oVariantLayout.addStyleClass("sapUICompVarMngmtLayout");
		this.addDependent(this.oVariantLayout);

		this.oVariantList = new SelectList(this.getId() + "-list", {
			selectionChange: function(event) {
				that.lastSelectedVariantKey = this.getSelectedItem().getKey();
				that._setSelectionByKey(this.getSelectedItem().getKey());
				that.oVariantPopOver.close();
				that.bDirty = false;
				that.oVariantModifiedText.setVisible(false);
				that.oModel.setProperty("/enabled", false);
				that.bFireSelect = true;
			}
		});
		this.oVariantList.setNoDataText(this.oResourceBundle.getText("VARIANT_MANAGEMENT_NODATA"));

		this.oActionSheetManage = new Button({
			text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_MANAGE"),
			enabled: false,
			press: function(oEvent) {
				that._openVariantManagementDialog();
			}
		});
		this.oActionSheetSave = new Button({
			text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_SAVE"),
			enabled: false,
			press: function(oEvent) {
				var olEvent = that._createEvent("variantSavePressed", that._variantSavePressed);
				that._addEvent(olEvent);
			}
		});
		this.oActionSheetSaveAs = new Button({
			text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_SAVEAS"),
			press: function(oEvent) {
				that._openSaveAsDialog();
			}
		});

		this.oActions = new Button(this.getId() + "-actions", {
			text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_ACTIONS"),
			press: function() {
				that._createActionSheet();
				that.oActionSheet.openBy(this);
			}
		});
		this.oActions.addStyleClass("sapUiVisibleOnlyOnPhone");

		this.oSearchField = new SearchField();
		this.oSearchField.attachLiveChange(function(oEvent) {
			that._triggerSearch(oEvent);
		});

		this._handleArrowUpDown(this.oVariantList, this.oSearchField);

		this.oVariantSelectionPage = new Page(this.getId() + "selpage", {
			subHeader: new Toolbar({
				content: [
					this.oSearchField
				]
			}),
			content: [
				this.oVariantList
			],
			footer: new Toolbar({
				content: [
					new ToolbarSpacer(this.getId() + "-spacer"), this.oVariantManage, this.oVariantSave, this.oVariantSaveAs, this.oActions
				]
			}),
			showSubHeader: false,
			showNavButton: false,
			showHeader: false
		});
		this.oVariantPopOver = new ResponsivePopover(this.getId() + "-popover", {
			title: this.oResourceBundle.getText("VARIANT_MANAGEMENT_VARIANTS"),
			contentWidth: "400px",
			placement: PlacementType.Bottom,
			content: [
				this.oVariantSelectionPage
			],
			afterOpen: function() {
				that.bPopoverOpen = true;
			},
			afterClose: function() {
				that.bPopoverOpen = false;
				if (that.bFireSelect == true) {
					that.bFireSelect = false;
					setTimeout(function() {
						that._fireSelectAsync();
					}, 0);
				}
			},
			contentHeight: "300px"
		});
		this.oVariantPopOver.addStyleClass("sapUICompVarMngmtPopover");

		/* save new dialog */
		this.oInputName = new Input(this.getId() + "-name", {
			liveChange: function(oEvent) {
				/*
				 * var sValue = this.getValue(); sValue = sValue.trim(); if (sValue === "") { this.setValueState(ValueState.Error);
				 * this.setValueStateText(that.oResourceBundle.getText("VARIANT_MANAGEMENT_ERROR_EMPTY")); that.oSaveSave.setEnabled(false); } else {
				 * that.oSaveSave.setEnabled(!that._checkIsDuplicate(this, sValue)); }
				 */

				that._checkVariantNameConstraints(this, that.oSaveSave);
			}
		});
		this.oLabelName = new Label(this.getId() + "-namelabel", {
			text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_NAME"),
			required: true
		});
		this.oLabelName.setLabelFor(this.oInputName);

		this.oDefault = new CheckBox(this.getId() + "-default", {
			text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_SETASDEFAULT"),
			enabled: true,
			visible: true,
			width: "100%"
		});

		this.oExecuteOnSelect = new CheckBox(this.getId() + "-execute", {
			text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_EXECUTEONSELECT"),
			enabled: true,
			visible: false,
			width: "100%"
		});

		this.oCreateTile = new CheckBox(this.getId() + "-tile", {
			text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_CREATETILE"),
			enabled: true,
			visible: false,
			width: "100%"
		});

		this.oShare = new CheckBox(this.getId() + "-share", {
			text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_SHARE"),
			enabled: true,
			visible: false,
			select: function(oControlEvent) {
				var oEvent = that._createEvent("inputfieldChange", that._handleShareSelected);
				oEvent.args.push(oControlEvent);
				that._addEvent(oEvent);
			},
			width: "100%"
		});

		this.oInputKey = new Input(this.getId() + "-key", {
			liveChange: function(oEvent) {
				/*
				 * var sValue = this.getValue(); sValue = sValue.trim(); if (sValue === "") { this.setValueState(ValueState.Error);
				 * this.setValueStateText(that.oResourceBundle.getText("VARIANT_MANAGEMENT_ERROR_EMPTY")); } else {
				 * this.setValueState(ValueState.None); this.setValueStateText(null); }
				 */
				that._checkVariantNameConstraints(this);
			}
		});

		this.oLabelKey = new Label(this.getId() + "-keylabel", {
			text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_KEY"),
			required: true
		});
		this.oLabelKey.setLabelFor(this.oInputKey);

		this.oSaveSave = new Button(this.getId() + "-variantsave", {
			text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_OK"),
			press: function() {
				var oEvent = that._createEvent("variantSaveAs", that._handleVariantSaveAs);
				that._addEvent(oEvent);
			},
			enabled: true
		});
		this.oSaveDialogOptionsGrid = new Grid({
			defaultSpan: "L6 M6 S12"
		});

		this.oManagementTable = new Table(this.getId() + "-managementTable");

		this.oManagementSave = new Button(this.getId() + "-managementsave", {
			text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_OK"),
			enabled: true,
			press: function() {
				var oEvent = that._createEvent("managementSave", that._handleManageSavePressed);
				that._addEvent(oEvent);
			}
		});

	};

	VariantManagement.prototype._checkVariantNameConstraints = function(oInputField, oSaveButton, oManagementTable) {

		if (!oInputField) {
			return;
		}

		var sValue = oInputField.getValue();
		sValue = sValue.trim();
		if (sValue === "") {
			oInputField.setValueState(ValueState.Error);
			oInputField.setValueStateText(this.oResourceBundle.getText("VARIANT_MANAGEMENT_ERROR_EMPTY"));
		} else if (sValue.length > VariantManagement.MAX_NAME_LEN) {
			oInputField.setValueState(ValueState.Error);
			oInputField.setValueStateText(this.oResourceBundle.getText("VARIANT_MANAGEMENT_MAX_LEN", [
				VariantManagement.MAX_NAME_LEN
			]));
		} else {
			oInputField.setValueState(ValueState.None);
			oInputField.setValueStateText(null);
		}

		if (oSaveButton) {

			if (oInputField.getValueState() !== ValueState.Error) {
				this._checkIsDuplicate(oInputField, sValue, oManagementTable);
			}

			if (oInputField.getValueState() === ValueState.Error) {
				oSaveButton.setEnabled(false);
			} else {
				oSaveButton.setEnabled(true);
			}
		}
	};

	VariantManagement.prototype._checkIsDuplicate = function(oInputField, sValue, oManagementTable) {

		var bFlag = this._isDuplicate(oInputField, sValue, oManagementTable);

		if (bFlag) {
			oInputField.setValueState(ValueState.Error);
			oInputField.setValueStateText(this.oResourceBundle.getText("VARIANT_MANAGEMENT_ERROR_DUPLICATE"));
		} else {
			oInputField.setValueState(ValueState.None);
			oInputField.setValueStateText(null);
		}

		return bFlag;
	};

	VariantManagement.prototype._isDuplicate = function(oInputField, sValue, oManagementTable) {
		if (oManagementTable) {
			return this._isDuplicateManaged(oInputField, sValue, oManagementTable);
		} else {
			return this._isDuplicateSaveAs(sValue);
		}
	};

	VariantManagement.prototype._isDuplicateManaged = function(oInputField, sValue, oManagementTable) {
		var oItems, oInput, i;

		if (oManagementTable) { // 
			oItems = oManagementTable.getItems();
			if (oItems) {
				for (i = 0; i < oItems.length; i++) {
					oInput = oItems[i].getCells()[0];

					if (oInput === oInputField) {
						continue;
					}

					if (oInput) {
						if (oInput.getValue && (sValue === oInput.getValue().trim())) {
							return true;
						} else if (oInput.getText && (sValue === oInput.getText().trim())) {
							return true;
						}
					}
				}
			}
		}

		return false;
	};

	VariantManagement.prototype._isInErrorStateManaged = function(oInputField, oManagementTable) {
		var oItems, oInput, i;

		if (oManagementTable) { // 
			oItems = oManagementTable.getItems();
			if (oItems) {
				for (var i = 0; i < oItems.length; i++) {
					var oInput = oItems[i].getCells()[0];

					if (oInput === oInputField) {
						continue;
					}

					if (oInput && oInput.getValueState && (oInput.getValueState() === ValueState.Error)) {
						return true;
					}
				}
			}
		}

		return false;
	};

	VariantManagement.prototype._isDuplicateSaveAs = function(sValue) {
		var sTrimName = sValue.trim();
		var sText = this.getStandardItemText().trim();
		if (sText === sTrimName) {
			return true;
		}

		var oItems = this._getItems();
		for (var iCount = 0; iCount < oItems.length; iCount++) {
			sText = oItems[iCount].getText().trim();
			if (sText === sTrimName) {
				return true;
			}
		}

		return false;
	};

	VariantManagement.prototype._createActionSheet = function() {

		if (!this.oActionSheet) {
			this.oActionSheet = new ActionSheet(this.getId() + "-actionsheet", {
				showCancelButton: true,
				buttons: [
					this.oActionSheetManage, this.oActionSheetSave, this.oActionSheetSaveAs
				],
				placement: PlacementType.Top
			});
		}
	};

	VariantManagement.prototype._createSaveDialog = function() {
		var that = this;

		// this.oSaveSave.setEnabled(false);

		var sValue = this.oInputName ? this.oInputName.getValue() : "";
		this.oSaveSave.setEnabled(!this._isDuplicate(this.oInputName, sValue));

		if (!this.oSaveDialog) {

			this.oSaveDialog = new Dialog(this.getId() + "-savedialog", {
				title: this.oResourceBundle.getText("VARIANT_MANAGEMENT_SAVEDIALOG"),
				beginButton: this.oSaveSave,
				endButton: new Button(this.getId() + "-variantcancel", {
					text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_CANCEL"),
					press: function() {
						that.oSaveDialog.close();
					}
				}),
				content: [
					this.oLabelName, this.oInputName, this.oLabelKey, this.oInputKey, this.oSaveDialogOptionsGrid
				],
				stretch: Device.system.phone
			});
			this.oSaveDialog.setParent(this);
			this.oSaveDialog.addStyleClass("sapUiPopupWithPadding");
			this.oSaveDialog.addStyleClass("sapUiCompVarMngmtSaveDialog");
		}
	};

	VariantManagement.prototype._createManagementDialog = function() {
		var that = this;

		if (!this.oManagementDialog) {
			this.oManagementDialog = new Dialog(this.getId() + "-managementdialog", {
				contentWidth: "600px",
				customHeader: new Bar(this.getId() + "-managementHeader", {
					contentMiddle: [
						new Text(this.getId() + "-managementHeaderText", {
							text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_MANAGEDIALOG")
						})
					]
				}),
				beginButton: this.oManagementSave,
				endButton: new Button(this.getId() + "-managementcancel", {
					text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_CANCEL"),
					press: function() {
						that.aRemovedVariants = [];
						that.oManagementDialog.close();
					}
				}),
				content: [
					this.oManagementTable
				],
				stretch: Device.system.phone,
				afterClose: function() {
					if (that.bFireSelect == true) {
						that.bFireSelect = false;
						setTimeout(function() {
							that._fireSelectAsync();
						}, 0);
					}
				}
			});
			this.oManagementDialog.setParent(this);
			this.oManagementDialog.addStyleClass("sapUiPopupWithPadding");
		}
	};

	VariantManagement.prototype._handleArrowUpDown = function(oList, oSearch) {

		var sItemId = null;
		var that = this;

		oList.attachBrowserEvent("keydown", jQuery.proxy(function(e) {
			if (e.which === 38) { // UP
				if (that.oVariantSelectionPage.getShowSubHeader()) {
					sItemId = document.activeElement.id;
				}
			}
		}, this));

		oList.attachBrowserEvent("keyup", jQuery.proxy(function(e) {
			if (e.which === 38) { // UP
				if (sItemId && (sItemId === document.activeElement.id)) {
					var aItems = oList.getItems();
					if (aItems && aItems.length > 0) {
						var oItem = sap.ui.getCore().byId(sItemId);
						if (oItem === aItems[0]) {
							oSearch.focus();
						}
					}
				}

				sItemId = null;
			}
		}, this));

		oSearch.attachBrowserEvent("keyup", jQuery.proxy(function(e) {
			if (e.which === 40) { // DOWN
				var aItems = oList.getItems();
				if (aItems && aItems.length > 0) {
					aItems[0].focus();
				}
			}
		}, this));
	};

	VariantManagement.prototype._triggerSearch = function(oEvent) {

		if (!oEvent) {
			return;
		}

		var parameters = oEvent.getParameters();
		if (!parameters) {
			return;
		}

		this._restoreCompleteList();

		var sValue = parameters.newValue ? parameters.newValue : "";

		this._triggerSearchByValue(sValue.toLowerCase());
	};

	VariantManagement.prototype._triggerSearchByValue = function(sValue) {
		var sText, sKey, oVariantListItem;

		this.oSelectedVariantItemKey = null;

		oVariantListItem = this.oVariantList.getItemByKey(this.getStandardVariantKey());
		if (oVariantListItem && (oVariantListItem.getText().toLowerCase().indexOf(sValue) < 0)) {

			if (this.getSelectionKey() === sKey) {
				this.oSelectedVariantItemKey = sKey;
			}
			this.oVariantList.removeItem(oVariantListItem);

			oVariantListItem.destroy();
		}

		var oItems = this._getItems();
		for (var iCount = 0; iCount < oItems.length; iCount++) {
			sText = oItems[iCount].getText();

			if (sText.toLowerCase().indexOf(sValue) < 0) {
				sKey = oItems[iCount].getKey();
				oVariantListItem = this.oVariantList.getItemByKey(sKey);
				if (oVariantListItem) {

					if (this.getSelectionKey() === sKey) {
						this.oSelectedVariantItemKey = sKey;
					}
					this.oVariantList.removeItem(oVariantListItem);

					oVariantListItem.destroy();
				}
			}
		}
	};

	VariantManagement.prototype._restoreCompleteList = function() {
		var iCount, oItem, oItems, oVariantListItem;
		var nOffset = 0;

		oVariantListItem = this.oVariantList.getItemByKey(this.getStandardVariantKey());
		if (!oVariantListItem) {
			oVariantListItem = this._createStandardVariantListItem();
			if (oVariantListItem) {
				this.oVariantList.insertItem(oVariantListItem, 0);
			}
		}

		if (oVariantListItem) {
			nOffset = 1;
			if (this.oSelectedVariantItemKey) {
				if (this.oSelectedVariantItemKey === oVariantListItem.getKey()) {
					this.oVariantList.setSelectedItem(oVariantListItem);
					this.oSelectedVariantItemKey = null;
				}
			} else {
				/* eslint-disable no-lonely-if */
				if (this.getSelectionKey() == oVariantListItem.getKey() || this.getSelectionKey() === null) {
					this.oVariantList.setSelectedItem(oVariantListItem);
					/* eslint-enable no-lonely-if */
				}
			}
		}

		oItems = this._getItems();
		oItems.sort(this._compareItems);
		for (iCount = 0; iCount < oItems.length; iCount++) {
			oItem = oItems[iCount];

			if (oItem.getKey() === this.getStandardVariantKey()) {
				continue;
			}

			oVariantListItem = this.oVariantList.getItemByKey(oItem.getKey());
			if (!oVariantListItem) {
				oVariantListItem = this._createVariantListItem(oItem, iCount);
				this.oVariantList.insertItem(oVariantListItem, iCount + nOffset);
			}

			if (this.oSelectedVariantItemKey) {
				if (this.oSelectedVariantItemKey === oVariantListItem.getKey()) {
					this.oVariantList.setSelectedItem(oVariantListItem);
					this.oSelectedVariantItemKey = null;
				}
			} else {
				/* eslint-disable no-lonely-if */
				if (this.getSelectionKey() == oVariantListItem.getKey()) {
					this.oVariantList.setSelectedItem(oVariantListItem);
					/* eslint-enable no-lonely-if */
				}
			}

		}
	};

	VariantManagement.prototype._determineStandardVariantName = function() {

		var sText = this.oResourceBundle.getText("VARIANT_MANAGEMENT_STANDARD");

		if (this.bVariantItemMode === false) {
			sText = this.oResourceBundle.getText("VARIANT_MANAGEMENT_DEFAULT");
		}

		if (this.getStandardVariantKey() === this.STANDARDVARIANTKEY) {
			if (this.getStandardItemText() !== null && this.getStandardItemText() != "") {
				sText = this.getStandardItemText();
			}
		}

		return sText;

	};

	VariantManagement.prototype._createStandardVariantListItem = function() {
		var oItem, oVariantListItem = null;

		var sText = this._determineStandardVariantName();

		if ((this.bVariantItemMode === true) || (this.bVariantItemMode === false && (this.getSelectionKey() === this.getStandardVariantKey() || this.getSelectionKey() === null))) {

			oVariantListItem = new VariantItem(this.oVariantPopoverTrigger.getId() + "-item-standard", {
				key: this.getStandardVariantKey(),
				text: sText,
				readOnly: true, // !this.getIndustrySolutionMode(),
				executeOnSelection: this.bExecuteOnSelectForStandard
			});

			if (this._isIndustrySolutionModeAndVendorLayer() && this.bVariantItemMode) {
				oVariantListItem.setGlobal(true);
			}

			if (this.getStandardVariantKey() !== this.STANDARDVARIANTKEY) {
				oItem = this.getItemByKey(this.getStandardVariantKey());
				if (oItem) {
					this._setVariantListItemProperties(oItem, oVariantListItem);
					oVariantListItem.setReadOnly(true);
				}
			}
		}

		return oVariantListItem;
	};

	VariantManagement.prototype._createVariantListItem = function(oItem, iCount) {
		var oVariantListItem = new VariantItem(this.oVariantPopoverTrigger.getId() + "-item-" + iCount, {
			key: oItem.getKey(),
			text: oItem.getText()
		});

		this._setVariantListItemProperties(oItem, oVariantListItem);

		return oVariantListItem;
	};

	VariantManagement.prototype._setVariantListItemProperties = function(oItem, oVariantListItem) {
		if (oItem.getReadOnly) {
			oVariantListItem.setReadOnly(oItem.getReadOnly());
		}
		if (oItem.getExecuteOnSelection) {
			oVariantListItem.setExecuteOnSelection(oItem.getExecuteOnSelection());
		}
		if (oItem.getGlobal) {
			oVariantListItem.setGlobal(oItem.getGlobal());
		}
		if (oItem.getLifecyclePackage) {
			oVariantListItem.setLifecyclePackage(oItem.getLifecyclePackage());
		}
		if (oItem.getLifecycleTransportId) {
			oVariantListItem.setLifecycleTransportId(oItem.getLifecycleTransportId());
		}
		if (oItem.getNamespace) {
			oVariantListItem.setNamespace(oItem.getNamespace());
		}
		if (oItem.getAccessOptions) {
			oVariantListItem.setAccessOptions(oItem.getAccessOptions());
		}
		if (oItem.getLabelReadOnly) {
			oVariantListItem.setLabelReadOnly(oItem.getLabelReadOnly());
		}
	};

	// exit destroy all controls created in init
	VariantManagement.prototype.exit = function() {

		if (this.oSearchField) {
			this.oSearchField.destroy();
			this.oSearchField = undefined;
		}

		if (this.oVariantManage) {
			this.oVariantManage.destroy();
			this.oVariantManage = undefined;
		}
		if (this.oVariantSave) {
			this.oVariantSave.destroy();
			this.oVariantSave = undefined;
		}
		if (this.oVariantList) {
			this.oVariantList.destroy();
			this.oVariantList = undefined;
		}
		if (this.oInputName) {
			this.oInputName.destroy();
			this.oInputName = undefined;
		}
		if (this.oLabelName) {
			this.oLabelName.destroy();
			this.oLabelName = undefined;
		}
		if (this.oDefault) {
			this.oDefault.destroy();
			this.oDefault = undefined;
		}
		if (this.oSaveSave) {
			this.oSaveSave.destroy();
			this.oSaveSave = undefined;
		}
		if (this.oSaveDialog) {
			this.oSaveDialog.destroy();
			this.oSaveDialog = undefined;
		}
		if (this.oManagementTable) {
			this.oManagementTable.destroy();
			this.oManagementTable = undefined;
		}
		if (this.oManagementSave) {
			this.oManagementSave.destroy();
			this.oManagementSave = undefined;
		}
		if (this.oManagementDialog) {
			this.oManagementDialog.destroy();
			this.oManagementDialog = undefined;
		}
		if (this.oVariantText) {
			this.oVariantText.destroy();
			this.oVariantText = undefined;
		}
		if (this.oVariantPopoverTrigger) {
			this.oVariantPopoverTrigger.destroy();
			this.oVariantPopoverTrigger = undefined;
		}
		if (this.oVariantLayout) {
			this.oVariantLayout.destroy();
			this.oVariantLayout = undefined;
		}
		if (this.oVariantPopOver) {
			this.oVariantPopOver.destroy();
			this.oVariantPopOver = undefined;
		}
		if (this.oVariantSaveAs) {
			this.oVariantSaveAs.destroy();
			this.oVariantSaveAs = undefined;
		}
		if (this.oShare) {
			this.oShare.destroy();
			this.oShare = undefined;
		}
		if (this.oExecuteOnSelect) {
			this.oExecuteOnSelect.destroy();
			this.oExecuteOnSelect = undefined;
		}
		if (this.oCreateTile) {
			this.oCreateTile.destroy();
			this.oCreateTile = undefined;
		}
		if (this.oSaveDialogOptionsGrid) {
			this.oSaveDialogOptionsGrid.destroy();
			this.oSaveDialogOptionsGrid = undefined;
		}
		if (this.oVariantSelectionPage) {
			this.oVariantSelectionPage.destroy();
			this.oVariantSelectionPage = undefined;
		}
		if (this.oActions) {
			this.oActions.destroy();
			this.oActions = undefined;
		}
		if (this.oActionSheetManage) {
			this.oActionSheetManage.destroy();
			this.oActionSheetManage = undefined;
		}
		if (this.oActionSheetSave) {
			this.oActionSheetSave.destroy();
			this.oActionSheetSave = undefined;
		}
		if (this.oActionSheetSaveAs) {
			this.oActionSheetSaveAs.destroy();
			this.oActionSheetSaveAs = undefined;
		}
		if (this.oInputKey) {
			this.oInputKey.destroy();
			this.oInputKey = undefined;
		}
		if (this.oLabelKey) {
			this.oLabelKey.destroy();
			this.oLabelKey = undefined;
		}
	};

	VariantManagement.prototype.addItem = function(oItem) {
		oItem = this.validateAggregation("items", oItem, true);
		this.bVariantItemMode = false;
		this.addAggregation("items", oItem, false);
		var _sKey = this.getInitialSelectionKey();
		this._setSelection(oItem, _sKey);
		this._manageButtonState();
		this._setStandardText();
		return this;
	};

	VariantManagement.prototype.insertItem = function(oItem, iIndex) {
		var _iIndex = iIndex;
		oItem = this.validateAggregation("items", oItem, true);
		this.bVariantItemMode = false;
		this.insertAggregation("items", oItem, _iIndex);
		var _sKey = this.getInitialSelectionKey();
		this._setSelection(oItem, _sKey);
		this._manageButtonState();
		this._setStandardText();
		return this;
	};

	VariantManagement.prototype.removeItem = function(oItem) {
		this.removeAggregation("items", oItem);
		this._manageButtonState();
		return oItem;
	};

	VariantManagement.prototype.removeAllItems = function() {
		var ret = this.removeAllAggregation("items");
		this._manageButtonState();
		this._setSelectedItem(null);
		return ret;
	};

	VariantManagement.prototype.destroyItems = function() {
		this.destroyAggregation("items");
		this._manageButtonState();
		this._setSelectedItem(null);
		return this;
	};

	VariantManagement.prototype._getItems = function() {
		if (this.bVariantItemMode) {
			return this.getVariantItems();
		} else {
			return this.getItems();
		}
	};

	VariantManagement.prototype._removeItem = function(oItem) {
		if (this.bVariantItemMode) {
			return this.removeVariantItem(oItem);
		} else {
			return this.removeItem(oItem);
		}
	};

	VariantManagement.prototype.getItemByKey = function(sKey) {
		var oItems = this._getItems();
		for (var iCount = 0; iCount < oItems.length; iCount++) {
			if (sKey == oItems[iCount].getKey()) {
				return oItems[iCount];
			}
		}
		return null;
	};

	VariantManagement.prototype.addVariantItem = function(oVariantItem) {
		oVariantItem = this.validateAggregation("variantItems", oVariantItem, true);
		this.bVariantItemMode = true;
		this.addAggregation("variantItems", oVariantItem, false);
		var _sKey = this.getInitialSelectionKey();
		this._setSelection(oVariantItem, _sKey);
		this._manageButtonState();
		this._setStandardText();
		return this;
	};

	VariantManagement.prototype.insertVariantItem = function(oVariantItem, iIndex) {
		var _iIndex = iIndex;
		oVariantItem = this.validateAggregation("variantItems", oVariantItem, true);
		this.bVariantItemMode = true;
		this.insertAggregation("variantItems", oVariantItem, _iIndex);
		var _sKey = this.getInitialSelectionKey();
		this._setSelection(oVariantItem, _sKey);
		this._manageButtonState();
		this._setStandardText();
		return this;
	};

	VariantManagement.prototype._setSelectedItem = function(oItem) {
		this.oSelectedItem = oItem;
		if (oItem != null) {
			this.oVariantText.setText(oItem.getText());
		} else {
			this._setStandardText();
		}
	};

	VariantManagement.prototype._getSelectedItem = function() {
		return this.oSelectedItem;
	};

	VariantManagement.prototype.setInitialSelectionKey = function(sKey) {
		this.setProperty("initialSelectionKey", sKey, true); // do not re-render !
		this._setSelectionByKey(sKey);
	};

	VariantManagement.prototype.setEnabled = function(bEnabled) {
		this.setProperty("enabled", bEnabled, false);
		if (this.oVariantPopoverTrigger) {
			this.oVariantPopoverTrigger.setEnabled(bEnabled);
		}
		if (!bEnabled) {
			this.oVariantText.removeStyleClass("sapUICompVarMngmtEnabled");
			this.oVariantModifiedText.removeStyleClass("sapUICompVarMngmtEnabled");
			this.oVariantText.addStyleClass("sapUICompVarMngmtDisabled");
			this.oVariantModifiedText.addStyleClass("sapUICompVarMngmtDisabled");
		} else {
			this.oVariantText.removeStyleClass("sapUICompVarMngmtDisabled");
			this.oVariantModifiedText.removeStyleClass("sapUICompVarMngmtDisabled");
			this.oVariantText.addStyleClass("sapUICompVarMngmtEnabled");
			this.oVariantModifiedText.addStyleClass("sapUICompVarMngmtEnabled");
		}
	};

	/**
	 * The string given as "sKey" will be used to set the initial selected item of the Variant Management. If an item exists with the matching key the
	 * item will be marked as selected If the key is set before any items are added the Variant Management will try to set the selection when the
	 * items are added in "addItem" or "insterItem".
	 * 
	 * @param {sap.ui.core.Item} oItem the Item to be compared
	 * @param {string} sKey the string used to be compared with the item's key attribute
	 */
	VariantManagement.prototype._setSelection = function(oItem, sKey) {
		if (oItem.getKey() === sKey) {
			this._setSelectedItem(oItem);
			this.fireSelect({
				key: sKey
			});
		}
	};

	VariantManagement.prototype.addStyleClass = function(sStyleClass) {
		if (Control.prototype.addStyleClass) {
			Control.prototype.addStyleClass.apply(this, arguments);
		}
		if (this.oVariantPopOver) {
			this.oVariantPopOver.addStyleClass(sStyleClass);
		}
		if (this.oSaveDialog) {
			this.oSaveDialog.addStyleClass(sStyleClass);
		}
		if (this.oManagementDialog) {
			this.oManagementDialog.addStyleClass(sStyleClass);
		}
	};

	VariantManagement.prototype.removeStyleClass = function(sStyleClass) {
		if (Control.prototype.addStyleClass) {
			Control.prototype.removeStyleClass.apply(this, arguments);
		}
		if (this.oVariantPopOver) {
			this.oVariantPopOver.removeStyleClass(sStyleClass);
		}
		if (this.oSaveDialog) {
			this.oSaveDialog.removeStyleClass(sStyleClass);
		}
		if (this.oManagementDialog) {
			this.oManagementDialog.removeStyleClass(sStyleClass);
		}
	};

	/**
	 * Removes the current variant selection and resets to default value.
	 * 
	 * @public
	 * @since 1.22.0
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	VariantManagement.prototype.clearVariantSelection = function() {
		this.setInitialSelectionKey(this.getStandardVariantKey());
		this._setSelectedItem(null);
	};

	/**
	 * If the oControl has the ".sapUiSizeCompact" class it will be also set on the oDialog
	 * 
	 * @param {sap.ui.core.Control} oControl the control to be checked for compact
	 * @param {sap.ui.core.Control} oDialog the dialog/popover to receive the compact style class
	 */
	VariantManagement.prototype._setDialogCompactStyle = function(oControl, oDialog) {
		if (this._checkDialogCompactStyle(oControl)) {
			oDialog.addStyleClass("sapUiSizeCompact");
		} else {
			oDialog.removeStyleClass("sapUiSizeCompact");
		}
	};

	/**
	 * If the oControl has the ".sapUiSizeCompact" the function will return true
	 * 
	 * @param {sap.ui.core.Control} oControl the control to be checked for compact
	 * @returns {boolean} result
	 */
	VariantManagement.prototype._checkDialogCompactStyle = function(oControl) {
		if (oControl.$().closest(".sapUiSizeCompact").length > 0) {
			return true;
		} else {
			return false;
		}
	};

	/**
	 * Check and set Manage Button State
	 */
	VariantManagement.prototype._manageButtonState = function() {
		if (this._getItems() && this._getItems().length > 0) {
			this.oVariantManage.setEnabled(true);
			this.oActionSheetManage.setEnabled(true);
		} else {
			this.oVariantManage.setEnabled(false);
			this.oActionSheetManage.setEnabled(false);
		}
	};

	VariantManagement.prototype.getSelectionKey = function() {
		var sKey = null;
		var oItem = this._getSelectedItem();
		if (oItem !== null) {
			sKey = oItem.getKey();
		} else if (this.bVariantItemMode) {
			sKey = this.getStandardVariantKey();
		} else {
			sKey = null;
		}
		return sKey;
	};

	VariantManagement.prototype._setSelectionByKey = function(sKey) {
		var oItems = this._getItems();
		var bFound = false;
		if (oItems.length > 0) {
			for (var iI = 0; iI < oItems.length; iI++) {
				if (oItems[iI].getKey() === sKey) {
					this._setSelectedItem(oItems[iI]);
					bFound = true;
					break;
				}
			}
		}
		if (!bFound) {
			this._setSelectedItem(null);
		}
	};

	VariantManagement.prototype.replaceKey = function(sOldKey, sNewKey) {
		var oItems = this._getItems();
		if (oItems.length > 0) {
			for (var iI = 0; iI < oItems.length; iI++) {
				if (oItems[iI].getKey() === sOldKey) {
					oItems[iI].setKey(sNewKey);
					if (this.getDefaultVariantKey() == sOldKey) {
						this.setDefaultVariantKey(sNewKey);
					}
					if (this._getSelectedItem() === oItems[iI]) { // ask Franz?
						this._setSelectedItem(null);
					}
					break;
				}
			}
		}
	};

	VariantManagement.prototype.currentVariantSetModified = function(bFlag) {
		if (bFlag) {
			if (!this.bDirty) {
				this.oVariantModifiedText.setVisible(true);
				this.bDirty = true;
				this.oModel.setProperty("/enabled", true);
			}
		} else if (this.bDirty) {
			this.oVariantModifiedText.setVisible(false);
			this.bDirty = false;
			this.oModel.setProperty("/enabled", false);
		}
	};

	VariantManagement.prototype.currentVariantGetModified = function() {
		return this.bDirty;
	};

	VariantManagement.prototype._openVariantSelection = function() {
		var oItems = null;

		if (this.bPopoverOpen == true) {
			return;
		}
		this.bPopoverOpen = true;

		this.oVariantList.destroyItems();

		this.oVariantSave.setEnabled(false);
		this.oActionSheetSave.setEnabled(false);
		if (this.bVariantItemMode === false && this.getSelectionKey() !== null) {
			this.oVariantSave.setEnabled(true);
			this.oActionSheetSave.setEnabled(true);
		}

		oItems = this._getItems();
		if (oItems.length < 9) {
			this.oVariantSelectionPage.setShowSubHeader(false);
		} else {
			this.oVariantSelectionPage.setShowSubHeader(true);
			this.oSearchField.setValue("");
		}

		this._restoreCompleteList();

		if (this.bDirty) {
			var oSelectedItem = this.oVariantList.getItemByKey(this.getSelectionKey());
			if (oSelectedItem) {
				if (!oSelectedItem.getReadOnly() || (this._isIndustrySolutionModeAndVendorLayer() && (this.getStandardVariantKey() === oSelectedItem.getKey()))) {
					this.oVariantSave.setEnabled(true);
					this.oActionSheetSave.setEnabled(true);
				}
			}
		}

		this.oVariantSaveAs.setEnabled(true);
		if (this._isIndustrySolutionModeAndVendorLayer() && (this.getStandardVariantKey() === this.getSelectionKey()) && (this.getStandardVariantKey() === this.STANDARDVARIANTKEY)) {
			this.oVariantSaveAs.setEnabled(false);
		}

		this._setDialogCompactStyle(this, this.oVariantPopOver);
		this._manageButtonState();
		this.oVariantPopOver.setInitialFocus(this.oVariantList.getSelectedItem().getId());
		this.oVariantPopOver.openBy(this.oVariantPopoverTrigger.$("img")[0]);
	};

	VariantManagement.prototype.onclick = function(oEvent) {
		if (this.getEnabled()) {
			this._openVariantSelection();
		}
	};

	VariantManagement.prototype.onkeydown = function(oEvent) {
		if (oEvent.which === jQuery.sap.KeyCodes.F4 || oEvent.altKey === true && oEvent.which === jQuery.sap.KeyCodes.ARROW_UP || oEvent.altKey === true && oEvent.which === jQuery.sap.KeyCodes.ARROW_DOWN) {
			if (this.getEnabled()) {
				this._openVariantSelection();
			}
		}
	};

	VariantManagement.prototype._initalizeManagementTableColumns = function() {
		if (this.bManagementTableInitialized) {
			return;
		}
		this.oManagementTable.addColumn(new Column({
			header: new Text({
				text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_NAME")
			})
		}));
		this.oManagementTable.addColumn(new Column({
			header: new Text({
				text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_VARIANTTYPE")
			}),
			width: "4rem",
			demandPopin: true,
			popinDisplay: PopinDisplay.Inline,
			minScreenWidth: ScreenSize.Tablet
		}));
		this.oManagementTable.addColumn(new Column({
			header: new Text({
				text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_DEFAULT")
			}),
			width: "4rem",
			demandPopin: true,
			popinDisplay: PopinDisplay.Inline,
			minScreenWidth: ScreenSize.Tablet
		}));
		if (this.getShowExecuteOnSelection()) {
			this.oManagementTable.addColumn(new Column({
				header: new Text({
					text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_EXECUTEONSELECT")
				}),
				width: "4rem",
				hAlign: TextAlign.Center,
				demandPopin: true,
				popinDisplay: PopinDisplay.Inline,
				minScreenWidth: ScreenSize.Tablet
			}));
		}
		this.oManagementTable.addColumn(new Column({
			width: "2.5rem",
			hAlign: TextAlign.Center
		}));
		this.bManagementTableInitialized = true;
	};

	VariantManagement.prototype._initalizeSaveAsDialog = function() {
		this.oSaveDialogOptionsGrid.removeAllContent();

		this.oShare.setVisible(this.getShowShare());
		this.oExecuteOnSelect.setVisible(this.getShowExecuteOnSelection());
		this.oCreateTile.setVisible(this.getShowCreateTile());

		this.oSaveDialogOptionsGrid.addContent(this.oDefault);
		if (this.getShowShare()) {
			this.oSaveDialogOptionsGrid.addContent(this.oShare);
		}
		if (this.getShowExecuteOnSelection()) {
			this.oSaveDialogOptionsGrid.addContent(this.oExecuteOnSelect);
		}
		if (this.getShowCreateTile()) {
			this.oSaveDialogOptionsGrid.addContent(this.oCreateTile);
		}
	};

	VariantManagement.prototype.onBeforeRendering = function() {

		var fGetMax = function(aContent) {
			var len, maxLength = 0;
			for (var i = 0; i < aContent.length; i++) {
				len = aContent[i].$().width();
				if (len > maxLength) {
					maxLength = len;
				}
			}

			return maxLength;
		};

		if (this.oSaveDialogOptionsGrid && this.oSaveDialog && this.oSaveDialog.getVisible()) {
			var aContent = this.oSaveDialogOptionsGrid.getContent();
			if (aContent && aContent.length > 0) {
				var widthGrid = this.oSaveDialogOptionsGrid.$().width();

				var widthLabel = fGetMax(aContent);

				var widthPaddingLeft = 32;
				var widthCB = 12;
				if (!this._checkDialogCompactStyle(this.oSaveDialog)) {
					widthPaddingLeft = 48;
					widthCB = 18;
				}

				if ((widthPaddingLeft + widthLabel + widthCB) > widthGrid / 2) {
					this.oSaveDialogOptionsGrid.setDefaultSpan("L12 M12 S12");
				}

			}
		}
	};

	VariantManagement.prototype._variantSavePressed = function() {
		var oItem = this._getSelectedItem();

		if (!oItem) {
			if (this.getStandardVariantKey() === this.STANDARDVARIANTKEY) {

				oItem = new VariantItem({
					text: this._determineStandardVariantName(),
					key: this.STANDARDVARIANTKEY,
					global: this._isIndustrySolutionModeAndVendorLayer()
				});
			} else {
				oItem = this.getItemByKey(this.getStandardVariantKey());
			}
		}

		var bDefault = false;
		if ((this.getDefaultVariantKey() === oItem.getKey()) && (this.getStandardVariantKey() !== this.STANDARDVARIANTKEY)) {
			bDefault = true;
		}

		if (oItem.getLifecyclePackage && oItem.getGlobal() == true) {
			var that = this;
			var fOkay = function(sPackage, sTransport) {
				that.oVariantPopOver.close();
				that.sPackage = sPackage;
				that.sTransport = sTransport;
				that.fireSave({
					name: oItem.getText(),
					overwrite: true,
					key: oItem.getKey(),
					def: bDefault,
					global: (that._isIndustrySolutionModeAndVendorLayer() && (that.getStandardVariantKey() === that.getStandardVariantKey())),
					lifecyclePackage: that.sPackage,
					lifecycleTransportId: that.sTransport
				});
				oItem.setLifecycleTransportId(that.sTransport);
				that.bDirty = false;
				that.oVariantModifiedText.setVisible(false);
				that.oModel.setProperty("/enabled", false);
				that._eventDone();
			};
			var fError = function(oResult) {
				that.sTransport = null;
				that.sPackage = null;
				that._cancelAllEvents();
			};
			this._assignTransport(oItem, fOkay, fError, this.oVariantText);
		} else {
			this.oVariantPopOver.close();
			this.fireSave({
				name: oItem.getText(),
				overwrite: true,
				key: oItem.getKey(),
				def: bDefault
			});
			this.bDirty = false;
			this.oVariantModifiedText.setVisible(false);
			this.oModel.setProperty("/enabled", false);
			this._eventDone();
		}
	};

	VariantManagement.prototype._assignTransport = function(oVariant, fOkay, fError, oControl) {
		var oObject = {
			type: "variant",
			name: "",
			namespace: ""
		};
		oObject["package"] = "";
		if (oVariant !== null) {
			oObject["package"] = oVariant.getLifecyclePackage();
			oObject["name"] = oVariant.getKey();
			oObject["namespace"] = oVariant.getNamespace();
		}
		var _fOkay = function(oResult) {
			var sPackage;
			var sTransport;
			sTransport = oResult.getParameters().selectedTransport;
			sPackage = oResult.getParameters().selectedPackage;
			fOkay(sPackage, sTransport);
		};
		var _fError = function(oResult) {
			fError(oResult);
		};
		if (this.getLifecycleSupport()) {
			var sTransport = null;
			if (oVariant) {
				sTransport = oVariant.getLifecycleTransportId();
			}
			if (sTransport != null && sTransport.trim().length > 0) {
				fOkay(oObject["package"], sTransport);
			} else {
				var oTransports = new TransportSelection();
				oTransports.selectTransport(oObject, _fOkay, _fError, this._checkDialogCompactStyle(oControl), oControl);
			}
		} else {
			fOkay(oObject["package"], "");
		}
	};

	VariantManagement.prototype.getDefaultVariantKey = function() {
		var sValue = this.getProperty("defaultVariantKey");
		if (sValue === "") {
			if (this.bVariantItemMode) {
				sValue = this.getStandardVariantKey();
			}
		}
		return sValue;
	};

	VariantManagement.prototype._compareItems = function(first, second) {
		var sFirst = first.getText();
		var sSecond = second.getText();
		var sFirstU = sFirst.toUpperCase();
		var sSecondU = sSecond.toUpperCase();
		if (sFirstU == sSecondU) {
			if (sFirst == sSecond) {
				return 0;
			}
			if (sFirst < sSecond) {
				return -1;
			}
			if (sFirst > sSecond) {
				return 1;
			}
		}
		if (sFirstU < sSecondU) {
			return -1;
		}
		if (sFirstU > sSecondU) {
			return 1;
		}
	};

	VariantManagement.prototype._accessOptionsText = function(sOptions) {
		var sMessage = null;
		switch (sOptions) {
			case "R":
				sMessage = this.oResourceBundle.getText("VARIANT_MANAGEMENT_WRONG_LAYER");
				break;
			case "RD":
				sMessage = this.oResourceBundle.getText("VARIANT_MANAGEMENT_WRONG_LANGUAGE");
				break;
			default:
				sMessage = null;
		}
		return sMessage;
	};

	VariantManagement.prototype._openSaveAsDialog = function() {
		this._initalizeSaveAsDialog();
		if (this._getSelectedItem()) {
			this.oInputName.setValue(this._getSelectedItem().getText());
		} else {
			this.oInputName.setValue("");
		}
		this.oInputName.setEnabled(true);
		this.oInputName.setValueState(ValueState.None);
		this.oInputName.setValueStateText(null);
		this.oDefault.setSelected(false);
		this.oShare.setSelected(false);
		this.oCreateTile.setSelected(false);
		this.oExecuteOnSelect.setSelected(false);

		this._createSaveDialog();
		this._setDialogCompactStyle(this, this.oSaveDialog);
		this.oVariantPopOver.close();
		this.sTransport = null;
		this.sPackage = null;
		if (this.bManualVariantKey) {
			this.oInputKey.setVisible(true);
			this.oInputKey.setEnabled(true);
			this.oInputKey.setValueState(ValueState.None);
			this.oInputKey.setValueStateText(null);
			this.oLabelKey.setVisible(true);
		} else {
			this.oInputKey.setVisible(false);
			this.oLabelKey.setVisible(false);
		}

		this.oSaveDialog.open();
	};

	VariantManagement.prototype._checkManageItemNameChange = function(oManageItem) {
		var sText = "";
		var oInputField = null;
		var that = this;
		oInputField = oManageItem.getCells()[0];

		sText = oInputField.getValue();
		sText = sText.trim();
		var oEditableVariantItem = oManageItem;
		var sKey = oEditableVariantItem.getKey();

// var oItem = this.oVariantList.getItemByKey(sKey);
// if (sText.length === 0) {
// oInputField.setValue(oItem.getText());
// oInputField.setValueState(ValueState.None);
// oInputField.setValueStateText(null);
// } else {
//
// this._checkIsDuplicate(oInputField, sText, this.oManagementTable);
// }

		this._checkVariantNameConstraints(oInputField, this.oManagementSave);

		if (oInputField.getValueState() === ValueState.Error) {
			this.oManagementSave.setEnabled(false);
			this._eventDone();
			return;
		}

		if (!this._isInErrorStateManaged(oInputField, this.oManagementTable)) {
			this.oManagementSave.setEnabled(true);
		}

		if (this.oVariantList.getItemByKey(sKey).getText().trim() === sText) {
			this._eventDone();
			return;
		}

		if (oEditableVariantItem.getGlobal()) {
			var fOkay = function(sPackage, sTransport) {
				oEditableVariantItem.setLifecyclePackage(sPackage);
				oEditableVariantItem.setLifecycleTransportId(sTransport);
				that._eventDone();
			};

			var fError = function(oResult) {
				var oItem = that.oVariantList.getItemByKey(sKey); // ???
				oInputField.setValue(oItem.getText());
				that._cancelAllEvents();
			};

			this._createManagementDialog();
			this._assignTransport(oEditableVariantItem, fOkay, fError, this.oManagementDialog);
		} else {
			this._eventDone();
		}
	};

	VariantManagement.prototype._handleManageSavePressed = function() {
		var oNewItems = this.oManagementTable.getItems();
		var oItem;
		var fireSelect = false;
		var sName = "";
		var oOriginalItem = null;
		var iD = 0;

		for (var iG = 0; iG < oNewItems.length; iG++) {
			oItem = this.oVariantList.getItemByKey(oNewItems[iG].getKey());
			if (oNewItems[iG].getCells()[0].getValue) {
				sName = oNewItems[iG].getCells()[0].getValue();
			}
			if (oNewItems[iG].getCells()[0].getText) {
				sName = oNewItems[iG].getCells()[0].getText();
			}
			sName = sName.trim();
			if (oItem.getText() !== sName) {
				this.aRenamedVariants.push({
					key: oItem.getKey(),
					name: sName
				});
				oOriginalItem = this.getItemByKey(oNewItems[iG].getKey());
				oOriginalItem.setText(sName);
				if (oOriginalItem.setLifecyclePackage) {
					oOriginalItem.setLifecyclePackage(oNewItems[iG].getLifecyclePackage());
					oOriginalItem.setLifecycleTransportId(oNewItems[iG].getLifecycleTransportId());
				}

				if (this.lastSelectedVariantKey === oItem.getKey()) {
					this.oVariantText.setText(sName);
					this.bDirty = false;
					this.oVariantModifiedText.setVisible(false);
					this.oModel.setProperty("/enabled", false);
				}
			}

			if (this.getShowExecuteOnSelection() && oItem.getExecuteOnSelection && oItem.getExecuteOnSelection() != oNewItems[iG].getCells()[3].getSelected()) {
				// execute on selection changed
				var bFlag = oNewItems[iG].getCells()[3].getSelected();
				var oItemTmp = this.getItemByKey(oNewItems[iG].getKey());
				if (oItemTmp && oItemTmp.setExecuteOnSelection) {
					oItemTmp.setExecuteOnSelection(bFlag);
					this.aExeVariants.push({
						key: oItem.getKey(),
						exe: bFlag
					});
					if (oItemTmp.setLifecyclePackage) {
						oItemTmp.setLifecyclePackage(oNewItems[iG].getLifecyclePackage());
						oItemTmp.setLifecycleTransportId(oNewItems[iG].getLifecycleTransportId());
					}
				}
			}
		}

		if (this.oManagementDialog) {
			this.oManagementDialog.close();
		}
		this._manageButtonState();
		if (this.bVariantItemMode === false) {
			if (this.getDefaultVariantKey() != this.sNewDefaultKey) {
				var oItemTmpDef = null;
				if (this.sNewDefaultKey == this.getStandardVariantKey()) {
					oItemTmpDef = this.getItemByKey(this.getDefaultVariantKey());
					this.fireSave({
						name: oItemTmpDef.getText(),
						overwrite: true,
						key: oItemTmpDef.getKey(),
						def: false
					});
				} else {
					oItemTmpDef = this.getItemByKey(this.sNewDefaultKey);
					this.fireSave({
						name: oItemTmpDef.getText(),
						overwrite: true,
						key: oItemTmpDef.getKey(),
						def: true
					});
				}
			}
		}
		this.setDefaultVariantKey(this.sNewDefaultKey);

		for (iD = 0; iD < this.aRemovedVariants.length; iD++) {
			oItem = this.getItemByKey(this.aRemovedVariants[iD]);
			for (var iE = 0; iE < this.aRemovedVariantTransports.length; iE++) {
				if (this.aRemovedVariants[iD] === this.aRemovedVariantTransports[iE].key) {
					var oManageItem = this.aRemovedVariantTransports[iE];
					if (oItem.setLifecyclePackage) {
						oItem.setLifecycleTransportId(oManageItem.transport);
					}
					break;
				}
			}
		}

		this.fireManage({
			renamed: this.aRenamedVariants,
			deleted: this.aRemovedVariants,
			exe: this.aExeVariants,
			def: this.getDefaultVariantKey()
		});

		for (iD = 0; iD < this.aRemovedVariants.length; iD++) {
			oItem = this.getItemByKey(this.aRemovedVariants[iD]);
			if (oItem) {
				this._removeItem(oItem);
				oItem.destroy();
			}
			if (this.lastSelectedVariantKey === this.aRemovedVariants[iD]) {
				fireSelect = true;
				this._setSelectedItem(null);
				this.bDirty = false;
				this.oVariantModifiedText.setVisible(false);
				this.oModel.setProperty("/enabled", false);
			}
		}

		if (fireSelect) {
			this.bFireSelect = true;
		}
		this._eventDone();
	};

	// new event processor handling
	VariantManagement.prototype._createEvent = function(sName, fCallback) {
		var oEvent = {
			name: sName,
			fFunc: fCallback,
			args: []
		};
		return oEvent;
	};

	VariantManagement.prototype._handleNextEvent = function() {
		if (this.aEvents.length > 0) {
			if (!this.bEventRunning) {
				this.bEventRunning = true;
				var nextEvent = this.aEvents.pop();
				nextEvent.fFunc.apply(this, nextEvent.args);
			}
			// else {
			// if(bShow)
			// // console.log("Event still running");
			// }
			// } else {
			// // console.log("No Events to process");
		}
	};

	VariantManagement.prototype._addEvent = function(oEvent) {
		this.aEvents.push(oEvent);
		this._handleNextEvent();
	};

	VariantManagement.prototype._cancelAllEvents = function() {
		this.aEvents = [];
		this.bEventRunning = false;
	};

	VariantManagement.prototype._eventDone = function() {
		this.bEventRunning = false;
		this._handleNextEvent();
	};

	VariantManagement.prototype._handleManageExecuteOnSelectionChanged = function(oCheckBox) {
		var that = this;
		var oManageItem = oCheckBox.getParent();
		if (oManageItem.getGlobal()) {
			var fOkay = function(sPackage, sTransport) {
				oManageItem.setLifecyclePackage(sPackage);
				oManageItem.setLifecycleTransportId(sTransport);
				that._eventDone();
			};
			var fError = function(oResult) {
				oCheckBox.setSelected(!oCheckBox.getSelected());
				that._cancelAllEvents();
			};

			this._createManagementDialog();
			this._assignTransport(oManageItem, fOkay, fError, this.oManagementDialog);
		} else {
			this._eventDone();
		}
	};

	VariantManagement.prototype._handleManageDeletePressed = function(oButton) {

		if (!this._isInErrorStateManaged(oButton.getParent().getCells()[0], this.oManagementTable)) {
			this.oManagementSave.setEnabled(true);
		}

		var oItem = oButton.getParent();
		if (oItem.getGlobal()) {
			var that = this;
			var fOkay = function(sPackage, sTransport) {
				var sKey = oItem.getKey();
				that.aRemovedVariants.push(sKey);
				that.oManagementTable.removeItem(oItem);
				if (oItem.getKey() === that.sNewDefaultKey) {
					that.oManagementTable.getItems()[0].getCells()[2].setSelected(true);
					that.sNewDefaultKey = that.getStandardVariantKey();
				}
				oItem.destroy();
				var oTransportAssignment = {
					key: sKey,
					transport: sTransport
				};
				that.aRemovedVariantTransports.push(oTransportAssignment);
				that._eventDone();
			};
			var fError = function(oResult) {
				that._cancelAllEvents();
			};

			this._createManagementDialog();
			this._assignTransport(oItem, fOkay, fError, this.oManagementDialog);
		} else {
			this.aRemovedVariants.push(oItem.getKey());
			this.oManagementTable.removeItem(oItem);
			if (oItem.getKey() === this.sNewDefaultKey) {
				this.oManagementTable.getItems()[0].getCells()[2].setSelected(true);
				this.sNewDefaultKey = this.getStandardVariantKey();
			}
			oItem.destroy();
			this._eventDone();
		}
	};

	VariantManagement.prototype._handleShareSelected = function(oControlEvent) {
		var that = this;

		if (oControlEvent.getParameters().selected) {
			var fOkay = function(sPackage, sTransport) {
				that.sTransport = sTransport;
				that.sPackage = sPackage;
				that._eventDone();
			};
			var fError = function(oResult) {
				that.oShare.setSelected(false);
				that.sTransport = null;
				that.sPackage = null;
				that._cancelAllEvents();
			};

			this._createSaveDialog();
			this._assignTransport(null, fOkay, fError, this.oSaveDialog);
		} else {
			this.sTransport = null;
			this.sPackage = null;
			this._eventDone();
		}
	};

	VariantManagement.prototype._handleVariantSaveAs = function() {
		var sKey = "SV" + new Date().getTime();
		var sName = this.oInputName.getValue();
		var sManualKey = this.oInputKey.getValue();
		var sTransport = "";
		var sPackage = "";
		var bExecuteOnSelect = false;
		var bCreateTile = false;
		var oItem = null;
		sName = sName.trim();
		if (sName == "") {
			this.oInputName.setValueState(ValueState.Error);
			this.oInputName.setValueStateText(this.oResourceBundle.getText("VARIANT_MANAGEMENT_ERROR_EMPTY"));
			this._cancelAllEvents();
			return;
		}
		sManualKey = sManualKey.trim();
		if (this.bManualVariantKey && sManualKey == "") {
			this.oInputKey.setValueState(ValueState.Error);
			this.oInputKey.setValueStateText(this.oResourceBundle.getText("VARIANT_MANAGEMENT_ERROR_EMPTY"));
			this._cancelAllEvents();
			return;
		}
		if (this.bManualVariantKey) {
			sKey = sManualKey;
		}

		if (this.oSaveDialog) {
			this.oSaveDialog.close();
		}
		if (this.oExecuteOnSelect !== null) {
			bExecuteOnSelect = this.oExecuteOnSelect.getSelected();
		}
		if (this.oCreateTile !== null) {
			bCreateTile = this.oCreateTile.getSelected();
		}
		if (this.bVariantItemMode) {
			oItem = new VariantItem({
				key: sKey,
				text: sName,
				readOnly: false,
				executeOnSelection: bExecuteOnSelect,
				global: this.oShare.getSelected(),
				lifecycleTransportId: this.sTransport,
				lifecyclePackage: this.sPackage
			});
			this.addVariantItem(oItem);
			this._setSelectedItem(oItem);
		} else {
			oItem = new Item({
				key: sKey,
				text: sName
			});
			this.addItem(oItem);
			this._setSelectedItem(oItem);
		}
		if (this.oDefault.getSelected()) {
			this.setDefaultVariantKey(sKey);
		}
		if (this.oShare.getSelected()) {
			sPackage = this.sPackage;
			sTransport = this.sTransport;
		}
		this._manageButtonState();
		this.fireSave({
			name: sName,
			overwrite: false,
			def: this.oDefault.getSelected(),
			key: sKey,
			exe: this.oExecuteOnSelect.getSelected(),
			tile: bCreateTile,
			global: this.oShare.getSelected(),
			lifecyclePackage: sPackage,
			lifecycleTransportId: sTransport
		});
		this.bDirty = false;
		this.oVariantModifiedText.setVisible(false);
		this.oModel.setProperty("/enabled", false);
		this._eventDone();
	};

	VariantManagement.prototype._setBackwardCompatibility = function(bFlag) {
		if (this.getItems().length === 0 && this.getVariantItems().length === 0) {
			this.bVariantItemMode = !bFlag;
		}
		this._setStandardText();
	};

	VariantManagement.prototype._setStandardText = function() {
		var sKey = this.getSelectionKey();
		if (sKey === null || sKey === this.getStandardVariantKey()) {
			if (this.bVariantItemMode == false) {
				this.oVariantText.setText(this.oResourceBundle.getText("VARIANT_MANAGEMENT_DEFAULT"));
			} else {
				this.oVariantText.setText(this.oResourceBundle.getText("VARIANT_MANAGEMENT_STANDARD"));
			}
			if (this.getStandardItemText() !== null && this.getStandardItemText() != "") {
				this.oVariantText.setText(this.getStandardItemText());
			}
		}
	};

	VariantManagement.prototype._openVariantManagementDialog = function() {
		var oItem;
		var oItems = null;
		var iItemNo = 0;
		var oManageItem;
		var oNameCell;
		var oTypeCell;
		var oDefaultCell;
		var oExecuteCell;
		var oDeleteCell;
		var sTypeText;
		var sTooltip;
		var fLiveChange;
		var fChange;
		var fSelectRB;
		var fSelectCB;
		var fPress;

		var that = this;

		this.oManagementSave.setEnabled(true);

		this.oManagementTable.destroyItems();

		fLiveChange = function(oControlEvent) {

			that._checkVariantNameConstraints(this, that.oManagementSave, that.oManagementTable);
/*
 * var sText = this.getValue(); sText = sText.trim(); if (sText.length === 0) { this.setValueState(ValueState.Error);
 * this.setValueStateText(that.oResourceBundle.getText("VARIANT_MANAGEMENT_ERROR_EMPTY")); that.oManagementSave.setEnabled(false); } else {
 * that._checkIsDuplicate(this, sText, that.oManagementTable); if (this.getValueState() === ValueState.Error) {
 * that.oManagementSave.setEnabled(false); } else { that.oManagementSave.setEnabled(true); } }
 */
		};

		fChange = function(oControlEvent) {
			var oEvent = that._createEvent("inputfieldChange", that._checkManageItemNameChange);
			oEvent.args.push(this.getParent());
			that._addEvent(oEvent);
		};

		fSelectRB = function(oControlEvent) {
			if (oControlEvent.getParameters().selected === true) {
				var oItem = this.getParent();
				that.sNewDefaultKey = oItem.getKey();
			}
		};

		fSelectCB = function(oControlEvent) {
			var oEvent = that._createEvent("executeOnSelectionChange", that._handleManageExecuteOnSelectionChanged);
			oEvent.args.push(this);
			that._addEvent(oEvent);
		};

		fPress = function(oControlEvent) {
			var oEvent = that._createEvent("manageDeletePressed", that._handleManageDeletePressed);
			oEvent.args.push(this);
			that._addEvent(oEvent);
		};

		this._initalizeManagementTableColumns();
		this.sNewDefaultKey = this.getDefaultVariantKey();

		this._restoreCompleteList();

		if (this.oVariantList.getItems()[0].getKey() !== this.getStandardVariantKey() && this.bVariantItemMode == false) {
			oItem = new VariantItem(this.oVariantManage.getId() + "-item-standard", {
				key: this.getStandardVariantKey(),
				text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_DEFAULT"),
				readOnly: true,
				executeOnSelection: false
			});
			this.oVariantList.insertItem(oItem, 0);
		}
		oItems = this.oVariantList.getItems();
		for (var iH = 0; iH < oItems.length; iH++) {
			if (oItems[iH].getReadOnly() || oItems[iH].getLabelReadOnly()) {
				var sOptions = oItems[iH].getAccessOptions();
				sTooltip = this._accessOptionsText(sOptions);
			} else {
				sTooltip = null;
			}
			if (oItems[iH].getReadOnly()) {
				sTooltip = this.oResourceBundle.getText("VARIANT_MANAGEMENT_WRONG_LAYER");
			} else if (oItems[iH].getLabelReadOnly() === true) {
				sTooltip = this.oResourceBundle.getText("VARIANT_MANAGEMENT_WRONG_LANGUAGE");
			}

			if (oItems[iH].getKey() === this.getStandardVariantKey()) {
				sTooltip = null;
			}
			oManageItem = new EditableVariantItem(this.oVariantManage.getId() + "-edit-" + iItemNo, {
				key: oItems[iH].getKey(),
				global: oItems[iH].getGlobal(),
				lifecyclePackage: oItems[iH].getLifecyclePackage(),
				lifecycleTransportId: oItems[iH].getLifecycleTransportId(),
				namespace: oItems[iH].getNamespace(),
				labelReadOnly: oItems[iH].getLabelReadOnly(),
				vAlign: VerticalAlign.Middle
			});
			if (oItems[iH].getKey() === this.getStandardVariantKey() || oItems[iH].getReadOnly() === true || oItems[iH].getLabelReadOnly() === true) {
				oNameCell = new Text(this.oVariantManage.getId() + "-text-" + iItemNo, {
					text: oItems[iH].getText()
				});
				// oNameCell.addStyleClass("sapUICompVarMngmtLbl");
				if (sTooltip) {
					oNameCell.setTooltip(sTooltip);
				}
			} else {
				oNameCell = new Input(this.oVariantManage.getId() + "-input-" + iItemNo, {
					value: oItems[iH].getText(),
					liveChange: fLiveChange,
					change: fChange
				});
			}
			oManageItem.addCell(oNameCell);

			if (oItems[iH].getGlobal()) {
				sTypeText = this.oResourceBundle.getText("VARIANT_MANAGEMENT_SHARED");
			} else {
				sTypeText = this.oResourceBundle.getText("VARIANT_MANAGEMENT_PRIVATE");
			}
			oTypeCell = new Text(this.oVariantManage.getId() + "-type-" + iItemNo, {
				text: sTypeText
			});
			oTypeCell.addStyleClass("sapUICompVarMngmtType");
			oManageItem.addCell(oTypeCell);

			oDefaultCell = new RadioButton(this.oVariantManage.getId() + "-def-" + iItemNo, {
				groupName: this.oVariantManage.getId(),
				select: fSelectRB
			});
			if (this.sNewDefaultKey === oItems[iH].getKey() || oItems[iH].getKey() === this.getStandardVariantKey() && this.sNewDefaultKey === "") {
				oDefaultCell.setSelected(true);
			}
			oManageItem.addCell(oDefaultCell);

			if (this.getShowExecuteOnSelection()) {
				oExecuteCell = new CheckBox(this.oVariantManage.getId() + "-exe-" + iItemNo, {
					selected: false,
					enabled: false,
					select: fSelectCB
				});
				if (oItems[iH].getExecuteOnSelection) {
					oExecuteCell.setEnabled(!oItems[iH].getReadOnly());
					oExecuteCell.setSelected(oItems[iH].getExecuteOnSelection());
					if (sTooltip) {
						oExecuteCell.setTooltip(sTooltip);
					}
				}
				oManageItem.addCell(oExecuteCell);
			}

			oDeleteCell = new Button(this.oVariantManage.getId() + "-del-" + iItemNo, {
				icon: "sap-icon://sys-cancel",
				enabled: true,
				type: ButtonType.Transparent,
				press: fPress,
				tooltip: this.oResourceBundle.getText("VARIANT_MANAGEMENT_DELETE")
			});
			if (oManageItem.getKey() === this.getStandardVariantKey() || (oItems[iH].getReadOnly && oItems[iH].getReadOnly())) {
				oDeleteCell.setEnabled(false);
			}
			oDeleteCell.addStyleClass("sapUiCompVarMngmtDel");
			oManageItem.addCell(oDeleteCell);

			this.oManagementTable.addItem(oManageItem);
			iItemNo++;
		}
		this.aRemovedVariants = [];
		this.aRemovedVariantTransports = [];
		this.aRenamedVariants = [];

		this.aExeVariants = [];

		this._createManagementDialog();
		this._setDialogCompactStyle(this, this.oManagementDialog);
		oItem = this.oVariantList.getSelectedItem();
		if (oItem) {
			this.lastSelectedVariantKey = oItem.getKey();
		}
		this.oVariantPopOver.close();
		this.oManagementDialog.open();
	};

	VariantManagement.prototype._enableManualVariantKey = function(bEnable) {
		this.bManualVariantKey = bEnable;
	};

	VariantManagement.prototype._fireSelectAsync = function(sKey) {
		var slKey;
		if (sKey === undefined || sKey === null) {
			var oItem = this._getSelectedItem();
			if (oItem === null) {
				slKey = this.getStandardVariantKey();
			} else {
				slKey = oItem.getKey();
			}
		}
		this.fireSelect({
			key: slKey
		});
	};

	VariantManagement.prototype._executeOnSelectForStandardVariant = function(bSelect) {
		this.bExecuteOnSelectForStandard = bSelect;
	};

	VariantManagement.prototype.getStandardVariantKey = function() {
		return this._sStandardVariantKey;
	};

	VariantManagement.prototype.setStandardVariantKey = function(sStandardVariantKey) {
		this._sStandardVariantKey = sStandardVariantKey;
	};

	VariantManagement.prototype._setVendorLayer = function(bVendorLayer) {
		this._isVendorLayer = bVendorLayer;
	};

	VariantManagement.prototype._isIndustrySolutionModeAndVendorLayer = function() {
		if (this.getIndustrySolutionMode() && this._isVendorLayer) {
			return true;
		}

		return false;
	};

	return VariantManagement;

}, /* bExport= */true);

}; // end of sap/ui/comp/variants/VariantManagement.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.filterbar.FilterItem') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.filterbar.FilterItem.
jQuery.sap.declare('sap.ui.comp.filterbar.FilterItem'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.TooltipBase'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.DataType'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/filterbar/FilterItem",[
	'jquery.sap.global', 'sap/m/Label', 'sap/ui/comp/library', 'sap/ui/core/Element', 'sap/ui/core/TooltipBase', 'sap/ui/base/DataType'
], function(jQuery, Label, library, Element, TooltipBase, DataType) {
	"use strict";

	/**
	 * Constructor for a new filterbar/FilterItem.
	 * 
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * @class Represents a filter belonging to the basic group.
	 * @extends sap.ui.core.Element
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.filterbar.FilterItem
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var FilterItem = Element.extend("sap.ui.comp.filterbar.FilterItem", /** @lends sap.ui.comp.filterbar.FilterItem.prototype */
	{
		metadata: {

			library: "sap.ui.comp",
			properties: {

				/**
				 * Label of the filter.
				 */
				label: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Name of the filter. This is an identifier for the filter and has to be unique.
				 */
				name: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Mandatory flag.
				 */
				mandatory: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * Visibility state of the filter.
				 */
				visible: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Tooltip for the filter.
				 */
				labelTooltip: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Determines if a filter is part of the currently selected variant. This property is ONLY used internally and must not be used by the
				 * filter bar consumers.
				 * 
				 * @since 1.26.1
				 */
				partOfCurrentVariant: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * Controls the visibility of a filter item in the filter bar.
				 * 
				 * @since 1.26.1
				 */
				visibleInFilterBar: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				}
			},
			aggregations: {

				/**
				 * The control of the filter.
				 */
				control: {
					type: "sap.ui.core.Control",
					multiple: false
				}
			},
			events: {

				/**
				 * This event is fired when one of the properties is changed.
				 */
				change: {
					parameters: {

						/**
						 * Name of the changed property
						 */
						propertyName: {
							type: "string"
						}
					}
				}
			}
		}
	});

	/**
	 * Initializes the filter item.
	 * 
	 * @public
	 */
	FilterItem.prototype.init = function() {
		this._oLabel = null;
	};

	/**
	 * Setter for visible property.
	 * 
	 * @public
	 * @param {boolean} bVisible State of visibility
	 */
	FilterItem.prototype.setVisible = function(bVisible) {
		this.setProperty("visible", bVisible);
		this.fireChange({
			propertyName: "visible"
		});
	};

	/**
	 * Setter for visible in filter bar.
	 * 
	 * @public
	 * @since 1.26.1
	 * @param {boolean} bVisible State of visibility in filter bar
	 */
	FilterItem.prototype.setVisibleInFilterBar = function(bVisible) {
		this.setProperty("visibleInFilterBar", bVisible);

		this.fireChange({
			propertyName: "visibleInFilterBar"
		});
	};

	FilterItem.prototype._replace = function(sName) {
		var t = DataType.getType("sap.ui.core.ID");
		if (!t.isValid(sName)) {
			sName = sName.replace(/[^A-Za-z0-9_.:]+/g, "_");
			if (!t.isValid(sName)) {
				sName = "A_" + sName;
			}
		}

		return sName;
	};

	FilterItem.prototype._getGroupName = function() {

		var sName = "";
		if (this.getGroupName) {
			sName = this._replace(this.getGroupName());
		}

		return sName;
	};

	FilterItem.prototype._getName = function() {
		var sName = this._replace(this.getName());
		var sGroupName = this._getGroupName();

		if (sGroupName) {
			sName = sGroupName + "-" + sName;
		}

		return sName;

	};

	FilterItem.prototype._createLabelControl = function(sFilterBarId) {

		var sText = this.getLabel();

		var sId = "filterItem-" + this._getName();
		if (sFilterBarId) {
			sId = sFilterBarId + "-" + sId;
		}

		var oLabelCtrl = new Label({
			id: sId,
			text: sText,
			required: this.getMandatory(),
			tooltip: this.getLabelTooltip(),
			textAlign: "Begin"
		});

		return oLabelCtrl;
	};

	/**
	 * Setter for mandatory flag.
	 * 
	 * @public
	 * @param {string} bValue Mandatory state
	 */
	FilterItem.prototype.setMandatory = function(bValue) {
		this.setProperty("mandatory", bValue);

		if (this._oLabel) {
			this._oLabel.setRequired(bValue);
		}

		this.fireChange({
			propertyName: "mandatory"
		});
	};

	/**
	 * Setter for label.
	 * 
	 * @public
	 * @param {string} sValue Label text
	 */
	FilterItem.prototype.setLabel = function(sValue) {
		this.setProperty("label", sValue);

		if (this._oLabel) {
			this._oLabel.setText(sValue);
		}

// if (!this.getLabelTooltip()) {
// this.setLabelTooltip(sValue);
// }

		this.fireChange({
			propertyName: "label"
		});
	};

	/**
	 * Setter for tooltip.
	 * 
	 * @public
	 * @param {string} sText Tooltip text
	 */
	FilterItem.prototype.setLabelTooltip = function(sText) {
		this.setProperty("labelTooltip", sText);

		if (this._oLabel) {
			this._oLabel.setTooltip(sText);
		}

		this.fireChange({
			propertyName: "labelTooltip"
		});
	};

	/**
	 * Returns the label control.
	 * 
	 * @param {string} sFilterBarId The ID of the filter bar
	 * @returns {sap.m.Label} Label control
	 */
	FilterItem.prototype.getLabelControl = function(sFilterBarId) {

		if (!this._oLabel) {
			this._oLabel = this._createLabelControl(sFilterBarId);
		}

		return this._oLabel;
	};

	/**
	 * Destroys this element.
	 * 
	 * @public
	 */
	FilterItem.prototype.destroy = function() {

		if (this._oLabel && !this._oLabel.bDestroyed) {
			this._oLabel.destroy();
		}

		Element.prototype.destroy.apply(this, arguments);

		this._oLabel = null;
	};

	return FilterItem;

}, /* bExport= */true);

}; // end of sap/ui/comp/filterbar/FilterItem.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.filterbar.VariantConverterFrom') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.comp.filterbar.VariantConverterFrom'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.MultiComboBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.MultiInput'); // unlisted dependency retained
jQuery.sap.require('sap.m.DatePicker'); // unlisted dependency retained
jQuery.sap.require('sap.m.DateRangeSelection'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/filterbar/VariantConverterFrom",[
	'jquery.sap.global', 'sap/ui/comp/smartfilterbar/ControlConfiguration', 'sap/ui/comp/valuehelpdialog/ValueHelpDialog', 'sap/m/MultiComboBox', 'sap/m/MultiInput', 'sap/m/DatePicker', 'sap/m/DateRangeSelection'
], function(jQuery, ControlConfiguration, ValueHelpDialog, MultiComboBox, MultiInput, DatePicker, DateRangeSelection) {
	"use strict";

	/**
	 * Constructs a utility class to convert the filter bar variant from/to internal to suite format
	 * 
	 * @constructor
	 * @public
	 * @author Franz Mueller
	 */
	var VariantConverterFrom = function() {
	};

	/**
	 * the variant in suite format will be transformed to the internal format
	 * 
	 * @public
	 * @param {string} sSuiteContent object representing the variant data
	 * @param {sap.ui.comp.filterbar.FilterBar} oFilterBar instance of the filter bar control
	 * @returns {object} variant in the internal format
	 */
	VariantConverterFrom.prototype.convert = function(sSuiteContent, oFilterBar) {
		var oContent = null, oRetContent = null;
		var oSuiteContent;

		if (sSuiteContent) {

			oSuiteContent = JSON.parse(sSuiteContent);

			if (oFilterBar && oFilterBar.getFilterBarViewMetadata && oSuiteContent && (oSuiteContent.Parameters || oSuiteContent.SelectOptions)) {

				oContent = {};
				if (oSuiteContent.Parameters) {
					this._addParameters(oSuiteContent.Parameters, oFilterBar, oContent);
				}

				if (oSuiteContent.SelectOptions) {
					this._addSelectOptions(oSuiteContent.SelectOptions, oFilterBar, oContent);
				}

				oRetContent = {
					payload: null,
					variantId: null
				};
				oRetContent.payload = JSON.stringify(oContent);

				if (oSuiteContent.SelectionVariantID) {
					oRetContent.variantId = oSuiteContent.SelectionVariantID;
				}

			}
		}

		return oRetContent;
	};

	VariantConverterFrom.prototype.retrieveVariantId = function(sSuiteContent) {
		var sVariantId = null;
		var oSuiteContent;

		if (sSuiteContent) {

			oSuiteContent = JSON.parse(sSuiteContent);

			if (oSuiteContent && oSuiteContent.SelectionVariantID) {
				sVariantId = oSuiteContent.SelectionVariantID;
			}
		}

		return sVariantId;
	};

	/**
	 * retrievee the meta data for a givven filter
	 * 
	 * @private
	 * @param {string} sName of the filter
	 * @param {sap.ui.comp.filterbar.FilterBar} oFilterBar instance of the filter bar control
	 * @returns {object} meta data of the filter; null otherwise
	 */
	VariantConverterFrom.prototype._getParameterMetaData = function(sName, oFilterBar) {
		var i, j;
		var oGroup;

		var aFilterMetaData = oFilterBar.getFilterBarViewMetadata();
		if (aFilterMetaData) {
			for (i = 0; i < aFilterMetaData.length; i++) {
				oGroup = aFilterMetaData[i];
				for (j = 0; j < oGroup.fields.length; j++) {
					if (sName === oGroup.fields[j].fieldName) {
						return oGroup.fields[j];
					}
				}
			}
		}

		return null;
	};

	/**
	 * convert a simple parameter
	 * 
	 * @private
	 * @param {object} oSuiteParameters object representing the suite single value parameters
	 * @param {sap.ui.comp.filterbar.FilterBar} oFilterBar instance of the filter bar control
	 * @param {object} oContent representing the resulting internal format
	 */
	VariantConverterFrom.prototype._addParameters = function(oSuiteParameters, oFilterBar, oContent) {
		var i;
		var sName, sValue;
		var oFilterMetaData;

		for (i = 0; i < oSuiteParameters.length; i++) {
			sValue = oSuiteParameters[i].PropertyValue;
			sName = oSuiteParameters[i].PropertyName;

			oFilterMetaData = this._getParameterMetaData(sName, oFilterBar);
			if (oFilterMetaData) {

				this._addAccordingMetaData(oContent, oFilterMetaData, sValue);

			} else {
				jQuery.sap.log.error("neither metadata nor custom information for filter '" + sName + "'");
			}
		}
	};

	/**
	 * convert a simple parameter
	 * 
	 * @private
	 * @param {object} oSuiteSelectOptions object representing the suite SelectOptions entity
	 * @param {sap.ui.comp.filterbar.FilterBar} oFilterBar instance of the filter bar control
	 * @param {object} oContent representing the resulting internal format
	 */
	VariantConverterFrom.prototype._addSelectOptions = function(oSuiteSelectOptions, oFilterBar, oContent) {
		var i;
		var sName, aRanges;
		var oFilterMetaData, oControl;
		// var oConditionTypeInfo;

		for (i = 0; i < oSuiteSelectOptions.length; i++) {
			sName = oSuiteSelectOptions[i].PropertyName;
			aRanges = oSuiteSelectOptions[i].Ranges;
			// oConditionTypeInfo = oSuiteSelectOptions[i]["__ConditionTypeInfo"];
			oFilterMetaData = this._getParameterMetaData(sName, oFilterBar);
			if (oFilterMetaData) {
				oControl = oFilterMetaData.control;
				this._addRangesAccordingMetaData(oContent, oFilterMetaData, aRanges, oControl);
				// if (oConditionTypeInfo) {
				// this._addConditionTypeInfo(oContent, oFilterMetaData, oConditionTypeInfo);
				// }
			} else {
				jQuery.sap.log.error("neither metadata nor custom information for filter '" + name + "'");
			}
		}
	};

	VariantConverterFrom.prototype._addRangesAccordingMetaData = function(oContent, oFilterMetaData, aRanges, oControl, sName) {
		var i, oObj;

		var fConvertOption = function(sSuiteOption, sValue) {
			var sInternalOperation = sSuiteOption;
			if (sSuiteOption === "CP") {
				sInternalOperation = sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.Contains;

				if (sValue) {
					var nIndexOf = sValue.indexOf('*');
					var nLastIndex = sValue.lastIndexOf('*');

					if ((nIndexOf === 0) && (nLastIndex !== (sValue.length - 1))) {
						sInternalOperation = sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.EndsWith;
						sValue = sValue.substring(1, sValue.length);
					} else if ((nIndexOf !== 0) && (nLastIndex === (sValue.length - 1))) {
						sInternalOperation = sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.StartsWith;
						sValue = sValue.substring(0, sValue.length - 1);
					} else {
						sValue = sValue.substring(1, sValue.length - 1);
					}
				}
			}

			return {
				op: sInternalOperation,
				v: sValue
			};
		};

		var fCreateRanges = function(sFilterName, aRanges) {

			var i, oItem, oObj;

			if (!oContent[sFilterName]) {
				oContent[sFilterName] = {
					ranges: [],
					items: [],
					value: null
				};
			}

			for (i = 0; i < aRanges.length; i++) {
				oObj = fConvertOption(aRanges[i].Option, aRanges[i].Low);
				oItem = {
					"exclude": (aRanges[i].Sign === "E"),
					"operation": oObj.op,
					"keyField": sFilterName,
					"value1": oObj.v,
					"value2": aRanges[i].High
				};

				oContent[sFilterName].ranges.push(oItem);
			}
		};

		if (aRanges && aRanges.length > 0) {

			// custom filters
			if (oFilterMetaData.isCustomFilterField) {
				if (!oContent._CUSTOM) {
					oContent._CUSTOM = {};
				}
				oContent._CUSTOM[oFilterMetaData.fieldName] = aRanges[0].Low;
				return;
			}

			// conditiontype filters
			if (oFilterMetaData.conditionType) {
				fCreateRanges(oFilterMetaData.fieldName, aRanges);
				return;
			}

			// consider filter restrictions
			if (oFilterMetaData.filterRestriction === ControlConfiguration.FILTERTYPE.single) {
				if (!aRanges[0].Low && oControl && (oControl instanceof DatePicker)) {
					oContent[oFilterMetaData.fieldName] = null;
				} else {
					oContent[oFilterMetaData.fieldName] = aRanges[0].Low;
				}

			} else if (oFilterMetaData.filterRestriction === ControlConfiguration.FILTERTYPE.interval) {

				/* eslint-disable no-lonely-if */
				if (oControl && (oControl instanceof DateRangeSelection)) {

					if (aRanges[0].Low && aRanges[0].High) {
						oContent[oFilterMetaData.fieldName] = {
							low: aRanges[0].Low,
							high: aRanges[0].High
						};
					} else if (aRanges[0].Low && !aRanges[0].High) {
						oContent[oFilterMetaData.fieldName] = {
							low: aRanges[0].Low,
							high: aRanges[0].Low
						};

					} else if (!aRanges[0].Low && aRanges[0].High) {
						oContent[oFilterMetaData.fieldName] = {
							low: aRanges[0].High,
							high: aRanges[0].High
						};
					} else {
						oContent[oFilterMetaData.fieldName] = {
							low: null,
							high: null
						};
					}

				} else {
					oContent[oFilterMetaData.fieldName] = {
						low: aRanges[0].Low === undefined ? null : aRanges[0].Low,
						high: aRanges[0].High === undefined ? null : aRanges[0].High
					};
				}
				/* eslint-enable no-lonely-if */

			} else if (oFilterMetaData.filterRestriction === ControlConfiguration.FILTERTYPE.multiple) {

				oContent[oFilterMetaData.fieldName] = {
					ranges: [],
					items: [],
					value: null
				};

				if (oControl && ((oControl instanceof MultiComboBox) || (oControl instanceof MultiInput))) {
					for (i = 0; i < aRanges.length; i++) {
						oObj = fConvertOption(aRanges[i].Option, aRanges[i].Low);

						if (oObj.op === sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.EQ) {

							if (oFilterMetaData.type === "Edm.DateTime") {
								oContent[oFilterMetaData.fieldName].ranges.push({
									value1: oObj.v
								});
							} else {
								oContent[oFilterMetaData.fieldName].items.push({
									key: oObj.v
								});
							}
						}
					}
				} else {
					fCreateRanges(oFilterMetaData.fieldName, aRanges);
				}

			} else {

				fCreateRanges(oFilterMetaData.fieldName, aRanges);
			}

			jQuery.sap.log.warning("potential reduced information for filter '" + oFilterMetaData.fieldName + "'");

		} else {
			jQuery.sap.log.warning("no Ranges-section found for filter '" + oFilterMetaData.fieldName + "'");
		}
	};

	VariantConverterFrom.prototype._addAccordingMetaData = function(oContent, oFilterMetaData, sValue) {

		var sHigh = oFilterMetaData.type === "Edm.DateTime" ? "" : sValue;

		var aRanges = [
			{
				Sign: "I",
				Low: sValue,
				High: sHigh,
				Option: "EQ"
			}
		];

		this._addRangesAccordingMetaData(oContent, oFilterMetaData, aRanges);

	};

	// VariantConverterFrom.prototype._addConditionTypeInfo = function(oContent, oFilterMetaData, oInfo) {
	// return;
	// oContent[oFilterMetaData.fieldName].conditionTypeInfo = {
	// data : oInfo.Data,
	// name: oInfo.Name,
	// }
	// };

	return VariantConverterFrom;

}, /* bExport= */true);

}; // end of sap/ui/comp/filterbar/VariantConverterFrom.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.filterbar.VariantConverterTo') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.filterbar.VariantConverterTo'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/filterbar/VariantConverterTo",[
	'jquery.sap.global', 'sap/ui/comp/smartfilterbar/ControlConfiguration', 'sap/ui/comp/valuehelpdialog/ValueHelpDialog'
], function(jQuery, ControlConfiguration, ValueHelpDialog) {
	"use strict";

	/**
	 * Constructs a utility class to convert the filter bar variant from/to internal to suite format
	 * 
	 * @constructor
	 * @public
	 * @author Franz Mueller
	 */
	var VariantConverterTo = function() {
	};

	/**
	 * the current variant will be transformed to suite format
	 * 
	 * @public
	 * @param {string} sKey of the current variant
	 * @param {array} aFilters containing filter names
	 * @param {string} sData json string representing the filter values
	 * @param {object} oFilterBar instance of the filterbar object
	 * @returns {string} variant in the suite format as json string
	 */
	VariantConverterTo.prototype.convert = function(sKey, aFilters, sData, oFilterBar) {

		var aFields, i;
		var oJson, oJsonCustom, n = null;

		var oSuiteContent = {
			SelectionVariantID: sKey
		};

		if (sData && aFilters) {
			oJson = JSON.parse(sData);
			if (oJson) {
				aFields = this._getFields(aFilters);
				if (aFields && aFields.length > 0) {
					for (i = 0; i < aFields.length; i++) {
						this._convertField(oSuiteContent, aFields[i], oJson, oFilterBar);
					}
				}

				// CUSTOM FIELDS
				if (oJson._CUSTOM) {

					if (typeof oJson._CUSTOM === "string") {
						oJsonCustom = JSON.parse(oJson._CUSTOM);
					} else {
						oJsonCustom = oJson._CUSTOM;
					}

					for (n in oJsonCustom) {
						if (n) {
							this._addSingleValue(oSuiteContent, n, this._getValue(oJsonCustom[n]));
						}
					}
				}
			}
		}

		return JSON.stringify(oSuiteContent);
	};

	/**
	 * retrieve the meta data for a given filter
	 * 
	 * @private
	 * @param {string} sName of the filter
	 * @param {sap.ui.comp.filterbar.FilterBar} oFilterBar instance of the filter bar control
	 * @returns {object} meta data of the filter; null otherwise
	 */
	VariantConverterTo.prototype._getParameterMetaData = function(sName, oFilterBar) {
		var i, j;
		var oGroup;

		var aFilterMetaData = oFilterBar.getFilterBarViewMetadata();
		if (aFilterMetaData) {
			for (i = 0; i < aFilterMetaData.length; i++) {
				oGroup = aFilterMetaData[i];
				for (j = 0; j < oGroup.fields.length; j++) {
					if (sName === oGroup.fields[j].fieldName) {
						return oGroup.fields[j];
					}
				}
			}
		}

		return null;
	};

	/**
	 * retrieve the array of relevant filters
	 * 
	 * @private
	 * @param {object} oSuiteContent represents the suite format of the variant; will be changed
	 * @param {string} sFilterName name of the filter
	 * @param {object} oContent json representing the values of the variant
	 * @param {object} oFilterBar representing the filterbar instance
	 */
	VariantConverterTo.prototype._convertField = function(oSuiteContent, sFilterName, oContent, oFilterBar) {
		var oObj, sValue, sOp = null;
		var oRanges;
		var oFilterMetaData;

		if (oContent && sFilterName && oSuiteContent) {
			oObj = oContent[sFilterName];
			if (oObj) {

				oFilterMetaData = this._getParameterMetaData(sFilterName, oFilterBar);
				if (oFilterMetaData) {
					if (oFilterMetaData.isCustomFilterField) {
						return; // custom fields will be handled separately
					}

					if (oFilterMetaData.filterRestriction === ControlConfiguration.FILTERTYPE.single) {
						sValue = (oObj.value === undefined) ? oObj : oObj.value;
						this._addSingleValue(oSuiteContent, sFilterName, sValue);
					} else if (oFilterMetaData.filterRestriction === ControlConfiguration.FILTERTYPE.interval) {
						if (oObj.conditionTypeInfo) {
							this._convertFieldByValue(oSuiteContent, sFilterName, oContent);
						} else {
							oRanges = this._addRangeEntry(oSuiteContent, sFilterName);

							if ((oFilterMetaData.type === "Edm.DateTime") && !oObj.high) {
								oObj.high = oObj.low;
							} else if ((oFilterMetaData.type === "Edm.String") && !oObj.high) {
								sOp = "EQ";
							}
							this._addRangeLowHigh(oRanges, oObj, sOp);
						}
					} else if (oFilterMetaData.filterRestriction === ControlConfiguration.FILTERTYPE.multiple) {
						oRanges = this._addRangeEntry(oSuiteContent, sFilterName);
						if (oObj.items && oObj.items.length > 0) {
							this._addRangeMultipleSingleValues(oRanges, oObj.items);
						} else if (oObj.ranges && oObj.ranges.length > 0) {
							this._addRangeMultipleRangeValues(oRanges, oObj.ranges);
						} else {
							this._addRangeSingleValue(oRanges, oObj.value);
						}
					} else {
						this._convertFieldByValue(oSuiteContent, sFilterName, oContent);
					}
				} else {
					this._convertFieldByValue(oSuiteContent, sFilterName, oContent);
				}

			}
		}
	};

	VariantConverterTo.prototype._convertFieldByValue = function(oSuiteContent, sFilterName, oContent) {
		var oObj;
		var oRanges;

		if (oContent && sFilterName && oSuiteContent) {
			oObj = oContent[sFilterName];
			if (oObj) {
				if (oObj.conditionTypeInfo) {
					if (oObj.ranges && oObj.ranges.length > 0) {
						oRanges = this._addRangeEntry(oSuiteContent, sFilterName);
						this._addRanges(oRanges, oObj.ranges);
					}
				} else if ((oObj.ranges !== undefined) && (oObj.items !== undefined) && (oObj.value !== undefined)) {

					oRanges = this._addRangeEntry(oSuiteContent, sFilterName);

					if (oObj.ranges && oObj.ranges.length > 0) {
						this._addRanges(oRanges, oObj.ranges);
					}
					if (oObj.items && oObj.items.length > 0) {
						this._addRangeMultipleSingleValues(oRanges, oObj.items);
					}
					if (oObj.value) { // date
						this._addRangeSingleValue(oRanges, oObj.value);
					}

				} else if ((oObj.items !== undefined) && oObj.items && (oObj.items.length > 0)) {
					oRanges = this._addRangeEntry(oSuiteContent, sFilterName);
					this._addRangeMultipleSingleValues(oRanges, oObj.items);
				} else if ((oObj.low !== undefined) && oObj.low && (oObj.high !== undefined) && oObj.high) { // date
					oRanges = this._addRangeEntry(oSuiteContent, sFilterName);
					this._addRangeLowHigh(oRanges, oObj);
				} else if ((oObj.value !== undefined) && oObj.value) {
					this._addSingleValue(oSuiteContent, sFilterName, oObj.value);
				} else if (oObj) {
					this._addSingleValue(oSuiteContent, sFilterName, oObj);
				}
			}
		}
	};

	/**
	 * create a suite 'Ranges' object
	 * 
	 * @private
	 * @param {object} oSuiteContent represents the suite format of the variant; will be changed
	 * @param {string} sFilterName name of the filter
	 * @returns {object} representing the suite ranges segment
	 */
	VariantConverterTo.prototype._addRangeEntry = function(oSuiteContent, sFilterName) {
		var oObj = {
			PropertyName: sFilterName,
			Ranges: []
		};
		if (!oSuiteContent.SelectOptions) {
			oSuiteContent.SelectOptions = [];
		}
		oSuiteContent.SelectOptions.push(oObj);

		return oObj.Ranges;
	};

	/**
	 * convert ui5 to suite ranges
	 * 
	 * @private
	 * @param {object} oRanges represents the suite ranges format of the variant; will be changed
	 * @param {array} aRanges containing the ranges
	 */
	VariantConverterTo.prototype._addRanges = function(oRanges, aRanges) {

		var sSign, sOption, sLow, sHigh;

		for (var i = 0; i < aRanges.length; i++) {
			sSign = aRanges[i].exclude ? "E" : "I";
			sLow = this._getValue(aRanges[i].value1);
			sHigh = this._getValue(aRanges[i].value2);

			if (aRanges[i].operation === sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.Contains) {
				sOption = "CP";
				if (sLow) {
					sLow = "*" + sLow + "*";
				}
			} else if (aRanges[i].operation === sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.StartsWith) {
				sOption = "CP";
				if (sLow) {
					sLow = sLow + "*";
				}
			} else if (aRanges[i].operation === sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.EndsWith) {
				sOption = "CP";
				if (sLow) {
					sLow = "*" + sLow;
				}
			} else {
				sOption = aRanges[i].operation;
			}

			oRanges.push({
				Sign: sSign,
				Option: sOption,
				Low: sLow,
				High: sHigh
			});
		}
	};

	/**
	 * convert ui5 to suite multiple single values
	 * 
	 * @private
	 * @param {object} oRanges represents the suite ranges format of the variant; will be changed
	 * @param {array} aItems containing the ranges
	 */
	VariantConverterTo.prototype._addRangeMultipleSingleValues = function(oRanges, aItems) {

		for (var i = 0; i < aItems.length; i++) {
			oRanges.push({
				Sign: "I",
				Option: "EQ",
				Low: this._getValue(aItems[i].key),
				High: null
			});
		}
	};

	VariantConverterTo.prototype._addRangeMultipleRangeValues = function(oRanges, aItems) {

		for (var i = 0; i < aItems.length; i++) {
			oRanges.push({
				Sign: "I",
				Option: "EQ",
				Low: this._getValue(aItems[i].value1),
				High: null
			});
		}
	};

	/**
	 * convert ui5 to suite between e.q. Date
	 * 
	 * @private
	 * @param {object} oRanges represents the suite ranges format of the variant; will be changed
	 * @param {string} sValue of the filter
	 */
	VariantConverterTo.prototype._addRangeSingleValue = function(oRanges, sValue) {

		oRanges.push({
			Sign: "I",
			Option: "EQ",
			Low: this._getValue(sValue),
			High: null
		});
	};

	/**
	 * convert ui5 to suite between e.q. Date
	 * 
	 * @private
	 * @param {object} oRanges represents the suite ranges format of the variant; will be changed
	 * @param {object} oLowHigh containing the ranges
	 * @param {string} sOp override the default operation
	 */
	VariantConverterTo.prototype._addRangeLowHigh = function(oRanges, oLowHigh, sOp) {
		var sOperation = sOp || "BT";

		oRanges.push({
			Sign: "I",
			Option: sOperation,
			Low: this._getValue(oLowHigh.low),
			High: this._getValue(oLowHigh.high)
		});
	};

	/**
	 * convert ui5 to suite between e.q. Date
	 * 
	 * @private
	 * @param {object} oSuiteContent represents the suite format of the variant; will be changed
	 * @param {string} sFilterName name of the filter
	 * @param {string} sValue of the filter
	 */
	VariantConverterTo.prototype._addSingleValue = function(oSuiteContent, sFilterName, sValue) {

		if (!oSuiteContent.Parameters) {
			oSuiteContent.Parameters = [];
		}

		oSuiteContent.Parameters.push({
			PropertyName: sFilterName,
			PropertyValue: sValue
		});
	};

	/**
	 * retrieve the array of relevant filters
	 * 
	 * @private
	 * @param {array} aFilters representing the filter items
	 * @returns {array} of strings; array of filter names
	 */
	VariantConverterTo.prototype._getFields = function(aFilters) {

		var aRelevantFilters = [];

		if (aFilters) {
			for (var i = 0; i < aFilters.length; i++) {
				aRelevantFilters.push(aFilters[i].name);
			}
		}

		return aRelevantFilters;
	};

	/**
	 * returns either the value
	 * 
	 * @private
	 * @param {object} oValue object
	 * @returns {object} stringified value
	 */
	VariantConverterTo.prototype._getValue = function(oValue) {
		if ((oValue === null) || (oValue === undefined)) {
			return null;
		}

		return "" + oValue;
	};

	VariantConverterTo.prototype._getControl = function(oFilterBar, sName) {
		var oControl = null;
		var oFilterMetaData = this._getParameterMetaData(sName, oFilterBar);
		if (oFilterMetaData) {
			oControl = oFilterMetaData.control;
		}

		return oControl;
	};

	return VariantConverterTo;

}, /* bExport= */true);

}; // end of sap/ui/comp/filterbar/VariantConverterTo.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.navpopover.SemanticObjectController') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.navpopover.SemanticObjectController.
jQuery.sap.declare('sap.ui.comp.navpopover.SemanticObjectController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/navpopover/SemanticObjectController",[
	'jquery.sap.global', 'sap/ui/comp/library', 'sap/ui/core/Element', 'sap/ui/comp/personalization/Util'
], function(jQuery, library, Element, PersonalizationUtil) {
	"use strict";

	/**
	 * Constructor for a new navpopover/SemanticObjectController.
	 * 
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class The SemanticObjectController allows the user to register against semantic object navigation events as well as define semantic objects
	 *        which should be ignored.
	 * @extends sap.ui.core.Element
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.navpopover.SemanticObjectController
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var SemanticObjectController = Element.extend("sap.ui.comp.navpopover.SemanticObjectController", /** @lends sap.ui.comp.navpopover.SemanticObjectController.prototype */
	{
		metadata: {

			library: "sap.ui.comp",
			properties: {

				/**
				 * Comma-separated list of field names that must not be displayed as links.
				 * 
				 * @since 1.28.0
				 */
				ignoredFields: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * If set to <code>true</code>, the SemanticObjectController will retrieve all navigation targets once and will disable links for
				 * which no targets were found. Setting this value to <code>true</code> will trigger an additional roundtrip.
				 * 
				 * @since 1.28.0
				 */
				prefetchNavigationTargets: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * Maps the field names to the related semantic objects. When accessing this property for the first time, the mapping will be
				 * calculated from the metadata within the provided model.
				 * 
				 * @since 1.28.0
				 */
				fieldSemanticObjectMap: {
					type: "object",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * The name of the entity set used. If <code>entitySet</code> has not been defined, the SemanticObjectController tries to retrieve
				 * the name from its parents. <b>Note:</b> This is not a dynamic UI5 property.
				 * 
				 * @since 1.28.0
				 */
				entitySet: {
					type: "string",
					group: "Misc",
					defaultValue: null
				}
			},
			events: {

				/**
				 * After the navigation targets have been retrieved, <code>navigationTargetsObtained</code> is fired and makes it possible you to
				 * change the targets.
				 * 
				 * @since 1.28.0
				 */
				navigationTargetsObtained: {
					parameters: {
						/**
						 * The main navigation object.
						 */
						mainNavigation: {
							type: "sap.ui.comp.navpopover.LinkData"
						},

						/**
						 * Array of available navigation target objects.
						 */
						actions: {
							type: "sap.ui.comp.navpopover.LinkData[]"
						},

						/**
						 * The navigation object for the own application. This navigation option is by default not visible on the popover.
						 */
						ownNavigation: {
							type: "sap.ui.comp.navpopover.LinkData"
						},

						/**
						 * The semantic object for which the navigation targets have been retrieved.
						 */
						semanticObject: {
							type: "string"
						},

						/**
						 * The ID of the control that fires this event. If <code>navigationTargetsObtained</code> is registered on the SmartLink,
						 * <code>originalId</code> is the same as the event's source ID which is also the SmartLink's ID. If
						 * <code>navigationTargetsObtained</code> is registered on the SemanticObjectController, <code>originalId</code> helps to
						 * identify the original SmartLink control which triggered the event.
						 */
						originalId: {
							type: "string"
						},

						/**
						 * This callback function shows the actual navigation popover. If the <code>navigationTargetsObtained</code> has been
						 * registered, the <code>show</code> function has to be called manually in order to open the navigation popover. Signatures:
						 * <code>show()</code>
						 *  <code>show(oMainNavigation, aAvailableActions, oExtraContent)</code>
						 *  <code>show(sMainNavigationId, oMainNavigation, aAvailableActions, oExtraContent)</code>
						 * Parameters:
						 * <ul>
						 * <li>{string} sMainNavigationId The visible text for the main navigation section. If empty, the main navigation ID is
						 * calculated using binding context of given source object (such as SmartLink).</li>
						 * <li>{sap.ui.comp.navpopover.LinkData} oMainNavigation The main navigation object. If empty, property
						 * <code>mainNavigation</code> will be used.</li>
						 * <li>{sap.ui.comp.navpopover.LinkData[]} aAvailableActions Array containing the cross-application navigation links. If
						 * empty, property <code>actions</code> will be used.</li>
						 * <li>{sap.ui.core.Control} oExtraContent Control that will be displayed in extra content section on the popover.</li>
						 * </ul>
						 */
						show: {
							type: "function"
						}
					}
				},

				/**
				 * Event is fired before the navigation popover opens and before navigation target links are retrieved. Event can be used to change
				 * the parameters used to retrieve the navigation targets. In case of SmartLink, <code>beforePopoverOpens</code> is fired after the
				 * link has been clicked.
				 * 
				 * @since 1.28.0
				 */
				beforePopoverOpens: {
					parameters: {
						/**
						 * The semantic object for which the navigation targets will be retrieved.
						 */
						semanticObject: {
							type: "string"
						},

						/**
						 * Map containing the semantic attributes calculated from the binding that will be used to retrieve the navigation targets.
						 */
						semanticAttributes: {
							type: "object"
						},

						/**
						 * This callback function enables you to define a changed semantic attributes map. Signatures:
						 * <code>setSemanticAttributes(oSemanticAttributesMap)</code> Parameter:
						 * <ul>
						 * <li>{object} oSemanticAttributesMap New map containing the semantic attributes to be used.</li>
						 * </ul>
						 */
						setSemanticAttributes: {
							type: "function"
						},

						/**
						 * This callback function sets an application state key that is used over the cross-application navigation. Signatures:
						 * <code>setAppStateKey(sAppStateKey)</code> Parameter:
						 * <ul>
						 * <li>{string} sAppStateKey</li>
						 * </ul>
						 */
						setAppStateKey: {
							type: "function"
						},

						/**
						 * The ID of the control that fires this event. If <code>beforePopoverOpens</code> is registered on the SmartLink,
						 * <code>originalId</code> is the same as the event's source ID which is also the SmartLink's ID. If the
						 * <code>beforePopoverOpens</code> is registered on the SemanticObjectController, <code>originalId</code> helps to
						 * identify the original SmartLink control which triggered the event.
						 */
						originalId: {
							type: "string"
						},

						/**
						 * This callback function triggers the retrieval of navigation targets and leads to the opening of the navigation popover.
						 * Signatures: <code>open()</code> If <code>beforePopoverOpens</code> has been registered, <code>open</code> function
						 * has to be called manually in order to open the navigation popover.
						 */
						open: {
							type: "function"
						}
					}
				},

				/**
				 * This event is fired after a navigation link on the navigation popover has been clicked. This event is only fired, if the user
				 * left-clicks the link. Right-clicking the link and selecting 'Open in New Window' etc. in the context menu does not fire the event.
				 * 
				 * @since 1.28.0
				 */
				navigate: {
					parameters: {
						/**
						 * The UI text shown in the clicked link.
						 */
						text: {
							type: "string"
						},

						/**
						 * The navigation target of the clicked link.
						 */
						href: {
							type: "string"
						},

						/**
						 * The semantic object used to retrieve this target.
						 */
						semanticObject: {
							type: "string"
						},

						/**
						 * Map containing the semantic attributes used to retrieve this target.
						 */
						semanticAttributes: {
							type: "object"
						},

						/**
						 * The ID of the control that fires this event. If <code>navigate</code> is registered on the SmartLink,
						 * <code>originalId</code> is the same as the event's source ID which is the SmartLink's ID. If <code>navigate</code> is
						 * registered on the SemanticObjectController, <code>originalId</code> helps to identify the original SmartLink control
						 * which triggered the event.
						 */
						originalId: {
							type: "string"
						}
					}
				},

				/**
				 * If the property <code>prefechtNavigationTargets</code> is set to <code>true</code>, event <code>prefetchDone</code>
				 * is fired after all navigation targets have been retrieved.
				 * 
				 * @since 1.28.0
				 */
				prefetchDone: {
					parameters: {
						/**
						 * A map containing all semantic objects as keys for which at least one navigation target has been found. The value for each
						 * semantic object key is an array containing the available actions found for this semantic object.
						 */
						semanticObjects: {
							type: "object"
						}
					}
				}
			}
		}
	});

	SemanticObjectController.prototype.init = function() {
		this._proxyOnBeforePopoverOpens = jQuery.proxy(this._onBeforePopoverOpens, this);
		this._proxyOnTargetsObtained = jQuery.proxy(this._onTargetsObtained, this);
		this._proxyOnNavigate = jQuery.proxy(this._onNavigate, this);
		this._aRegisteredControls = [];
		this._aIgnoredSegmanticObjects = [];
	};

	/**
	 * Adds the given control from the SemanticObjectControler and registers all relevant events
	 * 
	 * @param {sap.ui.comp.navpopover.SmartLink} oSemanticSmartControl the SmartLink which should be added.
	 * @public
	 */
	SemanticObjectController.prototype.registerControl = function(oSemanticSmartControl) {
		if (oSemanticSmartControl.attachBeforePopoverOpens && !oSemanticSmartControl.hasListeners("beforePopoverOpens")) {
			oSemanticSmartControl.attachBeforePopoverOpens(this._proxyOnBeforePopoverOpens);
		}
		if (oSemanticSmartControl.attachNavigationTargetsObtained && !oSemanticSmartControl.hasListeners("navigationTargetsObtained")) {
			oSemanticSmartControl.attachNavigationTargetsObtained(this._proxyOnTargetsObtained);
		}

		if (oSemanticSmartControl.attachInnerNavigate && !oSemanticSmartControl.hasListeners("innerNavigate")) {
			oSemanticSmartControl.attachInnerNavigate(this._proxyOnNavigate);
		}

		this.setIgnoredState(oSemanticSmartControl);
		this._aRegisteredControls.push(oSemanticSmartControl);
	};

	/**
	 * Removes the given control from the SemanticObjectControler and unregisters all relevant events
	 * 
	 * @param {sap.ui.comp.navpopover.SmartLink} oSemanticSmartControl the SmartLink which should be removed.
	 * @public
	 */
	SemanticObjectController.prototype.unregisterControl = function(oSemanticSmartControl) {
		if (oSemanticSmartControl.detachBeforePopoverOpens) {
			oSemanticSmartControl.detachBeforePopoverOpens(this._proxyOnBeforePopoverOpens);
		}
		if (oSemanticSmartControl.detachNavigationTargetsObtained) {
			oSemanticSmartControl.detachNavigationTargetsObtained(this._proxyOnTargetsObtained);
		}

		if (oSemanticSmartControl.detachInnerNavigate) {
			oSemanticSmartControl.detachInnerNavigate(this._proxyOnNavigate);
		}

		this._aRegisteredControls.pop(oSemanticSmartControl);
	};

	/**
	 * Eventhandler before navigation popover opens
	 * 
	 * @param {object} oEvent the event parameters.
	 * @private
	 */
	SemanticObjectController.prototype._onBeforePopoverOpens = function(oEvent) {
		var oParameters = oEvent.getParameters();

		if (this.hasListeners("beforePopoverOpens")) {
			this.fireBeforePopoverOpens({
				semanticObject: oParameters.semanticObject,
				semanticAttributes: oParameters.semanticAttributes,
				setSemanticAttributes: oParameters.setSemanticAttributes,
				setAppStateKey: oParameters.setAppStateKey,
				originalId: oParameters.originalId,
				open: oParameters.open
			});
		} else {
			oParameters.open();
		}
	};

	/**
	 * Eventhandler after navigation targets have been retrieved.
	 * 
	 * @param {object} oEvent the event parameters.
	 * @private
	 */
	SemanticObjectController.prototype._onTargetsObtained = function(oEvent) {
		var oParameters = oEvent.getParameters();
		if (this.hasListeners("navigationTargetsObtained")) {
			var oSource = oEvent.getSource();
			this.fireNavigationTargetsObtained({
				semanticObject: oSource.getSemanticObject(),
				semanticAttributes: oSource.getSemanticAttributes(),
				actions: oParameters.actions,
				mainNavigation: oParameters.mainNavigation,
				ownNavigation: oParameters.ownNavigation,
				originalId: oParameters.originalId,
				show: oParameters.show
			});
		} else {
			oParameters.show();
		}
	};

	/**
	 * Eventhandler after navigation has been triggered.
	 * 
	 * @param {object} oEvent the event parameters.
	 * @private
	 */
	SemanticObjectController.prototype._onNavigate = function(oEvent) {
		var oParameters = oEvent.getParameters();
		this.fireNavigate({
			text: oParameters.text,
			href: oParameters.href,
			originalId: oParameters.originalId,
			semanticObject: oParameters.semanticObject,
			semanticAttributes: oParameters.semanticAttributes
		});
	};

	/**
	 * Checks if the given SmartLink should be enabled or disabled and sets the state
	 * 
	 * @param {sap.ui.comp.navpopover.SmartLink} oSmartLink the SmartLink which should be enabled or disabled.
	 * @public
	 */
	SemanticObjectController.prototype.setIgnoredState = function(oSmartLink) {
		if (oSmartLink instanceof sap.ui.comp.navpopover.SmartLink) {
			var bIsIgnored = this._fieldIsIgnored(oSmartLink.getFieldName()) || !this._linkIsAvailable(oSmartLink.getSemanticObject());
			oSmartLink.setIgnoreLinkRendering(bIsIgnored);
		}
	};

	/**
	 * Checks if the given fieldname is within the ignored list
	 * 
	 * @param {string} sFieldName the fieldname.
	 * @returns {boolean} true if the field is ignored
	 * @private
	 */
	SemanticObjectController.prototype._fieldIsIgnored = function(sFieldName) {
		return this._aIgnoredSegmanticObjects.indexOf(sFieldName) > -1;
	};

	/**
	 * Checks if the given semantic object name has a navigation link
	 * 
	 * @param {string} sSemanticObject the SemanticObject.
	 * @returns {boolean} true if the semantic object has known navigation links
	 * @private
	 */
	SemanticObjectController.prototype._linkIsAvailable = function(sSemanticObject) {
		if (this._oAvailableLinks) {
			if (!this._oAvailableLinks[sSemanticObject]) {
				return false;
			}
		}
		return true;
	};

	SemanticObjectController.prototype.setIgnoredFields = function(sIgnoredFields) {
		this._aIgnoredSegmanticObjects = PersonalizationUtil.createArrayFromString(sIgnoredFields);
		this.setProperty("ignoredFields", sIgnoredFields);
		this._evaluateEnableState();
	};

	SemanticObjectController.prototype.setPrefetchNavigationTargets = function(bPrefetch) {
		this.setProperty("prefetchNavigationTargets", bPrefetch);

		if (bPrefetch) {
			this._prefetchNavigationTargets();
		} else {
			this._oAvailableLinks = null;
			this._evaluateEnableState();
		}
	};

	SemanticObjectController.prototype.getFieldSemanticObjectMap = function() {
		var oMap = this.getProperty("fieldSemanticObjectMap");
		if (oMap) {
			return oMap;
		}

		if (!this.getEntitySet()) {
			jQuery.sap.log.warning("FieldSemanticObjectMap is not set on SemanticObjectController, retrieval without EntitySet not possible");
			return null;
		}

		jQuery.sap.require("sap.ui.comp.odata.MetadataAnalyser");
		var oMetadataAnalyzer = new sap.ui.comp.odata.MetadataAnalyser(this.getModel());
		oMap = oMetadataAnalyzer.getFieldSemanticObjectMap(this.getEntitySet());
		if (oMap) {
			this.setProperty("fieldSemanticObjectMap", oMap, true);
		}

		return oMap;
	};

	SemanticObjectController.prototype.getEntitySet = function() {
		var sEntitySet = this.getProperty("entitySet");
		if (sEntitySet) {
			return sEntitySet;
		}

		var oParent = this.getParent();
		while (oParent) {
			if (oParent.getEntitySet) {
				sEntitySet = oParent.getEntitySet();
				if (sEntitySet) {
					this.setProperty("entitySet", sEntitySet, true);
					break;
				}
			}
			oParent = oParent.getParent();
		}

		return sEntitySet;
	};

	/**
	 * Retrieves all navigation targets to identify semantic objects for which a link should be displayed
	 * 
	 * @private
	 */
	SemanticObjectController.prototype._prefetchNavigationTargets = function() {
		var fGetService = sap.ushell && sap.ushell.Container && sap.ushell.Container.getService;
		if (!fGetService) {
			return;
		}

		this._oAvailableLinks = {};
		var oCrossAppNav = fGetService("CrossApplicationNavigation");
		var oURLParsing = fGetService("URLParsing");
		var oPromise = oCrossAppNav.getSemanticObjectLinks('');

		oPromise.fail(jQuery.proxy(function() {
			// activate links by removing empty AvailableLinks map
			this._oAvailableLinks = null;
			jQuery.sap.log.error("'getSemanticObjectLinks' failed");
			this._evaluateEnableState();
		}, this));

		oPromise.done(jQuery.proxy(function(aLinks) {
			var i, iLength;
			if (aLinks && aLinks.length) {
				iLength = aLinks.length;
				for (i = 0; i < iLength; i++) {
					var sId = aLinks[i].intent;
					var oShellHash = oURLParsing.parseShellHash(sId);
					if (oShellHash && oShellHash.semanticObject) {
						this._addActionToSemanticObject(oShellHash.semanticObject, oShellHash.action);
					}
				}
			}
			this._evaluateEnableState();
			this.firePrefetchDone({
				semanticObjects: this._oAvailableLinks
			});
		}, this));
	};

	/**
	 * adds the given action to the action list of the given semantic object
	 * 
	 * @param {string} sSemanticObject the SemanticObject.
	 * @param {string} sAction the Action.
	 * @private
	 */
	SemanticObjectController.prototype._addActionToSemanticObject = function(sSemanticObject, sAction) {
		if (!this._oAvailableLinks[sSemanticObject]) {
			this._oAvailableLinks[sSemanticObject] = [];
		}

		this._oAvailableLinks[sSemanticObject].push(sAction);
	};

	/**
	 * Loops over all registered controls and evaluates if their enabled or not
	 * 
	 * @private
	 */
	SemanticObjectController.prototype._evaluateEnableState = function() {
		for (var i = 0, iLength = this._aRegisteredControls.length; i < iLength; i++) {
			this.setIgnoredState(this._aRegisteredControls[i]);
		}
	};

	return SemanticObjectController;

}, /* bExport= */true);

}; // end of sap/ui/comp/navpopover/SemanticObjectController.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.odata.FieldSelector') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.odata.FieldSelector.
jQuery.sap.declare('sap.ui.comp.odata.FieldSelector'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/odata/FieldSelector",['jquery.sap.global', 'sap/ui/comp/library', 'sap/ui/core/Control', './FieldSelectorController'],
	function(jQuery, library, Control, FieldController) {
	"use strict";



/**
 * Constructor for a new odata/FieldSelector.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Reuse control which displays the properties of OData entity sets.
 * @extends sap.ui.core.Control
 *
 * @constructor
 * @public
	 * @alias sap.ui.comp.odata.FieldSelector
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
	var FieldSelector = Control.extend("sap.ui.comp.odata.FieldSelector", /** @lends sap.ui.comp.odata.FieldSelector.prototype */ { metadata : {

	library : "sap.ui.comp",
	properties : {

		/**
		 * Indicates to show a search bar for property names inside a selected entity set.
		 */
		showSearchBar : {type : "boolean", group : "Misc", defaultValue : true}
	},
	aggregations : {

		/**
		 * Content of the control itself
		 */
		content : {type : "sap.ui.core.Control", multiple : false}
	},
	events : {

		/**
		 * User selected a different field.
		 */
		fieldSelectionChanged : {}
	}
}});

	FieldSelector._tooltipBinding = {
		parts: [
			{path: "com.sap.vocabularies.Common.v1.QuickInfo"},
			{path: "com.sap.vocabularies.Common.v1.Label"}
		],
		formatter: function tooltipFormatter(oQuickInfo, oLabel){
			if (oQuickInfo && oQuickInfo.String){
				return oQuickInfo.String;
			}

			if (oLabel && oLabel.String){
				return oLabel.String;
			}

			return '';
		}
	};


/**
 * Returns a map with the name of the entity set and the key of the selected field.
 *
 * @name sap.ui.comp.odata.FieldSelector#getSelectedField
 * @function
 * @type object
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */

	FieldSelector.prototype.init = function() {


	// do something for initialization...
	jQuery.sap.require("sap.m.HBox");
	jQuery.sap.require("sap.m.VBox");
	jQuery.sap.require("sap.m.FlexItemData");
	jQuery.sap.require("sap.m.FlexDirection");
	jQuery.sap.require("sap.m.FlexAlignSelf");
	jQuery.sap.require("sap.m.FlexAlignItems");
	jQuery.sap.require("sap.ui.core.ResizeHandler");
	jQuery.sap.require("sap.ui.comp.odata.FieldSelectorModelConverter");
	jQuery.sap.require("sap.m.Label");
	jQuery.sap.require("sap.ui.fl.fieldExt.Access");

	this._fieldNameText = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("ODATA_FIELD_SEL_NAME");
	this._fieldTypeText = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("ODATA_FIELD_SEL_TYPE");
	this._fieldLabelText = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("ODATA_FIELD_SEL_LABEL");
	this._entityTypeText = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("ODATA_FIELD_SEL_HEADER");
	this._createNewFieldText = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("ODATA_CREATE_NEW_FIELD");

	this._oFieldController = new FieldController();
	this._sSelectedKey = undefined;
	this._oTable = undefined;
	this._oSearchField = undefined;
	this._oConverter = undefined;
	this._oCreateButton = undefined;
	this._bDisplayFieldExtButton = undefined;
	this._oCurrentFieldExtInfo = undefined;
	this._oScrollView = new sap.m.ScrollContainer();
	this._oTable = new sap.m.Table();
	this._oHeaderLayout = undefined;

	var smartFormDialog = sap.ui.getCore().byId("smartFormPersDialog");
	if (smartFormDialog) {
		this._oResizeDialogHandlerId = sap.ui.core.ResizeHandler.register(smartFormDialog, jQuery.proxy(this._handleResizeDialog, this));
	}
	if (this._oScrollView) {
		this._oResizeScrollViewHandlerId = sap.ui.core.ResizeHandler.register(this._oScrollView, jQuery.proxy(this._handleResizeTable, this));
	}

};

	FieldSelector.prototype._handleResizeDialog = function() {
	if (this._oScrollView) {
		var height = jQuery("#smartFormPersDialog-cont").height();
		var headerHeight = jQuery("#smartFormPersDialogFieldSelectorHeader").height();
		var headerSearchHeight = jQuery("#sapUiCompFieldSelectorHeaderSearch").height();
		var tableHeaderHeight = jQuery("#sapUiCompFieldSelectorTable-tblHeader").height();
		this._oScrollView.setHeight(height - headerHeight - headerSearchHeight - tableHeaderHeight + "px");
	}
};

	FieldSelector.prototype._handleResizeTable = function() {
	if (this._oScrollView) {
		var width = this._oScrollView.$("scroll").innerWidth();
		this._oTable.setWidth(width + "px");
	}
};

/**
 * Set the model for the entity and fields of an odata service
 *
 * @param {sap.ui.model.odata.ODataModel} oModel - odata model
 * @param {string} sEntityTypes - entity type name(s) separated by comma character or array
 * @param {boolean} bShowExtFieldButton - indicates if the create new field button will be displayed or not
 * @param {Array} aIgnoredFields - List of fields which should be ignored
 * @param {Object.<bindingPath:string, fieldListElement:Object>} mBindingPathToFieldListElement - Map absolute odata binding paths to the field list elements
 * @param {Object.<id:string, fieldListElement:Object>} mIdToFieldListElement - Map field list element ids to the field list elements
 * @public
 */
	FieldSelector.prototype.setModel = function(oModel, sEntityTypes, bShowExtFieldButton, aIgnoredFields, mBindingPathToFieldListElement, mIdToFieldListElement) {

	this._bDisplayFieldExtButton = bShowExtFieldButton;

	if (!oModel) {
		jQuery.sap.log.error("oModel has to be set otherwise nothing will be displayed");
	}
	if (!sEntityTypes) {
		jQuery.sap.log.error("sEntityTypes has to be set otherwise nothing will be displayed");
	}
	this._oFieldController.init(oModel, sEntityTypes, aIgnoredFields, mBindingPathToFieldListElement, mIdToFieldListElement);
	this._constructLayout();
	this._updateCreateButtonState();
};

/**
 * Returns a map with the name of the entity set and the key of the selected field.
 *
 * @public
 * @returns {object} map of the name of the entity set having the selected field as kex
 */
FieldSelector.prototype.getSelectedField = function() {

	var oResult = {
		entityType: this._sSelectedKey
	};
	var oSelectedRow = this._oTable.getSelectedItem();
	if (oSelectedRow) {
		var oSelectedRowBindingContext = oSelectedRow.getBindingContext();
		if (oSelectedRowBindingContext){
			var oRowData = oSelectedRowBindingContext.getProperty();
			if (oRowData){
				oResult.field = oRowData.fieldLabel;
				oResult.name = oRowData.name;
				oResult.entityName = oRowData.entityName;
				oResult.entitySet = this._oFieldController.getMetaDataAnalyzer().getEntitySetNameFromEntityTypeName(oResult.entityType);
				oResult.path = oRowData.name;
				oResult.isBoundToODataService = oRowData.id === undefined;
				if (!oResult.isBoundToODataService) {
					oResult.id = oRowData.id;
				} else {
					// a complextype can be identified, if the entitytype of the fieldselector dropdown (oResult.entityType)
					// does not match with the entityName of the user selected OData-field (oRowData).
					if (oResult.entityType !== oRowData.entityName){
						var sPropertyNameOfCmplxField = this._oFieldController.getMetaDataAnalyzer()._getNameOfPropertyUsingComplexType(oResult.entityType, oRowData.entityName);
						if (sPropertyNameOfCmplxField){
							oResult.path = sPropertyNameOfCmplxField + "/" + oRowData.name;
						} else {
							jQuery.sap.log.error("FieldSelector: Property of complex type " + oRowData.name + " not found on entityType " + oResult.entityType);
						}
					}
				}
			}
		}
	}
	return oResult;
};

/**
 * Based on the renamed label contained in the field list,
 * the label contained in the field selector will be updated.
 *
 * @param {Object} oFieldListElement - Field list element containing all relevant properties needed for the update
 * @public
 */
FieldSelector.prototype.updateFieldLabel = function(oFieldListElement) {
	var that = this;
	var oFields = this._oFieldController.getFields();
	var bIsBoundToODataService = oFieldListElement.isBoundToODataService;
	var sNewLabel = oFieldListElement.label;

	if (bIsBoundToODataService === true) {
		var aBindingPaths = oFieldListElement.bindingPaths;
		jQuery.each(aBindingPaths, function(nBindingPathsIndex, oBindingPath) {
			var sBindingPath = oBindingPath.path;
			var nFirstSlashIndex = sBindingPath.indexOf('/');
			var sReferenceEntityName = sBindingPath.slice(0, nFirstSlashIndex);
			var sReferenceName = sBindingPath.slice(nFirstSlashIndex + 1);
			var oEntityFields = oFields[sReferenceEntityName];
			jQuery.each(oEntityFields, function(sEntityFieldsKey, oEntityField){
				if (oEntityField.name && oEntityField.name === sReferenceName) {
					oEntityField.fieldLabel = sNewLabel;
					that._oFieldController.sortFieldsForEntity(sReferenceEntityName);
					that._updateTableData();
					return; // apply label change only for corresponding entity type
				}
			});
		});
	} else if (bIsBoundToODataService === false) { // do not change in !bIsBoundToODataService, because in case of undefined logic should not be executed !
		jQuery.each(oFields, function(sFieldsKey, oEntityFields) { // apply label change for each entity type
			jQuery.each(oEntityFields, function(sEntityFieldsKey, oEntityField) {
				if (oEntityField.id && oEntityField.id === oFieldListElement.id) {
					oEntityField.fieldLabel = sNewLabel;
					that._oFieldController.sortFieldsForEntity(sFieldsKey);
				}
			});
		});
		this._updateTableData();
	}
};

/**
 * @private
 */
	FieldSelector.prototype._constructLayout = function() {
	var that = this;
	var oLayout = new sap.m.VBox({
		direction: sap.m.FlexDirection.Column
	});

	this._oHeaderLayout = new sap.m.HBox("smartFormPersDialogFieldSelectorHeader", {
		direction: sap.m.FlexDirection.Row
	});
	this._oHeaderLayout.addStyleClass("sapUiCompFieldSelectorHeader");

	this._oHeaderLayoutSearch = new sap.m.HBox({
		direction:sap.m.FlexDirection.Row
	});
	this._oHeaderLayoutSearch.addStyleClass("sapUiCompFieldSelectorHeaderSearch");

	this._oResizeHeaderHandlerId = sap.ui.core.ResizeHandler.register(this._oHeaderLayout, jQuery.proxy(this._handleResizeDialog, this));

	var oEntitySelectionLayout = new sap.m.HBox({
		direction: sap.m.FlexDirection.Row,
		alignItems: sap.m.FlexAlignItems.Start,
		layoutData: new sap.m.FlexItemData({
			growFactor: 2
		})
	});
	oEntitySelectionLayout.addStyleClass("sapUiCompFieldSelectorHeaderEntitySelection");

	var oHeader = new sap.m.Label({
		text: this._entityTypeText,
		layoutData: new sap.m.FlexItemData({
			order: 1,
			growFactor: 1
		})
	});
	// oHeader.addStyleClass("sapUiCompFieldSelectorHeaderText");

	var oDropDown = this._getEntityTypesRow();
	oDropDown.setLayoutData(new sap.m.FlexItemData({
		order: 2,
		growFactor: 1
	}));
	oDropDown.addStyleClass("sapUiCompFieldSelectorComboBox");

	oHeader.setLabelFor(oDropDown);
	oHeader.setVisible(oDropDown.getVisible());
	oEntitySelectionLayout.addItem(oHeader);
	oEntitySelectionLayout.addItem(oDropDown);
	this._oHeaderLayout.addItem(oEntitySelectionLayout);

	// Search field
	var oSearchField = this._getSearchRow();
	oSearchField.setLayoutData(new sap.m.FlexItemData({
		growFactor: 1
	}));
	oSearchField.addStyleClass("sapUiCompFieldSelectorHeader");
	this._oHeaderLayoutSearch.addItem(oSearchField);

	// New field button
	this._oCreateButton = new sap.m.Button({
		text: this._createNewFieldText,
		press: function(oEvent) {
			if (that._oCurrentFieldExtInfo) {
				// open field ext ui
				var oCrossAppNav = sap.ushell && sap.ushell.Container && sap.ushell.Container.getService("CrossApplicationNavigation");
				var sHrefForFieldExtensionUi = (oCrossAppNav && oCrossAppNav.hrefForExternal({
					target: {
						semanticObject: "CustomField",
						action: "develop"
					},
					params: {
						businessContexts: that._oCurrentFieldExtInfo.BusinessContexts,
						serviceName: that._oCurrentFieldExtInfo.ServiceName,
						serviceVersion: that._oCurrentFieldExtInfo.ServiceVersion
					}
				}));

				window.open(sHrefForFieldExtensionUi, "_blank");
			}
		}
	});
	this._oCreateButton.addStyleClass("sapUiCompFieldSelectorCreateButton");
	this._oHeaderLayout.addItem(this._oCreateButton);

	oLayout.addItem(this._oHeaderLayout);
	oLayout.addItem(this._oHeaderLayoutSearch);
	oLayout.addItem(this._getFieldsRow());

	this.setContent(oLayout);
};

/**
 * @private
 * @returns {sap.m.ComboBox} combobox instance
 */
	FieldSelector.prototype._getEntityTypesRow = function() {

	var that = this;
	var oDropDown = new sap.m.ComboBox({
		// placeholder: this._entitySetPlaceHolderText,
		selectionChange: function(oEvent) {
			that._oSearchField.setValue("");
			that._sSelectedKey = oEvent.mParameters.selectedItem.getKey();
			that._updateTableData();
			that._updateCreateButtonState();
		},
		layoutData: new sap.m.FlexItemData({
			growFactor: 1
		})
	});

	var aEntityTypes = this._oFieldController.getEntityTypes();
	for (var i = 0; i < aEntityTypes.length; i++) {
		oDropDown.addItem(new sap.ui.core.Item({
			text: aEntityTypes[i].label,
			key: aEntityTypes[i].key
		}));
	}

	if (aEntityTypes.length > 0) {
		this._sSelectedKey = aEntityTypes[0].key;
		oDropDown.setSelectedKey(this._sSelectedKey);
	}

	if (aEntityTypes.length === 1) {
		oDropDown.setVisible(false);
	}

	return oDropDown;
};

/**
 * @returns {sap.m.SearchField} search field instance
 */
	FieldSelector.prototype._getSearchRow = function() {

	var iLiveChangeTimer = 0;
	var that = this;
	var sValue;
	this._oSearchField = new sap.m.SearchField({
		visible: this.getShowSearchBar(),
		liveChange: function(oEvent) {
			sValue = oEvent.getSource().getValue();
			var iDelay = (sValue ? 300 : 0); // no delay if value is empty

			// execute search after user stops typing for 300ms
			clearTimeout(iLiveChangeTimer);
			if (iDelay) {
				iLiveChangeTimer = setTimeout(function() {
					that._executeSearch(sValue);
				}, iDelay);
			} else {
				that._executeSearch(sValue);
			}
		},
		// execute the standard search
		search: function(oEvent) {
			sValue = oEvent.getSource().getValue();
			that._executeSearch(sValue);
		},
		layoutData: new sap.m.FlexItemData({
			growFactor: 2
		})

	});

	return this._oSearchField;
};

/**
 * @param {string} sValue : value to be search
 * @private
 */
	FieldSelector.prototype._executeSearch = function(sValue) {

	var aFilters = [];
	// search for label, search for quick info
	var oFieldLabel = new sap.ui.model.Filter("fieldLabel", sap.ui.model.FilterOperator.Contains, sValue);
	var oQuickInfoFilter = new sap.ui.model.Filter("quickInfo", sap.ui.model.FilterOperator.Contains, sValue);
	var oFilter = new sap.ui.model.Filter([
		oFieldLabel, oQuickInfoFilter
	], false);

	aFilters.push(oFilter);
	var itemsBinding = this._oTable.getBinding("items");
	itemsBinding.filter(aFilters, "Application");
};

/**
 * @private
 * @returns {sap.m.Table} table instance
 */
	FieldSelector.prototype._getFieldsRow = function() {
	// this._oScrollView.setWidth("100%");
	this._oScrollView.setVertical(true);
	this._oScrollView.addStyleClass("sapUiCompFieldSelectorScrollContainer");


	var aColumns = [
		new sap.m.Column({
			header: new sap.m.Label({
				text: this._fieldLabelText
			})
		})
	];

	this._oTable = new sap.m.Table("sapUiCompFieldSelectorTable", {
		mode: "SingleSelectMaster",
		columns: aColumns,
		selectionChange: jQuery.proxy(function(e) {
			var oSelection = this.getSelectedField();
			this.fireFieldSelectionChanged(oSelection);
		}, this)
	});
	this._oTable.setFixedLayout(false);

	this._updateTableData();

	this._oScrollView.addContent(this._oTable);
	this._handleResizeDialog();

	return this._oScrollView;
};

/**
 * @private
 */
FieldSelector.prototype._updateTableData = function() {

	var oModel = new sap.ui.model.json.JSONModel();
	oModel.setData({
		modelData: this._oFieldController.getFields()
	});

	var oTemplate = new sap.m.ColumnListItem({
		cells: [
			new sap.m.Text({
				text: "{fieldLabel}",
				tooltip: FieldSelector._tooltipBinding,
				wrapping: false
			})
		],
		visible: {
			path: "fieldLabel",
			formatter: function (sFieldLabel) {
				return !!sFieldLabel;
			}
		}
	});

	this._oTable.setModel(oModel);
	this._oTable.getModel().setSizeLimit(this._oFieldController.getMaxEntitySetSize() + 5);
	this._oTable.bindItems("/modelData/" + this._sSelectedKey, oTemplate);
};

/**
 * Checks the support for ext fields and sets the enabled state for the create new field button
 *
 * @private
 */
	FieldSelector.prototype._updateCreateButtonState = function() {

	if (!this._bDisplayFieldExtButton) {
		this._oCreateButton.setVisible(false);
	} else {
		var that = this;
		var oMDA = this._oFieldController.getMetaDataAnalyzer();
		that._oCreateButton.setEnabled(false); // disabled by default
		try {
			var oPromise = sap.ui.fl.fieldExt.Access.getBusinessContexts(oMDA.oModel.sServiceUrl, this._sSelectedKey);
			oPromise.done(function(oResult) {
				if (oResult) {
					if (oResult.BusinessContexts) {
						if (oResult.BusinessContexts.length > 0) {
							that._oCurrentFieldExtInfo = oResult;
							that._oCreateButton.setEnabled(true);
						}
					}
				}

			});
			oPromise.fail(function(oError) {
				that._oCreateButton.setEnabled(false);
				if (oError) {
					if (jQuery.isArray(oError.errorMessages)) {
						for (var i = 0; i < oError.errorMessages.length; i++) {
							jQuery.sap.log.error(oError.errorMessages[i].text);
						}
					}
				}
			});
		} catch (oError) {
			that._oCreateButton.setEnabled(false);
			jQuery.sap.log.error("exception occured in sap.ui.fl.fieldExt.Access.getBusinessContexts");
		}
	}

};

/**
 * Cleans up the control
 *
 * @public
 */
	FieldSelector.prototype.exit = function() {

	if (this._oResizeDialogHandlerId) {
		sap.ui.core.ResizeHandler.deregister(this._oResizeDialogHandlerId);
	}
	if (this._oResizeHeaderHandlerId) {
		sap.ui.core.ResizeHandler.deregister(this._oResizeHeaderHandlerId);
	}
	if (this._oResizeScrollViewHandlerId) {
		sap.ui.core.ResizeHandler.deregister(this._oResizeScrollViewHandlerId);
	}
	this.destroyAggregation("content");
	this._oFieldController.destroy();
	this._sSelectedKey = null;
	this._oTable = null;
	this._oScrollView = null;
	this._oSearchField = null;
	this._oHeaderLayout = null;
	if (this._oConverter && this._oConverter.destroy) {
		this._oConverter.destroy();
	}
	this._oConverter = null;
	if (this._oCreateButton) {
		if (this._oCreateButton.destroy) {
			this._oCreateButton.destroy();
		}
	}
	this._oCreateButton = null;
	this._oCurrentFieldExtInfo = null;
};


	return FieldSelector;

}, /* bExport= */ true);

}; // end of sap/ui/comp/odata/FieldSelector.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.personalization.BaseController') ) {
/* eslint-disable strict */

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides BaseController
jQuery.sap.declare('sap.ui.comp.personalization.BaseController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.P13nItem'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.Table'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/personalization/BaseController",[
	'jquery.sap.global', 'sap/m/P13nItem', 'sap/ui/base/ManagedObject', './Util', 'sap/ui/table/Table'
], function(jQuery, P13nItem, ManagedObject, Util, Table) {
	"use strict";

	/**
	 * The BaseController is a base class for personalization Controller like e.g. FilterController, SortController etc. *
	 * 
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class An abstract class for personalization Controllers.
	 * @extends sap.ui.base.ManagedObject
	 * @author SAP SE
	 * @version 1.25.0-SNAPSHOT *
	 * @constructor
	 * @since 1.28.0
	 * @alias sap.ui.comp.personalization.BaseController
	 */
	var BaseController = ManagedObject.extend("sap.ui.comp.personalization.BaseController",
	/** @lends sap.ui.comp.personalization.BaseController */
	{
		metadata: {
			"abstract": true,
			library: "sap.ui.comp",
			properties: {
				/**
				 * Controller type for generic use. Due to extensibility reason the type of "type" property should be "string". So it is feasible to
				 * add a custom controller without expanding the type.
				 * 
				 * @since 1.28.0
				 */
				type: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},
				/**
				 * Controller model. Each controller has its own name space as part of the entire model.
				 * 
				 * @since 1.28.0
				 */
				model: {
					type: "sap.ui.model.json.JSONModel",
					group: "Misc",
					defaultValue: null
				},
				/**
				 * @since 1.28.0
				 */
				persistentDataRestore: {
					type: "object",
					group: "Misc",
					defaultValue: null,
					visibility: "hidden"
				},
				/**
				 * @since 1.32.0
				 */
				ignoreColumnKeys: {
					type: "object",
					group: "Misc",
					defaultValue: [],
					visibility: "hidden"
				}
			},
			associations: {
				/**
				 * Table for which settings are applied.
				 * 
				 * @since 1.28.0
				 */
				table: {
					type: "sap.ui.core.Control",
					multiple: false
				}
			},
			events: {
				/**
				 * Event is raised before potential change on table will be applied.
				 * 
				 * @since 1.28.0
				 */
				beforePotentialTableChange: {},
				/**
				 * Event is raised after potential change on table has be applied.
				 * 
				 * @since 1.28.0
				 */
				afterPotentialTableChange: {}
			}
		}
	});

	/**
	 * Initialization hook.
	 * 
	 * @private
	 */
	BaseController.prototype.init = function() {
	};

	/**
	 * Load data - used for lazy loading
	 * 
	 * @protected
	 * @returns {function} to set the model data
	 */
	BaseController.prototype.setModelFunction = function() {
		var that = this;
		return function() {
			if (!this.getModel("$sapmP13nPanel")) {
				this.setModel(that.getModel("$sapuicomppersonalizationBaseController"), "$sapmP13nPanel");
			}
		};
	};

	/**
	 * Getter for association <code>table</code>
	 * 
	 * @returns {object} that represents sap.m.Table || sap.ui.table.Table
	 * @protected
	 */
	BaseController.prototype.getTable = function() {
		var oTable = this.getAssociation("table");
		if (typeof oTable === "string") {
			oTable = sap.ui.getCore().byId(oTable);
		}
		return oTable;
	};

	/**
	 * Creates persistent object
	 * 
	 * @param {array} aItems is a list of items that will be placed in the new created persistent structure
	 * @returns {object} JSON object
	 * @protected
	 */
	BaseController.prototype.createPersistentStructure = function(aItems) {
		aItems = aItems || [];
		var oPersistentData = {};
		oPersistentData[this.getType()] = {};
		oPersistentData[this.getType()][this.getType() + "Items"] = aItems;
		return oPersistentData;
	};

	/**
	 * Getter of persistent data object
	 * 
	 * @returns {object} JSON object
	 * @protected
	 */
	BaseController.prototype.getPersistentData = function() {
		var oData = this.getModel("$sapuicomppersonalizationBaseController").getData();
		var oPersistentData = {};
		if (!oData.persistentData[this.getType()]) {
			oPersistentData = this.createPersistentStructure();
		} else {
			oPersistentData[this.getType()] = oData.persistentData[this.getType()];
		}
		return oPersistentData;
	};

	/**
	 * Setter of persistent data object *
	 * 
	 * @param {object} oDataNew contains the new data that will be set into model persistentData
	 * @protected
	 */
	BaseController.prototype.setPersistentData = function(oDataNew) {
		var oData = this.getModel("$sapuicomppersonalizationBaseController").getData();
		oData.persistentData[this.getType()] = oDataNew[this.getType()];
	};

	/**
	 * Getter of persistent items data object
	 * 
	 * @returns {object} JSON object
	 * @protected
	 */
	BaseController.prototype.getPersistentDataItems = function() {
		return this.getPersistentData()[this.getType()][this.getType() + "Items"];
	};

	/**
	 * Getter of transient data object
	 * 
	 * @returns {object} JSON object
	 * @protected
	 */
	BaseController.prototype.getTransientData = function() {
		var oData = this.getModel("$sapuicomppersonalizationBaseController").getData();
		var oTransientData = {};
		if (!oData.transientData[this.getType()]) {
			oTransientData[this.getType()] = {};
			oTransientData[this.getType()].title = this.getTitleText();
			oTransientData[this.getType()].items = [];
		} else {
			oTransientData[this.getType()] = oData.transientData[this.getType()];
		}
		return oTransientData;
	};

	/**
	 * Setter of transient data object
	 * 
	 * @param {object} oDataNew contains the new data that will be set into model transientData
	 * @protected
	 */
	BaseController.prototype.setTransientData = function(oDataNew) {
		var oData = this.getModel("$sapuicomppersonalizationBaseController").getData();
		oData.transientData[this.getType()] = oDataNew[this.getType()];
	};

	/**
	 * Initialization of model
	 * 
	 * @param {object} oModel of type sap.ui.model.json.JSONModel that will be used for initialization
	 */
	BaseController.prototype.initializeModel = function(oModel) {
		this.setModel(oModel, "$sapuicomppersonalizationBaseController");
		this.setTransientData(this.getTransientData());
		this.setPersistentData(this.getPersistentData());
	};

	BaseController.prototype.createTableRestoreJson = function() {
		// TODO: this is not correct but the best we can do - problem is that the order in which we sort is not extractable from the table instance.
		// Consider to log error if more that one sort criteria
		this.setPersistentDataRestore(this._getTable2Json());
	};

	BaseController.prototype.getTableRestoreJson = function() {
		return Util.copy(this.getPersistentDataRestore());
	};

	/**
	 * only keep a columnItem if key is available in table
	 */
	BaseController.prototype.reducePersistentModel = function() {
		var oTable = this.getTable();
		if (!oTable) {
			return;
		}

		var aColumns = oTable.getColumns();
		var aItemsReduced = [];
		var oPersistentData = this.getPersistentData();
		oPersistentData[this.getType()][this.getType() + "Items"].forEach(function(oItem) {
			if (Util.getColumn(oItem.columnKey, aColumns)) {
				aItemsReduced.push(oItem);
			}
		});
		oPersistentData[this.getType()][this.getType() + "Items"] = aItemsReduced;
		this.setPersistentData(oPersistentData);
	};

	/**
	 * this method will make a complete json snapshot of the current table instance ("original") from the perspective of the columns controller; the
	 * json snapshot can later be applied to any table instance to recover all columns related infos of the "original" table TODO: This really only
	 * works for when max 1 sort criteria is defined since otherwise potentially order of sort criteria is destroyed
	 */
	BaseController.prototype._getTable2Json = function() {

	};

	BaseController.prototype.syncTable2PersistentModel = function() {
		// first put table representation into persistentData - full json representation
		// NOTE: This really only works for when max 1 sort criteria is defined since otherwise potentially order of sort
		// criteria is destroyed
		this.setPersistentData(this._getTable2Json());

		// NOTE: we leave persistentData in this form though for persistence we have too much data (compared to what we need to persist); reason is
		// that we wish to expose this data in the UI.
	};

	BaseController.prototype.syncTable2TransientModel = function() {
	};

	BaseController.prototype.getPanel = function() {
	};

	/**
	 * hook to apply made changes. The "oPayload" object can be used by subclasses.
	 * 
	 * @param {object} oPayload is an object that contains additional data, which can be filled by the connected panels
	 */
	BaseController.prototype.onAfterSubmit = function(oPayload) {
		this.syncJsonModel2Table(this.getModel("$sapuicomppersonalizationBaseController").getData().persistentData);
	};

	/**
	 * This method is called from Controller after Reset button was executed. This method is a base implementation and it is optional to re-implement
	 * it in the specific sub-controller
	 * 
	 * @param {object} oPayload is an object that contains additional data, which can be filled by the connected panels
	 */
	BaseController.prototype.onAfterReset = function(oPayload) {
	};

	BaseController.prototype.syncJsonModel2Table = function(oJsonModel) {
	};

	/**
	 * Operations on sorting are processed sometime directly at the table and sometime not. In case that something has been changed via
	 * Personalization Dialog the consumer of the Personalization Dialog has to apply sorting at the table. In case that sorting has been changed via
	 * user interaction at table, the change is instantly applied at the table.
	 * 
	 * @param {object} oPersistentDataBase JSON object
	 * @param {object} oPersistentDataCompare JSON object
	 */
	BaseController.prototype.getChangeType = function(oPersistentDataBase, oPersistentDataCompare) {
	};

	/**
	 * Result is XOR based difference = oPersistentDataBase - oPersistentDataCompare
	 * 
	 * @param {object} oPersistentDataBase JSON object.
	 * @param {object} oPersistentDataCompare JSON object. Note: if sortItems is [] then it means that all sortItems have been deleted
	 */
	BaseController.prototype.getChangeData = function(oPersistentDataBase, oPersistentDataCompare) {
	};

	/**
	 * @param {object} oPersistentDataBase: JSON object to which different properties from JSON oPersistentDataCompare are added
	 * @param {object} oPersistentDataCompare: JSON object from where the different properties are added to oPersistentDataBase. Note: if sortItems is []
	 *        then it means that all sortItems have been deleted
	 */
	BaseController.prototype.getUnionData = function(oPersistentDataBase, oPersistentDataCompare) {
	};

	/**
	 * Cleans up before destruction.
	 * 
	 * @private
	 */
	BaseController.prototype.exit = function() {
	};

	/* eslint-enable strict */

	return BaseController;

}, /* bExport= */true);

}; // end of sap/ui/comp/personalization/BaseController.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.personalization.ColumnsController') ) {
/* eslint-disable strict */

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides ColumnsController
jQuery.sap.declare('sap.ui.comp.personalization.ColumnsController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/personalization/ColumnsController",[
	'jquery.sap.global', './BaseController', 'sap/m/library', './Util'
], function(jQuery, BaseController, library, Util) {
	"use strict";

	// TODO: wenn an dem Column "Freeze" gesetzt wurde, sollte die Spalte nicht mehr verschoben werden können in dem
	// ColumnsPanel

	/**
	 * The ColumnsController can be used to...
	 * 
	 * @class Table Personalization Controller
	 * @extends sap.ui.comp.personalization.BaseController
	 * @author SAP SE
	 * @version 1.36.12
	 * @since 1.26.0
	 * @alias sap.ui.comp.ColumnsController
	 */
	var ColumnsController = BaseController.extend("sap.ui.comp.personalization.ColumnsController", /** @lends sap.ui.comp.personalization.ColumnsController */

	{
		constructor: function(sId, mSettings) {
			BaseController.apply(this, arguments);
			this.setType(sap.m.P13nPanelType.columns);
		},
		metadata: {
			properties: {
				/**
				 * @since 1.36.5
				 */
				triggerModelChangeOnColumnInvisible: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				}
			},
			/**
			 * Event is raised after columns data has been changed in data model
			 * 
			 * @since 1.26.0
			 */
			events: {
				afterColumnsModelDataChange: {}
			}
		}
	});

	ColumnsController.prototype.setTable = function(oTable) {
		BaseController.prototype.setTable.apply(this, arguments);

		if (oTable instanceof sap.ui.table.Table) {
			oTable.detachColumnMove(this._onColumnMove, this);
			oTable.detachColumnVisibility(this._onColumnVisibility, this);
			oTable.detachColumnResize(this._onColumnResize, this);
			oTable.attachColumnMove(this._onColumnMove, this);
			oTable.attachColumnVisibility(this._onColumnVisibility, this);
			oTable.attachColumnResize(this._onColumnResize, this);
		}

		// TODO: $ investigate this to avoid changing the transientData by e.g. variantChange
		// this._syncTable2TransientModel();
	};

	ColumnsController.prototype.getTitleText = function() {
		return sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("PERSODIALOG_TAB_COLUMNS");
	};

	ColumnsController.prototype.reducePersistentModel = function() {
		this.syncTable2PersistentModel();
	};

	/**
	 * Does a complete JSON snapshot of the current table instance ("original") from the perspective of the columns controller; the JSON snapshot can
	 * later be applied to any table instance to recover all columns related infos of the "original" table
	 * 
	 * @returns {objects} JSON objects with meta data from existing table columns
	 */
	ColumnsController.prototype._getTable2Json = function() {
		var oJsonData = this.createPersistentStructure();
		var oTable = this.getTable();
		if (oTable) {
			oTable.getColumns().forEach(function(oColumn, iIndex) {
				if (Util.isColumnIgnored(oColumn, this.getIgnoreColumnKeys())) {
					return;
				}
				oJsonData.columns.columnsItems.push({
					columnKey: Util.getColumnKey(oColumn),
					index: (oColumn.getOrder ? oColumn.getOrder() : iIndex),
					visible: oColumn.getVisible(),
					width: oColumn.getWidth()
				});
			}, this);
		}

		return oJsonData;
	};

	ColumnsController.prototype.syncTable2PersistentModel = function() {

		// first put table representation into persistentData - full json representation
		BaseController.prototype.syncTable2PersistentModel.apply(this, arguments);

		// now reduce persistentData by subtracting the restoreJson from the full json representation
		var oData = this.getModel("$sapuicomppersonalizationBaseController").getData();
		var oDelta = this.getChangeData(oData.persistentData, this.getTableRestoreJson());

		if (oDelta) {
			oData.persistentData.columns = oDelta.columns;
		} else {
			oData.persistentData.columns.columnsItems = [];
		}
	};

	ColumnsController.prototype.syncTable2TransientModel = function() {
		// this.getModel("$sapuicomppersonalizationBaseController").getData().transientData.columns.items = jQuery.extend(true, [], this._aInitialTransientItems);
		// TODO: see ($)
		this._syncTable2TransientModel();
	};

	ColumnsController.prototype._determineTooltipText = function(oObject) {
		var sTooltip = null;

		if (oObject && oObject.getTooltip) {

			// first check whether actual object is extended by TooltipBase
			if (oObject.getTooltip() instanceof sap.ui.core.TooltipBase) {
				sTooltip = oObject.getTooltip().getTooltip_Text();
			} else {
				sTooltip = oObject.getTooltip_Text();
			}

			// If no tooltip exist now -> check whether oObject is of type analyticalColumn -> that have it's own way to get the tooltip via binding
			if (!sTooltip && oObject instanceof sap.ui.table.AnalyticalColumn) {
				sTooltip = oObject.getTooltip_AsString();
			}

			// for all other try to get tooltip from assigned label
			if (!sTooltip && oObject.getLabel && oObject.getLabel().getTooltip_Text) {
				sTooltip = oObject.getLabel().getTooltip_Text();
			}
		}

		return sTooltip;
	};

	ColumnsController.prototype._syncTable2TransientModel = function() {
		var oTable = this.getTable();
		var aItems = [];

		if (oTable) {
			if (oTable instanceof sap.ui.table.Table) {
				oTable.getColumns().forEach(function(oColumn) {
					if (Util.isColumnIgnored(oColumn, this.getIgnoreColumnKeys())) {
						return;
					}
					var sTooltip = this._determineTooltipText(oColumn);
					aItems.push({
						columnKey: Util.getColumnKey(oColumn),
						text: oColumn.getLabel().getText(),
						tooltip: sTooltip,
						visible: oColumn.getVisible(),
						width: oColumn.getWidth()
					});
				}, this);
			} else {
				if (oTable instanceof sap.m.Table) {
					var aColumns = oTable.getColumns();
					aColumns.sort(function(a, b) {
						var iIndexA = a.getOrder();
						var iIndexB = b.getOrder();
						if (iIndexA < iIndexB) {
							return -1;
						}
						if (iIndexA > iIndexB) {
							return 1;
						}
						return 0;
					});
					aColumns.forEach(function(oColumn) {
						if (Util.isColumnIgnored(oColumn, this.getIgnoreColumnKeys())) {
							return;
						}
						aItems.push({
							columnKey: Util.getColumnKey(oColumn),
							text: oColumn.getHeader().getText(),
							tooltip: (oColumn.getHeader().getTooltip() instanceof sap.ui.core.TooltipBase) ? oColumn.getHeader().getTooltip().getTooltip_Text() : oColumn.getHeader().getTooltip_Text(),
							visible: oColumn.getVisible(),
							width: oColumn.getWidth()
						});
					}, this);
				}
			}
		}

		// check if Items was changed at all and take over if it was changed
		var aItemsBefore = this.getModel("$sapuicomppersonalizationBaseController").getData().transientData.columns.items;
		if (jQuery(aItems).not(aItemsBefore).length !== 0 || jQuery(aItemsBefore).not(aItems).length !== 0) {
			this.getModel("$sapuicomppersonalizationBaseController").getData().transientData.columns.items = aItems;
		}

		// TODO: see ($)
		// this._aInitialTransientItems = jQuery.extend(true, [], this.getModel("$sapuicomppersonalizationBaseController").getData().transientData.columns.items);
	};

	/**
	 * Set index into existing columnsItem. If it does not exist create new columnsItem with new index
	 * 
	 * @param {object} oData is the JSON based model data wherein the index shall be manipulated
	 * @param {object} oColumn is the table column
	 * @param {integer} iNewIndex is the index value that shall be set
	 * @private
	 */
	ColumnsController.prototype._setNewColumnItemIndex = function(oData, oColumn, iNewIndex) {
		var iColumnsItemIndex = -1;

		if (oColumn && iNewIndex !== null && iNewIndex !== undefined && iNewIndex > -1) {
			iColumnsItemIndex = Util.getIndexByKey(oData.persistentData.columns.columnsItems, Util.getColumnKey(oColumn));
			if (iColumnsItemIndex > -1) {
				oData.persistentData.columns.columnsItems[iColumnsItemIndex].index = iNewIndex;
			} else {
				oData.persistentData.columns.columnsItems.push({
					columnKey: Util.getColumnKey(oColumn),
					index: iNewIndex
				});
			}
		}
	};

	/**
	 * Callback method for table event: ColumnMove
	 * 
	 * @param {object} oEvent that contains all information about that column move
	 * @private
	 */
	ColumnsController.prototype._onColumnMove = function(oEvent) {

		var i = 0, iNewIndex = null, oTempColumn = null;
		var oTable = null, oData = null, oColumn = null;
		var iNewColumnIndex = null, iOldColumnIndex = null;

		// get new columns information, like new index and the columns that was moved
		oColumn = oEvent.getParameter("column");
		iNewColumnIndex = oEvent.getParameter("newPos");

		this.fireBeforePotentialTableChange();

		// calculate "old" columns information
		if (oColumn) {
			oTable = this.getTable();
			iOldColumnIndex = oTable.indexOfColumn(oColumn);
		}

		// change index property in model data of columnsItems
		if (iOldColumnIndex !== null && iNewColumnIndex !== null) {
			oData = this.getModel("$sapuicomppersonalizationBaseController").getData();

			if (iOldColumnIndex > iNewColumnIndex) {
				for (i = iNewColumnIndex; i <= iOldColumnIndex; i++) {
					if (i < iOldColumnIndex) {
						oTempColumn = oTable.getColumns()[i];
						iNewIndex = i + 1;
					} else {
						oTempColumn = oColumn;
						iNewIndex = oEvent.getParameter("newPos");
					}
					this._setNewColumnItemIndex(oData, oTempColumn, iNewIndex);
				}
			} else {
				for (i = iOldColumnIndex; i <= iNewColumnIndex; i++) {
					if (i === iOldColumnIndex) {
						oTempColumn = oColumn;
						iNewIndex = oEvent.getParameter("newPos");
					} else {
						oTempColumn = oTable.getColumns()[i];
						iNewIndex = i - 1;
					}
					this._setNewColumnItemIndex(oData, oTempColumn, iNewIndex);
				}
			}

			this.getModel("$sapuicomppersonalizationBaseController").setData(oData, true);

			this.fireAfterPotentialTableChange();

			this.fireAfterColumnsModelDataChange();
		}
	};

	/**
	 * Callback method for table event: ColumnVisibility
	 * 
	 * @param {object} oEvent that contains all information about that column visibility
	 * @private
	 */
	ColumnsController.prototype._onColumnVisibility = function(oEvent) {
		var oData = this.getModel("$sapuicomppersonalizationBaseController").getData();
		var oColumn = oEvent.getParameter("column");
		var bVisible = oEvent.getParameter("newVisible");

		this.fireBeforePotentialTableChange();

		var iIndex = Util.getIndexByKey(oData.persistentData.columns.columnsItems, Util.getColumnKey(oColumn));
		if (iIndex > -1) {
			oData.persistentData.columns.columnsItems[iIndex].visible = bVisible;
		} else {
			oData.persistentData.columns.columnsItems.push({
				columnKey: Util.getColumnKey(oColumn),
				visible: bVisible
			});
		}
		this.getModel("$sapuicomppersonalizationBaseController").setData(oData, true);

		this.fireAfterPotentialTableChange();

		this.fireAfterColumnsModelDataChange();
	};

	ColumnsController.prototype._onColumnResize = function(oEvent) {
		var oColumn = oEvent.getParameter("column");
		var oData = this.getModel("$sapuicomppersonalizationBaseController").getData();

		this.fireBeforePotentialTableChange();

		var iIndex = Util.getIndexByKey(oData.persistentData.columns.columnsItems, Util.getColumnKey(oColumn));
		if (iIndex > -1) {
			oData.persistentData.columns.columnsItems[iIndex].width = oEvent.getParameter("width");
		} else {
			oData.persistentData.columns.columnsItems.push({
				columnKey: Util.getColumnKey(oColumn),
				width: oEvent.getParameter("width")
			});
		}
		this.getModel("$sapuicomppersonalizationBaseController").setData(oData, true);

		this.fireAfterPotentialTableChange();

		this.fireAfterColumnsModelDataChange();
	};

	/**
	 * Returns a ColumnsPanel control
	 * 
	 * @returns {sap.m.P13nColumnsPanel} returns a new created ColumnsPanel
	 */
	ColumnsController.prototype.getPanel = function(oPayload) {
		
		sap.ui.getCore().loadLibrary("sap.m");
		jQuery.sap.require("sap/m/P13nColumnsPanel");
		jQuery.sap.require("sap/m/P13nItem");
		jQuery.sap.require("sap/m/P13nColumnsItem");

		var that = this;
		var iVisibleItemsThreshold = -1;
		if (oPayload && oPayload.visibleItemsThreshold) {
			iVisibleItemsThreshold = oPayload.visibleItemsThreshold;
		}
		var oPanel = new sap.m.P13nColumnsPanel({
			title: this.getTitleText(),
			visibleItemsThreshold: iVisibleItemsThreshold,
			items: {
				path: '$sapmP13nPanel>/transientData/columns/items',
				template: new sap.m.P13nItem({
					columnKey: '{$sapmP13nPanel>columnKey}',
					text: '{$sapmP13nPanel>text}',
					visible: '{$sapmP13nPanel>visible}',
					tooltip: '{$sapmP13nPanel>tooltip}',
					width: "{$sapmP13nPanel>width}"
				})
			},
			columnsItems: {
				path: "$sapmP13nPanel>/persistentData/columns/columnsItems",
				template: new sap.m.P13nColumnsItem({
					columnKey: "{$sapmP13nPanel>columnKey}",
					index: "{$sapmP13nPanel>index}",
					visible: "{$sapmP13nPanel>visible}",
					width: "{$sapmP13nPanel>width}"
				})
			},
			beforeNavigationTo: that.setModelFunction()
		});

		oPanel.attachChangeColumnsItems(function(oEvent) {
			var oData = this.getModel("$sapuicomppersonalizationBaseController").getData();
			var aNewColumnsItems = oEvent.getParameter('newItems');
			var aExistingColumnsItems = oEvent.getParameter('existingItems');
			var oColumnsItem = null, sColumnKey = null;

			if (aNewColumnsItems) {
				aNewColumnsItems.forEach(function(oNewColumnsItem) {
					oColumnsItem = {
						columnKey: oNewColumnsItem.getColumnKey()
					};
					if (oNewColumnsItem.getIndex() !== undefined) {
						oColumnsItem.index = oNewColumnsItem.getIndex();
					}
					if (oNewColumnsItem.getVisible() !== undefined) {
						oColumnsItem.visible = oNewColumnsItem.getVisible();
					}
					if (oNewColumnsItem.getWidth() !== undefined) {
						oColumnsItem.width = oNewColumnsItem.getWidth();
					}
					oData.persistentData.columns.columnsItems.push(oColumnsItem);
				});
			}

			if (aExistingColumnsItems) {
				aExistingColumnsItems.forEach(function(oExistingColumnsItem) {
					oColumnsItem = null;
					sColumnKey = oExistingColumnsItem.getColumnKey();
					oColumnsItem = Util.getArrayElementByKey("columnKey", sColumnKey, oData.persistentData.columns.columnsItems);
					if (oColumnsItem) {
						if (oExistingColumnsItem.getIndex() !== undefined) {
							oColumnsItem.index = oExistingColumnsItem.getIndex();
						}
						if (oExistingColumnsItem.getVisible() !== undefined) {
							oColumnsItem.visible = oExistingColumnsItem.getVisible();
						}
						if (oExistingColumnsItem.getWidth() !== undefined) {
							oColumnsItem.width = oExistingColumnsItem.getWidth();
						}
					}
				});
			}

		}, this);

		oPanel.attachSetData(function() {
			var oData = this.getModel("$sapuicomppersonalizationBaseController").getData();
			this.getModel("$sapuicomppersonalizationBaseController").setData(oData);
		}, this);

		this._correctColumnsItemsInPersistentData();
		return oPanel;
	};

	/**
	 * Callback from main controller after Reset button has been executed.
	 * 
	 * @param {object} oPayload that contains additional information from the panel
	 */
	ColumnsController.prototype.onAfterReset = function(oPayload) {
		var oPanel = null;
		if (oPayload && oPayload.columns && oPayload.columns.oPanel) {
			oPanel = oPayload.columns.oPanel;
			oPanel.reInitialize();
		}
	};

	/**
	 * Callback from main controller after OK button has been executed.
	 * 
	 * @param {object} oPayload that contains additional information from the panel
	 */
	ColumnsController.prototype.onAfterSubmit = function(oPayload) {
		this._correctColumnsItemsInPersistentData(oPayload);
		BaseController.prototype.onAfterSubmit.apply(this, arguments);
	};

	ColumnsController.prototype._correctColumnsItemsInPersistentData = function(oPayload) {
		this._removeIndexFromInvisibleColumnsItems();
		this._removeEmptyColumnsItems();
		if (oPayload) {
			this._correctColumnsItemIndexesBasedOnPayload(oPayload);
		}
	};

	/**
	 * This method recalculates indexes of all that columnsItems, which exist in payload -> selectedItems
	 * 
	 * @param {object} oPayload is an object that contains additional columnsPanel data, like list of selected items
	 */
	ColumnsController.prototype._correctColumnsItemIndexesBasedOnPayload = function(oPayload) {
		var aColumnsItems = this.getModel("$sapuicomppersonalizationBaseController").getData().persistentData.columns.columnsItems;
		var oColumnsItem = null, iIndex = null, sColumnKey = null, iRunningTableIndex = -1;

		if (aColumnsItems && aColumnsItems.length > 0) {
			if (oPayload && oPayload.columns && oPayload.columns.tableItemsChanged) {

				oPayload.columns.selectedItems.forEach(function(oSelectedItem, iSelectedItemIndex) {
					iIndex = oColumnsItem = null;

					sColumnKey = oSelectedItem.columnKey;
					oColumnsItem = Util.getArrayElementByKey("columnKey", sColumnKey, aColumnsItems);
					if (oColumnsItem && oColumnsItem.index !== undefined && oColumnsItem.index !== null) {
						iIndex = oColumnsItem.index;
					}
					if (iIndex === null || iIndex === undefined) {
						iIndex = iSelectedItemIndex;
					}

					/*
					 * Now consider special cases for indexes from existing columnsItems -> adapt iIndex
					 */

					// 1.) iIndex is lower than actual running sequence index -> increase the index to next higher index
					if (iIndex <= iRunningTableIndex) {
						iIndex = iRunningTableIndex + 1;
					}

					// 2.) iIndex is more than one sequence step away from actual running table index -> remove the gap
					if (Math.abs(iIndex - iRunningTableIndex) > 1) {
						iIndex = iRunningTableIndex + 1;
					}

					// write back new calculated index property value into actual columnsItem
					if (oColumnsItem) {
						oColumnsItem.index = iIndex;
					} else {
						oColumnsItem = {
							"columnKey": sColumnKey,
							"index": iIndex
						};
						aColumnsItems.push(oColumnsItem);
					}

					iRunningTableIndex = iIndex;
				});
			}
		}
	};

	/**
	 * This method removes all columnsItems that have no useful fill properties
	 */
	ColumnsController.prototype._removeEmptyColumnsItems = function() {
		var aColumnsItems = this.getModel("$sapuicomppersonalizationBaseController").getData().persistentData.columns.columnsItems;
		var i = 0, iLength = 0, oColumnsItem = null;

		if (aColumnsItems && aColumnsItems.length) {
			iLength = aColumnsItems.length;
			for (i = 0; i < iLength; i++) {
				oColumnsItem = aColumnsItems[i];
				if (oColumnsItem) {
					if (oColumnsItem.index !== null && oColumnsItem.index !== undefined) {
						continue;
					}
					if (oColumnsItem.visible !== null && oColumnsItem.visible !== undefined) {
						continue;
					}
					if (oColumnsItem.width !== null && oColumnsItem.width !== undefined) {
						continue;
					}
					aColumnsItems.splice(i, 1);
					i -= 1;
				}
			}
		}
	};

	/**
	 * Removes the index property of <code>columnsItems</code> in persistent model data. If a <code>columnsItem</code> contains an index property
	 * but the same item is not visible (visible = false), the <code>index</code> property is removed. As a result, such a column is rearranged in
	 * alphabetically sorted columns list at the end of unselected columns inside the <code>P13nColumnsPanel</code>. For all the following
	 * <code>columnsItems</code> that contain an <code>index</code>property this correction has to be made as many times as
	 * <code>columnsItems</code> properties have been corrected.
	 */
	ColumnsController.prototype._removeIndexFromInvisibleColumnsItems = function() {
		var aColumnsItems = null, aItems = null, oItem = null, iIndexReduceFactor = 0;
		var oPersistentData = this.getModel("$sapuicomppersonalizationBaseController").getData().persistentData;
		var oTransientData = this.getModel("$sapuicomppersonalizationBaseController").getData().transientData;
		var bVisible = null;

		if (oPersistentData && oPersistentData.columns && oPersistentData.columns.columnsItems) {
			aColumnsItems = oPersistentData.columns.columnsItems;
			this._sortArrayByPropertyName(aColumnsItems, "index");
		}

		if (oTransientData && oTransientData.columns && oTransientData.columns.items) {
			aItems = oTransientData.columns.items;
		}

		if (aColumnsItems && aColumnsItems.length) {
			aColumnsItems.forEach(function(oColumnsItem) {
				oItem = bVisible = null;

				if (oColumnsItem.index !== undefined) {
					bVisible = oColumnsItem.visible;
					if (bVisible === undefined || bVisible === null) {
						oItem = Util.getArrayElementByKey("columnKey", oColumnsItem.columnKey, aItems);
						if (oItem && oItem.visible !== undefined) {
							bVisible = oItem.visible;
						}
					}

					if (bVisible === false) {
						// if visible property of current columnsItem is FALSE & it contains an index property -> remove this index
						// property AND increase the indexReduceFactor
						delete oColumnsItem.index;
						iIndexReduceFactor += 1;
					} else {
						// But if visible property of current columnsItem is TRUE -> correct the index property according the
						// indexReduceFactor
						// An indexReduceFactor > 0 means that for at least one columnsItem the index was removed and for all
						// following the index property has to be correct by the indexReduceFactor
						if (oColumnsItem.index > 0 && oColumnsItem.index >= iIndexReduceFactor) {
							oColumnsItem.index -= iIndexReduceFactor;
						}
					}
				}
			});
		}
	};

	ColumnsController.prototype.syncJsonModel2Table = function(oJsonModel) {
		var oTable = this.getTable();
		var aItems = oJsonModel.columns.columnsItems;

		this.fireBeforePotentialTableChange();

		// Apply changes to a UI table
		if (oTable instanceof sap.ui.table.Table) {
			this._applyChangesToUiTableType(oTable, aItems);
		} else if (oTable instanceof sap.m.Table) {
			// Apply changes to a UI table
			this._applyChangesToMTableType(oTable, aItems);
		}

		this.fireAfterPotentialTableChange();
	};

	/**
	 * Applies changes to a table of type UI table
	 * 
	 * @param {object} oTable is the table where all personalization changes shall be allied to
	 * @param {array} aColumnsItems is an array with changes that shall be applied to oTable
	 */
	ColumnsController.prototype._applyChangesToUiTableType = function(oTable, aColumnsItems) {
		var aColumns = null, oTableColumn = null;
		var iFixedColumnCount = oTable.getFixedColumnCount();
		var iFixedColumnIndex = iFixedColumnCount === 0 ? iFixedColumnCount : iFixedColumnCount - 1;

		var fSetOrder = function(oColumnsItem, oTableColumn) {
			// Apply column order
			var iTableColumnIndex = oTable.indexOfColumn(oTableColumn);
			var iModelColumnIndex = oColumnsItem.index;
			if (iModelColumnIndex !== undefined && iTableColumnIndex !== iModelColumnIndex) {
				// TODO: was ist mit Binding, wenn Eintäge gelöscht und dann wieder hinzugefügt werden?
				oTable.removeColumn(oTableColumn);
				oTable.insertColumn(oTableColumn, iModelColumnIndex);
				// Remove "freeze" if a column was moved from the frozen zone out or column was moved inside of frozen zone.
				// Allowed is only column move outside of frozen zone.
				if (!(iTableColumnIndex > iFixedColumnIndex && iModelColumnIndex > iFixedColumnIndex)) {
					oTable.setFixedColumnCount(0);
				}
			}
		};

		var fSetVisibility = function(oColumnsItem, oTableColumn) {
			// Apply column visibility
			if (oColumnsItem.visible !== undefined && oTableColumn.getVisible() !== oColumnsItem.visible) {
				// TODO: was ist mit Binding, wenn das "Visible" Property im XML view gebunden ist?
				// In dem Beispiel von Markus K. wird die Spalte "Document Number" nicht auf Invisible gesetzt.
				oTableColumn.setVisible(oColumnsItem.visible);
			}
		};

		var fSetWidth = function(oColumnsItem, oTableColumn) {
			// Apply column width
			if (oColumnsItem.width !== undefined && oTableColumn.getWidth() !== oColumnsItem.width) {
				oTableColumn.setWidth(oColumnsItem.width);
			}
		};

		if (aColumnsItems.length) {
			aColumns = oTable.getColumns();

			// organize columnsItems by it's index to apply them in the right order
			aColumnsItems.sort(function(a, b) {
				if (a.index < b.index) {
					return -1;
				}
				if (a.index > b.index) {
					return 1;
				}
				return 0;
			});

			// apply columnsItems
			aColumnsItems.forEach(function(oColumnsItem) {
				oTableColumn = Util.getColumn(oColumnsItem.columnKey, aColumns);
				if (oTableColumn) {
					fSetOrder(oColumnsItem, oTableColumn);
					fSetVisibility(oColumnsItem, oTableColumn);
					fSetWidth(oColumnsItem, oTableColumn);
				}
			});
		}
	};

	/**
	 * Applies changes to a table of type M table
	 * 
	 * @param {object} oTable is the table where all personalization changes shall be allied to
	 * @param {array} aColumnsItems is an array with changes that shall be applied to oTable
	 */
	ColumnsController.prototype._applyChangesToMTableType = function(oTable, aColumnsItems) {
		var oTableColumn = null, bTableRerenderingNeeded = false;
		var aColumns = oTable.getColumns();

		var fSetOrder = function(oColumnsItem, oTableColumn) {
			// Apply column order
			var iModelColumnIndex = oColumnsItem.index;
			if (iModelColumnIndex !== undefined) {
				oTableColumn.setOrder(iModelColumnIndex);
				bTableRerenderingNeeded = true;
			}
		};

		var fSetVisibility = function(oColumnsItem, oTableColumn) {
			// Apply column visibility
			if (oColumnsItem.visible !== undefined && oTableColumn.getVisible() !== oColumnsItem.visible) {
				oTableColumn.setVisible(oColumnsItem.visible);
			}
		};

		// organize columnsItems by it's index to apply them in the right order
		if (aColumnsItems.length) {
			aColumns = oTable.getColumns();

			aColumnsItems.sort(function(a, b) {
				if (a.index < b.index) {
					return -1;
				}
				if (a.index > b.index) {
					return 1;
				}
				return 0;
			});

			// apply columnsItems
			aColumnsItems.forEach(function(oColumnsItem) {
				oTableColumn = Util.getColumn(oColumnsItem.columnKey, aColumns);
				if (oTableColumn) {
					fSetOrder(oColumnsItem, oTableColumn);
					fSetVisibility(oColumnsItem, oTableColumn);
				}
			});
		}
		// TODO: Check why table rerendering is needed for m.table when column is moved; change of visibility works fine
		if (bTableRerenderingNeeded) {
			oTable.rerender();
		}
	};

	/**
	 * Operations on columns are processed every time directly at the table. In case that something has been changed via Personalization Dialog or via
	 * user interaction at table, change is applied to the table.
	 * 
	 * @param {object} oPersistentDataBase (new) JSON object
	 * @param {object} oPersistentDataCompare (old) JSON object
	 * @returns {object} that represents the change type, like: Unchanged || TableChanged || ModelChanged
	 */
	ColumnsController.prototype.getChangeType = function(oPersistentDataBase, oPersistentDataCompare) {
		var oChangeData = this.getChangeData(oPersistentDataBase, oPersistentDataCompare);
		var bNeedModelChange;
		var that = this;
		if (oChangeData) {
			var oChangeType = sap.ui.comp.personalization.ChangeType.TableChanged;
			oChangeData.columns.columnsItems.some(function(oItem) {
				// analytical table needs to re-read data from backend even in case a column was made invisible !
				bNeedModelChange = that.getTable() instanceof sap.ui.table.AnalyticalTable || that.getTriggerModelChangeOnColumnInvisible();
				if (oItem.visible || (oItem.visible === false && bNeedModelChange)) {
					oChangeType = sap.ui.comp.personalization.ChangeType.ModelChanged;
					return true;
				}
			});
			return oChangeType;
		}
		return sap.ui.comp.personalization.ChangeType.Unchanged;
	};

	/**
	 * Result is XOR based difference = oPersistentDataBase - oPersistentDataCompare  (new - old) 
	 * 
	 * @param {object} oPersistentDataBase (new) JSON object which represents the current model state (Restore+PersistentData)
	 * @param {object} oPersistentDataCompare (old) JSON object which represents AlreadyKnown || Restore
	 * @returns {object} JSON object or null
	 */
	ColumnsController.prototype.getChangeData = function(oPersistentDataBase, oPersistentDataCompare) {
		// not valid
		if (!oPersistentDataCompare || !oPersistentDataCompare.columns || !oPersistentDataCompare.columns.columnsItems) {
			return null;
		}

		var oChangeData = {
			columns: Util.copy(oPersistentDataBase.columns)
		};

		// If no changes inside of columns.columnsItems array, return null.
		// Note: the order inside of columns.columnsItems array is irrelevant.
		var bIsEqual = true;
		oPersistentDataBase.columns.columnsItems.some(function(oItem) {
			var oItemCompare = Util.getArrayElementByKey("columnKey", oItem.columnKey, oPersistentDataCompare.columns.columnsItems);
			if (!Util.semanticEqual(oItem, oItemCompare)) {
				// Leave forEach() as there are different items
				bIsEqual = false;
				return true;
			}
		});
		if (bIsEqual) {
			return null;
		}

		// If same items are different then delete equal properties and return the rest of item
		var aToBeDeleted = [];
		oChangeData.columns.columnsItems.forEach(function(oItem, iIndex) {
			var oItemCompare = Util.getArrayElementByKey("columnKey", oItem.columnKey, oPersistentDataCompare.columns.columnsItems);
			if (Util.semanticEqual(oItem, oItemCompare)) {
				// Condenser: remove items which are not changed in a chain
				aToBeDeleted.push(oItem);
				return;
			}
			for ( var property in oItem) {
				if (property === "columnKey" || !oItemCompare) {
					if (oItemCompare && oItemCompare[property] === undefined) {
						delete oItem[property];
					} else {
						continue;
					}
				}
				if (oItem[property] === oItemCompare[property]) {
					delete oItem[property];
				}
			}
			if (Object.keys(oItem).length < 2) {
				aToBeDeleted.push(oItem);
			}
		});
		aToBeDeleted.forEach(function(oItem) {
			var iIndex = Util.getIndexByKey(oChangeData.columns.columnsItems, oItem.columnKey);
			oChangeData.columns.columnsItems.splice(iIndex, 1);
		});

		return oChangeData;
	};

	/**
	 * This method sorts a given ARRAY by a well defined property name of it's included objects. If it is required the array will be copied before.
	 * 
	 * @param {array} aArrayToBeSorted is the array that shall be sorted by the given property
	 * @param {string} sPropertyName is the property name that shall be taken as sorting criteria
	 * @param {Boolean} bTakeACopy is optional and desides whether the given arry shall be copied before its content will be sorted
	 * @returns {array} aSortedArray is the sorted array
	 */
	ColumnsController.prototype._sortArrayByPropertyName = function(aArrayToBeSorted, sPropertyName, bTakeACopy) {
		var aSortedArray = [];

		if (bTakeACopy === null || bTakeACopy === undefined) {
			bTakeACopy = false;
		}

		if (aArrayToBeSorted && aArrayToBeSorted.length > 0 && sPropertyName !== undefined && sPropertyName !== null && sPropertyName !== "") {

			if (bTakeACopy) {
				aSortedArray = jQuery.extend(true, [], aArrayToBeSorted);
			} else {
				aSortedArray = aArrayToBeSorted;
			}

			aSortedArray.sort(function(a, b) {
				var propertyA = a[sPropertyName];
				var propertyB = b[sPropertyName];
				if (propertyA < propertyB || (propertyA !== undefined && propertyB === undefined)) {
					return -1;
				}
				if (propertyA > propertyB || (propertyA === undefined && propertyB !== undefined)) {
					return 1;
				}
				return 0;
			});
		}

		return aSortedArray;
	};

	/**
	 * Sorts a given array by a well-defined property name of its included objects. If required, the array is copied before.
	 * 
	 * @param {array} aObjects is the array of objects in which the index properties are changed; aObjects needs to be sorted by the index property
	 * @param {int} iStartIndex is the start index from where the index properties shall be changed
	 * @param {int} iEndIndex is the end index to where the index properties shall be changed
	 */
	ColumnsController.prototype._recalculateIndexes = function(aObjects, iStartIndex, iEndIndex) {
		var iMinIndex = null, iMaxIndex = null, iMaxArrayIndex = null;

		if (!aObjects || !aObjects.length) {
			return;
		}

		iMaxArrayIndex = aObjects.length - 1;

		if (iStartIndex === null || iStartIndex === undefined || iStartIndex < 0 || iEndIndex === null || iEndIndex === undefined || iEndIndex < 0 || iEndIndex > iMaxArrayIndex || iStartIndex === iEndIndex) {
			return;
		}

		iMinIndex = Math.min(iStartIndex, iEndIndex);
		iMaxIndex = Math.max(iStartIndex, iEndIndex);

		// to be able to work with forEach and iIndex -> the array aObjects needs to be sorted!!
		aObjects.forEach(function(oObject, iIndex) {

			// check, whether actual object fit's into index ranges
			if (iIndex < iMinIndex || iIndex > iMaxIndex || iIndex > iMaxArrayIndex) {
				return;
			}

			if (iStartIndex > iEndIndex) {
				// UP
				oObject.index += 1;
			} else {
				// DOWN
				oObject.index -= 1;
			}
		});
	};

	/**
	 * @param {object} oPersistentDataBase: JSON object to which different properties from JSON oPersistentDataCompare are added. E.g. Restore
	 * @param {object} oPersistentDataCompare: JSON object from where the different properties are added to oPersistentDataBase. E.g. CurrentVariant ||
	 *        PersistentData
	 * @returns {object} new JSON object as union result of oPersistentDataBase and oPersistentDataCompare
	 */
	ColumnsController.prototype.getUnionData = function(oPersistentDataBase, oPersistentDataCompare) {

		// oPersistentDataCompare is empty -> result = oPersistentDataBase
		if (!oPersistentDataCompare || !oPersistentDataCompare.columns || !oPersistentDataCompare.columns.columnsItems || oPersistentDataCompare.columns.columnsItems.length === 0) {
			return oPersistentDataBase.columns ? {
				columns: jQuery.extend(true, {}, oPersistentDataBase.columns)
			} : null;
		}

		// oPersistentDataBase is empty -> result = oPersistentDataCompare
		if (!oPersistentDataBase || !oPersistentDataBase.columns || !oPersistentDataBase.columns.columnsItems) {
			return {
				columns: jQuery.extend(true, {}, oPersistentDataCompare.columns)
			};
		}

		var aDeltaColumnsItem = [];

		var oUnion = this.createPersistentStructure();

		oPersistentDataBase.columns.columnsItems.forEach(function(oColumnsItemPersistent, iIndex) {
			var oColumnsItemDelta = Util.getArrayElementByKey("columnKey", oColumnsItemPersistent.columnKey, oPersistentDataCompare.columns.columnsItems);

			if (oColumnsItemDelta) {
				if (oColumnsItemDelta.visible !== undefined) {
					oColumnsItemPersistent.visible = oColumnsItemDelta.visible;
				}

				if (oColumnsItemDelta.width !== undefined) {
					oColumnsItemPersistent.width = oColumnsItemDelta.width;
				}

				if (oColumnsItemDelta.index !== undefined) {
					oColumnsItemPersistent.index = oColumnsItemDelta.index;
					aDeltaColumnsItem.push(oColumnsItemPersistent);
					return;
				}
			}
			oUnion.columns.columnsItems.push(oColumnsItemPersistent);
		});

		if (aDeltaColumnsItem && aDeltaColumnsItem.length > 0) {
			this._sortArrayByPropertyName(aDeltaColumnsItem, "index");
			aDeltaColumnsItem.forEach(function(oDeltaColumnsItem) {
				oUnion.columns.columnsItems.splice(oDeltaColumnsItem.index, 0, oDeltaColumnsItem);
			});
		}

		oUnion.columns.columnsItems.forEach(function(oColumnsItemUnion, iIndex) {
			oColumnsItemUnion.index = iIndex;
		});

		return oUnion;
	};

	/**
	 * Determines whether a specific column is selected or not.
	 * 
	 * @param {object} oPayload structure about the current selection coming from panel
	 * @param {string} sColumnKey column key of specific column
	 * @returns {boolean} true if specific column is selected, false if not
	 */
	ColumnsController.prototype.isColumnSelected = function(oPayload, oPersistentData, sColumnKey) {
		if (!oPayload) {
			oPersistentData.columnsItems.some(function(oColumnsItem, iIndex_) {
				if (oColumnsItem.columnKey === sColumnKey && oColumnsItem.visible) {
					iIndex = iIndex_;
					return true;
				}
			});
			return iIndex > -1;
		}

		// oPayload has been passed...
		if (!oPayload.selectedItems) {
			return false;
		}
		var iIndex = Util.getIndexByKey(oPayload.selectedItems, sColumnKey);
		return iIndex > -1;
	};

	/**
	 * Cleans up before destruction.
	 * 
	 * @private
	 */
	ColumnsController.prototype.exit = function() {
		BaseController.prototype.exit.apply(this, arguments);

		var oTable = this.getTable();
		if (oTable && oTable instanceof sap.ui.table.Table) {
			oTable.detachColumnMove(this._onColumnMove, this);
			oTable.detachColumnVisibility(this._onColumnVisibility, this);
			oTable.detachColumnResize(this._onColumnResize, this);
		}
	};

	/* eslint-enable strict */

	return ColumnsController;

}, /* bExport= */true);

}; // end of sap/ui/comp/personalization/ColumnsController.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.personalization.DimeasureController') ) {
/* eslint-disable strict */

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides DimeasureController
jQuery.sap.declare('sap.ui.comp.personalization.DimeasureController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/personalization/DimeasureController",[
	'jquery.sap.global', './BaseController', 'sap/m/library', 'sap/ui/comp/library', './ChartWrapper', './Util'
], function(jQuery, BaseController, MLibrary, CompLibrary, ChartWrapper, Util) {
	"use strict";

	/**
	 * The DimeasureController can be used to...
	 *
	 * @class Table Personalization Controller
	 * @extends sap.ui.comp.personalization.BaseController
	 * @author SAP SE
	 * @version 1.36.12
	 * @since 1.34.0
	 * @alias sap.ui.comp.DimeasureController
	 */
	var DimeasureController = BaseController.extend("sap.ui.comp.personalization.DimeasureController", /** @lends sap.ui.comp.personalization.DimeasureController */

	{
		constructor: function(sId, mSettings) {
			BaseController.apply(this, arguments);
			this.setType(sap.m.P13nPanelType.dimeasure);
		},
		metadata: {
			events: {
				afterDimeasureModelDataChange: {}
			}
		}
	});

	DimeasureController.prototype.setTable = function(oTable) {
		BaseController.prototype.setTable.apply(this, arguments);

		if (!(oTable instanceof ChartWrapper)) {
			throw "The provided object is incorrect. 'oTable' has to be an instance of sap.ui.comp.personalization.ChartWrapper. ";
		}

		var oChart = oTable.getChartObject();
		oChart.detachDrilledDown(this._onDrilledDown, this);
		oChart.attachDrilledDown(this._onDrilledDown, this);
		oChart.detachDrilledUp(this._onDrilledUp, this);
		oChart.attachDrilledUp(this._onDrilledUp, this);

		var that = this;
		var oData = this.getModel("$sapuicomppersonalizationBaseController").getData();
		var fSetChartTypeOrigin = jQuery.proxy(oChart.setChartType, oChart);
		var fSetChartTypeOverwritten = function(sChartType) {
			fSetChartTypeOrigin(sChartType);
			if (sChartType && sChartType !== oData.persistentData.dimeasure.chartTypeKey) {
				that.fireBeforePotentialTableChange();
				oData.persistentData.dimeasure.chartTypeKey = sChartType;
				that.fireAfterPotentialTableChange();
				that.fireAfterDimeasureModelDataChange();
			}
		};
		if (oChart.setChartType.toString() === fSetChartTypeOverwritten.toString()) {
			// Do nothing if due to recursion the method is already overwritten.
			return;
		}
		oChart.setChartType = fSetChartTypeOverwritten;
	};

	DimeasureController.prototype._onDrilledDown = function(oEvent) {
		this._updateModel(oEvent.getSource());
	};

	DimeasureController.prototype._onDrilledUp = function(oEvent) {
		this._updateModel(oEvent.getSource());
	};

	DimeasureController.prototype._updateModel = function(oChart) {
		var oModel = this.getModel("$sapuicomppersonalizationBaseController");
		var oData = oModel.getData();
		var aColumns = this.getTable().getColumns();

		this.fireBeforePotentialTableChange();

		// Take over visible dimensions and measures as dimMeasureItems into model
		oData.persistentData.dimeasure.dimeasureItems = [];

		oChart.getVisibleDimensions().forEach(function(sDimensionName) {
			var oColumn = Util.getColumn(sDimensionName, aColumns);
			oData.persistentData.dimeasure.dimeasureItems.push({
				columnKey: Util.getColumnKey(oColumn),
				index: oData.persistentData.dimeasure.dimeasureItems.length,
				visible: true,
				role: oColumn.getRole()
			});
		}, this);
		oChart.getVisibleMeasures().forEach(function(sMeasureName) {
			var oColumn = Util.getColumn(sMeasureName, aColumns);
			oData.persistentData.dimeasure.dimeasureItems.push({
				columnKey: Util.getColumnKey(oColumn),
				index: oData.persistentData.dimeasure.dimeasureItems.length,
				visible: true,
				role: oColumn.getRole()
			});
		});
		oModel.refresh();

		this.fireAfterPotentialTableChange();

		this.fireAfterDimeasureModelDataChange();
	};

	DimeasureController.prototype.createPersistentStructure = function(aItems) {
		var oPersistentData = BaseController.prototype.createPersistentStructure.apply(this, arguments);
		oPersistentData.dimeasure.chartTypeKey = "";
		return oPersistentData;
	};

	DimeasureController.prototype.getTitleText = function() {
		return sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("PERSODIALOG_TAB_DIMEASURE");
	};

	/**
	 * Callback from main controller after OK button has been executed.
	 *
	 * @param {object} oPayload that contains additional information from the panel
	 */
	DimeasureController.prototype.onAfterSubmit = function(oPayload) {
		if (!oPayload || !oPayload.dimeasure) {
			return;
		}
		var oData = this.getModel("$sapuicomppersonalizationBaseController").getData();

		// Take over updated, new added or deleted dimMeasureItems into model
		oData.persistentData.dimeasure.dimeasureItems = [];
		oPayload.dimeasure.dimMeasureItems.forEach(function(oDimMeasureItem) {
			oData.persistentData.dimeasure.dimeasureItems.push({
				columnKey: oDimMeasureItem.getColumnKey(),
				index: oDimMeasureItem.getIndex(),
				visible: oDimMeasureItem.getVisible(),
				role: oDimMeasureItem.getRole()
			});
		});
		oData.persistentData.dimeasure.chartTypeKey = oPayload.dimeasure.chartTypeKey;
		this.getModel("$sapuicomppersonalizationBaseController").refresh();

		// Apply changes to the chart
		BaseController.prototype.onAfterSubmit.apply(this, arguments);
	};

	DimeasureController.prototype.syncJsonModel2Table = function(oJsonModel) {
		var oTable = this.getTable();
		var oChart = oTable.getChartObject();
		var aDimensionItems = [];
		var aMeasureItems = [];
		var fUpdateSelectedEntities = function(aDimeasureItems, aSelectedEntitiesOld, fSetSelectedEntities, fGetDimeasureByName) {
			var aDimeasureItemsCopy = Util.copy(aDimeasureItems);
			aDimeasureItemsCopy.sort(function(a, b) {
				if (a.index < b.index) {
					return -1;
				} else if (a.index > b.index) {
					return 1;
				} else {
					return 0;
				}
			});
			var aSelectedEntitiesNew = [];
			aDimeasureItemsCopy.forEach(function(oDimeasureItem) {
				if (oDimeasureItem.visible === true) {
					aSelectedEntitiesNew.push(oDimeasureItem.columnKey);
					var oDimeasure = fGetDimeasureByName(oDimeasureItem.columnKey);
					if (oDimeasure) {
						oDimeasure.setRole(oDimeasureItem.role);
					}
				}
			});
			if (JSON.stringify(aSelectedEntitiesNew) !== JSON.stringify(aSelectedEntitiesOld)) {
				fSetSelectedEntities(aSelectedEntitiesNew);
			}
		};

		// Apply changes to the Chart
		this.fireBeforePotentialTableChange();

		Util.splitDimeasures(oJsonModel.dimeasure.dimeasureItems, this.getModel("$sapuicomppersonalizationBaseController").getData().transientData.dimeasure.items, aDimensionItems, aMeasureItems);

		var aVisibleDimensions = oChart.getVisibleDimensions();
		fUpdateSelectedEntities(aDimensionItems, aVisibleDimensions, jQuery.proxy(oChart.setVisibleDimensions, oChart), jQuery.proxy(oChart.getDimensionByName, oChart));
		var aVisibleMeasures = oChart.getVisibleMeasures();
		fUpdateSelectedEntities(aMeasureItems, aVisibleMeasures, jQuery.proxy(oChart.setVisibleMeasures, oChart), jQuery.proxy(oChart.getMeasureByName, oChart));

		oChart.setChartType(oJsonModel.dimeasure.chartTypeKey);

		this.fireAfterPotentialTableChange();
	};

	/**
	 * Does a complete JSON snapshot of the current table instance ("original") from the perspective of the columns controller; the JSON snapshot can
	 * later be applied to any table instance to recover all columns related infos of the "original" table
	 *
	 * @returns {objects} JSON objects with meta data from existing table columns
	 */
	DimeasureController.prototype._getTable2Json = function() {
		var oJsonData = this.createPersistentStructure();
		var oTable = this.getTable();
		if (!oTable) {
			return oJsonData;

		}
		var oChart = oTable.getChartObject();
		var aVisibleDimensionNames = oChart.getVisibleDimensions();
		var aVisibleMeasureNames = oChart.getVisibleMeasures();
		var aColumns = oTable.getColumns();

		oJsonData.dimeasure.chartTypeKey = oChart.getChartType();

		aVisibleDimensionNames.forEach(function(sDimensionName) {
			var oColumn = Util.getColumn(sDimensionName, aColumns);
			if (Util.isColumnIgnored(oColumn, this.getIgnoreColumnKeys())) {
				return;
			}
			if (oColumn.getAggregationRole() !== sap.ui.comp.personalization.AggregationRole.Dimension && oColumn.getAggregationRole() !== sap.ui.comp.personalization.AggregationRole.Measure) {
				return;
			}
			oJsonData.dimeasure.dimeasureItems.push({
				columnKey: Util.getColumnKey(oColumn),
				index: oJsonData.dimeasure.dimeasureItems.length,
				visible: true,
				role: oColumn.getRole()
			});
		}, this);

		aVisibleMeasureNames.forEach(function(sMeasureName) {
			var oColumn = Util.getColumn(sMeasureName, aColumns);
			if (Util.isColumnIgnored(oColumn, this.getIgnoreColumnKeys())) {
				return;
			}
			if (oColumn.getAggregationRole() !== sap.ui.comp.personalization.AggregationRole.Dimension && oColumn.getAggregationRole() !== sap.ui.comp.personalization.AggregationRole.Measure) {
				return;
			}
			oJsonData.dimeasure.dimeasureItems.push({
				columnKey: Util.getColumnKey(oColumn),
				index: oJsonData.dimeasure.dimeasureItems.length,
				visible: true,
				role: oColumn.getRole()
			});
		}, this);

		return oJsonData;
	};

	DimeasureController.prototype.syncTable2TransientModel = function() {
		var aItems = [];
		var oTable = this.getTable();
		if (!oTable) {
			return;
		}

		oTable.getColumns().forEach(function(oColumn) {
			if (Util.isColumnIgnored(oColumn, this.getIgnoreColumnKeys())) {
				return;
			}
			if (oColumn.getAggregationRole() === sap.ui.comp.personalization.AggregationRole.NotDimeasure) {
				return;
			}
			aItems.push({
				columnKey: Util.getColumnKey(oColumn),
				text: oColumn.getLabel(),
				tooltip: oColumn.getTooltip(),
// visible: oColumn.getSelected(),
				aggregationRole: oColumn.getAggregationRole()
			});
		}, this);

		// check if Items was changed at all and take over if it was changed
		var aItemsBefore = this.getModel("$sapuicomppersonalizationBaseController").getData().transientData.dimeasure.items;
		if (jQuery(aItems).not(aItemsBefore).length !== 0 || jQuery(aItemsBefore).not(aItems).length !== 0) {
			this.getModel("$sapuicomppersonalizationBaseController").getData().transientData.dimeasure.items = aItems;
		}
	};

	/**
	 * Returns a ColumnsPanel control
	 *
	 * @returns {sap.m.P13nDimMeasurePanel} returns a new created ColumnsPanel
	 */
	DimeasureController.prototype.getPanel = function(oPayload) {

		sap.ui.getCore().loadLibrary("sap.m");
		jQuery.sap.require("sap/m/P13nDimMeasurePanel");
		jQuery.sap.require("sap/m/P13nItem");
		jQuery.sap.require("sap/m/P13nDimMeasureItem");

		var that = this;
		var aAvailableChartTypes = [];
		if (oPayload && oPayload.availableChartTypes) {
			aAvailableChartTypes = oPayload.availableChartTypes;
		}
		var oPanel = new sap.m.P13nDimMeasurePanel({
			title: this.getTitleText(),
			availableChartTypes: aAvailableChartTypes,
			chartTypeKey: "{$sapmP13nPanel>/persistentData/dimeasure/chartTypeKey}",
			items: {
				path: '$sapmP13nPanel>/transientData/dimeasure/items',
				template: new sap.m.P13nItem({
					columnKey: '{$sapmP13nPanel>columnKey}',
					text: '{$sapmP13nPanel>text}',
					tooltip: '{$sapmP13nPanel>tooltip}',
					aggregationRole: '{$sapmP13nPanel>aggregationRole}'
				})
			},
			dimMeasureItems: {
				path: "$sapmP13nPanel>/persistentData/dimeasure/dimeasureItems",
				template: new sap.m.P13nDimMeasureItem({
					columnKey: "{$sapmP13nPanel>columnKey}",
					index: "{$sapmP13nPanel>index}",
					visible: "{$sapmP13nPanel>visible}",
					role: "{$sapmP13nPanel>role}"
				})
			},
			beforeNavigationTo: that.setModelFunction()
		});
		return oPanel;
	};

	DimeasureController.prototype._isDimMeasureItemEqual = function(oDimMeasureItemA, oDimMeasureItemB) {
		if (!oDimMeasureItemA && !oDimMeasureItemB) {
			return true;
		}
		if (oDimMeasureItemA && !oDimMeasureItemB) {
			if (oDimMeasureItemA.index === -1 && oDimMeasureItemA.visible === false) {
				return true;
			}
			return false;
		}
		if (oDimMeasureItemB && !oDimMeasureItemA) {
			if (oDimMeasureItemB.index === -1 && oDimMeasureItemB.visible === false) {
				return true;
			}
			return false;
		}
		for ( var property in oDimMeasureItemA) {
			if (oDimMeasureItemB[property] === undefined || oDimMeasureItemA[property] !== oDimMeasureItemB[property]) {
				return false;
			}
		}
		return true;
	};

	DimeasureController.prototype._isSemanticEqual = function(oPersistentDataBase, oPersistentData) {
		if (oPersistentDataBase.dimeasure.chartTypeKey !== oPersistentData.dimeasure.chartTypeKey) {
			return false;
		}
		var fSort = function(a, b) {
			if (a.visible === true && (b.visible === false || b.visible === undefined)) {
				return -1;
			} else if ((a.visible === false || a.visible === undefined) && b.visible === true) {
				return 1;
			} else if (a.visible === true && b.visible === true) {
				if (a.index < b.index) {
					return -1;
				} else if (a.index > b.index) {
					return 1;
				} else {
					return 0;
				}
			} else if ((a.visible === false || a.visible === undefined) && (b.visible === false || b.visible === undefined)) {
				if (a.columnKey < b.columnKey) {
					return -1;
				} else if (a.columnKey > b.columnKey) {
					return 1;
				} else {
					return 0;
				}
			}
		};
		var aDimeasureItemsBase = Util.copy(oPersistentDataBase.dimeasure.dimeasureItems).sort(fSort);
		var aDimeasureItems = Util.copy(oPersistentData.dimeasure.dimeasureItems).sort(fSort);
// if (aDimeasureItems.length !== aDimeasureItemsBase.length) {
// return false;
// }
		var bIsEqual = true;
		aDimeasureItemsBase.some(function(oDimeasureItem, iIndex) {
			if (!this._isDimMeasureItemEqual(oDimeasureItem, aDimeasureItems[iIndex])) {
				bIsEqual = false;
				return true;
			}
		}, this);
		return bIsEqual;
	};

	/**
	 * Operations on columns are processed every time directly at the table. In case that something has been changed via Personalization Dialog or via
	 * user interaction at table, change is applied to the table.
	 *
	 * @param {object} oPersistentDataBase (new) JSON object
	 * @param {object} oPersistentDataCompare (old) JSON object
	 * @returns {object} that represents the change type, like: Unchanged || TableChanged || ModelChanged
	 */
	DimeasureController.prototype.getChangeType = function(oPersistentDataBase, oPersistentDataCompare) {
		if (!oPersistentDataCompare || !oPersistentDataCompare.dimeasure || !oPersistentDataCompare.dimeasure.dimeasureItems) {
			return sap.ui.comp.personalization.ChangeType.Unchanged;
		}
		return this._isSemanticEqual(oPersistentDataBase, oPersistentDataCompare) ? sap.ui.comp.personalization.ChangeType.Unchanged : sap.ui.comp.personalization.ChangeType.TableChanged;
	};

	/**
	 * Result is XOR based difference = oPersistentDataBase - oPersistentDataCompare (new - old)
	 *
	 * @param {object} oPersistentDataBase (new) JSON object which represents the current model state (Restore+PersistentData)
	 * @param {object} oPersistentDataCompare (old) JSON object which represents AlreadyKnown || Restore
	 * @returns {object} JSON object or null
	 */
	DimeasureController.prototype.getChangeData = function(oPersistentDataBase, oPersistentDataCompare) {

		if (!oPersistentDataBase || !oPersistentDataBase.dimeasure || !oPersistentDataBase.dimeasure.dimeasureItems) {
			return this.createPersistentStructure();
		}

		if (!oPersistentDataCompare || !oPersistentDataCompare.dimeasure || !oPersistentDataCompare.dimeasure.dimeasureItems) {
			return {
				chartTypeKey: oPersistentDataBase.dimeasure.chartTypeKey,
				dimeasure: Util.copy(oPersistentDataBase.dimeasure)
			};
		}
		if (!this._isSemanticEqual(oPersistentDataBase, oPersistentDataCompare)) {
			return {
				chartTypeKey: oPersistentDataBase.dimeasure.chartTypeKey,
				dimeasure: Util.copy(oPersistentDataBase.dimeasure)
			};
		}
		return null;
	};

	/**
	 * @param {object} oDataOld: JSON object to which different properties from oDataNew are added. E.g. Restore
	 * @param {object} oDataNew: JSON object from where the different properties are added to oDataOld. E.g. CurrentVariant || PersistentData
	 * @returns {object} new JSON object as union result of oDataOld and oPersistentDataCompare
	 */
	DimeasureController.prototype.getUnionData = function(oDataOld, oDataNew) {
		if (!oDataNew || !oDataNew.dimeasure || !oDataNew.dimeasure.dimeasureItems) {
			return {
				chartTypeKey: oDataOld.dimeasure.chartTypeKey,
				dimeasure: Util.copy(oDataOld.dimeasure)
			};
		}
		return {
			dimeasure: {
				chartTypeKey: oDataNew.dimeasure.chartTypeKey ? oDataNew.dimeasure.chartTypeKey : oDataOld.dimeasure.chartTypeKey,
				dimeasureItems: Util.copy(oDataNew.dimeasure.dimeasureItems)
			}
		};
	};

	/**
	 * Cleans up before destruction.
	 *
	 * @private
	 */
	DimeasureController.prototype.exit = function() {
		BaseController.prototype.exit.apply(this, arguments);

		var oTable = this.getTable();
		if (oTable && oTable instanceof ChartWrapper) {
			var oChart = oTable.getChartObject();
			oChart.detachDrilledDown(this._onDrilledDown, this);
			oChart.detachDrilledUp(this._onDrilledUp, this);
		}
	};

	/* eslint-enable strict */

	return DimeasureController;

}, /* bExport= */true);

}; // end of sap/ui/comp/personalization/DimeasureController.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.personalization.FilterController') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides FilterController
jQuery.sap.declare('sap.ui.comp.personalization.FilterController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/personalization/FilterController",[
	'jquery.sap.global', './BaseController', 'sap/m/library', './Util', './ChartWrapper'
], function(jQuery, BaseController, library, Util, ChartWrapper) {
	"use strict";

	/**
	 * The FilterController can be used to...
	 * 
	 * @class Table Personalization Controller
	 * @extends sap.ui.comp.personalization.BaseController
	 * @author SAP
	 * @version 1.25.0-SNAPSHOT
	 * @alias sap.ui.comp.personalization.FilterController
	 */
	var FilterController = BaseController.extend("sap.ui.comp.personalization.FilterController",
	/** @lends sap.ui.comp.personalization.FilterController */
	{
		constructor: function(sId, mSettings) {
			BaseController.apply(this, arguments);
			this.setType(sap.m.P13nPanelType.filter);
		},
		metadata: {
			events: {
				afterFilterModelDataChange: {}
			}
		}
	});

	FilterController.prototype.setTable = function(oTable) {
		BaseController.prototype.setTable.apply(this, arguments);

		if (oTable instanceof sap.ui.table.Table) {
			oTable.detachFilter(this._onFilter, this);
			oTable.attachFilter(this._onFilter, this);
		}
		if (oTable instanceof ChartWrapper) {
			var oChart = oTable.getChartObject();
			oChart.detachDrilledDown(this._onDrilledDown, this);
			oChart.attachDrilledDown(this._onDrilledDown, this);
			oChart.detachDrilledUp(this._onDrilledUp, this);
			oChart.attachDrilledUp(this._onDrilledUp, this);
		}
	};

	FilterController.prototype.getTitleText = function() {
		return sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("PERSODIALOG_TAB_FILTER");
	};

	sap.ui.comp.personalization.FilterController.prototype._getTable2Json = function() {
		var oJsonData = this.createPersistentStructure();
		var oTable = this.getTable();
		if (oTable) {
			// This is not complete but the best we can do - problem is that the filter is not extractable from other table instances.
			if (oTable instanceof sap.ui.table.Table) {
				oTable.getColumns().forEach(function(oColumn) {
					if (Util.isColumnIgnored(oColumn, this.getIgnoreColumnKeys())) {
						return;
					}
					if (oColumn.getFiltered()) {
						// Note: value2 is not supported by sap.ui.table.Column yet
						oJsonData.filter.filterItems.push({
							columnKey: Util.getColumnKey(oColumn),
							operation: oColumn.getFilterOperator(),
							value1: oColumn.getFilterValue(),
							value2: "" // The Column API does not provide method for 'value2'
						});
					}
				}, this);
			}
		}
		return oJsonData;
	};

	FilterController.prototype.syncTable2TransientModel = function() {
		var oTable = this.getTable();
		var aItems = [];

		if (oTable) {
			var aBoolean, aValues, oBoolType;

			if (oTable.getModel() instanceof sap.ui.model.odata.ODataModel || oTable.getModel() instanceof sap.ui.model.odata.v2.ODataModel) {
				jQuery.sap.require("sap.ui.model.odata.type.Boolean");
				oBoolType = new sap.ui.model.odata.type.Boolean();
			} else {
				if (oTable.getModel() instanceof sap.ui.model.Model) {
					jQuery.sap.require("sap.ui.model.type.Boolean");
					oBoolType = new sap.ui.model.type.Boolean();
				}
			}

			if (oBoolType) {
				aBoolean = [
					"", oBoolType.formatValue(false, "string"), oBoolType.formatValue(true, "string")
				];
			}

			if (oTable instanceof sap.ui.table.Table) {
				oTable.getColumns().forEach(function(oColumn) {
					if (Util.isColumnIgnored(oColumn, this.getIgnoreColumnKeys())) {
						return;
					}
					if (Util.isFilterable(oColumn)) {
						if (Util.getColumnType(oColumn) === "boolean") {
							aValues = Util._getCustomProperty(oColumn, "values") || aBoolean;
						}
						aItems.push({
							columnKey: Util.getColumnKey(oColumn),
							text: oColumn.getLabel().getText(),
							tooltip: (oColumn.getTooltip() instanceof sap.ui.core.TooltipBase) ? oColumn.getTooltip().getTooltip_Text() : oColumn.getTooltip_Text(),
							maxLength: Util._getCustomProperty(oColumn, "maxLength"),
							precision: Util._getCustomProperty(oColumn, "precision"),
							scale: Util._getCustomProperty(oColumn, "scale"),
							type: Util.getColumnType(oColumn),
							values: aValues
						});
					}
				}, this);
			} else if (oTable instanceof sap.m.Table) {
				oTable.getColumns().forEach(function(oColumn) {
					if (Util.isColumnIgnored(oColumn, this.getIgnoreColumnKeys())) {
						return;
					}
					if (Util.getColumnType(oColumn) === "boolean") {
						aValues = Util._getCustomProperty(oColumn, "values") || aBoolean;
					}
					if (Util.isFilterable(oColumn)) {
						aItems.push({
							columnKey: Util.getColumnKey(oColumn),
							text: oColumn.getHeader().getText(),
							tooltip: (oColumn.getHeader().getTooltip() instanceof sap.ui.core.TooltipBase) ? oColumn.getHeader().getTooltip().getTooltip_Text() : oColumn.getHeader().getTooltip_Text(),
							maxLength: Util._getCustomProperty(oColumn, "maxLength"),
							precision: Util._getCustomProperty(oColumn, "precision"),
							scale: Util._getCustomProperty(oColumn, "scale"),
							type: Util.getColumnType(oColumn),
							values: aValues
						});
					}
				}, this);
			} else if (oTable instanceof sap.ui.comp.personalization.ChartWrapper) {
				oTable.getColumns().forEach(function(oColumn) {
					if (Util.isColumnIgnored(oColumn, this.getIgnoreColumnKeys())) {
						return;
					}
					if (Util.isFilterable(oColumn)) {
						aItems.push({
							columnKey: Util.getColumnKey(oColumn),
							text: oColumn.getLabel(),
							tooltip: (oColumn.getTooltip() instanceof sap.ui.core.TooltipBase) ? oColumn.getTooltip().getTooltip_Text() : oColumn.getTooltip_Text(),
							maxLength: Util._getCustomProperty(oColumn, "maxLength"),
							precision: Util._getCustomProperty(oColumn, "precision"),
							scale: Util._getCustomProperty(oColumn, "scale"),
							type: Util.getColumnType(oColumn),
							values: aValues
						});
					}
				}, this);
			}
		}

		Util.sortItemsByText(aItems);

		// check if Items was changed at all and take over if it was changed
		var oItemsBefore = this.getModel("$sapuicomppersonalizationBaseController").getData().transientData.filter.items;
		if (jQuery(aItems).not(oItemsBefore).length !== 0 || jQuery(oItemsBefore).not(aItems).length !== 0) {
			this.getModel("$sapuicomppersonalizationBaseController").getData().transientData.filter.items = aItems;
		}
	};

	FilterController.prototype._onFilter = function(oEvent) {
		// TODO: implement this method. Currently SmartTable does not support filtering directly on the table, only via
		// personalization dialog

		// this.fireBeforePotentialTableChange();
		// var oColumn = oEvent.getParameter("column");
		// var sValue = oEvent.getParameter("value");

		// if (!bColumnAdded) {
		// this._sort.sortItems = [];
		// this._sort.sortItems.push({createModelDataFromTable
		// key : "0",
		// columnKey : oColumn.getId(),
		// operation : sSortOrder
		// });
		// }
		// this.fireAfterPotentialTableChange();

		// this.fireAfterFilterModelDataChange();
	};

	FilterController.prototype._onDrilledDown = function(oEvent) {
		this._updateModel(oEvent.getSource());
	};

	FilterController.prototype._onDrilledUp = function(oEvent) {
		this._updateModel(oEvent.getSource());
	};

	FilterController.prototype._updateModel = function(oChart) {
		var oModel = this.getModel("$sapuicomppersonalizationBaseController");
		var oData = oModel.getData();
		var aColumns = this.getTable().getColumns();

		this.fireBeforePotentialTableChange();

		// Remove all 'chart' specific filters
		oData.persistentData.filter.filterItems = oData.persistentData.filter.filterItems.filter(function(oFilterItem) {
			return oFilterItem.source !== "chart";
		});

		// Add all 'chart' specific filters
		oChart.getVisibleDimensions().forEach(function(sDimensionName) {
			this._addSelectedFilterForDimensions(oChart, sDimensionName, oData, aColumns);
		}, this);
		oModel.refresh();

		this.fireAfterPotentialTableChange();

		this.fireAfterFilterModelDataChange();
	};

	FilterController.prototype._addSelectedFilterForDimensions = function(oChart, sSelectedDimension, oData, aColumns) {
		var that = this;
		var fTakeFilters = function(oFilter) {
			if (!oFilter) {
				return;
			}
			if (oFilter && oFilter.sPath && oFilter.sOperator) {
				var oColumn = Util.getColumn(oFilter.sPath, aColumns);
				if (!oColumn) {
					return;
				}
				if (Util.isColumnIgnored(oColumn, that.getIgnoreColumnKeys())) {
					return;
				}
				var oFilterItem = {
					columnKey: oFilter.sPath,
					operation: oFilter.sOperator,
					value1: oFilter.oValue1,
					value2: oFilter.oValue2,
					source: "chart"
				};
				if (that._hasSemanticEqual(oFilterItem, oData.persistentData.filter.filterItems)) {
					return;
				}
				oData.persistentData.filter.filterItems.push(oFilterItem);
			}
			if (oFilter.aFilters) {
				oFilter.aFilters.forEach(function(oFilter_) {
					fTakeFilters(oFilter_);
				});
			}
		};

		oChart._drillStateStack.forEach(function(oStack) {
			if (oStack.dimensions.indexOf(sSelectedDimension) > -1) {
				fTakeFilters(oStack.filter);
			}
		});
	};

	FilterController.prototype._hasSemanticEqual = function(oFilterItem, aFilterItems) {
		if (!oFilterItem || !aFilterItems.length) {
			return false;
		}
		var aEqualFilterItems = aFilterItems.filter(function(oFilterItem_) {
			for ( var property in oFilterItem) {
				if (oFilterItem[property] !== oFilterItem_[property]) {
					return false;
				}
			}
			return true;
		});
		return aEqualFilterItems.length > 0;
	};

	FilterController.prototype._hasTableFilterableColumns = function() {
		var oTable = this.getTable();
		if (!oTable) {
			return false;
		}

		var bHasFiltering = false;
		oTable.getColumns().some(function(oColumn) {
			if (Util.isFilterable(oColumn)) {
				bHasFiltering = true;
				return true;
			}
		});
		return bHasFiltering;
	};

	FilterController.prototype.getPanel = function(oPayload) {

		sap.ui.getCore().loadLibrary("sap.m");

		jQuery.sap.require("sap/m/P13nFilterPanel");
		jQuery.sap.require("sap/m/P13nItem");
		jQuery.sap.require("sap/m/P13nFilterItem");

		if (!this._hasTableFilterableColumns()) {
			return null;
		}
		if (oPayload && oPayload.column) {
			var sColumnKey = Util.getColumnKey(oPayload.column);
			if (sColumnKey) {

				var aItems = this.getModel("$sapuicomppersonalizationBaseController").getData().transientData.filter.items;

				aItems.forEach(function(oItem, iIndex) {
					oItem["isDefault"] = oItem.columnKey === sColumnKey;
				}, this);
			}
		}
		var that = this;
		var oPanel = new sap.m.P13nFilterPanel({
			containerQuery: true,
			title: this.getTitleText(),
			items: {
				path: "$sapmP13nPanel>/transientData/filter/items",
				template: new sap.m.P13nItem({
					columnKey: '{$sapmP13nPanel>columnKey}',
					text: "{$sapmP13nPanel>text}",
					tooltip: "{$sapmP13nPanel>tooltip}",
					maxLength: "{$sapmP13nPanel>maxLength}",
					precision: "{$sapmP13nPanel>precision}",
					scale: "{$sapmP13nPanel>scale}",
					type: "{$sapmP13nPanel>type}",
					isDefault: "{$sapmP13nPanel>isDefault}",
					values: "{$sapmP13nPanel>values}"
				})
			},
			filterItems: {
				path: "$sapmP13nPanel>/persistentData/filter/filterItems",
				template: new sap.m.P13nFilterItem({
					key: "{$sapmP13nPanel>key}",
					columnKey: "{$sapmP13nPanel>columnKey}",
					exclude: "{$sapmP13nPanel>exclude}",
					operation: "{$sapmP13nPanel>operation}",
					value1: "{$sapmP13nPanel>value1}",
					value2: "{$sapmP13nPanel>value2}"
				})
			},
			beforeNavigationTo: that.setModelFunction()
		});

		oPanel.attachAddFilterItem(function(oEvent) {
			var oData = this.getModel("$sapuicomppersonalizationBaseController").getData();
			var params = oEvent.getParameters();
			var oFilterItem = {
				columnKey: params.filterItemData.getColumnKey(),
				operation: params.filterItemData.getOperation(),
				exclude: params.filterItemData.getExclude(),
				value1: params.filterItemData.getValue1(),
				value2: params.filterItemData.getValue2()
			};
			if (params.index > -1) {
				oData.persistentData.filter.filterItems.splice(params.index, 0, oFilterItem);
			} else {
				oData.persistentData.filter.filterItems.push(oFilterItem);
			}
			this.getModel("$sapuicomppersonalizationBaseController").setData(oData, true);
		}, this);

		oPanel.attachRemoveFilterItem(function(oEvent) {
			var params = oEvent.getParameters();
			var oData = this.getModel("$sapuicomppersonalizationBaseController").getData();
			if (params.index > -1) {
				oData.persistentData.filter.filterItems.splice(params.index, 1);
				this.getModel("$sapuicomppersonalizationBaseController").setData(oData, true);
			}
		}, this);

		return oPanel;
	};

	// sap.ui.comp.personalization.FilterController.prototype.onBeforeSubmit = function() {
	// };

	FilterController.prototype.syncJsonModel2Table = function(oJsonModel) {
		var oTable = this.getTable();
		var aColumns = oTable.getColumns();
		var aColumnsUnfiltered = jQuery.extend(true, [], aColumns);

		this.fireBeforePotentialTableChange();

		if (oTable instanceof sap.ui.table.Table) {
			oJsonModel.filter.filterItems.forEach(function(oFilterItem) {
				var oColumn = Util.getColumn(oFilterItem.columnKey, aColumns);
				if (oColumn) {
					if (!oColumn.getFiltered()) {
						oColumn.setFiltered(true);
					}
					aColumnsUnfiltered.splice(aColumnsUnfiltered.indexOf(oColumn), 1);
				}
			});

			aColumnsUnfiltered.forEach(function(oColumn) {
				if (oColumn && oColumn.getFiltered()) {
					oColumn.setFiltered(false);
				}
			});
		}

		this.fireAfterPotentialTableChange();
	};

	/**
	 * Operations on filter are processed sometime directly at the table and sometime not. In case that something has been changed via Personalization
	 * Dialog the consumer of the Personalization Dialog has to apply filtering at the table. In case that filter has been changed via user
	 * interaction at table, the change is instantly applied at the table.
	 */
	FilterController.prototype.getChangeType = function(oPersistentDataBase, oPersistentDataCompare) {
		if (!oPersistentDataCompare || !oPersistentDataCompare.filter || !oPersistentDataCompare.filter.filterItems) {
			return sap.ui.comp.personalization.ChangeType.Unchanged;
		}

		if (oPersistentDataCompare && oPersistentDataCompare.filter && oPersistentDataCompare.filter.filterItems) {
			oPersistentDataCompare.filter.filterItems.forEach(function(oFilterItem) {
				delete oFilterItem.key;
				delete oFilterItem.source;
			});
		}
		if (oPersistentDataBase && oPersistentDataBase.filter && oPersistentDataBase.filter.filterItems) {
			oPersistentDataBase.filter.filterItems.forEach(function(oFilterItem) {
				delete oFilterItem.key;
				delete oFilterItem.source;
			});
		}
		var bIsDirty = JSON.stringify(oPersistentDataBase.filter.filterItems) !== JSON.stringify(oPersistentDataCompare.filter.filterItems);

		return bIsDirty ? sap.ui.comp.personalization.ChangeType.ModelChanged : sap.ui.comp.personalization.ChangeType.Unchanged;
	};

	/**
	 * Result is XOR based difference = CurrentModelData - oPersistentDataCompare
	 * 
	 * @param {object} oPersistentDataCompare JSON object. Note: if sortItems is [] then it means that all sortItems have been deleted
	 * @returns {object} JSON object or null
	 */
	FilterController.prototype.getChangeData = function(oPersistentDataBase, oPersistentDataCompare) {
		if (!oPersistentDataBase || !oPersistentDataBase.filter || !oPersistentDataBase.filter.filterItems) {
			return this.createPersistentStructure();
		}

		if (oPersistentDataCompare && oPersistentDataCompare.filter && oPersistentDataCompare.filter.filterItems) {
			oPersistentDataCompare.filter.filterItems.forEach(function(oFilterItem) {
				delete oFilterItem.key;
				delete oFilterItem.source;
			});
		}
		if (oPersistentDataBase && oPersistentDataBase.filter && oPersistentDataBase.filter.filterItems) {
			oPersistentDataBase.filter.filterItems.forEach(function(oFilterItem) {
				delete oFilterItem.key;
				delete oFilterItem.source;
			});
		}

		if (!oPersistentDataCompare || !oPersistentDataCompare.filter || !oPersistentDataCompare.filter.filterItems) {
			return {
				filter: Util.copy(oPersistentDataBase.filter)
			};
		}

		if (JSON.stringify(oPersistentDataBase.filter.filterItems) !== JSON.stringify(oPersistentDataCompare.filter.filterItems)) {
			return {
				filter: Util.copy(oPersistentDataBase.filter)
			};
		}
		return null;
	};

	/**
	 * @param {object} oPersistentDataBase: JSON object to which different properties from JSON oPersistentDataCompare are added
	 * @param {object} oPersistentDataCompare: JSON object from where the different properties are added to oPersistentDataBase. Note: if filterItems
	 *        is [] then it means that all filterItems have been deleted
	 * @returns {object} JSON object as union result of oPersistentDataBase and oPersistentDataCompare
	 */
	FilterController.prototype.getUnionData = function(oPersistentDataBase, oPersistentDataCompare) {
		if (!oPersistentDataBase || !oPersistentDataBase.filter || !oPersistentDataBase.filter.filterItems) {
			return this.createPersistentStructure();
		}

		if (!oPersistentDataCompare || !oPersistentDataCompare.filter || !oPersistentDataCompare.filter.filterItems) {
			return {
				filter: Util.copy(oPersistentDataBase.filter)
			};
		}

		return {
			filter: Util.copy(oPersistentDataCompare.filter)
		};
	};

	/**
	 * Cleans up before destruction.
	 * 
	 * @private
	 */
	FilterController.prototype.exit = function() {
		BaseController.prototype.exit.apply(this, arguments);

		var oTable = this.getTable();
		if (oTable && oTable instanceof sap.ui.table.Table) {
			oTable.detachFilter(this._onFilter, this);
		}
		if (oTable && oTable instanceof ChartWrapper) {
			var oChart = oTable.getChartObject();
			oChart.detachDrilledDown(this._onDrilledDown, this);
			oChart.detachDrilledUp(this._onDrilledUp, this);
		}
	};

	return FilterController;

}, /* bExport= */true);

}; // end of sap/ui/comp/personalization/FilterController.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.personalization.GroupController') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides GroupController
jQuery.sap.declare('sap.ui.comp.personalization.GroupController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/personalization/GroupController",[
	'jquery.sap.global', './BaseController', 'sap/m/library'
], function(jQuery, BaseController, library) {
	"use strict";

	/**
	 * The GroupController can be used to handle the grouping of the Analytical and sap.m.Table. The grouping of the sap.ui.table.Table is not
	 * supported and the existing coding is only for testing and finding the limitations integrated.
	 * 
	 * @class Table Personalization Controller
	 * @extends sap.ui.comp.personalization.BaseController
	 * @author SAP
	 * @version 1.25.0-SNAPSHOT
	 * @alias sap.ui.comp.personalization.GroupController
	 */
	var GroupController = BaseController.extend("sap.ui.comp.personalization.GroupController",
	/** @lends sap.ui.comp.personalization.GroupController */
	{
		constructor: function(sId, mSettings) {
			BaseController.apply(this, arguments);
			this.setType(sap.m.P13nPanelType.group);
		},
		metadata: {
			events: {
				afterGroupModelDataChange: {}
			}
		}
	});

	GroupController.prototype.setTable = function(oTable) {
		BaseController.prototype.setTable.apply(this, arguments);

		if (oTable instanceof sap.ui.table.AnalyticalTable || oTable instanceof sap.ui.table.Table) {
			oTable.detachGroup(this._onGroup, this);
			oTable.attachGroup(this._onGroup, this);
		}
	};

	GroupController.prototype.getTitleText = function() {
		return sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("PERSODIALOG_TAB_GROUP");
	};

	/**
	 * Does a complete JSON snapshot of the current table instance ("original") from the perspective of the columns controller; the json snapshot can
	 * later be applied to any table instance to recover all columns related infos of the "original" table
	 */
	GroupController.prototype._getTable2Json = function() {
		var oJsonData = this.createPersistentStructure();
		var oTable = this.getTable();
		if (oTable) {
			var aColumns = [];
			if (oTable instanceof sap.ui.table.Table && oTable.getGroupBy) {
				aColumns = oTable.getGroupBy() || [];
				if (typeof aColumns === "string") {
					aColumns = [
						aColumns
					];
				}
				// TODO: the getGroupBy returns no grouping when we call it to early. The result can be that we do not find the default grouping of
				// the
				// ui.Table
			}
			if (oTable instanceof sap.ui.table.AnalyticalTable && oTable.getGroupedColumns) {
				aColumns = oTable.getGroupedColumns() || [];
			}

			aColumns.forEach(function(oColumn, iIndex) {
				if (typeof oColumn === "string") {
					oColumn = sap.ui.getCore().byId(oColumn);
				}
				if (sap.ui.comp.personalization.Util.isColumnIgnored(oColumn, this.getIgnoreColumnKeys())) {
					return;
				}
				if (oColumn.getGrouped()) {
					
					// TODO: this really should be done differently: we need to load P13nConditionPanel in order to get access to P13nConditionOperation below 
					// - would be better to include the P13nConditionOperation in the library.js. Since the latter is anyhow loaded ( we need already P13nPanelType 
					// in the constructor ) we would need no explicit "require" here.
					jQuery.sap.require("sap/m/P13nConditionPanel");
					
					oJsonData.group.groupItems.push({
						columnKey: sap.ui.comp.personalization.Util.getColumnKey(oColumn),
						operation: oColumn.getSortOrder && oColumn.getSortOrder() === sap.ui.table.SortOrder.Ascending ? sap.m.P13nConditionOperation.GroupAscending : sap.m.P13nConditionOperation.GroupDescending,
						showIfGrouped: oColumn.getShowIfGrouped ? oColumn.getShowIfGrouped() : false
					});
				}
			}, this);
		}
		return oJsonData;
	};

	GroupController.prototype.syncTable2TransientModel = function() {
		var oTable = this.getTable();
		var aItems = [];

		if (oTable) {
			if (oTable instanceof sap.ui.table.AnalyticalTable || oTable instanceof sap.ui.table.Table) {
				oTable.getColumns().forEach(function(oColumn) {
					if (sap.ui.comp.personalization.Util.isColumnIgnored(oColumn, this.getIgnoreColumnKeys())) {
						return;
					}
					if (sap.ui.comp.personalization.Util.isGroupable(oColumn)) {
						aItems.push({
							columnKey: sap.ui.comp.personalization.Util.getColumnKey(oColumn),
							text: oColumn.getLabel().getText(),
							tooltip: (oColumn.getTooltip() instanceof sap.ui.core.TooltipBase) ? oColumn.getTooltip().getTooltip_Text() : oColumn.getTooltip_Text()
						});
					}
				}, this);
			}
			if (oTable instanceof sap.m.Table) {
				oTable.getColumns().forEach(function(oColumn) {
					if (sap.ui.comp.personalization.Util.isColumnIgnored(oColumn, this.getIgnoreColumnKeys())) {
						return;
					}
					if (sap.ui.comp.personalization.Util.isGroupable(oColumn)) {
						aItems.push({
							columnKey: sap.ui.comp.personalization.Util.getColumnKey(oColumn),
							text: oColumn.getHeader().getText(),
							tooltip: (oColumn.getHeader().getTooltip() instanceof sap.ui.core.TooltipBase) ? oColumn.getHeader().getTooltip().getTooltip_Text() : oColumn.getHeader().getTooltip_Text()
						});
					}
				}, this);
			}
		}

		sap.ui.comp.personalization.Util.sortItemsByText(aItems);

		aItems.splice(0, 0, {
			key: null,
			text: sap.ui.getCore().getLibraryResourceBundle("sap.m").getText("P13NDIALOG_SELECTION_NONE")
		});

		// check if groupItems was changed at all and take over if it was changed
		var oGroupItemsBefore = this.getModel("$sapuicomppersonalizationBaseController").getData().transientData.group.items;
		if (jQuery(aItems).not(oGroupItemsBefore).length !== 0 || jQuery(oGroupItemsBefore).not(aItems).length !== 0) {
			this.getModel("$sapuicomppersonalizationBaseController").getData().transientData.group.items = aItems;
		}
	};

	GroupController.prototype._onGroup = function(oEvent) {
		var oTable = this.getTable();

		var aGroupedColumns = oEvent.mParameters.groupedColumns;

		this.fireBeforePotentialTableChange();

		var oData = this.getModel("$sapuicomppersonalizationBaseController").getData();
		oData.persistentData.group.groupItems = [];
		aGroupedColumns.forEach(function(oColumn, iIndex) {
			if (typeof oColumn === "string") {
				oColumn = sap.ui.getCore().byId(oColumn);
			}

			if (oTable && oTable instanceof sap.ui.table.AnalyticalTable) {
				if (oColumn.getGrouped()) {
					oData.persistentData.group.groupItems.push({
						columnKey: sap.ui.comp.personalization.Util.getColumnKey(oColumn),
						showIfGrouped: oColumn.getShowIfGrouped ? oColumn.getShowIfGrouped() : false
					});
				}
			} else if (oTable && oTable instanceof sap.ui.table.Table) {
				oData.persistentData.group.groupItems.push({
					columnKey: sap.ui.comp.personalization.Util.getColumnKey(oColumn),
					showIfGrouped: false
				});
			}
		}, this);

		this.fireAfterPotentialTableChange();

		this.fireAfterGroupModelDataChange();
	};

	GroupController.prototype._hasTableGroupableColumns = function() {
		var oTable = this.getTable();
		if (!oTable) {
			return false;
		}

		var bHasGrouping = false;
		oTable.getColumns().some(function(oColumn) {
			if (sap.ui.comp.personalization.Util.isGroupable(oColumn)) {
				bHasGrouping = true;
				return true;
			}
		});
		return bHasGrouping;
	};

	GroupController.prototype.getPanel = function() {

		sap.ui.getCore().loadLibrary("sap.m");

		jQuery.sap.require("sap/m/P13nGroupPanel");
		jQuery.sap.require("sap/m/P13nItem");
		jQuery.sap.require("sap/m/P13nGroupItem");

		if (!this._hasTableGroupableColumns()) {
			return null;
		}

		var that = this;
		var oPanel = new sap.m.P13nGroupPanel({
			maxGroups: this.getTable() instanceof sap.ui.table.AnalyticalTable ? "-1" : "1",
			title: this.getTitleText(),
			containerQuery: true,
			items: {
				path: "$sapmP13nPanel>/transientData/group/items",
				template: new sap.m.P13nItem({
					columnKey: "{$sapmP13nPanel>columnKey}",
					text: "{$sapmP13nPanel>text}",
					tooltip: "{$sapmP13nPanel>tooltip}"
				})
			},
			groupItems: {
				path: "$sapmP13nPanel>/persistentData/group/groupItems",
				template: new sap.m.P13nGroupItem({
					columnKey: "{$sapmP13nPanel>columnKey}",
					operation: "{$sapmP13nPanel>operation}",
					showIfGrouped: "{$sapmP13nPanel>showIfGrouped}"
				})
			},
			beforeNavigationTo: that.setModelFunction()
		});

		oPanel.attachAddGroupItem(function(oEvent) {
			var oData = this.getModel("$sapuicomppersonalizationBaseController").getData();
			var params = oEvent.getParameters();
			var oGroupItem = {
				columnKey: params.groupItemData.getColumnKey(),
				operation: params.groupItemData.getOperation(),
				showIfGrouped: params.groupItemData.getShowIfGrouped()
			};
			if (params.index > -1) {
				oData.persistentData.group.groupItems.splice(params.index, 0, oGroupItem);
			} else {
				oData.persistentData.group.groupItems.push(oGroupItem);
			}
			this.getModel("$sapuicomppersonalizationBaseController").setData(oData, true);
		}, this);

		oPanel.attachRemoveGroupItem(function(oEvent) {
			var params = oEvent.getParameters();
			var oData = this.getModel("$sapuicomppersonalizationBaseController").getData();
			if (params.index > -1) {
				oData.persistentData.group.groupItems.splice(params.index, 1);
				this.getModel("$sapuicomppersonalizationBaseController").setData(oData, true);
			}
		}, this);

		return oPanel;
	};

	GroupController.prototype.syncJsonModel2Table = function(oJsonModel) {
		var oTable = this.getTable();
		var aColumns = oTable.getColumns();

		this.fireBeforePotentialTableChange();

		if (oTable instanceof sap.ui.table.TreeTable) {
			return;
		} else if (oTable instanceof sap.ui.table.AnalyticalTable) {
			// we have to set all columns first to unGrouped
			aColumns.forEach(function(oColumn) {
				if (oColumn && oColumn.getGrouped()) {
					oColumn.setGrouped(false);
					oColumn.setShowIfGrouped(false);
				}
			});

			oJsonModel.group.groupItems.forEach(function(oGroupItem) {
				var oColumn = sap.ui.comp.personalization.Util.getColumn(oGroupItem.columnKey, aColumns);
				if (!oColumn) {
					return;
				}
				oColumn.setGrouped(true);
				oColumn.setShowIfGrouped(oGroupItem.showIfGrouped);
			});

		} else if (oTable instanceof sap.ui.table.Table) {
			if (oJsonModel.group.groupItems.length > 0) {
				oJsonModel.group.groupItems.some(function(oGroupItem) {
					var oColumn = sap.ui.comp.personalization.Util.getColumn(oGroupItem.columnKey, aColumns);
					if (oColumn) {
						oTable.setGroupBy(oColumn);
						return true;
					}

				}, this);
			} else {
				// TODO removing the grouping does not work. we need a correction on the ui.table cf. commit Ifda0dbbfd22a586415f53aa99cbe6663577fe847
				oTable.setGroupBy(null);
			}
		}

		this.fireAfterPotentialTableChange();
	};

	/**
	 * Operations on group are processed every time directly at the table. In case that something has been changed via Personalization Dialog or via
	 * user interaction at table, the change is instantly applied at the table.
	 */
	GroupController.prototype.getChangeType = function(oPersistentDataBase, oPersistentDataCompare) {
		if (!oPersistentDataCompare || !oPersistentDataCompare.group || !oPersistentDataCompare.group.groupItems) {
			return sap.ui.comp.personalization.ChangeType.Unchanged;
		}
		var bIsDirty = JSON.stringify(oPersistentDataBase.group.groupItems) !== JSON.stringify(oPersistentDataCompare.group.groupItems);

		return bIsDirty ? sap.ui.comp.personalization.ChangeType.ModelChanged : sap.ui.comp.personalization.ChangeType.Unchanged;
	};

	/**
	 * Result is XOR based difference = CurrentModelData - oPersistentDataCompare
	 * 
	 * @param {object} oPersistentDataCompare JSON object
	 * @returns {object} JSON object or empty object
	 */
	GroupController.prototype.getChangeData = function(oPersistentDataBase, oPersistentDataCompare) {

		if (!oPersistentDataBase || !oPersistentDataBase.group || !oPersistentDataBase.group.groupItems) {
			return this.createPersistentStructure();
		}

		if (!oPersistentDataCompare || !oPersistentDataCompare.group || !oPersistentDataCompare.group.groupItems) {
			return {
				group: sap.ui.comp.personalization.Util.copy(oPersistentDataBase.group)
			};
		}

		if (JSON.stringify(oPersistentDataBase.group.groupItems) !== JSON.stringify(oPersistentDataCompare.group.groupItems)) {
			return {
				group: sap.ui.comp.personalization.Util.copy(oPersistentDataBase.group)
			};
		}
		return null;
	};

	/**
	 * @param {object} oPersistentDataBase: JSON object to which different properties from JSON oPersistentDataCompare are added
	 * @param {object} oPersistentDataCompare: JSON object from where the different properties are added to oPersistentDataBase. Note: if groupItems
	 *        is [] then it means that all groupItems have been deleted
	 * @returns {object} new JSON object as union result of oPersistentDataBase and oPersistentDataCompare
	 */
	GroupController.prototype.getUnionData = function(oPersistentDataBase, oPersistentDataCompare) {
		// not valid
		if (!oPersistentDataCompare || !oPersistentDataCompare.group || !oPersistentDataCompare.group.groupItems) {
			return {
				group: sap.ui.comp.personalization.Util.copy(oPersistentDataBase.group)
			};
		}

		return {
			group: sap.ui.comp.personalization.Util.copy(oPersistentDataCompare.group)
		};
	};

	/**
	 * Determines whether a grouping has been selected for specific column or not.
	 * 
	 * @param {object} oPayload structure about the current selection coming from panel
	 * @param {string} sColumnKey column key of specific column
	 * @returns {boolean} true if grouping for a specific column is selected, false if not
	 */
	GroupController.prototype.isGroupSelected = function(oPayload, oPersistentData, sColumnKey) {
		var iIndex;
		if (!oPayload) {
			oPersistentData.groupItems.some(function(oGroupItem, iIndex_) {
				if (oGroupItem.columnKey === sColumnKey) {
					iIndex = iIndex_;
					return true;
				}
			});
			return iIndex > -1;
		}

		// oPayload has been passed...
		if (!oPayload.selectedColumnKeys) {
			return false;
		}
		if (oPayload.selectedColumnKeys) {
			oPayload.selectedColumnKeys.some(function(sSelectedColumnKey, iIndex_) {
				if (sSelectedColumnKey === sColumnKey) {
					iIndex = iIndex_;
					return true;
				}
			});
		}
		return iIndex > -1;
	};

	/**
	 * Cleans up before destruction.
	 */
	GroupController.prototype.exit = function() {
		BaseController.prototype.exit.apply(this, arguments);

		var oTable = this.getTable();
		if (oTable && (oTable instanceof sap.ui.table.AnalyticalTable || oTable instanceof sap.ui.table.Table)) {
			oTable.detachGroup(this._onGroup, this);
		}
	};

	return GroupController;

}, /* bExport= */true);

}; // end of sap/ui/comp/personalization/GroupController.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.personalization.SortController') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides SortController
jQuery.sap.declare('sap.ui.comp.personalization.SortController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/personalization/SortController",[
	'jquery.sap.global', './BaseController', 'sap/m/library', './Util'
], function(jQuery, BaseController, library, Util) {
	"use strict";

	/**
	 * The SortController can be used to...
	 * 
	 * @class Table Personalization Controller
	 * @extends sap.ui.comp.personalization.BaseController
	 * @author SAP
	 * @version 1.25.0-SNAPSHOT
	 * @alias sap.ui.comp.personalization.SortController
	 */
	var SortController = BaseController.extend("sap.ui.comp.personalization.SortController",
	/** @lends sap.ui.comp.personalization.SortController */
	{
		constructor: function(sId, mSettings) {
			BaseController.apply(this, arguments);
			this.setType(sap.m.P13nPanelType.sort);
		},
		metadata: {
			events: {
				afterSortModelDataChange: {}
			}
		}
	});

	SortController.prototype.setTable = function(oTable) {
		BaseController.prototype.setTable.apply(this, arguments);

		if (oTable instanceof sap.ui.table.Table) {
			oTable.detachSort(this._onSort, this);
			oTable.attachSort(this._onSort, this);
		}
	};

	SortController.prototype.getTitleText = function() {
		return sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("PERSODIALOG_TAB_SORT");
	};

	/**
	 * this method will make a complete json snapshot of the current table instance ("original") from the perspective of the columns controller; the
	 * json snapshot can later be applied to any table instance to recover all columns related infos of the "original" table TODO: This really only
	 * works for when max 1 sort criteria is defined since otherwise potentially order of sort criteria is destroyed
	 */
	SortController.prototype._getTable2Json = function() {
		var oJsonData = this.createPersistentStructure();
		var oTable = this.getTable();
		Util.createSort2Json(oTable, oJsonData.sort.sortItems, this.getIgnoreColumnKeys());
		return oJsonData;
	};

	SortController.prototype.syncTable2TransientModel = function() {
		var oTable = this.getTable();
		var aItems = [];

		if (oTable) {
			if (oTable instanceof sap.ui.table.Table) {
				oTable.getColumns().forEach(function(oColumn) {
					if (Util.isColumnIgnored(oColumn, this.getIgnoreColumnKeys())) {
						return;
					}
					if (Util.isSortable(oColumn)) {
						aItems.push({
							columnKey: Util.getColumnKey(oColumn),
							text: oColumn.getLabel().getText(),
							tooltip: (oColumn.getTooltip() instanceof sap.ui.core.TooltipBase) ? oColumn.getTooltip().getTooltip_Text() : oColumn.getTooltip_Text()
						});
					}
				}, this);
			} else if (oTable instanceof sap.m.Table) {
				oTable.getColumns().forEach(function(oColumn) {
					if (Util.isColumnIgnored(oColumn, this.getIgnoreColumnKeys())) {
						return;
					}
					if (Util.isSortable(oColumn)) {
						aItems.push({
							columnKey: Util.getColumnKey(oColumn),
							text: oColumn.getHeader().getText(),
							tooltip: (oColumn.getHeader().getTooltip() instanceof sap.ui.core.TooltipBase) ? oColumn.getHeader().getTooltip().getTooltip_Text() : oColumn.getHeader().getTooltip_Text()
						});
					}
				}, this);
			} else if (oTable instanceof sap.ui.comp.personalization.ChartWrapper) {
				oTable.getColumns().forEach(function(oColumn) {
					if (Util.isColumnIgnored(oColumn, this.getIgnoreColumnKeys())) {
						return;
					}
					// if (Util.isSortable(oColumn)) {
					aItems.push({
						columnKey: Util.getColumnKey(oColumn),
						text: oColumn.getLabel(),
						tooltip: (oColumn.getTooltip() instanceof sap.ui.core.TooltipBase) ? oColumn.getTooltip().getTooltip_Text() : oColumn.getTooltip_Text()
					});
					// }
				}, this);
			}
		}

		Util.sortItemsByText(aItems);

		aItems.splice(0, 0, {
			key: null,
			text: sap.ui.getCore().getLibraryResourceBundle("sap.m").getText("P13NDIALOG_SELECTION_NONE")
		});

		// check if items was changed at all and take over if it was changed
		// TODO: clean up here
		var aItemsBefore = this.getModel("$sapuicomppersonalizationBaseController").getData().transientData.sort.items;
		if (jQuery(aItems).not(aItemsBefore).length !== 0 || jQuery(aItemsBefore).not(aItems).length !== 0) {
			this.getModel("$sapuicomppersonalizationBaseController").getData().transientData.sort.items = aItems;
		}
	};

	SortController.prototype._onSort = function(oEvent) {
		oEvent.preventDefault();
		var bAdded = oEvent.mParameters.columnAdded;

		var oTable = this.getTable();
		if (typeof oTable === "string") {
			oTable = sap.ui.getCore().byId(oTable);
		}

		this.fireBeforePotentialTableChange();

		// remove existing sortings
		if (!bAdded) {
			oTable.getColumns().forEach(function(oColumn, index) {
				if (oColumn.setSorted) {
					oColumn.setSorted(false);
				}
			}, this);
		}
		var oColumn = oEvent.mParameters.column;
		if (oColumn && oColumn.setSorted) {
			oColumn.setSorted(true);
			oColumn.setSortOrder(oEvent.mParameters.sortOrder);
		}

		var oSortData = this.getModel("$sapuicomppersonalizationBaseController").getData().persistentData.sort;

		if (!bAdded) {
			oSortData.sortItems = [];
		}

		var i = Util.getIndexByKey(oSortData.sortItems, Util.getColumnKey(oColumn));
		if (i > -1) {
			oSortData.sortItems.splice(i, 1);
		}
		oSortData.sortItems.push({
			columnKey: Util.getColumnKey(oColumn),
			operation: oEvent.mParameters.sortOrder
		});

		this.fireAfterPotentialTableChange();

		this.fireAfterSortModelDataChange();
	};

	SortController.prototype._hasTableSortableColumns = function() {
		var oTable = this.getTable();
		if (!oTable) {
			return false;
		}

		var bHasSorting = false;
		oTable.getColumns().some(function(oColumn) {
			if (Util.isSortable(oColumn)) {
				bHasSorting = true;
				return true;
			}
		});

		return bHasSorting;
	};

	SortController.prototype.getPanel = function() {

		sap.ui.getCore().loadLibrary("sap.m");

		jQuery.sap.require("sap/m/P13nSortPanel");
		jQuery.sap.require("sap/m/P13nItem");
		jQuery.sap.require("sap/m/P13nSortItem");

		if (!this._hasTableSortableColumns()) {
			return null;
		}
		var that = this;
		var oPanel = new sap.m.P13nSortPanel({
			title: this.getTitleText(),
			containerQuery: true,
			items: {
				path: "$sapmP13nPanel>/transientData/sort/items",
				template: new sap.m.P13nItem({
					columnKey: "{$sapmP13nPanel>columnKey}",
					text: "{$sapmP13nPanel>text}",
					tooltip: "{$sapmP13nPanel>tooltip}",
					maxLength: "{$sapmP13nPanel>maxlength}",
					type: "{$sapmP13nPanel>type}"
				})
			},
			sortItems: {
				path: "$sapmP13nPanel>/persistentData/sort/sortItems",
				template: new sap.m.P13nSortItem({
					columnKey: "{$sapmP13nPanel>columnKey}",
					operation: "{$sapmP13nPanel>operation}"
				})
			},
			beforeNavigationTo: that.setModelFunction()
		});

		oPanel.attachAddSortItem(function(oEvent) {
			var oData = this.getModel("$sapuicomppersonalizationBaseController").getData();
			var params = oEvent.getParameters();
			var oSortItem = {
				columnKey: params.sortItemData.getColumnKey(),
				operation: params.sortItemData.getOperation()
			};
			if (params.index > -1) {
				oData.persistentData.sort.sortItems.splice(params.index, 0, oSortItem);
			} else {
				oData.persistentData.sort.sortItems.push(oSortItem);
			}
			this.getModel("$sapuicomppersonalizationBaseController").setData(oData, true);
		}, this);

		oPanel.attachRemoveSortItem(function(oEvent) {
			var params = oEvent.getParameters();
			var oData = this.getModel("$sapuicomppersonalizationBaseController").getData();
			if (params.index > -1) {
				oData.persistentData.sort.sortItems.splice(params.index, 1);
				this.getModel("$sapuicomppersonalizationBaseController").setData(oData, true);
			}
		}, this);

		return oPanel;
	};

	SortController.prototype.syncJsonModel2Table = function(oJsonModel) {
		var oTable = this.getTable();
		var aColumns = oTable.getColumns();
		var aColumnsUnsorted = jQuery.extend(true, [], aColumns);

		this.fireBeforePotentialTableChange();

		if (oTable instanceof sap.ui.table.Table) {
			oJsonModel.sort.sortItems.forEach(function(oSortItem) {
				var oColumn = Util.getColumn(oSortItem.columnKey, aColumns);
				if (!oColumn) {
					return;
				}
				if (!oColumn.getSorted()) {
					oColumn.setSorted(true);
				}
				if (oColumn.getSortOrder() !== oSortItem.operation) {
					oColumn.setSortOrder(oSortItem.operation);
				}
				aColumnsUnsorted.splice(aColumnsUnsorted.indexOf(oColumn), 1);
			});

			aColumnsUnsorted.forEach(function(oColumn) {
				if (oColumn && oColumn.getSorted()) {
					oColumn.setSorted(false);
				}
			});
		}

		this.fireAfterPotentialTableChange();
	};

	/**
	 * Operations on sorting are processed sometime directly at the table and sometime not. In case that something has been changed via
	 * Personalization Dialog the consumer of the Personalization Dialog has to apply sorting at the table. In case that sorting has been changed via
	 * user interaction at table, the change is instantly applied at the table.
	 * 
	 * @returns {sap.ui.comp.personalization.ChangeType}
	 */
	SortController.prototype.getChangeType = function(oPersistentDataBase, oPersistentDataCompare) {
		if (!oPersistentDataCompare || !oPersistentDataCompare.sort || !oPersistentDataCompare.sort.sortItems) {
			return sap.ui.comp.personalization.ChangeType.Unchanged;
		}
		var bIsDirty = JSON.stringify(oPersistentDataBase.sort.sortItems) !== JSON.stringify(oPersistentDataCompare.sort.sortItems);

		return bIsDirty ? sap.ui.comp.personalization.ChangeType.ModelChanged : sap.ui.comp.personalization.ChangeType.Unchanged;
	};

	/**
	 * Result is XOR based difference = oPersistentDataBase - oPersistentDataCompare
	 * 
	 * @param {object} oPersistentDataCompare JSON object. Note: if sortItems is [] then it means that all sortItems have been deleted
	 * @returns {object} JSON object or empty object
	 */
	SortController.prototype.getChangeData = function(oPersistentDataBase, oPersistentDataCompare) {

		if (!oPersistentDataBase || !oPersistentDataBase.sort || !oPersistentDataBase.sort.sortItems) {
			return {
				sort: {
					sortItems: []
				}
			};
		}

		if (!oPersistentDataCompare || !oPersistentDataCompare.sort || !oPersistentDataCompare.sort.sortItems) {
			return {
				sort: Util.copy(oPersistentDataBase.sort)
			};
		}

		if (JSON.stringify(oPersistentDataBase.sort.sortItems) !== JSON.stringify(oPersistentDataCompare.sort.sortItems)) {
			return {
				sort: Util.copy(oPersistentDataBase.sort)
			};
		}
		return null;
	};

	/**
	 * @param {object} oPersistentDataBase: JSON object to which different properties from JSON oPersistentDataCompare are added
	 * @param {object} oPersistentDataCompare: JSON object from where the different properties are added to oPersistentDataBase. Note: if sortItems is []
	 *        then it means that all sortItems have been deleted
	 * @returns {object} new JSON object as union result of oPersistentDataBase and oPersistentDataCompare
	 */
	SortController.prototype.getUnionData = function(oPersistentDataBase, oPersistentDataCompare) {
		// not valid
		if (!oPersistentDataCompare || !oPersistentDataCompare.sort || !oPersistentDataCompare.sort.sortItems) {
			return {
				sort: Util.copy(oPersistentDataBase.sort)
			};
		}

		return {
			sort: Util.copy(oPersistentDataCompare.sort)
		};
	};

	/**
	 * Cleans up before destruction.
	 * 
	 * @private
	 */
	SortController.prototype.exit = function() {
		BaseController.prototype.exit.apply(this, arguments);

		var oTable = this.getTable();
		if (oTable && oTable instanceof sap.ui.table.Table) {
			oTable.detachSort(this._onSort, this);
		}
	};

	return SortController;

}, /* bExport= */true);

}; // end of sap/ui/comp/personalization/SortController.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.providers.BaseValueListProvider') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
// -----------------------------------------------------------------------------
// Retrieves the metadata necessary for a value list from the OData metadata
// -----------------------------------------------------------------------------
jQuery.sap.declare('sap.ui.comp.providers.BaseValueListProvider'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.type.Date'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/providers/BaseValueListProvider",[
	'jquery.sap.global', 'sap/ui/base/EventProvider', 'sap/ui/comp/smartfilterbar/ControlConfiguration', 'sap/ui/model/type/Date', 'sap/ui/comp/odata/MetadataAnalyser', 'sap/ui/comp/util/FormatUtil'
], function(jQuery, EventProvider, ControlConfiguration, Date, MetadataAnalyser, FormatUtil) {
	"use strict";

	/**
	 * Retrieves the data for a collection from the OData metadata to bind to a given control/aggregation
	 * 
	 * @constructor
	 * @experimental This module is only for internal/experimental use!
	 * @public
	 * @param {object} mParams - map containing the control,aggregation,annotation and the oODataModel
	 * @author Pavan Nayak, Thomas Biesemann
	 */
	var BaseValueListProvider = EventProvider.extend("sap.ui.comp.providers.BaseValueListProvider", {
		constructor: function(mParams) {
			EventProvider.call(this);
			this.sFieldName = mParams.fieldName;
			this.oControl = mParams.control;
			this.sValueListEntitySetName = null;
			this.sValueListEntityName = null;
			this.oODataModel = mParams.model;
			this.oFilterModel = mParams.filterModel;
			this.oFilterProvider = mParams.filterProvider;
			this.sDisplayFormat = mParams.displayFormat;
			this._oDateFormatSettings = mParams.dateFormatSettings;
			// Default resolution of InOut params when used in standard OData scenarios
			this.bResolveInOutParams = (mParams.resolveInOutParams === false) ? false : true;
			// The configured display behaviour
			this.sDisplayBehaviour = mParams.displayBehaviour;
			// the calculated display behaviour for DDLB
			this.sDDLBDisplayBehaviour = this.sDisplayBehaviour;
			if (!this.sDDLBDisplayBehaviour || this.sDDLBDisplayBehaviour === ControlConfiguration.DISPLAYBEHAVIOUR.auto) {
				this.sDDLBDisplayBehaviour = this.oFilterProvider ? this.oFilterProvider.sDefaultDropDownDisplayBehaviour : ControlConfiguration.DISPLAYBEHAVIOUR.descriptionOnly;
			}
			// If the property if part of a complex type this would be filled
			this.sPropertyTypePath = "";
			if (this.bResolveInOutParams && !this.oFilterModel && !this.oFilterProvider) {
				this._resolvePropertyPath();
			}

			if (mParams.loadAnnotation && mParams.fullyQualifiedFieldName) {
				this._oMetadataAnalyser = mParams.metadataAnalyser;
				if (!this._oMetadataAnalyser) {
					this._oMetadataAnalyser = new MetadataAnalyser(this.oODataModel);
					this._bCleanupMetadataAnalyser = true;
				}
				this._oMetadataAnalyser.getValueListAnnotationLazy(mParams.fullyQualifiedFieldName).then(this._onAnnotationLoad.bind(this), function(oError) {
					this._oError = oError;
					this.bInitialised = true;
					jQuery.sap.log.debug(oError);
				}.bind(this));
			} else {
				this._onAnnotationLoad({
					primaryValueListAnnotation: mParams.annotation,
					additionalAnnotations: mParams.additionalAnnotations
				});
			}

			if (!sap.ui.comp.smartfilterbar || !sap.ui.comp.smartfilterbar.FilterProvider) {
				jQuery.sap.require("sap.ui.comp.smartfilterbar.FilterProvider");
			}
		}
	});

	/**
	 * Attaches event handler <code>fnFunction</code> to the <code>valueListChanged</code> event.<br>
	 * This event is relevant only while setting data back (OUT parameters) to the ODataModel
	 * 
	 * @param {function} fnFunction the function to call when the event occurs
	 * @param {object} [oListener] object on which to call the given function
	 * @public
	 * @since 1.32.0
	 */
	BaseValueListProvider.prototype.attachValueListChanged = function(fnFunction, oListener) {
		this.attachEvent("valueListChanged", fnFunction, oListener);
	};

	/**
	 * Detaches event handler <code>fnFunction</code> from the <code>valueListChanged</code> event.<br>
	 * This event is relevant only while setting data back (OUT parameters) to the ODataModel
	 * 
	 * @param {function} fnFunction the function to call when the event occurs
	 * @param {object} [oListener] object on which to call the given function
	 * @public
	 * @since 1.32.0
	 */
	BaseValueListProvider.prototype.detachValueListChanged = function(fnFunction, oListener) {
		this.detachEvent("valueListChanged", fnFunction, oListener);
	};

	/**
	 * Called once valuelist annotation is loaded!
	 * 
	 * @private
	 * @param {Object} mValueList - value list annotation from metadata
	 */
	BaseValueListProvider.prototype._onAnnotationLoad = function(mValueList) {
		this.oPrimaryValueListAnnotation = mValueList.primaryValueListAnnotation;
		this.additionalAnnotations = mValueList.additionalAnnotations;
		this._resolveAnnotationData(this.oPrimaryValueListAnnotation);
		this.bInitialised = true;
		if (this.sAggregationName && !this.bTypeAheadEnabled) {
			this.oControl.rerender();
		}
	};

	/**
	 * Resolve the path from control's binding info to find out if the property is part of a ComplexType. (This is valid only for ODataModel In/Out
	 * parameter handling)
	 * 
	 * @private
	 */
	BaseValueListProvider.prototype._resolvePropertyPath = function() {
		var oBindingInfo = this.oControl.getBindingInfo("value"), sPath, sProperty, aPaths;
		if (oBindingInfo && oBindingInfo.parts) {
			sPath = oBindingInfo.parts[0] ? oBindingInfo.parts[0].path : "";
		}
		if (sPath) {
			aPaths = sPath.split("/");
			if (aPaths.length > 1) {
				sProperty = aPaths[aPaths.length - 1];
				this.sPropertyTypePath = sPath.replace("/" + sProperty, "");
			}
		}
	};

	/**
	 * Resolve the annotation data and recalculate the required metadata
	 * 
	 * @param {Object} oAnnotation - the selected annotation which needs to be processed
	 * @private
	 */
	BaseValueListProvider.prototype._resolveAnnotationData = function(oAnnotation) {
		var iLen = 0, i = 0, aCols, oField, sType, oType;
		if (this.oODataModel && oAnnotation) {
			this.bSupportBasicSearch = oAnnotation.isSearchSupported;
			this.sValueListTitle = oAnnotation.valueListTitle || oAnnotation.qualifier;
			this.sKey = oAnnotation.keyField;
			this._aKeys = oAnnotation.keys;
			this.sValueListEntitySetName = oAnnotation.valueListEntitySetName;
			this.sValueListEntityName = oAnnotation.valueListEntityName;
			this.mInParams = oAnnotation.inParams;
			this.mOutParams = oAnnotation.outParams;

			// the calculated display behaviour for tokens
			this.sTokenDisplayBehaviour = this.sDisplayBehaviour;
			if (!this.sTokenDisplayBehaviour || this.sTokenDisplayBehaviour === ControlConfiguration.DISPLAYBEHAVIOUR.auto) {
				this.sTokenDisplayBehaviour = this.oFilterProvider ? this.oFilterProvider.sDefaultTokenDisplayBehaviour : ControlConfiguration.DISPLAYBEHAVIOUR.descriptionAndId;
			}

			// fallback to idOnly if no description is present for tokens
			if (!oAnnotation.descriptionField) {
				this.sTokenDisplayBehaviour = ControlConfiguration.DISPLAYBEHAVIOUR.idOnly;
			}

			this.sDescription = oAnnotation.descriptionField || this.sKey; // fall back to key if there is no description

			if (this.sValueListEntitySetName && this.sKey) {
				// Get the Columns information (all fields on the UI)
				this._aCols = [];
				this.aSelect = [];
				aCols = oAnnotation.valueListFields;
				iLen = aCols.length;
				for (i = 0; i < iLen; i++) {
					oField = aCols[i];
					// Type Handling: Special handling for date and boolean fields
					sType = null;
					oType = null;
					if (oField.type === "Edm.Boolean") {
						sType = "boolean";
					} else if (oField.type === "Edm.DateTime" && oField.displayFormat === "Date") {
						sType = "date";
						oType = new Date();
					} else if (oField.type === "Edm.Decimal") {
						sType = "decimal";
						oType = new sap.ui.model.type.Float();
					} else if (oField.type === "Edm.String") {
						sType = "string";
					}
					this._aCols.push({
						label: oField.fieldLabel,
						type: sType,
						oType: oType,
						width: FormatUtil.getWidth(oField, 15),
						template: oField.name
					// sort: oField.name // we do not support a sorting on the columns
					});
					this.aSelect.push(oField.name);
				}
				if (oAnnotation.descriptionField) {
					this.aSelect.push(oAnnotation.descriptionField);
				}
			}
		}
	};

	/**
	 * Called by the control when needed, to get input data for filtering
	 * 
	 * @private
	 */
	BaseValueListProvider.prototype._calculateFilterInputData = function() {
		var sLocalFieldName, sValueListFieldName, oData = null;
		// Search view can be switched for collective search help; reset the mFilterInputData in that case.
		delete this.mFilterInputData;
		// Check if the SmartFilter is present and try to get data for only visible fields from SmartFilter
		// else use the filterModel to get data
		if (this.oFilterProvider && this.oFilterProvider._oSmartFilter) {
			oData = this.oFilterProvider._oSmartFilter.getFilterData();
		} else if (this.oFilterModel) {
			oData = this.oFilterModel.getData();
		} else if (this.oODataModel && this.bResolveInOutParams) {
			oData = this.oODataModel.getData(this.sPropertyTypePath, this.oControl.getBindingContext());
		}
		if (this.mInParams && oData) {
			this.mFilterInputData = {};
			this.aFilterField = [];
			for (sLocalFieldName in this.mInParams) {
				if (sLocalFieldName) {
					sValueListFieldName = this.mInParams[sLocalFieldName];
					if (sValueListFieldName !== this.sKey) {
						// Only set IN parameter data if it is non empty
						if (oData[sLocalFieldName]) {
							this.mFilterInputData[sValueListFieldName] = oData[sLocalFieldName];
							this.aFilterField.push(sValueListFieldName);
						}
					}
				}
			}
		}
	};

	/**
	 * Called when data needs to be set back to the SmartFilter from ValueHelp/suggest
	 * 
	 * @param {Array} aData - array of row data that has be set back
	 * @private
	 */
	BaseValueListProvider.prototype._calculateAndSetFilterOutputData = function(aData) {
		var sLocalFieldName, sValueListFieldName, mFilterOutputData = null, oData, oExistingData, oNewData, i, fFilterDuplicates;
		if (this.mOutParams && aData && (this.oFilterProvider || this.oFilterModel)) {
			mFilterOutputData = {};
			fFilterDuplicates = function(obj) {
				return obj.key === oNewData.key;
			};
			for (sLocalFieldName in this.mOutParams) {
				if (sLocalFieldName) {
					sValueListFieldName = this.mOutParams[sLocalFieldName];
					if (sValueListFieldName !== this.sKey) {
						i = aData.length;
						while (i--) {
							oData = aData[i];
							// Only set Out parameter data if it exists in the passed data
							if (oData[sValueListFieldName]) {
								oNewData = {
									key: oData[sValueListFieldName]
								};
								if (!mFilterOutputData[sLocalFieldName]) {
									// Get Existing filter data
									if (!oExistingData && this.oFilterModel) {
										oExistingData = this.oFilterModel.getData();
									}
									// if existing data already contains the property as a multi-value --> amend to it
									if (oExistingData && oExistingData[sLocalFieldName] && oExistingData[sLocalFieldName].items) {
										mFilterOutputData[sLocalFieldName] = oExistingData[sLocalFieldName];
									} else {
										mFilterOutputData[sLocalFieldName] = {
											items: []
										};
									}
								}
								// Check for duplicates before adding new data
								if (mFilterOutputData[sLocalFieldName].items.filter(fFilterDuplicates).length <= 0) {
									mFilterOutputData[sLocalFieldName].items.push(oNewData);
								}
							}
						}
					}
				}
			}

			if (mFilterOutputData) {
				// Use API from FilterProvider if it exists
				if (this.oFilterProvider) {
					this.oFilterProvider.setFilterData(mFilterOutputData);
				} else if (this.oFilterModel) {
					// try to merge data into the filter model
					this.oFilterModel.setData(mFilterOutputData, true);
				}
			}
		} else if (this.oODataModel && this.bResolveInOutParams) {
			// ODataModel --> assume only 1 value can be set back!
			this._calculateAndSetODataModelOutputData(aData[0]);
		}
	};

	/**
	 * Called when data needs to be set back to the Model (ODataModel) from ValueHelp/suggest
	 * 
	 * @param {Object} oData - the row data that needs to be set back
	 * @private
	 */
	BaseValueListProvider.prototype._calculateAndSetODataModelOutputData = function(oData) {
		var oBindingContext, sLocalFieldName, sValueListFieldName, sPathToResolve, oValue, mChangedFields = {};
		if (oData && this.mOutParams) {
			oBindingContext = this.oControl.getBindingContext();
			for (sLocalFieldName in this.mOutParams) {
				if (sLocalFieldName) {
					sValueListFieldName = this.mOutParams[sLocalFieldName];
					if (sValueListFieldName !== this.sKey) {
						oValue = oData[sValueListFieldName];
						mChangedFields[sLocalFieldName] = oValue;
						sPathToResolve = this.sPropertyTypePath ? this.sPropertyTypePath + "/" + sLocalFieldName : sLocalFieldName;
						this.oODataModel.setProperty(sPathToResolve, oValue, oBindingContext, true);
					}
				}
			}
			if (mChangedFields && !jQuery.isEmptyObject(mChangedFields)) {
				this.fireEvent("valueListChanged", {
					"changes": mChangedFields
				});
			}
		}
	};

	/**
	 * Destroys the object
	 */
	BaseValueListProvider.prototype.destroy = function() {
		sap.ui.base.EventProvider.prototype.destroy.apply(this, arguments);
		if (this._bCleanupMetadataAnalyser && this._oMetadataAnalyser) {
			this._oMetadataAnalyser.destroy();
		}
		this._oMetadataAnalyser = null;
		this.oControl = null;
		this.sFieldName = null;
		this.mFilterInputData = null;
		this.aFilterField = null;
		this.sValueListEntitySetName = null;
		this.sValueListEntityName = null;
		this.oODataModel = null;
		this.oFilterModel = null;
		this.oFilterProvider = null;
		this.oPrimaryValueListAnnotation = null;
		this.additionalAnnotations = null;
		this.sDisplayFormat = null;
		this.bSupportBasicSearch = null;
		this.bInitialised = null;
		this._oError = null;
		this.sValueListTitle = null;
		this.sKey = null;
		this._aKeys = null;
		this.mInParams = null;
		this.mOutParams = null;
		this.sDescription = null;
		this.aSelect = null;
		this._aCols = null;
		this.sDDLBDisplayBehaviour = null;
		this.sTokenDisplayBehaviour = null;
		this._oDateFormatSettings = null;

		this.bIsDestroyed = true;
	};

	return BaseValueListProvider;

}, /* bExport= */true);

}; // end of sap/ui/comp/providers/BaseValueListProvider.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.providers.ValueHelpProvider') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
// -----------------------------------------------------------------------------
// Retrieves the data for a value list from the OData metadata to bind to a given control/aggregation (TODO: take into account Searchsupported +
// ValueList In/Out/InOut parameter to set data)
// -----------------------------------------------------------------------------
jQuery.sap.declare('sap.ui.comp.providers.ValueHelpProvider'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.List'); // unlisted dependency retained
jQuery.sap.require('sap.m.PlacementType'); // unlisted dependency retained
jQuery.sap.require('sap.m.ResponsivePopover'); // unlisted dependency retained
jQuery.sap.require('sap.m.StandardListItem'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/providers/ValueHelpProvider",[
	'jquery.sap.global', 'sap/m/List', 'sap/m/PlacementType', 'sap/m/ResponsivePopover', 'sap/m/StandardListItem', './BaseValueListProvider', 'sap/ui/model/json/JSONModel'
], function(jQuery, List, PlacementType, ResponsivePopover, StandardListItem, BaseValueListProvider, JSONModel) {
	"use strict";

	/**
	 * Retrieves the data for a collection from the OData metadata to bind to a given control/aggregation
	 *
	 * @constructor
	 * @experimental This module is only for internal/experimental use!
	 * @public
	 * @param {object} mParams - map containing the control,aggregation,annotation and the oODataModel
	 * @author Peter Harbusch, Pavan Nayak, Thomas Biesemann
	 */
	var ValueHelpProvider = BaseValueListProvider.extend("sap.ui.comp.providers.ValueHelpProvider", {
		constructor: function(mParams) {
			if (mParams) {
				this.preventInitialDataFetchInValueHelpDialog = mParams.preventInitialDataFetchInValueHelpDialog;
				this.sTitle = mParams.title;
				this.bSupportMultiselect = mParams.supportMultiSelect;
				this.bSupportRanges = mParams.supportRanges;
				this.bIsSingleIntervalRange = mParams.isSingleIntervalRange;
				this.bIsUnrestrictedFilter = mParams.isUnrestrictedFilter;
				this.bTakeOverInputValue = (mParams.takeOverInputValue === false) ? false : true;
				// If field is of type Single Interval -> The dialog should support only 1 interval range selection
				if (this.bIsSingleIntervalRange) {
					this.bSupportRanges = true;
				}
				this._sType = mParams.type;
				this._sMaxLength = mParams.maxLength;
				this._sScale = mParams.scale;
				this._sPrecision = mParams.precision;
			}
			BaseValueListProvider.apply(this, arguments); // Call constructor of base class
			this._onInitialise();
		}
	});

	/**
	 * Initialise the relevant stuff
	 *
	 * @private
	 */
	ValueHelpProvider.prototype._onInitialise = function() {
		// Check if ValueHelp is supported by the control
		if (this.oControl.attachValueHelpRequest) {
			this._fVHRequested = jQuery.proxy(function(oEvent) {
				if (!this.bInitialised) {
					return;
				}
				this.oControl = oEvent.getSource();
				this.bForceTriggerDataRetreival = oEvent.getParameter("fromSuggestions");
				if (this.bTakeOverInputValue || this.bForceTriggerDataRetreival) {
					this.sBasicSearchText = oEvent.getSource().getValue();
				}
				this._createValueHelpDialog();
			}, this);
			this.oControl.attachValueHelpRequest(this._fVHRequested);
		}
	};

	/**
	 * Creates the Value Help Dialog
	 *
	 * @private
	 */
	ValueHelpProvider.prototype._createValueHelpDialog = function() {
		if (!this.bCreated) {
			this.bCreated = true;
			if (!this._oValueHelpDialogClass) {
				// Create ValueHelpDialog instance lazily
				sap.ui.require([
					'sap/ui/comp/valuehelpdialog/ValueHelpDialog'
				], this._onValueHelpDialogRequired.bind(this));
			} else {
				this._onValueHelpDialogRequired(this._oValueHelpDialogClass);
			}
		}
	};

	/**
	 * Called once the ValueHelpDialog instance is required
	 *
	 * @param {Object} ValueHelpDialog - the ValueHelpDialog class object
	 * @private
	 */
	ValueHelpProvider.prototype._onValueHelpDialogRequired = function(ValueHelpDialog) {
		this._oValueHelpDialogClass = ValueHelpDialog;
		this.oValueHelpDialog = new ValueHelpDialog({
			stretch: sap.ui.Device.system.phone,
			basicSearchText: this.sBasicSearchText,
			supportRangesOnly: this.bIsSingleIntervalRange || !this.oPrimaryValueListAnnotation,
			supportMultiselect: this.bSupportMultiselect,
			title: this.sTitle,
			supportRanges: this.bSupportRanges,
			displayFormat: this.sDisplayFormat,
			ok: jQuery.proxy(this._onOK, this),
			cancel: jQuery.proxy(this._onCancel, this),
			afterClose: jQuery.proxy(function() {
				if (this.oPrimaryValueListAnnotation) {
					this._resolveAnnotationData(this.oPrimaryValueListAnnotation);
				}
				this.oValueHelpDialog.destroy();
				this.bCreated = false;
				if (this.oControl && this.oControl.focus && !sap.ui.Device.system.phone) {
					this.oControl.focus();
				}
			}, this)
		});

		// Enable the Dialog to show only 1 interval range selection
		if (this.bIsSingleIntervalRange) {
			this.oValueHelpDialog.setIncludeRangeOperations([
				sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.BT, sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.EQ
			], this._sType);
			this.oValueHelpDialog.setMaxIncludeRanges(1);
			this.oValueHelpDialog.setMaxExcludeRanges(0);
			this._updateInitialInterval();
		} else if ((this._sType === "date" || this._sType === "time") && !this.bIsUnrestrictedFilter) {
			// Enable the Dialog to show only multiple "EQ" date selection
			this.oValueHelpDialog.setIncludeRangeOperations([
				sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.EQ
			], this._sType);
			this.oValueHelpDialog.setMaxExcludeRanges(0);
		}

		if (this.oControl.$() && this.oControl.$().closest(".sapUiSizeCompact").length > 0) { // check if the Token field runs in Compact
			// mode
			this.oValueHelpDialog.addStyleClass("sapUiSizeCompact");
		} else {
			this.oValueHelpDialog.addStyleClass("sapUiSizeCozy");
		}
		if (this.bSupportRanges) {
			this.oValueHelpDialog.setRangeKeyFields([
				{
					label: this.sTitle,
					key: this.sFieldName,
					type: this._sType,
					scale: this._sScale,
					precision: this._sPrecision,
					maxLength: this._sMaxLength
				}
			]);
		}
		if (!(this.bIsSingleIntervalRange || !this.oPrimaryValueListAnnotation)) {
			this._createAdditionalValueHelpControls();
			this._createCollectiveSearchControls();
			this.oValueHelpDialog.setModel(this.oODataModel);
		}

		// pass the existing tokens to the value help dialog
		if (this.oControl.getTokens) {
			var aTokens = this.oControl.getTokens();
			this.oValueHelpDialog.setTokens(aTokens);
		}

		this.oValueHelpDialog.open();
	};

	/**
	 * Updated the ValueHelpDialog with the initial value of the interval token
	 *
	 * @private
	 */
	ValueHelpProvider.prototype._updateInitialInterval = function() {
		var sIntervalValue = this.oControl.getValue(), oToken, oRange, aValues;
		if (sIntervalValue) {
			oToken = new sap.m.Token();
			oRange = {
				exclude: false,
				keyField: this.sFieldName
			};
			aValues = sIntervalValue.split("-");
			if (aValues && aValues.length === 2) {
				oRange.operation = "BT";
				oRange.value1 = aValues[0];
				oRange.value2 = aValues[1];
			} else {
				oRange.operation = "EQ";
				oRange.value1 = sIntervalValue;
			}

			oToken.data("range", oRange);
		}
		if (oToken) {
			this.oValueHelpDialog.setTokens([
				oToken
			]);
		}
	};

	/**
	 * Creates the necessary control(s) for Collective Search Help on the ValueHelpDialog
	 *
	 * @private
	 */
	ValueHelpProvider.prototype._createCollectiveSearchControls = function() {
		var oPopOver, oList, oItem, i = 0, len = 0, fOnSelect, oAdditionalAnnotation, oResourceBundle;
		if (this.additionalAnnotations && this.additionalAnnotations.length) {
			fOnSelect = jQuery.proxy(function(oEvt) {
				var oSource = oEvt.getParameter("listItem"), oAnnotation;
				oPopOver.close();
				if (oSource) {
					oAnnotation = oSource.data("_annotation");
					if (oAnnotation) {
						this._triggerAnnotationChange(oAnnotation);
					}
				}
			}, this);
			// Selection Controls
			oList = new List({
				mode: sap.m.ListMode.SingleSelectMaster,
				selectionChange: fOnSelect
			});
			oResourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp");
			oPopOver = new ResponsivePopover({
				placement: PlacementType.Bottom,
				showHeader: true,
				contentHeight: "30rem",
				title: oResourceBundle.getText("COLLECTIVE_SEARCH_SELECTION_TITLE"),
				content: [
					oList
				]
			});

			oItem = new StandardListItem({
				title: this.oPrimaryValueListAnnotation.valueListTitle
			});
			oItem.data("_annotation", this.oPrimaryValueListAnnotation);
			oList.addItem(oItem);
			oList.setSelectedItem(oItem);

			this.oValueHelpDialog.oSelectionTitle.setText(this.oPrimaryValueListAnnotation.valueListTitle);
			this.oValueHelpDialog.oSelectionTitle.setTooltip(this.oPrimaryValueListAnnotation.valueListTitle);
			len = this.additionalAnnotations.length;
			for (i = 0; i < len; i++) {
				oAdditionalAnnotation = this.additionalAnnotations[i];
				oItem = new StandardListItem({
					title: oAdditionalAnnotation.valueListTitle
				});
				oItem.data("_annotation", oAdditionalAnnotation);
				oList.addItem(oItem);
			}
			this.oValueHelpDialog.oSelectionButton.setVisible(true);
			this.oValueHelpDialog.oSelectionTitle.setVisible(true);
			this.oValueHelpDialog.oSelectionButton.attachPress(function() {
				oPopOver.openBy(this);
			});
		}
	};

	ValueHelpProvider.prototype._triggerAnnotationChange = function(oAnnotation) {
		this.oValueHelpDialog.oSelectionTitle.setText(oAnnotation.valueListTitle);
		this.oValueHelpDialog.oSelectionTitle.setTooltip(oAnnotation.valueListTitle);
		this.oValueHelpDialog.resetTableState();
		this._resolveAnnotationData(oAnnotation);
		this._createAdditionalValueHelpControls();
	};

	/**
	 * Create the SmartFilter control on the Value Help Dialog and set the model
	 *
	 * @private
	 */
	ValueHelpProvider.prototype._createAdditionalValueHelpControls = function() {
		var sBasicSearchFieldName = null;
		this.oValueHelpDialog.setKey(this.sKey);
		this.oValueHelpDialog.setKeys(this._aKeys);
		this.oValueHelpDialog.setDescriptionKey(this.sDescription);
		this.oValueHelpDialog.setTokenDisplayBehaviour(this.sTokenDisplayBehaviour);

		/*
		 * This is necessary since, ValueHelpDialog control expects columns for table would be filled from a model called columns with column data!
		 */
		// init the columns model for the table
		var oColModel = new JSONModel();
		oColModel.setData({
			cols: this._aCols
		});
		this.oValueHelpDialog.setModel(oColModel, "columns");

		// Set the Basic search field if search is supported
		if (this.bSupportBasicSearch) {
			sBasicSearchFieldName = this.sKey;
		}
		// Create the smart filter
		this.oSmartFilterBar = new sap.ui.comp.smartfilterbar.SmartFilterBar({
			entityType: this.sValueListEntityName,
			basicSearchFieldName: sBasicSearchFieldName,
			enableBasicSearch: this.bSupportBasicSearch,
			advancedMode: true,
			showGoOnFB: !sap.ui.Device.system.phone,
			expandAdvancedArea: (!this.bForceTriggerDataRetreival && sap.ui.Device.system.desktop),
			search: this._onFilterBarSearchPressed.bind(this),
			reset: this._onFilterBarResetPressed.bind(this),
			filterChange: jQuery.proxy(this._onFilterBarFilterChange, this),
			initialise: jQuery.proxy(this._onFilterBarInitialise, this)
		});
		if (this._oDateFormatSettings) {
			this.oSmartFilterBar.data("dateFormatSettings", this._oDateFormatSettings);
		}
		// This has to be set before the SmartFilter is initialised!
		this.oSmartFilterBar.isRunningInValueHelpDialog = true;
		// Set SmartFilter on ValueHelp Dialog
		this.oValueHelpDialog.setFilterBar(this.oSmartFilterBar);
	};

	/**
	 * Called when the filter data is changed in SmartFilter
	 *
	 * @private
	 */
	ValueHelpProvider.prototype._onFilterBarFilterChange = function() {
		var oTable = this.oValueHelpDialog.getTable();
		if (oTable) {
			oTable.setShowOverlay(true);
		}
		this.oValueHelpDialog.TableStateSearchData();
	};

	/**
	 * Called when the search is triggered in SmartFilter
	 *
	 * @private
	 */
	ValueHelpProvider.prototype._onFilterBarSearchPressed = function() {
		this._rebindTable();
	};

	/**
	 * Binds the table taking current filters and parameters into account
	 *
	 * @private
	 */
	ValueHelpProvider.prototype._rebindTable = function() {
		var aFilters, mParameters, mBindingParams, oTable;
		aFilters = this.oSmartFilterBar.getFilters();
		mParameters = this.oSmartFilterBar.getParameters() || {};
		if (this.aSelect && this.aSelect.length) {
			mParameters["select"] = this.aSelect.toString();
		}

		mBindingParams = {
			path: "/" + this.sValueListEntitySetName,
			filters: aFilters,
			parameters: mParameters,
			sorter: new sap.ui.model.Sorter(this.sKey),
			events: {
				dataReceived: jQuery.proxy(function(oEvt) {
					this.oValueHelpDialog.TableStateDataFilled();
					oTable.setBusy(false);
					var oBinding = oEvt.getSource(), iBindingLength;
					if (oBinding && this.oValueHelpDialog && this.oValueHelpDialog.isOpen()) {
						iBindingLength = oBinding.getLength();
						// Infinite number of requests are triggered if an error occurs, so don't update if no data is present
						// The below code is mainly required for token handling on the ValueHelpDialog.
						if (iBindingLength) {
							this.oValueHelpDialog.update();
						}
					}
				}, this)
			}
		};

		oTable = this.oValueHelpDialog.getTable();
		oTable.setShowOverlay(false);
		this.oValueHelpDialog.TableStateDataSearching();
		oTable.setBusy(true);
		if (oTable instanceof sap.m.Table) {
			mBindingParams.factory = function(sId, oContext) {
				var aCols = oTable.getModel("columns").getData().cols;
				return new sap.m.ColumnListItem({
					cells: aCols.map(function(column) {
						var colname = column.template;
						return new sap.m.Label({
							text: "{" + colname + "}"
						});
					})
				});
			};
			oTable.bindItems(mBindingParams);
		} else {
			oTable.bindRows(mBindingParams);
		}
	};

	/**
	 * Called when the reset button was clicked in the SmartFilter
	 *
	 * @private
	 */
	ValueHelpProvider.prototype._onFilterBarResetPressed = function() {
		this._calculateFilterInputData();
		if (this.oSmartFilterBar) {
			this.oSmartFilterBar.setFilterData(this.mFilterInputData);
		}
	};

	/**
	 * Called when the filterbar is initialised
	 *
	 * @private
	 */
	ValueHelpProvider.prototype._onFilterBarInitialise = function() {
		var oBasicSearchField = null;
		// (Re-)Set the data to default
		this._onFilterBarResetPressed();

		// Update the basic search text!
		if (this.oSmartFilterBar && this.oSmartFilterBar.getBasicSearchControl) {
			oBasicSearchField = this.oSmartFilterBar.getBasicSearchControl();
			if (oBasicSearchField) {
				oBasicSearchField.setValue(this.sBasicSearchText);

				if (sap.ui.Device.system.phone && oBasicSearchField instanceof sap.m.SearchField) {
					oBasicSearchField.setShowSearchButton(true);
				}
			}
		}
		// trigger the data request if the fetch was initiated from Suggest -or- if data fetch is not prevented
		if (!this.preventInitialDataFetchInValueHelpDialog || this.bForceTriggerDataRetreival) {
			this._rebindTable();
			this.bForceTriggerDataRetreival = false;
		}
	};

	/**
	 * Callback method after OK is clicked on the VH Dialog
	 *
	 * @param {object} oControlEvent - the event data from the control
	 * @private
	 */
	ValueHelpProvider.prototype._onOK = function(oControlEvent) {
		var aTokens = oControlEvent.getParameter("tokens"), oRangeData, sKey, i = 0, aRowData = [], oRowData = null;
		// First close the dialog, since when used in an aggregation - some model updates (setting IN/OUT params to ODataModel) destroy this
		// instance/control!
		this._onCancel();
		if (this.oControl instanceof sap.m.MultiInput) {
			this.oControl.setTokens(aTokens);
			i = aTokens.length;
			while (i--) {
				oRowData = aTokens[i].data("row");
				if (oRowData) {
					aRowData.push(oRowData);
				}
			}
		} else {
			if (aTokens[0]) {
				// Single Interval
				if (this.bIsSingleIntervalRange) {
					oRangeData = aTokens[0].data("range");
					if (oRangeData) {
						// check if data is in the format: "2005-2014"
						if (oRangeData.operation === "BT") {
							sKey = oRangeData.value1 + "-" + oRangeData.value2;
						} else {
							sKey = oRangeData.value1;
						}
					}
				} else {
					sKey = aTokens[0].getKey();
				}
				oRowData = aTokens[0].data("row");
				if (oRowData) {
					aRowData.push(oRowData);
				}
			}
			this.oControl.setValue(sKey);

			// Manually trigger the change event on sapUI5 control since it doesn't do this internally on setValue!
			this.oControl.fireChange({
				value: sKey,
				validated: true
			});
		}
		this._calculateAndSetFilterOutputData(aRowData);
	};

	/**
	 * Callback method after Cancel is clicked on the VH Dialog
	 *
	 * @private
	 */
	ValueHelpProvider.prototype._onCancel = function() {
		this.oValueHelpDialog.close();
		this.oValueHelpDialog.setModel(null);
	};

	/**
	 * Destroys the object
	 */
	ValueHelpProvider.prototype.destroy = function() {
		if (this.oControl && this.oControl.detachValueHelpRequest) {
			this.oControl.detachValueHelpRequest(this._fVHRequested);
			this._fVHRequested = null;
		}
		BaseValueListProvider.prototype.destroy.apply(this, arguments);
		// Destroy other local data
		if (this.oValueHelpDialog) {
			this.oValueHelpDialog.destroy();
			this.oValueHelpDialog = null;
		}
		if (this.oSmartFilterBar) {
			this.oSmartFilterBar.destroy();
			this.oSmartFilterBar = null;
		}
		this.sTitle = null;
		this._oValueHelpDialogClass = null;
	};

	return ValueHelpProvider;

}, /* bExport= */true);

}; // end of sap/ui/comp/providers/ValueHelpProvider.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.providers.ValueListProvider') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
// -----------------------------------------------------------------------------
// Retrieves the data for a value list from the OData metadata to bind to a given control/aggregation
//
// -----------------------------------------------------------------------------
jQuery.sap.declare('sap.ui.comp.providers.ValueListProvider'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.Column'); // unlisted dependency retained
jQuery.sap.require('sap.m.ColumnListItem'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.m.Token'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Item'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/providers/ValueListProvider",[
	'jquery.sap.global', 'sap/m/Column', 'sap/m/ColumnListItem', 'sap/m/Text', 'sap/m/Token', './BaseValueListProvider', 'sap/ui/core/Item', 'sap/ui/model/Filter', 'sap/ui/model/Sorter', 'sap/ui/model/json/JSONModel', 'sap/ui/comp/util/FormatUtil'
], function(jQuery, Column, ColumnListItem, Text, Token, BaseValueListProvider, Item, Filter, Sorter, JSONModel, FormatUtil) {
	"use strict";

	/**
	 * Retrieves the data for a collection from the OData metadata to bind to a given control/aggregation
	 *
	 * @constructor
	 * @experimental This module is only for internal/experimental use!
	 * @public
	 * @param {object} mParams - map containing the control,aggregation,annotation and the oODataModel
	 * @author Pavan Nayak, Thomas Biesemann
	 */
	var ValueListProvider = BaseValueListProvider.extend("sap.ui.comp.providers.ValueListProvider", {
		constructor: function(mParams) {
			if (mParams) {
				this.sAggregationName = mParams.aggregation;
				this.bTypeAheadEnabled = mParams.typeAheadEnabled;

			}
			BaseValueListProvider.apply(this, arguments);
			this._onInitialise();
		}
	});

	/**
	 * Metadata is available --> Initialise the relevant stuff
	 *
	 * @private
	 */
	ValueListProvider.prototype._onInitialise = function() {
		var oEventDelegate;
		if (!this.bTypeAheadEnabled) {
			/**
			 * Delay the fetch of data for standard dropdowns until the rendering is done! This inherently causes only the relevant data to be fetched
			 * from the backend!
			 */
			oEventDelegate = {
				onAfterRendering: function() {
					if (this.bInitialised) {
						this.oControl.removeEventDelegate(oEventDelegate, this);
						this._createDropDownTemplate();
						this._fetchData();
					}
				}
			};
			this.oControl.addEventDelegate(oEventDelegate, this);
		} else if (this.oControl.attachSuggest) {
			// Check if Suggest is supported by the control
			this._fSuggest = function(oEvent) {
				this.oControl = oEvent.getSource();
				if (!this.bInitialised) {
					return;
				}
				if (!this.oTemplate || !this.oControl.data("_hassuggestionTemplate")) {
					this._createSuggestionTemplate();
				}
				var sSearchText = oEvent.getParameter("suggestValue");
				this._fetchData(sSearchText);
			}.bind(this);
			this.oControl.attachSuggest(this._fSuggest);

			this._handleSelect();
		}
	};

	/**
	 * Creates a template for drop down fields
	 *
	 * @private
	 */
	ValueListProvider.prototype._createDropDownTemplate = function() {
		this._oTemplate = new Item({
			key: "{" + this.sKey + "}",
			text: this._getDDLBTextBindingPath()
		});
		// ComboBox/MultiComboBox:
		// Sort based on key if displayBehaviour is based on id
		if (this.sDDLBDisplayBehaviour === sap.ui.comp.smartfilterbar.ControlConfiguration.DISPLAYBEHAVIOUR.idOnly || this.sDDLBDisplayBehaviour === sap.ui.comp.smartfilterbar.ControlConfiguration.DISPLAYBEHAVIOUR.idAndDescription) {
			this._oSorter = new Sorter(this.sKey);
		} else {
			// Sort based on description by default
			this._oSorter = new Sorter(this.sDescription);
		}
	};

	/**
	 * Creates a template for multi-column suggest
	 *
	 * @private
	 */
	ValueListProvider.prototype._createSuggestionTemplate = function() {
		var i = 0, iLen = 0, oTooltip, fSuggestWidth = 0;
		// Create a template
		this._oTemplate = new ColumnListItem();
		if (this._aCols) {
			// remove any exiting columns
			this.oControl.removeAllSuggestionColumns();
			iLen = this._aCols.length;
			for (i = 0; i < iLen; i++) {
				var bDemandPopin = false, sMinScreenWidth = "1px", sWidth = this._aCols[i].width;
				// In the phone mode don't set a fixed width for columns;
				// instead enable demand popin when there are over 2 columns, and not enough space
				if (sap.ui.Device.system.phone) {
					sWidth = undefined;
					if (i >= 2) {
						bDemandPopin = true;
						sMinScreenWidth = (i + 1) * 10 + "rem";
					}
				}
				// add Column headers
				this.oControl.addSuggestionColumn(new Column({
					header: new Text({
						wrapping: false,
						text: this._aCols[i].label,
						tooltip: this._aCols[i].label
					}),
					demandPopin: bDemandPopin,
					popinDisplay: sap.m.PopinDisplay.Inline,
					minScreenWidth: sMinScreenWidth,
					width: sWidth
				}));
				// Tooltip is only possible for certain (string) fields
				// ignore it for all types other than string!
				oTooltip = null;
				if (this._aCols[i].type === "string") {
					oTooltip = {
						path: this._aCols[i].template
					};
				}
				// Add cells to the template
				this._oTemplate.addCell(new Text({
					wrapping: false,
					text: {
						path: this._aCols[i].template,
						type: this._aCols[i].oType
					},
					tooltip: oTooltip
				}));

				// we calculate the sum of all columns width (assumption is that the sWidth is always given in em)
				if (sWidth) {
					fSuggestWidth += parseFloat(sWidth.substring(0, sWidth.length - 2));
				}
			}

			// set the total width of all columns as Width for the suggest popover (this property is not a MaxWidth)
			// The width which we set will be used, only when there is not enough space on the window the popover will be smaller.
			if (fSuggestWidth > 0) {
				this.oControl.setMaxSuggestionWidth(fSuggestWidth + "em");
			}
		}
		this.oControl.data("_hassuggestionTemplate", true);
	};

	/**
	 * Get Text binding path for dropdowns according to the DisplayBehaviour
	 *
	 * @private
	 * @returns {String} the DDLB text binding path
	 */
	ValueListProvider.prototype._getDDLBTextBindingPath = function() {
		return FormatUtil.getFormattedBindingExpressionFromDisplayBehaviour(this.sDDLBDisplayBehaviour, this.sKey, this.sDescription);
	};

	/**
	 * Handle validation/selection of Item
	 *
	 * @private
	 */
	ValueListProvider.prototype._handleSelect = function() {
		var fHandleRowSelect = function(oDataModelRow, fCallback) {
			var sKey, sText, oToken;
			if (oDataModelRow) {
				sKey = oDataModelRow[this.sKey];
				sText = oDataModelRow[this.sDescription];
			}
			// Key found
			if (sKey) {
				// MultiInput field --> Create a token with the selected key
				if (this.oControl.addToken) {
					// Format the text as per the displayBehaviour
					sText = FormatUtil.getFormattedExpressionFromDisplayBehaviour(this.sTokenDisplayBehaviour, sKey, sText);
					oToken = new Token({
						key: sKey,
						text: sText,
						tooltip: sText
					});
					oToken.data("row", oDataModelRow);
					if (fCallback) {
						fCallback(oToken);
					}
					// Clear the ValidationText
					delete this.oControl.__sValidationText;
				} else {
					// normal input field --> just set the value
					this.oControl.setValue(sKey);
					// Manually trigger the change event on sapUI5 control since it doesn't do this internally on setValue!
					this.oControl.fireChange({
						value: sKey,
						validated: true
					});
				}
			}
			// do this last --> since when used in an aggregation - some model updates (setting IN/OUT params to ODataModel) destroy this
			// instance/control!
			this._calculateAndSetFilterOutputData([
				oDataModelRow
			]);

		}.bind(this);
		var fAfterTokenValidate = function() {
			// trigger search on the SmartFilter if search was pending
			if (this.oFilterProvider && this.oFilterProvider._oSmartFilter && this.oFilterProvider._oSmartFilter.bIsSearchPending && this.oFilterProvider._oSmartFilter.search) {
				this.oFilterProvider._oSmartFilter.search();
			}
		}.bind(this);
		// Selection handling has to be done manually for Multi-Column suggest!
		// add Validators --> Only available for Multi-Input
		if (this.oControl.addValidator) {
			this._fValidator = function(oData) {
				if (!this.bInitialised) {
					return;
				}
				var oRow = oData.suggestionObject, oDataModelRow, sInput = oData.text, aFilters = [], mParams;
				// Selection via suggestion row --> no round trip needed
				if (oRow) {
					// Get the actual datamodel row
					oDataModelRow = this.oODataModel.getData(oRow.getBindingContextPath());
					fHandleRowSelect(oDataModelRow, oData.asyncCallback);
				} else if (sInput) {
					// Validation required from backend
					// Check if input needs to be converted to upper case
					if (this.sDisplayFormat === "UpperCase") {
						sInput = sInput.toUpperCase();
					}
					// Check if the entered input text is same as the ValidationText
					if (this.oControl.__sValidationText !== sInput) {
						// Store the input as Validation text
						this.oControl.__sValidationText = sInput;
						// Set flag to indicate token validation is in progress
						this.oControl.__bValidatingToken = true;
						this._calculateFilterInputData();
						if (this.mFilterInputData && this.aFilterField) {
							aFilters = sap.ui.comp.smartfilterbar.FilterProvider.generateFilters(this.aFilterField, this.mFilterInputData);
						}
						aFilters.push(new Filter(this.sKey, sap.ui.model.FilterOperator.EQ, sInput));
						if (this.bSupportBasicSearch) {
							mParams = {
								"search-focus": this.sKey
							};
						}
						this.oODataModel.read("/" + this.sValueListEntitySetName, {
							filters: aFilters,
							urlParameters: mParams,
							success: function(oResponseData, response) {
								var oResultRow = oResponseData;
								// first remove the token validation flag
								delete this.oControl.__bValidatingToken;
								if (oResponseData) {
									// Check if result has rows
									if (oResponseData.results && oResponseData.results.length >= 1) {
										// handle response for creating tokens only if 1 unique result exists!
										if (oResponseData.results.length === 1) {
											oResultRow = oResponseData.results[0];
										}
										if (this.oControl.data("__validationError")) {
											this.oControl.data("__validationError", null);
											this.oControl.setValueState("None");
										}
									} else {
										this.oControl.setValueState("Error");
										this.oControl.data("__validationError", true);
									}
									// If returned row has the key do the selection!
									if (oResultRow && oResultRow[this.sKey]) {
										fHandleRowSelect(oResultRow, oData.asyncCallback);
									}
								}
								// Trigger after token validation handling
								fAfterTokenValidate();
							}.bind(this),
							error: function() {
								// Clear previous validation error state if current validation fails!
								if (this.oControl.data("__validationError")) {
									this.oControl.setValueState("None");
								}
								// Remove the token validation flag
								delete this.oControl.__bValidatingToken;
								// Trigger after token validation handling
								fAfterTokenValidate();
							}.bind(this)
						});
					} else {
						// Re-set the error state if same value is entered again!
						if (this.oControl.data("__validationError")) {
							this.oControl.setValueState(sap.ui.core.ValueState.Error);
						}
					}
				}
			}.bind(this);
			this.oControl.addValidator(this._fValidator);
		} else if (this.oControl.attachSuggestionItemSelected) {
			this._fSuggestionItemSelected = function(oEvent) {
				var oRow = oEvent.getParameter("selectedRow"), oDataModelRow;
				// MultiColumn Suggest
				if (oRow) {
					// Get the actual datamodel row
					oDataModelRow = oRow.getModel().getData(oRow.getBindingContextPath());
					fHandleRowSelect(oDataModelRow);
				}
			};
			// Single-Input --> just enable selection handling
			this.oControl.attachSuggestionItemSelected(this._fSuggestionItemSelected);
		}
		// custom result filter function for tabular suggestions - selection text;
		// the returned result will be shown on the input when the user uses the arrow key on suggest
		this.oControl.setRowResultFunction(function(oSelectedItem) {
			var oContext, sResult = "";
			if (oSelectedItem) {
				oContext = oSelectedItem.getBindingContext();
			}
			if (oContext && this.sKey) {
				sResult = oContext.getProperty(this.sKey);
			}
			return sResult;
		}.bind(this));
	};

	/**
	 * Bind the control to internally read the data (ODataModel takes care of this) from backend with optional search text to filter data
	 *
	 * @param {object} sSearchText - the optional search text
	 * @private
	 */
	ValueListProvider.prototype._fetchData = function(sSearchText) {
		var mParams = {}, aFilters = [], length, oEvents;
		if (this.bTypeAheadEnabled) {
			// Convert search text to UpperCase if displayFormat = "UpperCase"
			if (sSearchText && this.sDisplayFormat === "UpperCase") {
				sSearchText = sSearchText.toUpperCase();
			}
			if (this.bSupportBasicSearch) {
				mParams["custom"] = {
					"search-focus": this.sKey,
					"search": sSearchText
				};
			}
			this._calculateFilterInputData();
			if (this.mFilterInputData && this.aFilterField) {
				aFilters = sap.ui.comp.smartfilterbar.FilterProvider.generateFilters(this.aFilterField, this.mFilterInputData, {
					dateSettings: this._oDateFormatSettings
				});
			}
			// If SearchSupported = false; create a $filter for the keyfield with a StartsWith operator for the typed in/search text
			if (!this.bSupportBasicSearch) {
				aFilters.push(new Filter(this.sKey, sap.ui.model.FilterOperator.StartsWith, sSearchText));
			}
			// Restrict to 10 records for type Ahead
			length = 10;
			// Hide the Show All Items button if the number if items is less than the length (restriction)
			oEvents = {
				dataReceived: function(oEvent) {
					var oBinding = oEvent.getSource(), iBindingLength;
					if (oBinding) {
						iBindingLength = oBinding.getLength();
						if (iBindingLength && iBindingLength <= length) {
							this.oControl.setShowTableSuggestionValueHelp(false);
						} else {
							this.oControl.setShowTableSuggestionValueHelp(true);
						}
					}
				}.bind(this)
			};
		}

		if (this.aSelect && this.aSelect.length) {
			mParams["select"] = this.aSelect.toString();
		}

		// Bind the specified aggregation with valueList path in the model
		this.oControl.bindAggregation(this.sAggregationName, {
			path: "/" + this.sValueListEntitySetName,
			length: length,
			parameters: mParams,
			filters: aFilters,
			sorter: this._oSorter,
			events: oEvents,
			template: this._oTemplate
		});
	};

	/**
	 * Destroys the object
	 */
	ValueListProvider.prototype.destroy = function() {
		if (this.oControl) {
			if (this.oControl.detachSuggest) {
				this.oControl.detachSuggest(this._fSuggest);
				this._fSuggest = null;
			}
			if (this.oControl.removeValidator) {
				this.oControl.removeValidator(this._fValidator);
				this._fValidator = null;
			} else if (this.oControl.detachSuggestionItemSelected) {
				this.oControl.detachSuggestionItemSelected(this._fSuggestionItemSelected);
				this._fSuggestionItemSelected = null;
			}
			this.oControl.unbindAggregation(this.sAggregationName);
			if (this.oControl.removeAllSuggestionColumns) {
				this.oControl.removeAllSuggestionColumns();
			}
			this.oControl.data("_hassuggestionTemplate", false);
			delete this.oControl.__sValidationText;
			delete this.oControl.__bValidatingToken;
		}
		BaseValueListProvider.prototype.destroy.apply(this, arguments);
		// Destroy other local data
		if (this.oJsonModel) {
			this.oJsonModel.destroy();
			this.oJsonModel = null;
		}
		this._oTemplate = null;
		this.sAggregationName = null;
		this.bTypeAheadEnabled = null;
		this._oSorter = null;
	};

	return ValueListProvider;

}, /* bExport= */true);

}; // end of sap/ui/comp/providers/ValueListProvider.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.ControlFactoryBase') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

/**
 * Base class for factory implementations that create controls that are hosted by <code>sap.ui.comp.SmartField</code>.
 * 
 * @private
 * @name sap.ui.comp.smartfield.ControlFactoryBase
 * @author SAP SE
 * @version 1.36.12
 * @since 1.28.0
 * @param {jquery.sap.global} jQuery a reference to the jQuery implementation.
 * @param {sap.ui.base.Object} BaseObject a reference to the base object implementation.
 * @param {sap.ui.comp.providers.ValueHelpProvider} ValueHelpProvider a reference to the value help provider implementation.
 * @param {sap.ui.comp.providers.ValueListProvider} ValueListProvider a reference to the value list provider implementation.
 * @param {sap.ui.comp.smartfield.BindingUtil} BindingUtil a reference to the binding utility implementation.
 * @returns {sap.ui.comp.smartfield.ControlFactoryBase} new control factory instance.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.ControlFactoryBase'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/ControlFactoryBase",[
	"jquery.sap.global", "sap/ui/base/Object", "sap/ui/comp/util/FormatUtil", "sap/ui/comp/providers/ValueHelpProvider", "sap/ui/comp/providers/ValueListProvider", "sap/ui/comp/smartfield/BindingUtil"
], function(jQuery, BaseObject, FormatUtil, ValueHelpProvider, ValueListProvider, BindingUtil) {
	"use strict";

	/**
	 * @private
	 * @constructor
	 * @param {sap.ui.model.Model} oModel the model currently used.
	 * @param {sap.ui.core.Control} oParent the parent control.
	 */
	var ControlFactoryBase = BaseObject.extend("sap.ui.comp.smartfield.ControlFactoryBase", {
		constructor: function(oModel, oParent) {
			BaseObject.apply(this, arguments);
			this.sName = "ControlFactoryBase";
			this._oModel = oModel;
			this._oParent = oParent;
			this._oBinding = new BindingUtil();
			this._aProviders = [];
			this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp");
		}
	});

	/**
	 * Creates a control instance.
	 * 
	 * @param {boolean} bBlockSmartLinkCreation if <code>true</code>, a <code>SmartLink</code> will not be created.
	 * @returns {sap.ui.core.Control} the new control instance or <code>null</code>, if no control could be determined.
	 * @public
	 */
	ControlFactoryBase.prototype.createControl = function(bBlockSmartLinkCreation) {
		var sMethod, oControl;

		sMethod = this._getCreator(bBlockSmartLinkCreation);

		if (sMethod) {
			oControl = this[sMethod]();

			this._addAriaLabelledBy(oControl);

			if (oControl && oControl.onCreate) {
				this[oControl.onCreate](oControl.control, oControl.params);
			}
		}

		return oControl;
	};

	ControlFactoryBase.prototype._addAriaLabelledBy = function(oControl) {
		if ((this._oParent.getControlContext() === sap.ui.comp.smartfield.ControlContextType.None) || (this._oParent.getControlContext() === sap.ui.comp.smartfield.ControlContextType.Form) || (this._oParent.getControlContext() === sap.ui.comp.smartfield.ControlContextType.SmartFormGrid)) {

			if (oControl && oControl.control.addAriaLabelledBy && this._oParent.getAriaLabelledBy().length > 0) {
				oControl.control.removeAllAriaLabelledBy();
				this._oParent.getAriaLabelledBy().forEach(function(vAriaLabelledBy) {
					oControl.control.addAriaLabelledBy(vAriaLabelledBy);
				});
			}
		}
	};

	/**
	 * Adds validations to the given control.
	 * 
	 * @param {sap.ui.core.Control} oControl the given control.
	 * @param {string} sMethod an optional method name of a method to be invoked on the parent smart field to notify it of the current state.
	 * @public
	 */
	ControlFactoryBase.prototype.addValidations = function(oControl, sMethod) {
		var fState, fError, that = this;

		fState = function(sState, oEvent) {
			var sMessage, oException, oSource = oEvent.getSource();

			if (oSource) {
				if (oSource.setValueState) {
					oSource.setValueState(sState);
				}

				oException = oEvent.getParameter("exception");

				if (oException) {
					sMessage = oException.message;
				}

				// check also for an event parameter called message.
				if (!sMessage) {
					sMessage = oEvent.getParameter("message");
				}

				if (oSource.setValueStateText) {
					oSource.setValueStateText(sMessage);
				}
			}

			if (sMethod) {
				that._oParent[sMethod](sState === sap.ui.core.ValueState.Error);
			}
		};
		fError = function(oEvent) {
			fState(sap.ui.core.ValueState.Error, oEvent);
		};

		// attach to the errors.
		oControl.attachFormatError(fError);
		oControl.attachParseError(fError);
		oControl.attachValidationError(fError);
		oControl.attachValidationSuccess(function(oEvent) {
			fState(sap.ui.core.ValueState.None, oEvent);
		});
	};

	/**
	 * Retrieves the displayBahaviour from the configuration
	 * 
	 * @param {string} sDefaultDisplayMode determines the default display mode
	 * @returns {String} relevant displayBehaviour option or <code>null</code>
	 * @private
	 */
	ControlFactoryBase.prototype._getDisplayBehaviourConfiguration = function(sDefaultDisplayMode) {
		var sDisplay = null;

		// check the configuration for display behavior.
		var oConfig = this._oParent.getConfiguration();
		if (oConfig) {
			sDisplay = oConfig.getDisplayBehaviour();
		}

		if (!sDisplay && this._oMetaData && this._oMetaData.entityType) {
			sDisplay = this._oHelper.oAnnotation.getTextArrangement(this._oMetaData.property.property, this._oMetaData.entityType);
		}

		if (!sDisplay) {
			sDisplay = this._oParent.data(sDefaultDisplayMode);
		}

		return sDisplay;
	};

	/**
	 * Format a value according to the displayBehaviour settings
	 * 
	 * @param {string} sDefaultDisplayMode determines the default display mode
	 * @param {string} sKey the main value
	 * @param {string} sDescription dependent value
	 * @returns {String} relevant displayBehaviour option or <code>null</code>
	 * @private
	 */
	ControlFactoryBase.prototype._formatDisplayBehaviour = function(sDefaultDisplayMode, sKey, sDescription) {
		var sDisplay = this._getDisplayBehaviourConfiguration(sDefaultDisplayMode);

		if (sDefaultDisplayMode === "defaultCheckBoxDisplayBehaviour") {
			return this._getFormattedExpressionFromDisplayBehaviour(sDisplay, sKey);
		}

		return FormatUtil.getFormattedExpressionFromDisplayBehaviour(sDisplay || "idOnly", sKey, sDescription);
	};

	ControlFactoryBase.prototype._getFormattedExpressionFromDisplayBehaviour = function(sDisplay, bValue) {
		var sKey = "";

		switch (sDisplay) {
			case "OnOff":
				sKey = bValue ? "SMARTFIELD_CB_ON" : "SMARTFIELD_CB_OFF";
				break;
			case "TrueFalse":
				sKey = bValue ? "SMARTFIELD_CB_TRUE" : "SMARTFIELD_CB_FALSE";
				break;
			// case "YesNo": sKey = bValue ? "SMARTFIELD_CB_YES" : "SMARTFIELD_CB_NO"; break;
			default:
				sKey = bValue ? "SMARTFIELD_CB_YES" : "SMARTFIELD_CB_NO";
				break;
		}

		return this._oRb.getText(sKey);
	};

	/**
	 * Checks whether an annotation for value help exists and adds type-ahead and value help.
	 * 
	 * @param {sap.ui.core.Control} oControl the new control.
	 * @param {object} oProperty the OData property.
	 * @param {object} oValueHelp the value help configuration.
	 * @param {object} oValueHelp.annotation the value help annotation.
	 * @param {string} oValueHelp.aggregation the aggregation to attach the value list to.
	 * @param {boolean} oValueHelp.noDialog if set to <code>true</code> the creation of a value help dialog is omitted.
	 * @param {boolean} oValueHelp.noTypeAhead if set to <code>true</code> the type ahead functionality is omitted.
	 * @param {string} oValueHelp.dialogtitle title for the value help dialog.
	 * @param {sap.ui.model.odata.ODataModel} oModel the OData model currently used
	 * @param {function} fOnChange optional event handler for change event of value list provider and value help provider
	 * @public
	 */
	ControlFactoryBase.prototype.addValueHelp = function(oControl, oProperty, oValueHelp, oModel, fOnChange) {
		var oValueHelpDlg, oValueList, sDisplay, oDateFormatSettings;

		if (oValueHelp.annotation && (oProperty["sap:value-list"] || oProperty["com.sap.vocabularies.Common.v1.ValueList"])) {
			// check the configuration for display behavior.
			sDisplay = this._getDisplayBehaviourConfiguration("defaultDropDownDisplayBehaviour");
			oDateFormatSettings = this._oParent.data("dateFormatSettings");

			// add dialog, if necessary.
			if (!oValueHelp.noDialog) {
				if (oControl.setFilterSuggests) {
					oControl.setFilterSuggests(false);
				}

				// create the value help provider.
				oValueHelpDlg = new ValueHelpProvider({
					loadAnnotation: true,
					fullyQualifiedFieldName: oValueHelp.annotation,
					metadataAnalyser: oValueHelp.analyser,
					control: oControl,
					model: oModel,
					preventInitialDataFetchInValueHelpDialog: true,
					dateFormatSettings: oDateFormatSettings,
					takeOverInputValue: false,
					supportMultiSelect: false,
					supportRanges: false,
					fieldName: oProperty.name,
					title: oValueHelp.dialogtitle,
					displayBehaviour: sDisplay
				});

				// register for change event.
				if (fOnChange) {
					oValueHelpDlg.attachValueListChanged(fOnChange);
				}

				this._aProviders.push(oValueHelpDlg);

				// create the value list provider.
				if (oControl.setShowValueHelp) {
					oControl.setShowValueHelp(true);
				}
			}

			oValueList = new ValueListProvider({
				control: oControl,
				typeAheadEnabled: !oValueHelp.noTypeAhead,
				aggregation: oValueHelp.aggregation,
				loadAnnotation: true,
				fullyQualifiedFieldName: oValueHelp.annotation,
				metadataAnalyser: oValueHelp.analyser,
				model: oModel,
				dateFormatSettings: oDateFormatSettings,
				displayBehaviour: sDisplay
			});

			if (!oValueHelp.noTypeAhead) {
				if (oControl.setShowSuggestion) {
					oControl.setShowSuggestion(true);
				}
			}

			// register for change event.
			if (fOnChange) {
				oValueList.attachValueListChanged(fOnChange);
			}

			this._aProviders.push(oValueList);
		}
	};

	/**
	 * Returns a binding for a given attribute, if no binding is specified a fixed value or <code>null</code>, which is deduced from the
	 * information maintained on the parent.
	 * 
	 * @param {string} sName the name of the attribute
	 * @returns {object} binding for a given attribute, if no binding is specified a fixed value or <code>null</code>.
	 * @public
	 */
	ControlFactoryBase.prototype.getAttribute = function(sName) {
		var oInfo = this._oParent.getBindingInfo(sName);

		if (oInfo) {
			return this._oBinding.toBindingPath(oInfo);
		}

		return this._oParent["get" + sName.substring(0, 1).toUpperCase() + sName.substring(1)]();
	};

	/**
	 * Returns the standard attributes used during creation of a control.
	 * 
	 * @param {string} sAttribute the "leading" attribute, can be <code>null</code>.
	 * @param {object} oTypeInfo optional type information.
	 * @param {map} mNames the names of the attributes to be set.
	 * @param {object} oEvent the optional description of an event to register to and raise the <code>change</code> event on the
	 *        <code>SmartField</code>.
	 * @param {string} oEvent.event the name of an event to register to and raise the <code>change</code> event on the <code>SmartField</code>.
	 * @param {string} oEvent.parameter the name of a parameter to send with the <code>change</code> event on the <code>SmartField</code>.
	 * @returns {map} the standard attributes used during creation of a control.
	 * @public
	 */
	ControlFactoryBase.prototype.createAttributes = function(sAttribute, oTypeInfo, mNames, oEvent) {
		var that = this, n, oInfo, mAttributes = {};

		// check the standard attributes, whether they are bound or not.
		for (n in mNames) {
			oInfo = this._oParent.getBindingInfo(n);

			if (oInfo) {
				mAttributes[n] = this._oBinding.toBinding(oInfo);
			} else {
				mAttributes[n] = this._oParent["get" + n.substring(0, 1).toUpperCase() + n.substring(1)]();
			}
		}

		// map the value binding of the parent smart field to the child control's attribute.
		if (sAttribute) {
			mAttributes[sAttribute] = {
				model: this._oMetaData.model,
				path: this._oMetaData.path,
				type: oTypeInfo ? this._oTypes.getType(oTypeInfo) : null
			};
		}

		// prepare the event that triggers the parent smart field's change event.
		if (oEvent) {
			mAttributes[oEvent.event] = function(oParam) {
				try {
					that._oParent.fireChange({
						value: oParam.mParameters[oEvent.parameter],
						newValue: oParam.mParameters[oEvent.parameter]
					});
				} catch (ex) {
					jQuery.sap.log.warning(ex);
				}
			};
		}

		// add an optional object binding.
		this.addObjectBinding(mAttributes);

		return mAttributes;
	};

	/**
	 * Maps the bindings for the given attributes and collects.
	 * 
	 * @param {map} mAttributes the standard attributes used during creation of a control.
	 * @param {map} mNames the names of the attributes to be mapped.
	 * @public
	 */
	ControlFactoryBase.prototype.mapBindings = function(mAttributes, mNames) {
		var n, oInfo;

		for (n in mNames) {
			oInfo = this._oParent.getBindingInfo(n);

			if (oInfo) {
				mAttributes[mNames[n]] = this._oBinding.toBinding(oInfo);
			} else {
				mAttributes[mNames[n]] = this._oParent["get" + n.substring(0, 1).toUpperCase() + n.substring(1)]();
			}
		}
	};

	/**
	 * Adds a possibly existing object binding to the attributes.
	 * 
	 * @param {map} mAttributes the attributes to which to add the object binding.
	 * @param {object} oBinding optional object binding.
	 * @public
	 */
	ControlFactoryBase.prototype.addObjectBinding = function(mAttributes, oBinding) {
		if (!oBinding) {
			oBinding = this._oParent.getObjectBinding(this._oMetaData.model);
		}

		if (mAttributes && oBinding) {
			mAttributes.objectBindings = {};
			mAttributes.objectBindings[this._oMetaData.model] = oBinding.sPath;
		}
	};

	/**
	 * Returns format settings, which can be available for the given key.
	 * 
	 * @param {string} sFormat the key identifying the format.
	 * @returns {object} the format settings.
	 * @public
	 */
	ControlFactoryBase.prototype.getFormatSettings = function(sFormat) {
		var mFormat, aCustom, oCustom, len;

		if (sFormat) {
			// check the simple data
			mFormat = this._oParent.data(sFormat);

			// check the custom data as fall-back.
			if (!mFormat) {
				aCustom = this._oParent.getCustomData();

				if (aCustom) {
					len = aCustom.length;

					while (len--) {
						oCustom = aCustom[len];

						if (oCustom.getKey() === sFormat) {
							mFormat = oCustom.getValue();
							break;
						}
					}
				}
			}

			// if we have a format, try to apply it.
			if (mFormat && typeof (mFormat) === "string") {
				try {
					mFormat = JSON.parse(mFormat);
				} catch (ex) {
					return null;
				}
			}
		}

		return mFormat;
	};

	/**
	 * Frees all resources claimed during the life-time of this instance.
	 * 
	 * @public
	 */
	ControlFactoryBase.prototype.destroy = function() {
		var len = this._aProviders.length;

		while (len--) {
			this._aProviders[len].destroy();
		}

		this._oBinding.destroy();
		this._oBinding = null;
		this._oParent = null;
		this._oModel = null;
		this._aProviders = [];

		this._oRb = null;
	};

	return ControlFactoryBase;
}, true);

}; // end of sap/ui/comp/smartfield/ControlFactoryBase.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.JSONControlFactory') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

/**
 * Factory class to create controls that are hosted by <code>sap.ui.comp.SmartField</code>.
 * 
 * @private
 * @name sap.ui.comp.smartfield.JSONControlFactory
 * @author SAP SE
 * @version 1.36.12
 * @since 1.28.0
 * @param {jquery.sap.global} jQuery a reference to the jQuery implementation.
 * @param {sap.m.CheckBox} CheckBox a reference to the check box implementation.
 * @param {sap.m.ComboBox} ComboBox a reference to the combo box implementation.
 * @param {sap.m.DatePicker} DatePicker a reference to the DatePicker implementation.
 * @param {sap.m.Input} Input a reference to the Input implementation.
 * @param {sap.m.Text} Text a reference to the Text implementation.
 * @param {sap.ui.comp.smartfield.ControlFactoryBase} ControlFactoryBase a reference to the control factory base class implementation.
 * @param {sap.ui.comp.smartfield.JSONTypes} JSONTypes a reference to the JSON type implementation.
 * @returns {sap.ui.comp.smartfield.JSONControlFactory} new control factory instance.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.JSONControlFactory'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.CheckBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.ComboBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.DatePicker'); // unlisted dependency retained
jQuery.sap.require('sap.m.Input'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/JSONControlFactory",[ "jquery.sap.global", "sap/m/CheckBox", "sap/m/ComboBox", "sap/m/DatePicker", "sap/m/Input", "sap/m/Text", "sap/ui/comp/smartfield/ControlFactoryBase", "sap/ui/comp/smartfield/JSONTypes" ], function(jQuery, CheckBox, ComboBox, DatePicker, Input, Text, ControlFactoryBase, JSONTypes) {
	"use strict";

	/**
	 * @private
	 * @constructor
	 * @param {sap.ui.model.json.JSONModel} oModel the JSON model currently used.
	 * @param {sap.ui.core.Control} oParent the parent control.
	 * @param {object} oMetaData the meta data used to initialize the factory.
	 * @param {object} oMetaData.model the name of the model.
	 * @param {object} oMetaData.path the path identifying the JSON property.
	 */
	var JSONControlFactory = ControlFactoryBase.extend("sap.ui.comp.smartfield.JSONControlFactory", {
		constructor: function(oModel, oParent, oMetaData) {
			ControlFactoryBase.apply(this, [
				oModel, oParent
			]);
			this.sName = "JSONControlFactory";
			this._oMetaData = oMetaData;
			this._oTypes = new JSONTypes();
		}
	});

	/**
	 * Returns the name of a method to create a control.
	 * 
	 * @returns {string} the name of the factory method to create the control.
	 * @private
	 */
	JSONControlFactory.prototype._getCreator = function() {
		var mMethods = {
			"Boolean": "_createBoolean",
			"Date": "_createDate",
			"DateTime": "_createString",
			"Float": "_createString",
			"Integer": "_createString",
			"String": "_createString"
		};

		if (!this._oParent.getEditable() || !this._oParent.getEnabled()) {
			if (this._oParent.getJsontype() === "Boolean") {
				return "_createBoolean";
			}

			return "_createDisplay";
		}

		return mMethods[this._oParent.getJsontype()] || "_createString";
	};

	/**
	 * Creates a control instance to edit a model property of type <code>String</code>, <code>Integer</code> or <code>Float</code>. Either
	 * <code>sap.m.Input</code> is returned or <code>sap.m.Combobox</code> depending on configuration.
	 * 
	 * @returns {sap.ui.core.Control} the new control instance.
	 * @private
	 */
	JSONControlFactory.prototype._createString = function() {
		var bNoValueHelp, bNoTypeAhead, mNames = {
			width: true,
			textAlign: true,
			placeholder: true,
			name: true,
			maxLength: true
		};

		// get the configuration properties.
		bNoValueHelp = !this._oParent.getShowValueHelp();
		bNoTypeAhead = !this._oParent.getShowSuggestion();
		
		// create and return a combo box, if it has been configured.
		if (bNoValueHelp) {
			if (((this._oParent.data("controlType") === "dropDownList"))) {
				return this._createComboBox({
					annotation: null,
					noDialog: bNoValueHelp,
					noTypeAhead: true
				});
			}
		}

		return {
			control: new Input(this.createAttributes("value", this._oParent.getJsontype(), mNames, {
				event: "change",
				parameter: "value"
			})),
			onCreate: "_onCreate",
			noDialog: bNoValueHelp,
			noTypeAhead: bNoTypeAhead,
			params: {
				getValue: "getValue"
			}
		};
	};

	/**
	 * Creates an instance of <code>sap.m.Combobox</code> based on OData meta data.
	 * 
	 * @param {object} oValueHelp the value help configuration.
	 * @param {object} oValueHelp.annotation the value help annotation.
	 * @param {object} oValueHelp.noDialog if set to <code>true</code> the creation of a value help dialog is omitted.
	 * @param {object} oValueHelp.noTypeAhead if set to <code>true</code> the type ahead functionality is omitted.
	 * @returns {sap.m.Combobox} the new control instance.
	 * @private
	 */
	JSONControlFactory.prototype._createComboBox = function(oValueHelp) {
		var mNames = {
			width: true,
			textAlign: true,
			placeholder: true,
			name: true
		};

		return {
			control: new ComboBox(this.createAttributes("value", this._oParent.getJsontype(), mNames, {
				event: "selectionChange",
				parameter: "selectedItem"
			})),
			onCreate: "_onCreate",
			params: {
				valuehelp: oValueHelp,
				getValue: "getValue"
			}
		};
	};

	/**
	 * Creates a control instance to edit a model property that is of type <code>Boolean</code>
	 * 
	 * @returns {sap.m.CheckBox} the new control instance.
	 * @private
	 */
	JSONControlFactory.prototype._createBoolean = function() {
		var mAttributes = this.createAttributes("selected", this._oParent.getJsontype(), {}, {
			event: "select",
			parameter: "selected"
		});
		mAttributes.enabled = this._oParent.getEditable() && this._oParent.getEnabled();

		return {
			control: new CheckBox(mAttributes),
			onCreate: "_onCreate",
			params: {
				getValue: "getSelected"
			}
		};
	};

	/**
	 * Creates a control instance to edit a model property of type <code>Date</code>.
	 * 
	 * @returns {sap.m.DatePicker} the new control instance.
	 * @private
	 */
	JSONControlFactory.prototype._createDate = function() {
		var mNames = {
			width: true,
			textAlign: true,
			placeholder: true,
			name: true
		};

		return {
			control: new DatePicker(this.createAttributes("value", this._oParent.getJsontype(), mNames, {
				event: "change",
				parameter: "value"
			})),
			onCreate: "_onCreate",
			params: {
				getValue: "getValue"
			}
		};
	};

	/**
	 * Creates a control instance for display-only use cases.
	 * 
	 * @returns {sap.m.Text} the new control instance.
	 * @private
	 */
	JSONControlFactory.prototype._createDisplay = function() {
		var mNames = {
			width: true,
			textAlign: true
		};

		return {
			control: new Text(this.createAttributes("text", this._oParent.getJsontype(), mNames))
		};
	};

	/**
	 * Event handler, that is invoked after successful creation of a nested control.
	 * 
	 * @param {sap.ui.core.Control} oControl the new control.
	 * @param {map} mParams parameters to further define the behavior of the event handler.
	 * @private
	 */
	JSONControlFactory.prototype._onCreate = function(oControl, mParams) {
		var sGetValue;

		// place validations.
		this.addValidations(oControl, "setSimpleClientError");

		// add optional getValue call-back.
		if (mParams.getValue) {
			sGetValue = mParams.getValue;
			mParams.getValue = function() {
				return oControl[sGetValue]();
			};
		}
	};

	/**
	 * Frees all resources claimed during the life-time of this instance.
	 * 
	 * @public
	 */
	JSONControlFactory.prototype.destroy = function() {
		this._oTypes.destroy();
		this._oTypes = null;
		this._oMetaData = null;

		ControlFactoryBase.prototype.destroy.apply(this, []);
	};

	return JSONControlFactory;
}, true);

}; // end of sap/ui/comp/smartfield/JSONControlFactory.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.ODataControlFactory') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

/**
 * Factory class to create controls that are hosted by <code>sap.ui.comp.SmartField</code>.
 * 
 * @private
 * @name sap.ui.comp.smartfield.ODataControlFactory
 * @author SAP SE
 * @version 1.36.12
 * @since 1.28.0
 * @param {jquery.sap.global} jQuery a reference to the jQuery implementation
 * @param {sap.m.TextArea} TextArea a reference to the MultiLiteText implementation
 * @param {sap.m.Link} Link a reference to the link implementation
 * @param {sap.m.CheckBox} CheckBox a reference to the check box implementation
 * @param {sap.m.ComboBox} ComboBox a reference to the combo box implementation
 * @param {sap.m.DatePicker} DatePicker a reference to the DatePicker implementation
 * @param {sap.m.FlexItemData} FlexItemData a reference to the FlexItemData implementation
 * @param {FlexJustifyContent} FlexJustifyContent a reference to the FlexJustifyContent implementation
 * @param {sap.m.HBox} HBox a reference to the HBox implementation
 * @param {sap.m.Input} Input a reference to the Input implementation
 * @param {sap.m.InputType} InputType a reference to the InputType implementation
 * @param {sap.m.Select} Select a reference to the select implementation
 * @param {sap.m.Text} Text a reference to the Text implementation
 * @param {sap.ui.core.Renderer} Renderer a reference to the ui.core.Renderer implementation
 * @param {sap.ui.core.TextAlign} TextAlign a reference to the ui.core.TextAlign implementation
 * @param {sap.ui.comp.navpopover.SmartLink} SmartLink a reference to the smart link implementation
 * @param {sap.ui.comp.smartfield.ControlFactoryBase} ControlFactoryBase a reference to the control factory base class implementation
 * @param {sap.ui.comp.smartfield.FieldControl} FieldControl a reference to the field control implementation
 * @param {sap.ui.comp.smartfield.ODataControlSelector} ODataControlSelector a reference to the OData control selector implementation
 * @param {sap.ui.comp.smartfield.ODataHelper} ODataHelper a reference to the OData helper implementation
 * @param {sap.ui.comp.smartfield.ODataTypes} ODataTypes a reference to the OData types implementation
 * @param {sap.m.ObjectNumber} ObjectNumber a reference to the object number implementation
 * @param {sap.m.ObjectIdentifier} ObjectIdentifier a reference to the object identifier implementation
 * @param {sap.m.ObjectStatus} ObjectStatus a reference to the object status implementation
 * @return {sap.ui.comp.smartfield.ODataControlFactory} new control factory instance.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.ODataControlFactory'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.TextArea'); // unlisted dependency retained
jQuery.sap.require('sap.m.Link'); // unlisted dependency retained
jQuery.sap.require('sap.m.CheckBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.ComboBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.DatePicker'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexItemData'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexJustifyContent'); // unlisted dependency retained
jQuery.sap.require('sap.m.HBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.Input'); // unlisted dependency retained
jQuery.sap.require('sap.m.InputType'); // unlisted dependency retained
jQuery.sap.require('sap.m.Select'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.TextAlign'); // unlisted dependency retained
jQuery.sap.require('sap.m.ObjectNumber'); // unlisted dependency retained
jQuery.sap.require('sap.m.ObjectIdentifier'); // unlisted dependency retained
jQuery.sap.require('sap.m.ObjectStatus'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ValueState'); // unlisted dependency retained
jQuery.sap.require('sap.m.TimePicker'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/ODataControlFactory",[
	"jquery.sap.global", "sap/m/TextArea", "sap/m/Link", "sap/m/CheckBox", "sap/m/ComboBox", "sap/m/DatePicker", "sap/m/FlexItemData", "sap/m/FlexJustifyContent", "sap/m/HBox", "sap/m/Input", "sap/m/InputType", "sap/m/Select", "sap/m/Text", "sap/ui/core/Renderer", "sap/ui/core/TextAlign", "sap/ui/comp/navpopover/SmartLink", "./ControlFactoryBase", "./FieldControl", "./ODataControlSelector", "./ODataHelper", "./ODataTypes", "sap/m/ObjectNumber", "sap/m/ObjectIdentifier", "sap/m/ObjectStatus", "sap/ui/core/ValueState", "sap/m/TimePicker"
],

function(jQuery, TextArea, Link, CheckBox, ComboBox, DatePicker, FlexItemData, FlexJustifyContent, HBox, Input, InputType, Select, Text, Renderer, TextAlign, SmartLink, ControlFactoryBase, FieldControl, ODataControlSelector, ODataHelper, ODataTypes, ObjectNumber, ObjectIdentifier, ObjectStatus, ValueState, TimePicker) {
	"use strict";

	/**
	 * @private
	 * @constructor
	 * @param {sap.ui.model.odata.ODataModel} oModel the OData model currently used
	 * @param {sap.ui.core.Control} oParent the parent control
	 * @param {object} oMetaData the meta data used to initialize the factory
	 * @param {string} oMetaData.entitySet the name of the OData entity set
	 * @param {string} oMetaData.model the name of the model
	 * @param {string} oMetaData.path the path identifying the OData property
	 */
	var ODataControlFactory = ControlFactoryBase.extend("sap.ui.comp.smartfield.ODataControlFactory", {
		constructor: function(oModel, oParent, oMetaData) {
			ControlFactoryBase.apply(this, [
				oModel, oParent
			]);
			this.sName = "ODataControlFactory";
			this._oMetaData = {
				annotations: {}
			};

			this._oMeta = oMetaData;
			this._oHelper = new ODataHelper(oModel, this._oBinding);
			this._oFieldControl = new FieldControl(oParent, this._oHelper);
			this._oTypes = new ODataTypes(oParent);
			this._oSelector = new ODataControlSelector(this._oMetaData, oParent, this._oTypes);
			this._bInitialized = false;
			this.bPending = false;
		}
	});

	/**
	 * Initializes the meta data.
	 * 
	 * @param {object} oMetaData the meta data used to initialize the factory
	 * @param {string} oMetaData.entitySet the name of the OData entity set
	 * @param {string} oMetaData.entityType the name of the OData entity type
	 * @param {string} oMetaData.property the name of the OData property
	 * @param {string} oMetaData.model the name of the model
	 * @param {string} oMetaData.path the path identifying the OData property
	 * @private
	 */
	ODataControlFactory.prototype._init = function(oMetaData) {
		// set the name of the model used, binding path of the property (complex or simple), entity set and entity type.
		this._oMetaData.model = oMetaData.model;
		this._oMetaData.path = oMetaData.path;
		this._oMetaData.entitySet = oMetaData.entitySetObject || this._oHelper.oMeta.getODataEntitySet(oMetaData.entitySet);
		this._oMetaData.entityType = oMetaData.entityType || this._oHelper.oMeta.getODataEntityType(this._oMetaData.entitySet.entityType);
		this._oMetaData.navigationPath = oMetaData.navigationPath || null;

		if (this._oModel) {
			// get the property, considering navigation properties and complex types.
			this._oHelper.checkNavigationProperty(this._oMetaData, this._oParent);
			this._oHelper.getProperty(this._oMetaData);

			// make sure that no exceptions occur, if the property is not valid
			// => necessary for extensibility use cases, if an extension field has been deleted and the UI has not yet been adapted.
			if (this._oMetaData.property && this._oMetaData.property.property) {
				// now get the remaining annotations, text, unit of measure and value list.
				this._oMetaData.annotations.text = this._oHelper.getTextProperty2(this._oMetaData);

				this._oMetaData.annotations.uom = this._oHelper.getUnitOfMeasure2(this._oMetaData);
				this._oHelper.getValueListData(this._oMetaData);

				this._oMetaData.annotations.lineitem = this._oHelper.getAnalyzer().getLineItemAnnotation(this._oMetaData.entitySet.entityType);
				this._oHelper.getUOMValueListAnnotationPath(this._oMetaData);
				this._oMetaData.annotations.semantic = this._oHelper.getAnalyzer().getSemanticObjectAnnotationFromProperty(this._oMetaData.property.property);

				if (this._oMetaData.annotations.uom) {
					this._oMetaData.annotations.uom.annotations = {};
					this._oHelper.getValueListData(this._oMetaData.annotations.uom);
				}

				// check for a possibly existing text annotation for the unit in unit of measure.
				this._oHelper.getUOMTextAnnotation(this._oMetaData);
			} else {
				// log the error situation.
				jQuery.sap.log.warning("SmartField: Property " + oMetaData.path + " does not exist", "SmartField: Property " + oMetaData.path + " does not exist", "sap.ui.comp.smartfield.ODataControlFactory");
			}
		} else {
			this._oMetaData.modelObject = oMetaData.modelObject;
			this._oMetaData.property = oMetaData.property;
			this._oMetaData.annotations.text = oMetaData.annotations.text;
			this._oMetaData.annotations.uom = oMetaData.annotations.uom;
			if (this._oMetaData.annotations.uom && !this._oMetaData.annotations.uom.annotations) {
				this._oMetaData.annotations.uom.annotations = {};
			}
			this._oMetaData.annotations.valuelist = oMetaData.annotations.valuelist;
			this._oMetaData.annotations.valuelistType = oMetaData.annotations.valuelistType;
			this._oMetaData.annotations.lineitem = oMetaData.annotations.lineitem;
			this._oMetaData.annotations.semantic = oMetaData.annotations.semantic;
			this._oMetaData.annotations.valuelistuom = oMetaData.annotations.valuelistuom;
		}
	};

	/**
	 * Creates a control instance based on OData meta data for display-only use cases.
	 * 
	 * @return {sap.ui.core.Control} the new control instance.
	 * @private
	 */
	ODataControlFactory.prototype._createEdmDisplay = function() {
		var oConfig, oInnerControl, mAttributes, mOptions, bMasked, bDatePicker, bObjectIdentifier, oTextAnnotation, that = this, mNames = {
			width: true,
			textAlign: true
		};

		// optional call-back to layout the text as unit for unit of measure.
		oConfig = this._oParent.data("configdata");
		var bIgnoreComboBox = ((oConfig && (oConfig.isInnerControl !== true)) || (this._oParent.getControlContext() === "table") || (this._oParent.getControlContext() === "responsiveTable"));

		// check for combo box.
		var oCheck = this._oSelector.checkComboBox(bIgnoreComboBox);

		if (oCheck && oCheck.combobox) {
			return this._createComboBox({
				annotation: oCheck.annotation,
				noDialog: true,
				noTypeAhead: true
			}, true);
		}

		// check for link
		if (this._checkLink() && !this._oSelector.useObjectIdentifier()) {
			return this._createLink();
		}

		// prepare the attributes.
		mAttributes = this.createAttributes(null, this._oMetaData.property, mNames);

		// check for date and format correctly.
		bDatePicker = this._oSelector.checkDatePicker();

		if (bDatePicker) {
			mOptions = this.getFormatSettings("dateFormatSettings");
			mAttributes.text = {
				model: this._oMetaData.model,
				path: this._oMetaData.path,
				type: this._oTypes.getType(this._oMetaData.property, mOptions, {
					displayFormat: "Date"
				})
			};
		} else {
			mAttributes.text = {
				model: this._oMetaData.model,
				path: this._oHelper.getEdmDisplayPath(this._oMetaData),
				type: this._oTypes.getType(this._oMetaData.property)
			};
		}

		if (this._oMetaData.property && this._oMetaData.property.property) {
			// password handling
			bMasked = this._oHelper.oAnnotation.isMasked(this._oMetaData.property.property);

			if (bMasked) {
				mAttributes.text.formatter = function(oText) {
					if (oText) {
						return oText.replace(new RegExp(".", "igm"), "*");
					}
					return oText;
				};
			}

			// check for a text annotation.
			oTextAnnotation = this._oHelper.oAnnotation.getText(this._oMetaData.property.property);

			if (oTextAnnotation) {
				bObjectIdentifier = this._oSelector.useObjectIdentifier(bDatePicker, bMasked);

				if (bObjectIdentifier) {
					delete mAttributes.width;
					delete mAttributes.textAlign;
					mAttributes.text = {
						path: this._oMetaData.path
					};
					mAttributes.title = {
						path: this._oHelper.getEdmDisplayPath(this._oMetaData)
					};
					if (this._oParent.hasListeners("press")) {
						mAttributes.titleActive = true;
						mAttributes.titlePress = function(oEvent) {
							that._oParent.firePress(oEvent);
						};
					}
				} else {
					if (!(oConfig && (oConfig.isInnerControl === true))) {
						mAttributes.text = {};
						mAttributes.text.parts = [];
						mAttributes.text.parts.push(this._oMetaData.path);
						mAttributes.text.parts.push(this._oHelper.getEdmDisplayPath(this._oMetaData));

						mAttributes.text.formatter = function(sId, sDescription) {
							return that._formatDisplayBehaviour("defaultInputFieldDisplayBehaviour", sId, sDescription);
						};
					}
				}
			} else if (this._oSelector.checkCheckBox()) {
				mAttributes.text.formatter = function(sValue) {
					return that._formatDisplayBehaviour("defaultCheckBoxDisplayBehaviour", sValue);
				};
			}
		}

		if (bObjectIdentifier) {
			oInnerControl = new ObjectIdentifier(mAttributes);
		} else {

			// do not wrap for dates. Incident ID : 1570841150
			if (mAttributes.text.type && (mAttributes.text.type instanceof sap.ui.comp.smartfield.type.DateTime) && mAttributes.text.type.oConstraints && mAttributes.text.type.oConstraints.isDateOnly) {
				mAttributes.wrapping = false;
			}

			if (this._oParent.isContextTable() && sap.ui.getCore().getConfiguration().getRTL()) {
				mAttributes.textDirection = "LTR";
			}

			oInnerControl = new Text(mAttributes);
		}

		// optional call-back to layout the text as unit for unit of measure.
		// moved to the beginning of this function
		// oConfig = this._oParent.data("configdata");

		if (!bObjectIdentifier && oConfig && oConfig.configdata && oConfig.configdata.onText) {
			oConfig.configdata.onText(oInnerControl);
		}

		// create a text box.
		return {
			control: oInnerControl,
			onCreate: "_onCreate",
			params: {
				noValidations: true
			}
		};
	};

	/**
	 * Creates a control instance based on OData meta data.
	 * 
	 * @return {sap.ui.core.Control} the new control instance.
	 * @private
	 */
	ODataControlFactory.prototype._createEdmTime = function() {
		var mAttributes, oControl, mNames = {
			placeholder: true,
			valueState: true,
			valueStateText: true
		};

		// create the default control.
		mAttributes = this.createAttributes("value", this._oMetaData.property, mNames, {
			event: "change"
		});

		// BCP: 1580232741
		mAttributes.valueFormat = "HH:mm:ss";

		oControl = new TimePicker(mAttributes);

		return {
			control: oControl,
			onCreate: "_onCreate",
			params: {
				getValue: "getValue",
				type: {
					type: mAttributes.value.type,
					property: this._oMetaData.property
				}
			}
		};
	};

	/**
	 * Creates a <code>sap.m.ObjectStatus</code> instance.
	 * 
	 * @returns {sap.m.ObjectStatus} the new control instance
	 * @private
	 * @since 1.34.0
	 */
	ODataControlFactory.prototype._createObjectStatus = function() {
		var mAttributes, oTextAnnotation, oInnerControl;

		// prepare the attributes.
		mAttributes = this.createAttributes(null, this._oMetaData.property, null);

		// check for a text annotation.
		oTextAnnotation = this._oHelper.oAnnotation.getText(this._oMetaData.property.property);

		if (oTextAnnotation) {
			mAttributes.text = {
				parts: []
			};
			mAttributes.text.parts.push(this._oHelper.getEdmDisplayPath(this._oMetaData));
		} else {
			mAttributes.text = {
				model: this._oMetaData.model,
				path: this._oMetaData.path,
				type: this._oTypes.getType(this._oMetaData.property)
			};
		}
		this._addObjectStatusAttributes(mAttributes);

		oInnerControl = new ObjectStatus(mAttributes);

		// return the result.
		return {
			control: oInnerControl,
			onCreate: "_onCreate",
			params: {
				getValue: "getText",
				noValidation: true
			}
		};
	};

	/**
	 * Adds the attributes and properties for object status to the overall attributes for control construction.
	 * 
	 * @param {map} mAttributes The overall attributes for control construction
	 * @private
	 */
	ODataControlFactory.prototype._addObjectStatusAttributes = function(mAttributes) {
		var oInfo, oProposal, fCriticality, fIcon, oStatus;

		// check the state and place an icon, if necessary.
		oProposal = this._oParent.getControlProposal();
		oStatus = oProposal.getObjectStatus();

		if (oStatus) {
			oInfo = oStatus.getBindingInfo("criticality");
		}

		fCriticality = function(oCriticality) {
			var mStatesString, mStatesInt;

			mStatesInt = {
				0: ValueState.None,
				1: ValueState.Error,
				2: ValueState.Warning,
				3: ValueState.Success
			};
			mStatesString = {
				"com.sap.vocabularies.UI.v1.CriticalityType/Neutral": ValueState.Neutral,
				"com.sap.vocabularies.UI.v1.CriticalityType/Negative": ValueState.Warning,
				"com.sap.vocabularies.UI.v1.CriticalityType/Critical": ValueState.Error,
				"com.sap.vocabularies.UI.v1.CriticalityType/Positive": ValueState.Success
			};

			if (oCriticality) {
				return mStatesString[oCriticality] || mStatesInt[oCriticality] || ValueState.None;
			}

			return ValueState.None;
		};
		fIcon = function() {
			var sCriticallity, mIcons = {
				"Error": "sap-icon://status-negative",
				"Warning": "sap-icon://status-critical",
				"Success": "sap-icon://status-positive",
				"None": "sap-icon://status-inactive"
			};

			if (oInfo) {
				if (oInfo.formatter) {
					sCriticallity = oInfo.formatter.apply(null, arguments);
				} else {
					sCriticallity = arguments[0];
				}
			} else {
				sCriticallity = oStatus.getCriticality();
			}

			if (sCriticallity) {
				return mIcons[fCriticality(sCriticallity)];
			}

			return null;
		};

		if (oInfo) {
			mAttributes.state = {
				formatter: function() {
					var oCriticality;

					if (oInfo.formatter) {
						oCriticality = oInfo.formatter.apply(null, arguments);
					} else {
						oCriticality = arguments[0];
					}

					return fCriticality(oCriticality);
				},
				parts: oInfo.parts
			};
			mAttributes.icon = {
				formatter: fIcon,
				parts: oInfo.parts
			};
		} else {
			if (oStatus) {
				mAttributes.state = fCriticality(oStatus.getCriticality());
			}

			mAttributes.icon = fIcon();
		}
	};

	/**
	 * Creates a control instance based on OData meta data to edit a model property of type <code>Edm.String</code>. Either
	 * <code>sap.m.Input</code> is returned or <code>sap.m.Combobox</code> depending on configuration.
	 * 
	 * @return {sap.ui.core.Control} the new control instance.
	 * @private
	 */
	ODataControlFactory.prototype._createEdmString = function() {
		var bMasked, bMultiLine, oConfig, mAttributes, oCheck, oControl, mNames = {
			width: true,
			textAlign: true,
			placeholder: true,
			name: true,
			valueState: true,
			valueStateText: true
		};

		// check for check box.
		if (this._oSelector.checkCheckBox()) {
			return this._createCheckBox();
		}

		// check for selection.
		oCheck = this._oSelector.checkSelection();

		if (oCheck.selection) {
			return this._createSelect({
				annotation: oCheck.annotation,
				noDialog: true,
				noTypeAhead: true
			});
		}

		// check for combo box.
		oCheck = this._oSelector.checkComboBox();

		if (oCheck.combobox) {
			return this._createComboBox({
				annotation: oCheck.annotation,
				noDialog: true,
				noTypeAhead: true
			});
		}

		if (this._oMetaData.property && this._oMetaData.property.property) {
			// multi-line-text
			bMultiLine = this._oHelper.oAnnotation.isMultiLineText(this._oMetaData.property.property);
			if (bMultiLine) {
				delete mNames["width"];
				return this._createMultiLineText(mNames);
			}
		}

		// create the default control.
		mAttributes = this.createAttributes("value", this._oMetaData.property, mNames);
		this._addMaxLength(mAttributes, oCheck.annotation);
		oControl = new Input(mAttributes);

		if (this._oMetaData.property && this._oMetaData.property.property) {
			// password entry
			bMasked = this._oHelper.oAnnotation.isMasked(this._oMetaData.property.property);
			if (bMasked) {
				oControl.setType(InputType.Password);
			}

			// add optional upper case conversion.
			this._handleEventingForEdmString(oControl, this._oMetaData.property);
		}

		// optional call-back to layout the text as unit for unit of measure.
		oConfig = this._oParent.data("configdata");

		if (oConfig && oConfig.configdata) {
			if (oConfig.configdata.onInput) {
				oConfig.configdata.onInput(oControl);
			}
		}

		return {
			control: oControl,
			onCreate: "_onCreate",
			params: {
				valuehelp: {
					annotation: oCheck.annotation,
					noDialog: !this._oParent.getShowValueHelp(),
					noTypeAhead: !this._oParent.getShowSuggestion(),
					aggregation: "suggestionRows"
				},
				getValue: "getValue",
				type: {
					type: mAttributes.value.type,
					property: this._oMetaData.property
				}
			}
		};
	};

	/**
	 * Adds the maximum length to the attributes for construction call to create a new hosted control instance.
	 * 
	 * @param {map} mAttributes attributes for construction call to create a new hosted control instance
	 * @param {object} oAnnotation the value list annotation
	 * @private
	 */
	ODataControlFactory.prototype._addMaxLength = function(mAttributes, oAnnotation) {
		var oBind, iMaxLength;

		// determine a possible max length.
		oBind = this._oParent.getBindingInfo("value");
		iMaxLength = this._oTypes.getMaxLength(this._oMetaData.property, oBind);

		if (iMaxLength > 0) {
			// suppress the max length, if a value list annotation and type ahead are configured.
			if (!oAnnotation || !this._oParent.getShowSuggestion()) {
				mAttributes.maxLength = iMaxLength;
			}
		}
	};

	ODataControlFactory.prototype._addAriaLabelledBy = function(oControl) {
		var oInvisibleText, oTargetControl;

		if ((this._oParent.getControlContext() === sap.ui.comp.smartfield.ControlContextType.None) || (this._oParent.getControlContext() === sap.ui.comp.smartfield.ControlContextType.Form) || (this._oParent.getControlContext() === sap.ui.comp.smartfield.ControlContextType.SmartFormGrid)) {
			ControlFactoryBase.prototype._addAriaLabelledBy.apply(this, arguments);

			if (oControl) {
				oTargetControl = oControl.control;
				if (oTargetControl instanceof HBox) {
					if (oTargetControl.getItems().length > 0) {
						oTargetControl = oTargetControl.getItems()[0];
					}
				}
			}

			if (oTargetControl.getAriaLabelledBy && oTargetControl.getAriaLabelledBy().length === 0) {
				if (this._oHelper.oAnnotation.getLabel(this._oMetaData.property.property)) {
					jQuery.sap.require("sap.ui.core.InvisibleText");
					oInvisibleText = new sap.ui.core.InvisibleText({
						text: this._oHelper.oAnnotation.getLabel(this._oMetaData.property.property)
					});
					oTargetControl.addAriaLabelledBy(oInvisibleText);
					this._oParent.addAggregation("_ariaLabelInvisibleText", oInvisibleText);
				}
			}
		}
	};

	/**
	 * Event handler for live changes/changes on the input control. The live-change event handler ensures the value is always in upper case
	 * 
	 * @param {object} oControl attached either to liveChange or change event
	 * @param {object} oProperty the property for which to attach the events
	 * @private
	 */
	ODataControlFactory.prototype._handleEventingForEdmString = function(oControl, oProperty) {
		var bUpperCase, that = this;

		if (oControl) {
			bUpperCase = this._oHelper.oAnnotation.isUpperCase(oProperty.property);

			// handle change event
			oControl.attachChange(function(oEvent) {
				var oNewEvent = {};

				if (oEvent && oEvent.mParameters) {

					var sValue = oEvent.mParameters.value;
					if (bUpperCase && sValue) {
						sValue = sValue.toUpperCase();
						oControl.setValue(sValue);
					}

					oNewEvent.value = sValue;
					oNewEvent.newValue = sValue;

					if (oEvent.mParameters.validated) {
						oNewEvent.validated = oEvent.mParameters.validated;
					}

					if (oControl._oSuggestionPopup && oControl._oSuggestionPopup.isOpen()) {
						if (!oEvent.mParameters.validated) {
							if (oControl._iPopupListSelectedIndex >= 0) {
								return; // ignore that one; change via valuelistprovider will follow as next
							}
						}
					}

					try {
						that._oParent.fireChange(oNewEvent);
					} catch (ex) {
						jQuery.sap.log.warning(ex);
					}
				}
			});
		}
	};

	/**
	 * Creates an instance of <code>sap.m.Combobox</code> based on OData meta data.
	 * 
	 * @param {object} oValueHelp the value help configuration
	 * @param {object} oValueHelp.annotation the value help annotation
	 * @param {boolean} oValueHelp.noDialog if set to <code>true</code> the creation of a value help dialog is omitted
	 * @param {boolean} oValueHelp.noTypeAhead if set to <code>true</code> the type ahead functionality is omitted
	 * @param {boolean} bDisplay if set, the combo box will be rendered as static text
	 * @return {sap.m.Combobox} the new control instance.
	 * @private
	 */
	ODataControlFactory.prototype._createComboBox = function(oValueHelp, bDisplay) {
		var oControl = null, oConfig;

		var mAttributes, mNames = {
			width: true,
			textAlign: true,
			placeholder: true,
			name: true
		};

		// optional call-back to layout the text as unit for unit of measure.
		oConfig = this._oParent.data("configdata");

		mAttributes = this.createAttributes("selectedKey", this._oMetaData.property, mNames);
		mAttributes.selectionChange = this._oHelper.getSelectionChangeHandler(this._oParent);

		// ensure that combo box always takes maximum width.
		if (mAttributes.width === "") {
			mAttributes.width = "100%";
		}

		if (bDisplay) {
			oControl = this._createDisplayedComboBox(mAttributes);
		} else {
			oControl = new ComboBox(mAttributes);
		}

		if (oConfig && oConfig.configdata && oConfig.configdata.onText) {
			oConfig.configdata.onText(oControl);
		}

		return {
			control: oControl,
			onCreate: "_onCreate",
			params: {
				valuehelp: {
					annotation: oValueHelp.annotation,
					aggregation: "items",
					noDialog: oValueHelp.noDialog,
					noTypeAhead: oValueHelp.noTypeAhead
				},
				getValue: "getSelectedKey",
				type: {
					type: mAttributes.selectedKey.type,
					property: this._oMetaData.property
				}
			}
		};
	};

	/**
	 * Creates an instance of <code>sap.m.Combobox</code> but with a adapted sap.m.Text renderer The Rendered is basically taken over and adapted
	 * from sam.m.TextRenderer
	 * 
	 * @param {map} mAttributes control specific attributes
	 * @return {sap.m.Combobox} the new control instance.
	 * @private
	 */
	ODataControlFactory.prototype._createDisplayedComboBox = function(mAttributes) {

		var DisplayComboBox = ComboBox.extend("sap.ui.comp.smartfield.DisplayComboBox", {
			metadata: {
				library: "sap.ui.comp"
			},
			renderer: function(oRm, oControl) {

				// coding adapted from sap.m.Text renderer
				var sWidth = oControl.getWidth(), sText = oControl.getValue(), sTextDir = oControl.getTextDirection(), sTextAlign = oControl.getTextAlign();

				sText.replace(/\r\n/g, "\n"); // normalize text

				// start writing html
				oRm.write("<span");
				oRm.writeControlData(oControl);
				oRm.addClass("sapMText");
				oRm.addClass("sapUiSelectable");

				// write style and attributes
				if (sWidth) {
					oRm.addStyle("width", sWidth);
				} else {
					oRm.addClass("sapMTextMaxWidth");
				}

				if (sTextDir !== sap.ui.core.TextDirection.Inherit) {
					oRm.writeAttribute("dir", sTextDir.toLowerCase());
				}

				if (sTextAlign) {
					sTextAlign = Renderer.getTextAlign(sTextAlign, sTextDir);
					if (sTextAlign) {
						oRm.addStyle("text-align", sTextAlign);
					}
				}

				// finish writing html
				oRm.writeClasses();
				oRm.writeStyles();
				oRm.write(">");

				oRm.writeEscaped(sText);

				// finalize
				oRm.write("</span>");
			},
			updateDomValue: function(sValue) {

				if (!this.isActive()) {
					return this;
				}

				// respect to max length
				sValue = this._getInputValue(sValue);

				// update the DOM value when necessary
				// otherwise cursor can goto end of text unnecessarily
				if (this.$().text() !== sValue) {
					this.$().text(sValue);

					// dom value updated other than value property
					this._bCheckDomValue = true;
				}

				return this;
			}
		});

		return new DisplayComboBox(mAttributes);

	};

	/**
	 * Creates an instance of <code>sap.m.Select</code> based on OData meta data.
	 * 
	 * @param {object} oValueHelp the value help configuration
	 * @param {object} oValueHelp.annotation the value help annotation
	 * @param {boolean} oValueHelp.noDialog if set to <code>true</code> the creation of a value help dialog is omitted
	 * @param {boolean} oValueHelp.noTypeAhead if set to <code>true</code> the type ahead functionality is omitted
	 * @return {sap.m.Select} the new control instance
	 * @private
	 */
	ODataControlFactory.prototype._createSelect = function(oValueHelp) {
		var mAttributes, mNames = {
			width: true,
			name: true
		};

		mAttributes = this.createAttributes("selectedKey", this._oMetaData.property, mNames);
		mAttributes.change = this._oHelper.getSelectionChangeHandler(this._oParent);

		// BCP: 1680012515
		mAttributes.forceSelection = false;

		if (mAttributes.width === "") {
			mAttributes.width = "100%";
		}

		return {
			control: new Select(mAttributes),
			onCreate: "_onCreate",
			params: {
				valuehelp: {
					annotation: oValueHelp.annotation,
					aggregation: "items",
					noDialog: oValueHelp.noDialog,
					noTypeAhead: oValueHelp.noTypeAhead
				},
				getValue: "getSelectedKey",
				type: {
					type: mAttributes.selectedKey.type,
					property: this._oMetaData.property
				}
			}
		};
	};

	/**
	 * Creates an instance of <code>sap.m.CheckBox</code> based on OData meta data. The Edm.Type of the property is <code>Edm.String</code> with
	 * <code>maxLength</code> <code>1</code>.
	 * 
	 * @return {sap.m.CheckBox} the new control instance.
	 * @private
	 */
	ODataControlFactory.prototype._createCheckBox = function() {
		var mAttributes = this.createAttributes("selected", null, {}, {
			event: "select",
			parameter: "selected"
		});
		mAttributes.editable = (this._oParent.getEditable() && this._oParent.getEnabled() && this._oParent.getContextEditable());
		mAttributes.selected.type = this._oTypes.getAbapBoolean();

		return {
			control: new CheckBox(mAttributes),
			onCreate: "_onCreate",
			params: {
				getValue: "getSelected"
			}
		};
	};

	/**
	 * Creates a control instance based on OData meta data to edit a model property of type <code>Edm.DateTime</code>. Either an instance of
	 * <code>sap.m.Input</code> is returned or <code>sap.m.DatePicker</code>, if the attribute <code>display-format</code> of the OData
	 * property the control is bound to has the value <code>Date</code> or the control configuration is accordingly.
	 * 
	 * @return {sap.ui.core.Control} the new control instance.
	 * @private
	 */
	ODataControlFactory.prototype._createEdmDateTime = function() {
		var mAttributes, mOptions, mNames = {
			width: true,
			textAlign: true,
			placeholder: true,
			name: true
		};

		mAttributes = this.createAttributes(null, this._oMetaData.property, mNames, {
			event: "change",
			parameter: "value"
		});
		mOptions = this.getFormatSettings("dateFormatSettings");

		// check whether a date picker has been configured.
		if (this._oSelector.checkDatePicker()) {
			mAttributes.value = {
				path: this._oMetaData.path,
				type: this._oTypes.getType(this._oMetaData.property, mOptions, {
					displayFormat: "Date"
				}),
				model: this._oMetaData.model
			};

			// set display format to keep data type and date picker control "in sync".
			if (mOptions && mOptions.style) {
				mAttributes.displayFormat = mOptions.style;
			}

			return {
				control: new DatePicker(mAttributes),
				onCreate: "_onCreate",
				params: {
					getValue: "getValue",
					type: {
						type: mAttributes.value.type,
						property: this._oMetaData.property
					}
				}
			};
		}

		// create the default control.
		mAttributes.value = {
			path: this._oMetaData.path,
			model: this._oMetaData.model,
			type: this._oTypes.getType(this._oMetaData.property, mOptions)
		};

		return {
			control: new Input(mAttributes),
			onCreate: "_onCreate",
			params: {
				getValue: "getValue",
				type: {
					type: mAttributes.value.type,
					property: this._oMetaData.property
				}
			}
		};
	};

	/**
	 * Creates a control instance based on OData meta data to edit a model property of type <code>Edm.DateTimeOffset</code>.
	 * 
	 * @return {sap.m.DatePicker} the new control instance.
	 * @private
	 */
	ODataControlFactory.prototype._createEdmDateTimeOffset = function() {
		var mOptions, mAttributes, mNames = {
			width: true,
			textAlign: true,
			placeholder: true,
			name: true
		};

		mOptions = this.getFormatSettings("dateFormatSettings");
		mAttributes = this.createAttributes(null, this._oMetaData.property, mNames, {
			event: "change",
			parameter: "value"
		});
		mAttributes.value = {
			model: this._oMetaData.model,
			path: this._oMetaData.path,
			type: this._oTypes.getType(this._oMetaData.property, mOptions)
		};

		return {
			control: new Input(mAttributes),
			onCreate: "_onCreate",
			params: {
				getValue: "getValue",
				type: {
					type: mAttributes.value.type,
					property: this._oMetaData.property
				}
			}
		};
	};

	/**
	 * Creates a control instance based on OData meta data to edit a model property that is of a numeric <code>Edm type</code>.
	 * 
	 * @return {sap.m.Input} the new control instance.
	 * @private
	 */
	ODataControlFactory.prototype._createEdmNumeric = function() {
		var mAttributes, mNames = {
			width: true,
			textAlign: true,
			placeholder: true,
			name: true
		};

		mAttributes = this.createAttributes("value", this._oMetaData.property, mNames, {
			event: "change",
			parameter: "value"
		});

		if (this._oParent.isContextTable() && sap.ui.getCore().getConfiguration().getRTL()) {
			mAttributes.textDirection = "LTR";
		}

		return {
			control: new Input(mAttributes),
			onCreate: "_onCreate",
			params: {
				getValue: "getValue",
				type: {
					type: mAttributes.value.type,
					property: this._oMetaData.property
				}
			}
		};
	};

	/**
	 * Creates a control instance based on OData meta data to edit a model property that represents a unit of measure.
	 * 
	 * @return {sap.m.Input} the new control instance.
	 * @private
	 */
	ODataControlFactory.prototype._createEdmUOM = function() {
		var sPath, oInput, oText, mAttributes, oObject, mParams, oBox, oType, that = this;

		// create the input for the amount.
		mAttributes = this._createEdmUOMAttributes();
		oObject = this._oParent.getObjectBinding(this._oMetaData.model);
		this.addObjectBinding(mAttributes, oObject);

		var bRTLInTable = false;
		if (this._oParent.isContextTable() && sap.ui.getCore().getConfiguration().getRTL()) {
			bRTLInTable = true;
		}

		if (bRTLInTable) {
			mAttributes.textDirection = "LTR";
		}

		oInput = new Input(mAttributes);

		// if the unit is not to be displayed, just return the input for the amount.
		if (this._oParent.data("suppressUnit") === "true") {
			mParams = {
				getValue: "getValue"
			};

			// if not currency-code, the type has to be completed.
			if (!this._oHelper.oAnnotation.isCurrency(this._oMetaData.annotations.uom.property.property)) {
				mParams.type = {
					type: mAttributes.value.type,
					property: this._oMetaData.property
				};
			}

			return {
				control: oInput,
				onCreate: "_onCreate",
				params: mParams
			};
		}

		// if not currency-code, the type has to be completed.
		if (!this._oHelper.oAnnotation.isCurrency(this._oMetaData.annotations.uom.property.property)) {
			oType = {
				type: mAttributes.value.type,
				property: this._oMetaData.property
			};
		}

		// create the unit control as smart field.
		sPath = this._oHelper.getUOMPath(this._oMetaData);
		mAttributes = {
			value: {
				model: this._oMetaData.model,
				path: sPath
			},
			change: this._oHelper.getUOMChangeHandler(this._oParent, true),
			textAlign: this._getEdmUOMTextAlignment()
		// useSideEffects: this._oParent.getUseSideEffects()
		};
		this.addObjectBinding(mAttributes, oObject);
		this.mapBindings(mAttributes, {
			"uomEditable": "editable",
			"uomEnabled": "enabled",
			"uomVisible": "visible",
			"mandatory": "mandatory",
			"contextEditable": "contextEditable"
		});

		oText = new sap.ui.comp.smartfield.SmartField(mAttributes);
		oText.data("configdata", {
			"configdata": {
				isInnerControl: true,
				isUOM: !this._oParent.data("configdata"),
				model: this._oMetaData.model,
				navigationPath: this._oMetaData.annotations.uom.navigationPath || null,
				path: sPath,
				entitySetObject: this._oMetaData.annotations.uom.entitySet,
				entityType: this._oMetaData.annotations.uom.entityType,
				property: this._oMetaData.annotations.uom.property,
				annotations: {
					valuelist: this._oMetaData.annotations.valuelistuom,
					valuelistType: this._oMetaData.annotations.uom.annotations.valuelistType,
					text: this._oMetaData.annotations.textuom
				},
				modelObject: this._oMetaData.modelObject || this._oModel,
				onText: function(oInnerControl) {
					oInput.setLayoutData(new FlexItemData({
						growFactor: 1
					}));
					oText.setLayoutData(new FlexItemData({
						shrinkFactor: 0
					}));

					// mark the unit.
					if (oInnerControl) {
						if (bRTLInTable && oInnerControl.setTextDirection) {
							oInnerControl.setTextDirection("LTR");
						}

						if (that._oParent && (that._oParent.getControlContext() !== 'table') && (that._oParent.getControlContext() !== 'responsiveTable')) {
							oInnerControl.addStyleClass("sapUiCompSmartFieldUnit");
						}
					}
				},
				onInput: function(oInnerControl) {
					oInput.setLayoutData(new FlexItemData({
						growFactor: 1
					// shrinkFactor: 0
					}));
					oText.setLayoutData(new FlexItemData({
						growFactor: 0
					// shrinkFactor: 5
					}));

					// mark the unit.
					if (oInnerControl) {
						if (bRTLInTable && oInnerControl.setTextDirection) {
							oInnerControl.setTextDirection("LTR");
						}

						if (that._oParent && (that._oParent.getControlContext() !== 'table') && (that._oParent.getControlContext() !== 'responsiveTable')) {
							oInnerControl.addStyleClass("sapUiCompSmartFieldUnit");
						}
					}
				}
			}
		});
		oText.data("errorCheck", "setComplexClientErrorSecondOperandNested");

		// return amount and unit in a horizontal box.
		oInput.addStyleClass("smartFieldPaddingRight");
		oInput.addStyleClass("sapUiCompSmartFieldValue");

		oBox = new HBox({
			justifyContent: FlexJustifyContent.End,
			items: [
				oInput, oText
			],
			fitContainer: true,
			width: this._oParent.getWidth()
		});

		// add style for nested smart field, especially display case (text box).
		oBox.addStyleClass("sapUiCompUOM");

		if (this._oParent.isContextTable()) {
			if (bRTLInTable) {
				oBox.addStyleClass("sapUiCompUOMInTableLTR");
			}
			oBox.addStyleClass("sapUiCompUOMInTable");
		}

		return {
			control: oBox,
			onCreate: "_onCreateUOM",
			params: {
				getValue: true,
				valuehelp: true,
				type: oType
			}
		};
	};

	/**
	 * Creates the arguments for construction call for the unit of measure.
	 * 
	 * @return {map} the arguments for construction call for the unit of measure.
	 * @private
	 */
	ODataControlFactory.prototype._createEdmUOMAttributes = function() {
		var mAttributes = {
			textAlign: this._getEdmUOMTextAlignment(),
			placeholder: this.getAttribute("placeholder"),
			name: this.getAttribute("name"),
			change: this._oHelper.getUOMChangeHandler(this._oParent)
		};

		if (this._oMetaData.annotations.uom && this._oHelper.oAnnotation.isCurrency(this._oMetaData.annotations.uom.property.property)) {
			mAttributes.value = {
				parts: [
					{
						path: this._oMetaData.path
					}, {
						path: this._oHelper.getUOMPath(this._oMetaData)
					}
				],
				model: this._oMetaData.model,
				type: this._oTypes.getCurrencyType(this._oMetaData.property)
			};
		} else {
			mAttributes.value = {
				model: this._oMetaData.model,
				path: this._oMetaData.path,
				type: this._oTypes.getType(this._oMetaData.property)
			};
		}

		return mAttributes;
	};

	/**
	 * Creates the <code>textAlignment</code> attribute value for unit of measure use cases.
	 * 
	 * @returns {string} <code>textAlignment</code> attribute value for unit of measure use cases.
	 * @private
	 */
	ODataControlFactory.prototype._getEdmUOMTextAlignment = function() {
		var sAlignment = this.getAttribute("textAlign");

		if (!sAlignment) {
			sAlignment = TextAlign.Initial;
		}

		if (sAlignment === TextAlign.Initial) {
			if (this._oParent.isContextTable()) {
				return TextAlign.End;
			} else {
				return TextAlign.Begin;
			}
		}

		return sAlignment;
	};

	/**
	 * Creates a control instance based on OData meta data to display a model property that represents a unit of measure.
	 * 
	 * @return {sap.m.Input} the new control instance.
	 * @private
	 */
	ODataControlFactory.prototype._createEdmUOMDisplay = function() {
		var oValue, sPath, oObject, mAttributes, sAlign, oBox, oText, that = this;

		// if the unit is not to be displayed, just return the text field for the amount.
		if (this._checkSuppressUnit()) {
			return this._createEdmDisplay();
		}

		// check text alignment
		sAlign = this._getEdmUOMTextAlignment();

		var bRTLInTable = false;
		if (this._oParent.isContextTable() && sap.ui.getCore().getConfiguration().getRTL()) {
			bRTLInTable = true;
		}

		// create the text field for the amount.
		sPath = this._oHelper.getUOMPath(this._oMetaData);
		mAttributes = {
			text: {
				parts: [
					{
						path: this._oMetaData.path,
						type: this._oTypes.getType(this._oMetaData.property)
					}, {
						path: sPath
					}
				],
				model: this._oMetaData.model,
				formatter: this._oTypes.getDisplayFormatter(this._oMetaData.property.property, this._oHelper.oAnnotation.isCurrency(this._oMetaData.property.property)),
				useRawValues: true
			},
			textAlign: sAlign
		};

		if (bRTLInTable) {
			mAttributes.textDirection = "LTR";
		}

		oObject = this._oParent.getObjectBinding(this._oMetaData.model);
		this.addObjectBinding(mAttributes, oObject);
		oValue = new Text(mAttributes);

		// create the unit control as smart field.
		sPath = this._oHelper.getUOMPath(this._oMetaData);
		mAttributes = {
			value: {
				model: this._oMetaData.model,
				path: sPath
			},
			change: this._oHelper.getUOMChangeHandler(this._oParent, true),
			textAlign: this._getEdmUOMTextAlignment()
		// useSideEffects: this._oParent.getUseSideEffects()
		};
		this.addObjectBinding(mAttributes, oObject);
		this.mapBindings(mAttributes, {
			"uomEditable": "editable",
			"uomEnabled": "enabled",
			"uomVisible": "visible",
			"mandatory": "mandatory",
			"contextEditable": "contextEditable"
		});

		oText = new sap.ui.comp.smartfield.SmartField(mAttributes);
		oText.data("configdata", {
			"configdata": {
				isInnerControl: true,
				isUOM: !this._oParent.data("configdata"),
				model: this._oMetaData.model,
				navigationPath: this._oMetaData.annotations.uom.navigationPath || null,
				path: sPath,
				entitySetObject: this._oMetaData.annotations.uom.entitySet,
				entityType: this._oMetaData.annotations.uom.entityType,
				property: this._oMetaData.annotations.uom.property,
				annotations: {
					valuelist: this._oMetaData.annotations.valuelistuom,
					text: this._oMetaData.annotations.textuom
				},
				modelObject: this._oMetaData.modelObject || this._oModel,
				onText: function(oInnerControl) {
					// removed to align horizontally currency and unit.
					// oValue.setLayoutData(new FlexItemData({
					// growFactor: 1
					// }));
					// oText.setLayoutData(new FlexItemData({
					// shrinkFactor: 0
					// }));

					// mark the unit.
					if (oInnerControl) {
						// do not wrap for UoM. Incident ID : 1570841150
						if (oInnerControl.setWrapping) {
							oInnerControl.setWrapping(false);
						}
						if (bRTLInTable && oInnerControl.setTextDirection) {
							oInnerControl.setTextDirection("LTR");
						}
						if (that._oParent && (that._oParent.getControlContext() !== 'table') && (that._oParent.getControlContext() !== 'responsiveTable')) {
							oInnerControl.addStyleClass("sapUiCompSmartFieldUnit");
						}
					}
				},
				onInput: function(oInnerControl) {
					oValue.setLayoutData(new FlexItemData({
						growFactor: 0
					// shrinkFactor: 0
					}));
					oText.setLayoutData(new FlexItemData({
						growFactor: 0
					// shrinkFactor: 5
					}));

					// mark the unit.
					if (oInnerControl) {
						if (bRTLInTable && oInnerControl.setTextDirection) {
							oInnerControl.setTextDirection("LTR");
						}
						if (that._oParent && (that._oParent.getControlContext() !== 'table') && (that._oParent.getControlContext() !== 'responsiveTable')) {
							oInnerControl.addStyleClass("sapUiCompSmartFieldUnit");
						}
					}

				},
				getContextEditable: function() {
					return that._oParent.getContextEditable();
				}
			}
		});
		oText.data("errorCheck", "setComplexClientErrorSecondOperandNested");

		// return amount and unit in a horizontal box.
		oValue.addStyleClass("smartFieldPaddingRight");
		oValue.addStyleClass("sapUiCompSmartFieldValue");

		oBox = new HBox({
			// removed to align horizontally currency and unit.
// justifyContent: FlexJustifyContent.End,
			items: [
				oValue, oText
			],
			fitContainer: true,
			width: this._oParent.getWidth()
		});

		if (this._oParent.isContextTable()) {
			oBox.setJustifyContent("End");
			this._oParent.addStyleClass("sapUiCompUOMInTable");
			if (bRTLInTable) {
				oBox.addStyleClass("sapUiCompUOMInTableLTR");
			}
			oBox.addStyleClass("sapUiCompUOMInTable");
		}

		return {
			control: oBox
		};

/*
 * // check text alignment sAlign = this._getEdmUOMTextAlignment(); // create the text field for the amount. sPath =
 * this._oHelper.getUOMPath(this._oMetaData); mAttributes = { text: { parts: [ { path: this._oMetaData.path, type:
 * this._oTypes.getType(this._oMetaData.property) }, { path: sPath } ], model: this._oMetaData.model, formatter:
 * this._oTypes.getCurrencyDisplayFormatter(this._oHelper.oAnnotation.isCurrency(this._oMetaData.property.property)), useRawValues: true }, textAlign:
 * sAlign }; oObject = this._oParent.getObjectBinding(this._oMetaData.model); this.addObjectBinding(mAttributes, oObject); oValue = new
 * Text(mAttributes); // create the text field for the unit. mAttributes = { text: { path: sPath }, textAlign: sAlign };
 * this.addObjectBinding(mAttributes, oObject); oCurrency = new Text(mAttributes); // mark unit and value.
 * oValue.addStyleClass("sapUiCompSmartFieldValue"); oCurrency.addStyleClass("sapUiCompSmartFieldUnit"); // return amount and unit in a horizontal
 * box. if (sAlign === TextAlign.End) { sJustifyContent = FlexJustifyContent.End; } oBox = new HBox({ items: [ oValue, oCurrency ], width:
 * this._oParent.getWidth() }); if (this._oParent.isContextTable()) { sJustifyContent = FlexJustifyContent.End;
 * oBox.addStyleClass("sapUiCompUOMInTable"); } oBox.setJustifyContent(sJustifyContent); // add style for nested smart field, especially display case
 * (text box). oBox.addStyleClass("sapUiCompUOM"); return { control: oBox };
 */
	};

	/**
	 * Checks whether the unit in unit of measure has to be suppressed in display.
	 * 
	 * @returns {boolean} <code>true</code>, if the unit in unit of measure has to be suppressed in display, <code>false</code> otherwise
	 * @private
	 */
	ODataControlFactory.prototype._checkSuppressUnit = function() {
		var oInfo;

		if (this._oParent.data("suppressUnit") === "true") {
			return true;
		}

		oInfo = this._oParent.getBindingInfo("uomVisible");

		if (!oInfo && !this._oParent.getUomVisible()) {
			return true;
		}

		return false;
	};

	/**
	 * Creates a control instance based on OData meta data to display a model property that represents a unit of measure.
	 * 
	 * @return {sap.m.Input} the new control instance.
	 * @private
	 */
	ODataControlFactory.prototype._createEdmUOMObjectStatus = function() {
		var mAttributes, oObject, oObjectStatus, sPath, fFormat;

		// create the object status for the UOM.
		fFormat = this._oTypes.getDisplayFormatter(this._oMetaData.property.property, this._oHelper.oAnnotation.isCurrency(this._oMetaData.property.property));
		sPath = this._oHelper.getUOMPath(this._oMetaData);
		mAttributes = {
			text: {
				parts: [
					{
						path: this._oMetaData.path,
						type: this._oTypes.getType(this._oMetaData.property)
					}, {
						path: sPath
					}
				],
				formatter: function() {
					var sResult = fFormat.apply(this, arguments);
					return sResult + arguments[1];
				},
				useRawValues: true
			}
		};
		this._addObjectStatusAttributes(mAttributes);

		oObject = this._oParent.getObjectBinding(this._oMetaData.model);
		this.addObjectBinding(mAttributes, oObject);

		// create the control.
		oObjectStatus = new ObjectStatus(mAttributes);

		// add style for nested smart field, especially display case (text box).
		oObjectStatus.addStyleClass("sapUiCompUOM");

		return {
			control: oObjectStatus
		};
	};

	/**
	 * Creates a control instance based on OData meta data to display a model property that represents a unit of measure.
	 * 
	 * @return {sap.m.Input} the new control instance.
	 * @private
	 */
	ODataControlFactory.prototype._createEdmUOMObjectNumber = function() {
		var mAttributes, oObject, oObjectNumber, sAlign;

		// check text alignment
		sAlign = this._getEdmUOMTextAlignment();

		// create the attributes for the currency.
		if (this._oMetaData.annotations.uom && this._oHelper.oAnnotation.isCurrency(this._oMetaData.annotations.uom.property.property)) {
			mAttributes = {
				number: {
					parts: [
						{
							path: this._oMetaData.path
						}, {
							path: this._oHelper.getUOMPath(this._oMetaData)
						}
					],
					type: this._oTypes.getCurrencyType(this._oMetaData.property)
				},
				unit: {
					path: this._oHelper.getUOMPath(this._oMetaData)
				},
				model: this._oMetaData.model,
				textAlign: sAlign
			};
		} else {
			mAttributes = {
				model: this._oMetaData.model,
				number: {
					path: this._oMetaData.path,
					type: this._oTypes.getType(this._oMetaData.property)
				},
				unit: {
					path: this._oHelper.getUOMPath(this._oMetaData)
				},
				textAlign: sAlign
			};
		}

		oObject = this._oParent.getObjectBinding(this._oMetaData.model);
		this.addObjectBinding(mAttributes, oObject);

		// create the control.
		oObjectNumber = new ObjectNumber(mAttributes);

		// add style for nested smart field, especially display case (text box).
		oObjectNumber.addStyleClass("sapUiCompUOM");

		return {
			control: oObjectNumber
		};
	};

	/**
	 * Creates a control instance based on OData meta data.
	 * 
	 * @return {sap.ui.core.Control} the new control instance.
	 * @private
	 */
	ODataControlFactory.prototype._createEdmSemantic = function() {
		var sPath, mAttributes, oTextAnnotation, that = this, oInfo = this._oParent.getBindingInfo("value");
		sPath = oInfo.parts[0].path;

		var sLabel = this._oMetaData.property.property["sap:label"];
		if (this._oMetaData.annotations.lineitem && this._oMetaData.annotations.lineitem.labels && this._oMetaData.annotations.lineitem.labels[sPath]) {
			sLabel = this._oMetaData.annotations.lineitem.labels[sPath];
		}

		mAttributes = {
			semanticObject: this._oMetaData.annotations.semantic.semanticObject,
			semanticObjectLabel: sLabel,
			fieldName: sPath,
			width: this.getAttribute("width"),
			createControlCallback: jQuery.proxy(function() {
				var oControl = this.createControl(true);
				if (oControl) {
					return oControl.control;
				}
				return null;
			}, this)
		};

		oTextAnnotation = this._oHelper.oAnnotation.getText(this._oMetaData.property.property);
		if (oTextAnnotation) {
			mAttributes.text = {
				parts: [
					this._oMetaData.path, this._oHelper.getEdmDisplayPath(this._oMetaData)
				],
				model: this._oMetaData.model,
				formatter: function(sId, sDescription) {
					if (sId && sDescription) {
						return that._formatDisplayBehaviour("defaultInputFieldDisplayBehaviour", sId, sDescription);
					}

					return sId ? sId : "";
				}
			};
		} else {
			mAttributes.text = {
				path: sPath,
				model: this._oMetaData.model
			};
		}

		return {
			control: new SmartLink(mAttributes),
			onCreate: "_onCreate",
			params: {
				getValue: "getInnerControlValue"
			}
		};
	};

	/**
	 * Creates a control instance based on OData meta data.
	 * 
	 * @param {map} mNames map of bind-able attributes
	 * @return {sap.ui.core.Control} the new control instance.
	 * @private
	 */
	ODataControlFactory.prototype._createMultiLineText = function(mNames) {

		// create the default control.
		var mAttributes = this.createAttributes("value", this._oMetaData.property, mNames);

		// var oControl = new TextArea(mAttributes);

		var mOptions = this.getFormatSettings("multiLineSettings");
		mAttributes = jQuery.extend(true, mOptions, mAttributes);

		var oControl = new TextArea(mAttributes);

		// add optional upper case conversion.
		this._handleEventingForEdmString(oControl, this._oMetaData.property);

		return {
			control: oControl,
			onCreate: "_onCreate",
			getValue: "getValue",
			params: {
				type: {
					type: mAttributes.value.type,
					property: this._oMetaData.property
				}
			}
		};

	};

	/**
	 * Checks whether a link needs to be created.
	 * 
	 * @returns {boolean} <code>true</code>, if a link needs to be created, <code>false</code> otherwise.
	 * @private
	 */
	ODataControlFactory.prototype._checkLink = function() {
		var oInfo = this._oParent.getBindingInfo("url");

		if (oInfo) {
			return true;
		}

		if (this._oParent.getUrl()) {
			return true;
		}

		if (this._oParent.hasListeners("press")) {
			return true;
		}

		return false;
	};

	/**
	 * Creates a control instance based on OData meta data.
	 * 
	 * @return {sap.ui.core.Control} the new control instance.
	 * @private
	 */
	ODataControlFactory.prototype._createLink = function() {
		var that = this;
		var mAttributes = {
			text: "",
			href: ""
		};
		var oInfo = this._oParent.getBindingInfo("url");

		if (this._oParent.hasListeners("press")) {
			mAttributes["press"] = function(oEvent) {
				that._oParent.firePress(oEvent);
			};
		} else if (oInfo) {
			mAttributes["href"] = this._oBinding.toBinding(oInfo);
		} else {
			mAttributes["href"] = this._oParent.getUrl();
		}

		oInfo = this._oParent.getBindingInfo("value");
		if (oInfo) {
			// text may be Edm.String and may have a text annotation.
			if (this._oMetaData.annotations.text && this._oMetaData.property.property.type === "Edm.String") {
				mAttributes.text = {
					parts: [
						this._oMetaData.path, this._oHelper.getEdmDisplayPath(this._oMetaData)
					],
					formatter: function(sId, sDescription) {
						if (sId && sDescription) {
							return that._formatDisplayBehaviour("defaultInputFieldDisplayBehaviour", sId, sDescription);
						}

						return sId ? sId : "";
					}
				};
			} else {
				mAttributes["text"] = this._oBinding.toBinding(oInfo);
			}
		} else {
			mAttributes["text"] = this._oParent.getValue();
		}

		return {
			control: new Link(mAttributes),
			onCreate: "_onCreate",
			params: {
				noValidation: true
			}
		};
	};

	/**
	 * Creates a control instance based on OData meta data to edit a model property that is of type <code>Edm.Boolean</code>
	 * 
	 * @return {sap.m.CheckBox} the new control instance.
	 * @private
	 */
	ODataControlFactory.prototype._createEdmBoolean = function() {
		var mAttributes, oCheck, oControl, that = this, params = null, bEditable = false;

		bEditable = this._oParent.getEditable() && this._oParent.getEnabled() && this._oParent.getContextEditable();

		oCheck = this._oSelector.checkComboBox();
		if (oCheck.combobox) {
			return this._createComboBox({
				annotation: oCheck.annotation,
				noDialog: true,
				noTypeAhead: true
			}, !bEditable);
		}

		if (bEditable) {

			mAttributes = this.createAttributes("selected", this._oMetaData.property, {}, {
				event: "select",
				parameter: "selected"
			});

			oControl = new CheckBox(mAttributes);
			params = {
				getValue: "getSelected"
			};

		} else {
			mAttributes = this.createAttributes("text", this._oMetaData.property, {
				width: true,
				textAlign: true
			});

			mAttributes.text = {
				model: this._oMetaData.model,
				path: this._oMetaData.path
			};

			mAttributes.text.formatter = function(bValue) {
				return that._formatDisplayBehaviour("defaultCheckBoxDisplayBehaviour", bValue);
			};

			oControl = new Text(mAttributes);
		}

		return {
			control: oControl,
			onCreate: "_onCreate",
			params: params
		};
	};

	/**
	 * Returns the name of a method to create a control.
	 * 
	 * @param {boolean} bBlockSmartLinkCreation if true, SmartLink will not be created
	 * @return {string} the name of the factory method to create the control.
	 * @private
	 */
	ODataControlFactory.prototype._getCreator = function(bBlockSmartLinkCreation) {
		// make sure that no exceptions occur, if the property is not valid
		// => necessary for extensibility use cases, if an extension field has been deleted and the UI has not yet been adapted.
		return this._oSelector.getCreator(bBlockSmartLinkCreation);
	};

	/**
	 * Event handler, that is invoked after successful creation of a nested control.
	 * 
	 * @param {sap.ui.core.Control} oControl the new control
	 * @param {map} mParams parameters to further define the behavior of the event handler
	 * @param {function} mParams.getValue optional call-back to get the current value from the current control
	 * @param {boolean} mParams.valuehelp if set to <code>true</code> a possibly existing value help is attached to the new control
	 * @private
	 */
	ODataControlFactory.prototype._onCreate = function(oControl, mParams) {
		var sGetValue, fControl, bValidations = true, that = this;

		if (mParams) {
			// check for validation.
			if (mParams.noValidation) {
				bValidations = false;
			}

			// add optional value help.
			if (mParams.valuehelp) {
				this._getValueHelpDialogTitle(mParams.valuehelp);
				mParams.valuehelp["analyser"] = this._oHelper.getAnalyzer(this._oModel || this._oMetaData.modelObject);
				this.addValueHelp(oControl, this._oMetaData.property.property, mParams.valuehelp, this._oModel || this._oMetaData.modelObject, function(oEvent) {
					that._oParent.fireValueListChanged({
						"changes": oEvent.mParameters.changes
					});
				});
			}

			// add optional getValue call-back.
			if (mParams.getValue) {
				sGetValue = mParams.getValue;
				mParams.getValue = function() {
					return oControl[sGetValue]();
				};
			}

			// complete the data: add field-control.
			if (mParams.type) {
				fControl = this._oFieldControl.getMandatoryCheck(mParams.type.property);

				if (fControl) {
					mParams.type.type.oFieldControl = fControl;
				}
			}
		}

		// add optional validations.
		if (bValidations) {
			// if the field is a unit in unit of measure, the error check configuration is set.
			// otherwise apply the default.
			this.addValidations(oControl, this._oParent.data("errorCheck") || "setSimpleClientError");
		}

		if (!this._checkUOM()) {
			oControl.addStyleClass("sapUiCompSmartFieldValue");
		}
	};

	/**
	 * Checks whether the control was created as unit in unit of measure.
	 * 
	 * @returns {boolean} <code>true</code>, if the control was created as unit in unit of measure, <code>false</code> otherwise.
	 * @private
	 */
	ODataControlFactory.prototype._checkUOM = function() {
		var oConfig = this._oParent.data("configdata");

		if (oConfig && oConfig.configdata) {
			if (oConfig.configdata.onInput) {
				return true;
			}

			if (oConfig.configdata.onText) {
				return true;
			}
		}

		return false;
	};

	/**
	 * Calculates the title for the value help dialog.
	 * 
	 * @param {object} oValueHelp the value help configuration
	 * @param {object} oValueHelp.annotation the value help annotation
	 * @param {string} oValueHelp.aggregation the aggregation to attach the value list to
	 * @param {boolean} oValueHelp.noDialog if set to <code>true</code> the creation of a value help dialog is omitted
	 * @param {boolean} oValueHelp.noTypeAhead if set to <code>true</code> the type ahead functionality is omitted
	 * @param {string} oValueHelp.dialogtitle title for the value help dialog
	 * @private
	 */
	ODataControlFactory.prototype._getValueHelpDialogTitle = function(oValueHelp) {
		oValueHelp.dialogtitle = this._oParent.getTextLabel();

		if (!oValueHelp.dialogtitle) {
			oValueHelp.dialogtitle = this._oHelper.oAnnotation.getLabel(this._oMetaData.property.property) || this._oMetaData.property.property.name;
		}
	};

	/**
	 * Event handler, that is invoked after successful creation of a nested control.
	 * 
	 * @param {sap.ui.core.Control} oControl the new control
	 * @param {map} mParams parameters to further define the behavior of the event handler
	 * @param {function} mParams.getValue optional call-back to get the current value from the current control
	 * @param {boolean} mParams.valuehelp if set to <code>true</code> a possibly existing value help is attached to the new control
	 * @private
	 */
	ODataControlFactory.prototype._onCreateUOM = function(oControl, mParams) {
		var aItems, fControl;

		// add validation to amount only.
		aItems = oControl.getItems();
		this.addValidations(aItems[0], "setComplexClientErrorFirstOperand");

		// add optional value call-back.
		if (mParams && mParams.getValue) {
			mParams.getValue = function() {
				return aItems[0].getValue();
			};
		}

		// add optional unit of measure call-back.
		mParams.uom = function() {
			var oContent = aItems[1].getAggregation("_content");
			return oContent.getValue();
		};

		mParams.uomset = function(sValue) {
			var oContent = aItems[1].getAggregation("_content");
			oContent.setValue(sValue);
		};

		// complete the data: add field-control.
		// mind that this is done explicitly only for non currency use-cases.
		if (mParams.type) {
			fControl = this._oFieldControl.getMandatoryCheck(mParams.type.property);

			if (fControl) {
				mParams.type.type.oFieldControl = fControl;
			}
		}
	};

	/**
	 * Binds the properties of the control to formatter functions.
	 * 
	 * @public
	 */
	ODataControlFactory.prototype.bind = function() {
		var that = this, aNames, oConfig, fInit = function(oMetaData, aProperties) {
			try {
				that._init(oMetaData);
				that._setUOMEditState();
				that._bind(aProperties);
			} catch (ex) {
				jQuery.sap.log.warning(ex, null, "sap.ui.comp.smartfield.ODataControlFactory.bind.fInit");
			}
		};

		if (!this._bInitialized && !this.bPending) {
			this._bInitialized = true;
			aNames = this._oFieldControl.getBindableAttributes();
			oConfig = this._oParent.data("configdata");

			if (oConfig && oConfig.configdata) {
				fInit(this._oMeta, aNames);
			} else if (this._oModel) {
				this.bPending = true;
				this._oModel.getMetaModel().loaded().then(function() {
					that.bPending = false;
					fInit(that._oMeta, aNames);
				});
			}
		}
	};

	/**
	 * Replaces the given bindings by formatter functions.
	 * 
	 * @param {array} aBindings current bindings on <code>SmartField</code>
	 * @private
	 */
	ODataControlFactory.prototype._bind = function(aBindings) {
		var n, mBind, mFormatters;

		// make sure that no exceptions occur, if the property is not valid
		// => necessary for extensibility use cases, if an extension field has been deleted and the UI has not yet been adapted.
		// and if the smart field's value property is not bound, but a URL has to be displayed.
		mFormatters = this._oFieldControl.getControlProperties(this._oMetaData, aBindings);

		for (n in mFormatters) {
			mBind = this._oBinding.fromFormatter(this._oMetaData.model, mFormatters[n]);
			this._oParent.bindProperty(n, mBind);
		}

		// notify that the meta data is available.
		this._oParent.fireInitialise();
	};

	/**
	 * Rebinds properties on this smart field, if the entity instance the smart field is associated with changes its state from existing in main
	 * memory to persistent on data base.
	 * 
	 * @private
	 */
	ODataControlFactory.prototype.rebindOnCreated = function() {
		var n, mBind, mFormatters;

		// make sure that no exceptions occur, if the property is not valid
		// => necessary for extensibility use cases, if an extension field has been deleted and the UI has not yet been adapted.
		// and if the smart field's value property is not bound, but a URL has to be displayed.
		mFormatters = this._oFieldControl.getControlProperties(this._oMetaData, [
			"editable"
		]);

		for (n in mFormatters) {
			mBind = this._oBinding.fromFormatter(this._oMetaData.model, mFormatters[n]);
			this._oParent.bindProperty(n, mBind);
		}
	};

	/**
	 * Optionally sets a formatter for the uomEditState property.
	 * 
	 * @private
	 */
	ODataControlFactory.prototype._setUOMEditState = function() {
		var oFormatter, mBind;

		if (this._oFieldControl.hasUomEditState(this._oMetaData)) {
			oFormatter = this._oFieldControl.getUOMEditState(this._oMetaData);

			if (oFormatter) {
				mBind = this._oBinding.fromFormatter(this._oMetaData.model, oFormatter);
				this._oParent.bindProperty("uomEditState", mBind);
			}
		}
	};

	/**
	 * Returns the property of the oData
	 * 
	 * @return {object} the oData property
	 * @public
	 */
	ODataControlFactory.prototype.getDataProperty = function() {
		return this._oMetaData.property;
	};

	/**
	 * Returns the currently available meta data.
	 * 
	 * @returns {map} the currently available meta data
	 * @public
	 */
	ODataControlFactory.prototype.getMetaData = function() {
		return this._oMetaData;
	};

	/**
	 * Frees all resources claimed during the life-time of this instance.
	 * 
	 * @public
	 */
	ODataControlFactory.prototype.destroy = function() {
		this._oFieldControl.destroy();
		this._oSelector.destroy();
		this._oTypes.destroy();
		this._oHelper.destroy();

		this._oHelper = null;
		this._oFieldControl = null;
		this._oTypes = null;
		this._oSelector = null;
		this._oMetaData = null;

		ControlFactoryBase.prototype.destroy.apply(this, []);
	};

	return ODataControlFactory;
}, true);

}; // end of sap/ui/comp/smartfield/ODataControlFactory.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.SmartField') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartfield.SmartField.
jQuery.sap.declare('sap.ui.comp.smartfield.SmartField'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.ParseException'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.ValidateException'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/SmartField",[
	"jquery.sap.global", "sap/ui/comp/library", "./JSONControlFactory", "./ODataControlFactory", "./BindingUtil", "./SideEffectUtil", "./ODataHelper", "sap/ui/core/Control", "sap/ui/model/ParseException", "sap/ui/model/ValidateException"
], function(jQuery, library, JSONControlFactory, ODataControlFactory, BindingUtil, SideEffectUtil, ODataHelper, Control, ParseException, ValidateException) {
	"use strict";

	/**
	 * Constructor for a new smartfield/SmartField.
	 * 
	 * @param {string} [sId] ID for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * @class The SmartField control is a wrapper for other controls. It interprets OData metadata to determine the control that has to be
	 *        instantiated. The OData entity is derived from the control's binding context. The OData entity's property that is changed or displayed
	 *        with the control is derived from the control's value property.
	 * @extends sap.ui.core.Control
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartfield.SmartField
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var SmartField = Control.extend("sap.ui.comp.smartfield.SmartField", /** @lends sap.ui.comp.smartfield.SmartField.prototype */
	{
		metadata: {
			library: "sap.ui.comp",
			properties: {
				/**
				 * The value property keeps the current value of the control. If a binding expression is configured, this is used to determine the
				 * property of an OData entity.
				 */
				value: {
					type: "any",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Enables the control.
				 */
				enabled: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * The name of an entity set for which the control manages values. This is an optional property.
				 */
				entitySet: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Sets the control into an editable mode or a display mode.
				 */
				editable: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Notifies the control whether controls using the SmartField are editable or not.
				 * 
				 * @since 1.31.0
				 */
				contextEditable: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * The width can be set to an absolute value.
				 */
				width: {
					type: "sap.ui.core.CSSSize",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Horizontal alignment of the text.
				 */
				textAlign: {
					type: "sap.ui.core.TextAlign",
					group: "Misc",
					defaultValue: sap.ui.core.TextAlign.Initial
				},

				/**
				 * Text shown when no value available.
				 */
				placeholder: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * To be used in the HTML code (for example, for HTML forms that send data to the server via 'submit').
				 */
				name: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Visualizes warnings or errors.
				 */
				valueState: {
					type: "sap.ui.core.ValueState",
					group: "Appearance",
					defaultValue: sap.ui.core.ValueState.None
				},

				/**
				 * The text which is shown in the value state message popup.
				 */
				valueStateText: {
					type: "string",
					group: "Appearance",
					defaultValue: null
				},

				/**
				 * The text which is shown in the value state message popup.
				 */
				showValueStateMessage: {
					type: "boolean",
					group: "Appearance",
					defaultValue: true
				},

				/**
				 * Data types to be used, if the SmartField control is interacting with a JSON model. If the value property of the control is bound to
				 * a property of an OData entity set, this property is not considered.
				 * 
				 * @deprecated Since 1.31.0
				 */
				jsontype: {
					type: "sap.ui.comp.smartfield.JSONType",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Mandatory property.
				 */
				mandatory: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * Maximum number of characters. Value <code>0</code> means the feature is switched off.
				 */
				maxLength: {
					type: "int",
					group: "Misc",
					defaultValue: 0
				},

				/**
				 * If set to <code>true</code>, the suggestion feature for a hosted control is enabled, if the hosted control supports it.
				 */
				showSuggestion: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * If set to true, a value help indicator will be displayed inside the hosted control, if the hosted control supports this.
				 */
				showValueHelp: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * If set to false the label is not displayed.
				 */
				showLabel: {
					type: "boolean",
					group: "Appearance",
					defaultValue: true
				},

				/**
				 * This property contains the text of an associated smart label.
				 */
				textLabel: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * This property contains the tool tip of the associated smart label.
				 */
				tooltipLabel: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Visible state of the unit, if the SmartField control addresses unit of measure use cases, for example, an amount and its associated
				 * currency.
				 */
				uomVisible: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Editable state of the unit, if the SmartField control addresses unit of measure use cases, for example, an amount and its
				 * associated currency.
				 */
				uomEditable: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Enabled state of the unit, if the SmartField control addresses unit of measure use cases, for example, an amount and its associated
				 * currency.
				 */
				uomEnabled: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Contains a URL which is used to render a link. The link is rendered, if the OData property which the value property of the control
				 * is bound to is of type <code>Edm.String</code> and the Smart Field is in display mode.
				 */
				url: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * This property is for internal use only.
				 * 
				 * @since 1.31.0
				 */
				uomEditState: {
					type: "int",
					group: "Misc",
					defaultValue: -1
				},

				/**
				 * Defines in which context the layout of the smart field has to be interpreted.
				 * 
				 * @since 1.31.0
				 */
				controlContext: {
					type: "sap.ui.comp.smartfield.ControlContextType",
					group: "Misc",
					defaultValue: sap.ui.comp.smartfield.ControlContextType.None
				},

				/**
				 * Proposes a control to be rendered. The smart field may ignore the proposal.
				 * 
				 * @deprecated Since 1.32.0
				 * @since 1.31.0
				 */
				proposedControl: {
					type: "sap.ui.comp.smartfield.ControlProposalType",
					group: "Misc",
					defaultValue: sap.ui.comp.smartfield.ControlProposalType.None
				},

				/**
				 * Allow the wrapping to be set for table based control context.
				 * 
				 * @since 1.36.6
				 */
				wrapping: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				}
			},
			aggregations: {
				/**
				 * The content aggregation is used to hold the control that is hosted by the SmartField control.
				 */
				_content: {
					type: "sap.ui.core.Control",
					multiple: false,
					visibility: "hidden"
				},

				/**
				 * Optional configuration for SmartField.
				 */
				configuration: {
					type: "sap.ui.comp.smartfield.Configuration",
					multiple: false
				},

				/**
				 * Proposes a control to be rendered. The smart field may ignore the proposal.
				 * 
				 * @since 1.32.0
				 * @deprecated Since 1.34.0
				 */
				controlProposal: {
					type: "sap.ui.comp.smartfield.ControlProposal",
					multiple: false
				},

				/**
				 * Collects the texts to be used for the ARIA labels.<br>
				 * The InvisibleText controls will be added to the DOM by the SmartField control.
				 * 
				 * @since 1.34.2
				 */
				_ariaLabelInvisibleText: {
					type: "sap.ui.core.InvisibleText",
					multiple: true,
					visibility: "hidden"
				}
			},
			associations: {
				/**
				 * Association with controls / IDs that label this control (see WAI-ARIA attribute aria-labelledby).
				 * 
				 * @since 1.34.2
				 */
				ariaLabelledBy: {
					type: "sap.ui.core.Control",
					multiple: true,
					singularName: "ariaLabelledBy"
				}
			},
			events: {
				/**
				 * The OData entity set is either derived from the control's binding context or from control's entity set property, if a value for it
				 * is specified. In both cases this event is fired.
				 */
				entitySetFound: {},

				/**
				 * The event is fired after the text in the field has changed and the focus leaves the TextField or Enter is pressed.
				 */
				change: {},

				/**
				 * The event is fired after the smart field has calculated its metadata.
				 */
				initialise: {},

				/**
				 * The event is fired after the visibility of the control has changed.
				 */
				visibleChanged: {},

				/**
				 * The event is fired after the value of editable property of the control has changed.
				 * 
				 * @since 1.30.0
				 */
				editableChanged: {},

				/**
				 * The event is fired after the context editable property of the control has changed.
				 * 
				 * @since 1.31.0
				 */
				contextEditableChanged: {},

				/**
				 * The event is fired after the inner controls have been created.
				 */
				innerControlsCreated: {},

				/**
				 * The event is fired when after selection of values with value help or auto-suggest, the model is updated with the selected data.
				 * 
				 * @since 1.31.0
				 */
				valueListChanged: {},

				/**
				 * Fires when the user triggers the link control or taps/clicks on an active title of the object identifier control.
				 * 
				 * @since 1.36.0
				 */
				press: {}
			}
		},
		/**
		 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
		 * 
		 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
		 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered.
		 * @private
		 * @since 1.33.0
		 */
		renderer: function(oRm, oControl) {
			oRm.write("<div ");
			oRm.writeControlData(oControl);
			oRm.addClass("sapUiCompSmartField");
			oRm.writeClasses();
			oRm.write(">");
			oRm.renderControl(oControl.getAggregation("_content"));
			if (oControl.getAggregation("_ariaLabelInvisibleText")) {
				oControl.getAggregation("_ariaLabelInvisibleText").forEach(function(oInvisibleText) {
					oRm.renderControl(oInvisibleText);
				});
			}
			oRm.write("</div>");
		}
	});

	/**
	 * Returns the Edm data type of either the OData property to which the value property of the control is bound or the data type of the attribute in
	 * the JSON model used. If no model is available null is returned.
	 * 
	 * @name sap.ui.comp.smartfield.SmartField#getDataType
	 * @function
	 * @type string
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */

	/**
	 * If the control's value property is bound to an OData property that semantically represents a unit of measure, the value of the current unit of
	 * measure is returned. Otherwise <code>null</code> is returned.
	 * 
	 * @name sap.ui.comp.smartfield.SmartField#getUnitOfMeasure
	 * @function
	 * @type string
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */

	/**
	 * If the control's value property is bound to an OData property that semantically represents a unit of measure, the value of the current unit of
	 * measure can be changed.
	 * 
	 * @name sap.ui.comp.smartfield.SmartField#setUnitOfMeasure
	 * @function
	 * @param {string} sSUnit The new unit of measure to be set.
	 * @type void
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */

	/**
	 * Initialize the control.
	 * 
	 * @private
	 */
	SmartField.prototype.init = function() {
		this._bInDestroy = false;
		this._oSideEffects = new SideEffectUtil(this);
		this._oFactory = null;
		this._oControl = {
			display: null,
			edit: null,
			current: null
		};
		this._oValue = {
			display: null,
			edit: null,
			uom: null,
			uomset: null
		};
		this._oError = {
			bComplex: false,
			bFirst: false,
			bSecond: false
		};
		this._sBindingContextPath = "";
		this._oValueBind = null;
		this._oUtil = new BindingUtil();
		this._bSuppressToggleControl = false;
	};

	/**
	 * Setter for property <code>visible</code>. Default value is <code>true</code>.
	 * 
	 * @param {boolean} bValue New value for property <code>editable</code>
	 * @param {boolean} bSuppressInvalidate If <code>true</code>, the managed object is not marked as changed
	 * @return {sap.ui.comp.smartfield.SmartField} <code>this</code> to allow method chaining
	 * @public
	 */
	SmartField.prototype.setVisible = function(bValue, bSuppressInvalidate) {
		Control.prototype.setVisible.apply(this, arguments);
		this.fireVisibleChanged({
			visible: bValue
		});

// var oEmbeddedSmartField = this._getEmbeddedSmartField();
// if (oEmbeddedSmartField) {
// oEmbeddedSmartField.setVisible(bValue, bSuppressInvalidate);
// }
		return this;
	};

	/**
	 * Setter for property <code>editable</code>. Default value is <code>false</code>.
	 * 
	 * @param {boolean} bValue New value for property <code>editable</code>
	 * @return {sap.ui.comp.smartfield.SmartField} <code>this</code> to allow method chaining
	 * @public
	 */
	SmartField.prototype.setEditable = function(bValue) {
		this.setProperty("editable", bValue, true);

		this._bPendigEditableState = false;

		this._toggleControl();
		this.fireEditableChanged({
			editable: bValue
		});

		return this;
	};

	/**
	 * Setter for property <code>contextEditable</code>. Default value is <code>false</code>.
	 * 
	 * @param {boolean} bValue New value for property <code>editable</code>
	 * @return {sap.ui.comp.smartfield.SmartField} <code>this</code> to allow method chaining
	 * @public
	 * @since 1.31.0
	 */
	SmartField.prototype.setContextEditable = function(bValue) {
		this.setProperty("contextEditable", bValue, true);

		this._bPendigEditableState = false;

		this._toggleControl();
		this.fireContextEditableChanged({
			editable: bValue
		});

		return this;
	};

	/**
	 * Setter for property <code>width</code>.
	 * 
	 * @param {string} sWidth The new value for property <code>width</code>
	 * @return {sap.ui.comp.smartfield.SmartField} <code>this</code> to allow method chaining
	 * @public
	 */
	SmartField.prototype.setWidth = function(sWidth) {
		this.setProperty("width", sWidth, true);
		this._setOnInnerControl();
		return this;
	};

	/**
	 * Setter for property <code>wrapping</code>. The wrapping is only relevant for the table control context.
	 * 
	 * @param {boolean} bWrapping The new value for property <code>wrapping</code>
	 * @return {sap.ui.comp.smartfield.SmartField} <code>this</code> to allow method chaining
	 * @public
	 */
	SmartField.prototype.setWrapping = function(bWrapping) {
		this.setProperty("wrapping", bWrapping, true);
		this._setOnInnerControl();
		return this;
	};

	/**
	 * Sets the SmartField's width to the inner control
	 * 
	 * @return {sap.ui.comp.smartfield.SmartField} <code>this</code> to allow method chaining
	 * @private
	 */
	SmartField.prototype._setOnInnerControl = function() {
		var oChild, sWidth, bWrapping;

		oChild = this.getAggregation("_content");

		if (oChild) {

			if (oChild.setWidth) {
				sWidth = this.getWidth();

				// set the width if and only if a value other than the default is available (default is "")
				// the problem is that some controls (e.g. sap.m.Select and sap.m.ComboBox) have a width set during creation
				// we do not want to invalidate this.
				// if there are problems, always check these controls.
				if (sWidth) {
					oChild.setWidth(sWidth);
				}
			}

			bWrapping = this.getWrapping();
			if (!bWrapping && oChild.setWrapping && (this.getControlContext() === "table")) {
				oChild.setWrapping(bWrapping);
			}
		}

		return this;
	};

	/**
	 * Setter for property <code>url</code>. Default value is <code>null</code>.
	 * 
	 * @param {string} sValue The new value for property <code>url</code>
	 * @return {sap.ui.comp.smartfield.SmartField} <code>this</code> to allow method chaining
	 * @since 1.29
	 * @public
	 */
	SmartField.prototype.setUrl = function(sValue) {
		this.setProperty("url", sValue, true);
		return this;
	};

	/**
	 * Setter for property <code>entitySet</code>. Default value is <code>undefined</code>.
	 * 
	 * @param {string} sValue The new value for property <code>entitySet</code>
	 * @return {sap.ui.comp.smartfield.SmartField} <code>this</code> to allow method chaining
	 * @public
	 */
	SmartField.prototype.setEntitySet = function(sValue) {
		this.setProperty("entitySet", sValue, true);
		this.fireEntitySetFound({
			entitySet: sValue
		});
		return this;
	};

	/*
	 * Due to the sequence of calls from binding during the rows creation, in read-only scenarios the edit-part of the SF was also created. This leads
	 * to a major performance penalty. With the handling of the pedingEditableState this issue should be overcome.
	 */
	SmartField.prototype._setPendingEditState = function(bDisplayState) {

		this.data("pedingEditableState", !bDisplayState);

	};

	SmartField.prototype.applySettings = function(mSettings) {

		if (mSettings && mSettings.customData) {
			for (var i = 0; i < mSettings.customData.length; i++) {
				var oCustomData = mSettings.customData[i];
				if (oCustomData && oCustomData.mProperties && oCustomData.mProperties.key === "pedingEditableState") {
					this._bPendigEditableState = oCustomData.mProperties.value;
				}
			}
		}

		Control.prototype.applySettings.apply(this, arguments);

	};

	/**
	 * Setter for property <code>enabled</code>. Default value is <code>true</code>.
	 * 
	 * @param {boolean} bValue The new value for property <code>enabled</code>.
	 * @return {sap.ui.comp.smartfield.SmartField} <code>this</code> to allow method chaining
	 * @public
	 */
	SmartField.prototype.setEnabled = function(bValue) {
		this.setProperty("enabled", bValue, true);
		this._toggleControl();

// var oEmbeddedSmartField = this._getEmbeddedSmartField();
// if (oEmbeddedSmartField) {
// oEmbeddedSmartField.setContextEditable(bValue, true);
// }
		return this;
	};

	/**
	 * Returns the value of the <code>value</code> property.
	 * 
	 * @return {any} The value of the property
	 * @public
	 */
	SmartField.prototype.getValue = function() {
		var sProp, fProp;

		// as two-way-binding cannot be assumed to be a prerequisite,
		// check for a call-back and return the current value.
		sProp = this._getMode();
		fProp = this._oValue[sProp];

		if (fProp) {
			return fProp();
		}

		// as fall-back return the property value.
		return this.getProperty("value");
	};

	/**
	 * Getter for property <code>valueState</code>. Default value is <code>None</code>.
	 * 
	 * @return {sap.ui.core.ValueState} The property value
	 * @public
	 */
	SmartField.prototype.getValueState = function() {
		var aChildren, iIndex;

		aChildren = this.getInnerControls();
		iIndex = this._getMaxSeverity(aChildren);

		if (iIndex > -1) {
			return aChildren[iIndex].getValueState();
		}

		return sap.ui.core.ValueState.None;
	};

	/**
	 * Setter for property <code>valueState</code>. Default value is <code>None</code>.
	 * 
	 * @param {sap.ui.core.ValueState} sValueState The new value for property <code>valueState</code>
	 * @return {sap.ui.comp.SmartField} <code>this</code> to allow method chaining
	 * @since 1.30.0
	 * @public
	 */
	SmartField.prototype.setValueState = function(sValueState) {
		var aChildren, oChild, sMethod = "setSimpleClientError";

		aChildren = this.getInnerControls();

		if (aChildren && aChildren.length) {
			oChild = aChildren[0];

			if (aChildren.length > 1) {
				sMethod = "setComplexClientErrorFirstOperand";
			}
		}

		// forward the value state to the child control.
		// in unit of measure use cases and generally, if more than one control is hosted,
		// set a possible error on the first child.
		if (oChild && oChild.setValueState) {
			oChild.setValueState(sValueState);
			this[sMethod](sValueState === sap.ui.core.ValueState.Error);
		}

		return this;
	};

	/**
	 * Getter for property <code>valueStateText</code>. Default value is empty/<code>undefined</code>.
	 * 
	 * @return {string} The property value
	 * @public
	 */
	SmartField.prototype.getValueStateText = function() {
		var aChildren, iIndex;

		aChildren = this.getInnerControls();
		iIndex = this._getMaxSeverity(aChildren);

		if (iIndex > -1) {
			return aChildren[iIndex].getValueStateText();
		}

		return this.getProperty("valueStateText");
	};

	/**
	 * Setter for property <code>valueStateText</code>. Default value is empty/<code>undefined</code>.
	 * 
	 * @param {string} sText The new value for property <code>valueStateText</code>
	 * @return {sap.ui.comp.SmartField} <code>this</code> to allow method chaining
	 * @since 1.29
	 * @public
	 */
	SmartField.prototype.setValueStateText = function(sText) {
		var aChildren, oChild;

		aChildren = this.getInnerControls();

		if (aChildren && aChildren.length) {
			oChild = aChildren[0];
		}

		// forward the value state to the child control.
		// in unit of measure use cases and generally, if more than one control is hosted,
		// set a possible error on the first child.
		if (oChild && oChild.setValueStateText) {
			oChild.setValueStateText(sText);
		}

		return this;
	};

	/**
	 * Calculates the index of the child control with the most severe message.
	 * 
	 * @param {array} aChildren The currently available child controls
	 * @returns {integer} The index of the child control with the most severe message, can be <code>-1</code>
	 * @private
	 */
	SmartField.prototype._getMaxSeverity = function(aChildren) {
		var oState, oChild, i, len, iState = 0, iIndex = -1, mState = {
			"Error": 3,
			"Warning": 2,
			"Success": 1,
			"None": 0
		};

		len = aChildren.length;

		for (i = 0; i < len; i++) {
			oChild = aChildren[i];

			if (oChild.getValueState) {
				oState = oChild.getValueState();

				if (oState && mState[oState] > iState) {
					iState = mState[oState];
					iIndex = i;
				}
			}
		}

		return iIndex;
	};

	/**
	 * Returns the DOM element that gets the focus.
	 * 
	 * @returns {sap.ui.core.Element} The DOM element that should get the focus, can be <code>null</code>
	 * @public
	 */
	SmartField.prototype.getFocusDomRef = function() {
		var aChildren, oChild, len;

		aChildren = this.getInnerControls();
		len = aChildren.length;

		if (len > 0) {
			oChild = aChildren[0];
		}

		if (oChild && oChild.getFocusDomRef) {
			return oChild.getFocusDomRef();
		}

		return sap.ui.core.Element.prototype.getFocusDomRef.apply(this, []);
	};

	/**
	 * Updates the binding context of this object and all aggregated children.
	 * 
	 * @param {boolean} bSkipLocal If set to <code>true</code>, the binding context of this object is not updated, aggregated children are
	 *        considered
	 * @param {string} sModelName The optional name of a specific model to update
	 * @param {boolean} bUpdateAll If set to <code>true</code>, all known models are used for the update
	 * @private
	 */
	SmartField.prototype.updateBindingContext = function(bSkipLocal, sModelName, bUpdateAll) {
		if (this._bInDestroy) {
			return;
		}

		this._init(sModelName);

		if (this._oFactory) {
			if (this.getBindingContext()) {
				this._sBindingContextPath = this.getBindingContext().getPath();
			}
			if (this._oFactory.bind) {
				this._oFactory.bind();

				// also check for field group annotation.
				this._checkFieldGroups();
			} else {
				this._toggleControl();
			}
		}

		Control.prototype.updateBindingContext.apply(this, arguments);
	};

	/**
	 * Returns the current SmartField's edit mode
	 * 
	 * @returns {string} Returns "edit" or "display" or "display_uom"
	 * @private
	 */
	SmartField.prototype._getMode = function() {
		var bEditable = this.getEditable(), bEnabled = this.getEnabled(), bContextEditable = this.getContextEditable();

		// check for configuration.
		if (this.getControlContext() === "responsiveTable" && this.data("suppressUnit") !== "true") {
			// somehow the control is disabled
			if (!bEditable || !bContextEditable || !bEnabled || (this.getUomEditState() === 0)) {
				return "display_uom";
			}
		}

		return bEditable && bEnabled && bContextEditable ? "edit" : "display";
	};

	/**
	 * Sets the current control, depending on <code>displayMode</code> and the binding of the <code>value</code> property of the current control.
	 * If necessary a control is created.
	 * 
	 * @private
	 */
	SmartField.prototype._toggleControl = function() {
		var sMode, oValue, oConfig, bCreate = true;

		if (this._bPendigEditableState || this._bSuppressToggleControl) {
			return;
		}

		if (!this._oFactory || this._oFactory.bPending) {
			return;
		}

		sMode = this._getMode();

		if (sMode === "edit" || sMode === "display_uom") { // always create control if in edit mode
			// _createControl sets the current mode.
			this._createControl(sMode);
		} else {
			oValue = this.getValue();

			// optimization for table use cases only.
			// if it is not a table, no configuration data set.
			oConfig = this.data("configdata");

			if (oConfig && oConfig.configdata && !oConfig.configdata.isUOM) {
				if (oValue === null || oValue === "") {
					bCreate = false;
				}
			}

			if (bCreate) { // in display mode, only create control if value is not empty
				// _createControl sets the current mode.
				this._createControl(sMode);
			} else {
				this.setAggregation("_content", null); // if value is empty, our content has to be null
				// better set the current mode, otherwise toggling gets out-of-sync.
				this._oControl.current = "display";
			}
		}

		this._setOnInnerControl();
	};

	/**
	 * Setter for property <code>value</code>. Default value is <code>true</code>.
	 * 
	 * @param {object} oValue The new value for property <code>value</code>
	 * @return {sap.ui.comp.smartfield.SmartField} <code>this</code> to allow method chaining
	 * @public
	 */
	SmartField.prototype.setValue = function(oValue) {
		var oReturnValue = this.setProperty("value", oValue, true);

		if (this._oFactory && !this._oFactory.bPending) {
			this._toggleControl();
		}

		return oReturnValue;
	};

	/**
	 * Creates the actual control depending on the current edit mode and sets it to the SmartField's content
	 * 
	 * @param {string} sMode The current edit mode, either "edit" or "display"
	 * @private
	 */
	SmartField.prototype._createControl = function(sMode) {
		var oControl;

		if (this._oFactory) {
			if (sMode !== this._oControl.current || !this._oControl[sMode]) {
				if (!this._oControl[sMode]) {
					// create the control and set it.
					oControl = this._oFactory.createControl();

					if (oControl) {
						this._oControl[sMode] = oControl.control;
						this._placeCallBacks(oControl, sMode);
					}
				}

				// set the content.
				this._oControl.current = sMode;
				this.setAggregation("_content", this._oControl[sMode]);

				this.fireInnerControlsCreated(this.getInnerControls());
			} else {
				if (!this.getAggregation("_content")) {
					this.setAggregation("_content", this._oControl[sMode]);
				}
			}
		}
	};

	/**
	 * Sets the available call-backs after successful control creation.
	 * 
	 * @param {sap.ui.core.Control} oControl The given control
	 * @param {string} sMode The current mode, either "edit" or "display"
	 * @private
	 */
	SmartField.prototype._placeCallBacks = function(oControl, sMode) {
		// set the value call-back.
		if (oControl.params && oControl.params.getValue) {
			this._oValue[sMode] = oControl.params.getValue;
		}

		// set the unit-of-measure-get call-back.
		if (oControl.params && oControl.params.uom) {
			this._oValue.uom = oControl.params.uom;
		}

		// set the unit-of-measure-set call-back.
		if (oControl.params && oControl.params.uomset) {
			this._oValue.uomset = oControl.params.uomset;
		}
	};

	/**
	 * Initializes the control, if it has not already been initialized.
	 * 
	 * @param {string} sModelName The name of the model currently used
	 * @private
	 */
	SmartField.prototype._init = function(sModelName) {
		var oModel, oBindingInfo, oConfig;

		// destroy factory if entity type changed
		if (this._sBindingContextPath && this.getBindingContext() && this._sBindingContextPath != this.getBindingContext().getPath()) {
			this._destroyFactory();
		}

		if (!this._oFactory) {
			oConfig = this.data("configdata");

			if (!oConfig) {
				oModel = this.getModel(sModelName);
			}

			oBindingInfo = this._getBindingInfo(sModelName, "value");

			if (oBindingInfo) {
				if (oConfig || oModel) {
					this._oFactory = this._createFactory(sModelName, oModel, oBindingInfo, oConfig);
				}
			} else if (oModel && !(oModel instanceof sap.ui.model.json.JSONModel)) {
				if (this.getBindingInfo("url") || this.getUrl()) {
					if (oConfig || oModel) {
						this._oFactory = this._createFactory(sModelName, oModel, oBindingInfo, oConfig);
					}
				}
			}
		}
	};

	/**
	 * Destroys the control factory and the existing inner controls.
	 * 
	 * @private
	 */
	SmartField.prototype._destroyFactory = function() {
		this._bSuppressToggleControl = true;
		this._oFactory.destroy();
		this._oFactory = null;
		this._bSuppressToggleControl = false;
		if (this._oControl["display"]) {
			this._oControl["display"].destroy();
			this._oControl["display"] = null;
		}
		if (this._oControl["edit"]) {
			this._oControl["edit"].destroy();
			this._oControl["edit"] = null;
		}
		this._oControl["current"] = null;
		this.destroyAggregation("_content");
	};

	/**
	 * Creates the control factory and returns it. If the variable <code>oModel</code> is <code>null</code> or <code>undefined</code>,
	 * <code>null</code> is returned.
	 * 
	 * @param {string} sModelName The name of the model currently used
	 * @param {sap.ui.model.Model} oModel The model currently used
	 * @param {object} oBindingInfo The binding information from the control for the <code>value</code> property
	 * @param {object} oConfig Optional control configuration
	 * @returns {sap.ui.comp.smartfield.ControlFactoryBase} the new control factory instance
	 * @private
	 */
	SmartField.prototype._createFactory = function(sModelName, oModel, oBindingInfo, oConfig) {
		var sEntitySet, oParam;

		// check whether JSONControlFactoryl can be created.
		if (oModel && oModel instanceof sap.ui.model.json.JSONModel) {
			return new JSONControlFactory(oModel, this, {
				model: sModelName,
				path: oBindingInfo.path
			});
		}

		// check whether ODataControlFactory can be created.
		if (!oConfig) {
			sEntitySet = this._getEntitySet(sModelName);
		}

		if (sEntitySet || oConfig) {
			if (oConfig) {
				oParam = oConfig.configdata;
			} else {
				oParam = {
					entitySet: sEntitySet,
					model: sModelName,
					path: (oBindingInfo && oBindingInfo.path) ? oBindingInfo.path : ""
				};
			}

			return new ODataControlFactory(oModel, this, oParam);
		}

		return null;
	};

	/**
	 * Calculates the <code>entitySet</code> that is interpreted by this control. The calculation uses either the <code>bindingContext</code> of
	 * this control or alternatively the property <code>entitySet</code>.
	 * 
	 * @param {string} sModelName The name of the model currently used
	 * @returns {string} The <code>entitySet</code> that is interpreted by this control
	 * @private
	 */
	SmartField.prototype._getEntitySet = function(sModelName) {
		var oBindingContext, sEntitySet;

		// check the entity set property.
		sEntitySet = this.getEntitySet();

		if (sEntitySet && !sModelName) {
			return sEntitySet;
		}

		// take the entity set from the binding context.
		oBindingContext = this.getBindingContext(sModelName);

		if (oBindingContext) {
			// check for a defective binding.
			if (!oBindingContext.sPath || (oBindingContext.sPath && oBindingContext.sPath === "/undefined")) {
				return null;
			}

			sEntitySet = this._oUtil.correctPath(oBindingContext.sPath);
			this.fireEntitySetFound({
				entitySet: sEntitySet
			});

			return sEntitySet;
		}

		return null;
	};

	/**
	 * Returns the binding information for the given property or aggregation. The binding information contains information about path, binding object,
	 * format options, sorter, filter etc. for the property or aggregation.
	 * 
	 * @param {string} sModel The optional name of a specific model to update
	 * @param {string} sName The name of the property or aggregation
	 * @returns {object} Binding information of the value binding of this control, if the model is the appropriate one, <code>null</code> otherwise
	 * @private
	 */
	SmartField.prototype._getBindingInfo = function(sModel, sName) {
		if (!this._oValueBind) {
			this._oValueBind = this.getBindingInfo(sName);

			try {
				this._oValueBind = this._oValueBind.parts[0];
			} catch (ex) {
				// ignore
			}
		}

		if (this._oValueBind) {
			if (!this._oValueBind.model && !sModel) {
				return this._oValueBind;
			}

			if (this._oValueBind.model === sModel) {
				return this._oValueBind;
			}
		}

		return null;
	};

	/**
	 * Returns the EDM data type of the OData property to which the value property of the control is bound to. If no model or no OData property is
	 * available <code>null</code> is returned.
	 * 
	 * @returns {string} The data type to which the value property is bound.
	 * @public
	 */
	SmartField.prototype.getDataType = function() {
		var oProp;

		if (this._oFactory) {
			// only ODataControlFactory has the method getDataType.
			if (this._oFactory.getDataProperty) {
				oProp = this._oFactory.getDataProperty();

				if (oProp) {
					return oProp.property.type;
				}
			}

			return this.getJsonType();
		}

		return null;
	};

	/**
	 * Returns the OData property to which the <code>value</code> property of the control is bound.
	 * 
	 * @returns {object} The OData property.
	 * @public
	 */
	SmartField.prototype.getDataProperty = function() {
		if (this._oFactory) {
			// only ODataControlFactory has the method getDataProperty.
			if (this._oFactory.getDataProperty) {
				return this._oFactory.getDataProperty();
			}

			return null;
		}

		return null;
	};

	/**
	 * If the OData property to which the control's value property is bound semantically represents a unit of measure, the value of the current unit
	 * of measure is returned. Otherwise <code>null</code> is returned.
	 * 
	 * @returns {any} The current unit of measure is returned, which can be <code>null</code
	 * @public
	 */
	SmartField.prototype.getUnitOfMeasure = function() {
		if (this._oValue.uom) {
			return this._oValue.uom();
		}

		return null;
	};

	/**
	 * If the OData property the control's value property is bound to semantically represents a unit of measure, the value of the current unit of
	 * measure can be changed.
	 * 
	 * @param {string} sUnit The new unit of measure to be set.
	 * @public
	 */
	SmartField.prototype.setUnitOfMeasure = function(sUnit) {
		if (sUnit && this._oValue.uomset) {
			this._oValue.uomset(sUnit);
		}
	};

	/**
	 * Marks the SmartField control as having a client error.
	 * 
	 * @param {boolean} bError If set to <code>true</code> the field is marked as having an error
	 * @private
	 */
	SmartField.prototype.setSimpleClientError = function(bError) {
		this._oError.bFirst = bError;
	};

	/**
	 * Marks the SmartField control as having a client error.
	 * 
	 * @param {boolean} bError If set to <code>true</code> the field is marked as having an error
	 * @private
	 */
	SmartField.prototype.setComplexClientErrorFirstOperand = function(bError) {
		this._oError.bComplex = true;
		this._oError.bFirst = bError;
	};

	/**
	 * Marks the SmartField control as having a client error.
	 * 
	 * @param {boolean} bError If set to <code>true</code> the field is marked as having an error
	 * @private
	 */
	SmartField.prototype.setComplexClientErrorSecondOperand = function(bError) {
		this._oError.bComplex = true;
		this._oError.bSecond = bError;
	};

	/**
	 * Marks the SmartField control as having a client error.
	 * 
	 * @param {boolean} bError If set to <code>true</code> the field is marked as having an error
	 * @private
	 */
	SmartField.prototype.setComplexClientErrorSecondOperandNested = function(bError) {
		var oParent = this.getParent().getParent();
		oParent.setComplexClientErrorSecondOperand(bError);
	};

	/**
	 * Returns whether a client error has been detected.
	 * 
	 * @returns {boolean} <code>true</code>, if a client error has been detected, <code>false</code> otherwise
	 * @private
	 */
	SmartField.prototype._hasClientError = function() {
		if (this._oError.bComplex) {
			return this._oError.bFirst || this._oError.bSecond;
		}

		return this._oError.bFirst;
	};

	/**
	 * Returns whether a client error has been detected. Additionally the error message is shown, if this is not the case already.
	 * 
	 * @returns {boolean} <code>true</code>, if a client error has been detected, <code>false</code> otherwise
	 * @public
	 */
	SmartField.prototype.checkClientError = function() {
		var aChildren, len, i;

		// in display mode: no error.
		if (this._getMode() === "display") {
			return false;
		}

		// a client error has already been detected.
		if (this._hasClientError()) {
			return true;
		}

		// check again.
		aChildren = this.getInnerControls();
		len = aChildren.length;

		for (i = 0; i < len; i++) {
			this._checkClientError(aChildren[i]);
		}

		// return a possibly detected error.
		return this._hasClientError();
	};

	/**
	 * Checks for a client error on the given control. Additionally the error message is shown, if this is not the case already.
	 * 
	 * @param {sap.ui.core.Control} oControl The control to be checked
	 * @private
	 */
	SmartField.prototype._checkClientError = function(oControl) {
		var sValue = null, oType = null, oParsedValue = null;

		var oBind, sMethod, sParam, mParameters = {
			"sap.m.Input": "value",
			"sap.m.DatePicker": "value",
			"sap.m.ComboBox": "selectedKey"
		};

		if (oControl) {
			sParam = mParameters[oControl.getMetadata()._sClassName];
		}

		if (sParam) {
			oBind = oControl.getBinding(sParam);
		}

		if (oBind) {
			try {
				sMethod = "get" + sParam.substring(0, 1).toUpperCase() + sParam.substring(1);
				sValue = oControl[sMethod]();
				oType = oBind.getType();
				if (oBind.sInternalType) {
					oParsedValue = oType.parseValue(sValue, oBind.sInternalType);
					oType.validateValue(oParsedValue);
				}
			} catch (ex) {
				if (ex instanceof ParseException) {
					oControl.fireParseError({
						exception: ex
					});
				}

				if (ex instanceof ValidateException) {
					oControl.fireValidationError({
						exception: ex
					});
				}
			}
		}
	};

	/**
	 * Returns whether the current control context points to a table.
	 * 
	 * @returns {boolean} <code>true</code> if the current SmartField control is used inside a table, <code>false</code> otherwise
	 * @private
	 */
	SmartField.prototype.isContextTable = function() {
		return (this.getControlContext() === "responsiveTable" || this.getControlContext() === "table" || this.getControlContext() === "smartFormGrid");
	};

	/**
	 * Resolves the controls hosted currently by this SmartField.
	 * 
	 * @returns {array} The controls hosted currently by this SmartField
	 * @public
	 */
	SmartField.prototype.getInnerControls = function() {
		var oContent, fContent, mComplex = {
			"sap.m.HBox": function(oControl) {
				var oChild, aItems, len = 0;

				aItems = oControl.getItems();

				if (aItems) {
					len = aItems.length;
				}

				if (len === 0) {
					return [];
				}

				if (len === 1) {
					return [
						aItems[0]
					];
				}

				oChild = aItems[1].getAggregation("_content");

				if (oChild) {
					return [
						aItems[0], oChild
					];
				}

				return [
					aItems[0]
				];
			},
			"sap.ui.comp.navpopover.SmartLink": function(oControl) {
				var oItem = oControl.getAggregation("innerControl");

				if (oItem) {
					return [
						oItem
					];
				}

				return [];
			}
		};

		oContent = this.getAggregation("_content");

		if (oContent) {
			fContent = mComplex[oContent.getMetadata()._sClassName];
		}

		if (fContent) {
			return fContent(oContent);
		}

		if (oContent) {
			return [
				oContent
			];
		}

		return [];
	};

	/**
	 * Resolves the controls hosted currently by this SmartField.
	 * 
	 * @returns {array} The controls hosted currently by this SmartField
	 * @public
	 */
	SmartField.prototype._getEmbeddedSmartField = function() {
		var aContent = this.getAggregation("_content");
		if (aContent) {
			if (aContent instanceof sap.m.HBox) {
				var aHBoxContent = aContent.getItems();
				if (aHBoxContent) {
					for (var j = 0; j < aHBoxContent.length; j++) {
						if (aHBoxContent[j] instanceof SmartField) {
							return aHBoxContent[j];
						}
					}
				}
			}
		}

		return null;
	};

	/**
	 * The function is called when the rendering of the control is completed.
	 * 
	 * @private
	 */
	SmartField.prototype.onAfterRendering = function() {
		if (Control.prototype.onAfterRendering) {
			Control.prototype.onAfterRendering.apply(this);
		}

		// also check for field group annotation.
		this._checkFieldGroups();
	};

	/**
	 * Checks whether field groups can be set.
	 * 
	 * @private
	 */
	SmartField.prototype._checkFieldGroups = function() {
		var oView, oMetaData, sMode = this._getMode();

		if (this.getBindingContext() && this._oFactory && this._oFactory.getMetaData && sMode === "edit" && !this._bSideEffects) {
			// check whether the meta data for the smart field has already been calculated.
			oMetaData = this._oFactory.getMetaData();

			if (oMetaData && !oMetaData.property || (oMetaData.property && !oMetaData.property.property)) {
				return;
			}

			// view should be available.
			oView = this._getView();

			// now set the field group ids.
			if (oView && oMetaData) {
				this._setFieldGroup(oMetaData, oView);
			}
		}
	};

	/**
	 * Sets the field group ID according to the side effects annotation.
	 * 
	 * @param {object} oMetaData the meta data used to create the control
	 * @param {object} oMetaData.entitySet the OData entity set definition
	 * @param {object} oMetaData.entityType the OData entity type definition
	 * @param {object} oMetaData.property the OData property definition
	 * @param {string} oMetaData.path the binding path
	 * @param {sap.ui.core.mvc.View} oView the current view
	 * @private
	 */
	SmartField.prototype._setFieldGroup = function(oMetaData, oView) {
		var aControls, aIDs = this._oSideEffects.getFieldGroupIDs(oMetaData, oView);

		if (aIDs) {
			aControls = this.getInnerControls();

			if (aControls.length) {
				this._bSideEffects = true;
				aControls[0].setFieldGroupIds(aIDs);
			}
		}
	};

	/**
	 * Returns the current view instance.
	 * 
	 * @returns {sap.ui.core.mvc.View} the current view instance or <code>null</code>
	 * @private
	 */
	SmartField.prototype._getView = function() {
		var oObj = this.getParent();

		while (oObj) {
			if (oObj instanceof sap.ui.core.mvc.View) {
				return oObj;
			}

			oObj = oObj.getParent();
		}

		return null;
	};

	/**
	 * Event handler for data state changes.
	 * 
	 * @param {string} sName The name of the property
	 * @param {object} oDataState the new data state.
	 * @private
	 */
	SmartField.prototype.refreshDataState = function(sName, oDataState) {
		var oBindingContext, oObject;

		if (sName === "value") {
			if (oDataState.isLaundering()) {
				if (this.getEditable()) {
					oBindingContext = this.getBindingContext();

					if (oBindingContext && oBindingContext.getObject) {
						oObject = oBindingContext.getObject();

						if (oObject && oObject.__metadata && oObject.__metadata.created) {
							this._checkCreated = true;
							return;
						}
					}
				}
			}

			// server has accepted the new instance and it is persistent now.
			if (this._checkCreated && !oDataState.isLaundering() && !oDataState.isDirty()) {
				this._oFactory.rebindOnCreated();
				delete this._checkCreated;
			}
		}
	};

	/**
	 * Cleans up the resources associated with this element and all its children.
	 * 
	 * @private
	 */
	SmartField.prototype.exit = function() {

		this._bInDestroy = true;

		var oInactiveInnerControl = null;

		if (this._oSideEffects) {
			this._oSideEffects.destroy();
		}

		if (this._oUtil) {
			this._oUtil.destroy();
		}

		if (this._oFactory) {
			this._oFactory.destroy();
		}

		if (this._getMode() === "edit") {
			oInactiveInnerControl = this._oControl["display"];
		} else {
			oInactiveInnerControl = this._oControl["edit"];
		}

		if (oInactiveInnerControl && oInactiveInnerControl.destroy) {
			oInactiveInnerControl.destroy();
		}

		this._oUtil = null;
		this._oError = null;
		this._oValue = null;
		this._oFactory = null;
		this._oControl = null;
		this._oValueBind = null;
		this._oSideEffects = null;
	};

	/**
	 * Calculates the paths to the annotations used by the SmartField.
	 * 
	 * @param {sap.ui.model.odata.ODataMetaModel} oMetaModel The given OData meta model
	 * @param {object} oEntitySet The given entity set
	 * @param {string} sValueBinding The path identifying the OData property the value property of the SmartField is bound to
	 * @param {bolean} bNavigationPathsOnly If set to <code>true</code>, no properties are returned
	 * @returns {array} The resulting paths are returned
	 * @public
	 */
	SmartField.getSupportedAnnotationPaths = function(oMetaModel, oEntitySet, sValueBinding, bNavigationPathsOnly) {
		var oConfig, oUOM, aResult = [], oMetaData;

		if (oMetaModel && oEntitySet && sValueBinding) {
			// prepare the meta data.
			oMetaData = {
				entitySet: oEntitySet,
				entityType: oMetaModel.getODataEntityType(oEntitySet.entityType),
				path: sValueBinding
			};

			// get the config.
			oConfig = {
				helper: new ODataHelper(null, null, oMetaModel)
			};

			if (bNavigationPathsOnly) {
				oConfig.navigationPathOnly = bNavigationPathsOnly;
			}

			// complete the meta data.
			oConfig.helper.getProperty(oMetaData);

			// get the annotations from the entity set.
			SmartField._getFromEntitySet(aResult, oMetaData, oConfig);

			// get the annotations from the property.
			SmartField._getFromProperty(aResult, oMetaData, oConfig);

			// get the annotations from a unit of measure.
			oUOM = oConfig.helper.getUnitOfMeasure2(oMetaData);

			if (oUOM) {
				SmartField._getFromProperty(aResult, oUOM, oConfig);
			}

			// destroy the helper class.
			oConfig.helper.destroy();
		}

		return aResult;
	};

	/**
	 * Calculates the paths to the annotations on entity set.
	 * 
	 * @param {array} aResult The resulting paths
	 * @param {object} oMetaData The given meta data
	 * @param {object} oMetaData.entitySet The OData entity set definition
	 * @param {object} oMetaData.entityType The OData entity type definition
	 * @param {object} oMetaData.property The OData property definition
	 * @param {object} oConfig The given configuration
	 * @param {sap.ui.comp.smartfield.ODataHelper} oConfig.helper The given helper
	 * @param {boolean} oConfig.navigationPathOnly If set to <code>true</code>, no properties will be returned
	 * @private
	 */
	SmartField._getFromEntitySet = function(aResult, oMetaData, oConfig) {
		var sPath;

		if (oMetaData.entitySet) {
			sPath = oConfig.helper.oAnnotation.getUpdateEntitySetPath(oMetaData.entitySet);
			SmartField._push(sPath, aResult, oMetaData, oConfig);
		}
	};

	/**
	 * Pushes a path, if it is not null.
	 * 
	 * @param {string} sPath The given path
	 * @param {array} aResult The resulting paths
	 * @param {object} oMetaData The given meta data
	 * @param {object} oMetaData.entitySet The OData entity set definition
	 * @param {object} oMetaData.entityType The OData entity type definition
	 * @param {object} oMetaData.property The OData property definition
	 * @param {object} oConfig The given configuration
	 * @param {sap.ui.comp.smartfield.ODataHelper} oConfig.helper The given helper
	 * @param {boolean} oConfig.navigationPathOnly If set to <code>true</code>, no properties will be returned
	 * @private
	 */
	SmartField._push = function(sPath, aResult, oMetaData, oConfig) {
		var aPath, sPart, len, sOut, oResult = {};

		if (sPath) {
			if (oConfig.navigationPathOnly) {
				aPath = sPath.split("/");
				len = aPath.length;
				oResult.entityType = oMetaData.entityType;

				while (len--) {
					sPart = aPath.shift();

					if (sPart === "") {
						continue;
					}

					oResult = oConfig.helper.getNavigationProperty(oResult.entityType, sPart);

					if (!oResult.entitySet) {
						break;
					}

					if (sOut) {
						sOut = sOut + "/" + sPart;
					} else {
						sOut = sPart;
					}
				}
			} else {
				sOut = sPath;
			}
		}

		if (sOut) {
			if (oMetaData.navigationPath) {
				aResult.push(oMetaData.navigationPath + "/" + sOut);
			} else {
				aResult.push(sOut);
			}
		}
	};

	/**
	 * Calculates the paths to the annotations on property.
	 * 
	 * @param {array} aResult The resulting path.
	 * @param {object} oMetaData The given meta data
	 * @param {object} oMetaData.entitySet The OData entity set definition
	 * @param {object} oMetaData.entityType The OData entity type definition
	 * @param {object} oMetaData.property The OData property definition
	 * @param {object} oConfig The given configuration
	 * @param {sap.ui.comp.smartfield.ODataHelper} oConfig.helper The given helper
	 * @param {boolean} oConfig.navigationPathOnly If set to <code>true</code>, no properties will be returned
	 * @private
	 */
	SmartField._getFromProperty = function(aResult, oMetaData, oConfig) {
		var sPath;

		if (oMetaData.property.property) {
			sPath = oConfig.helper.oAnnotation.getText(oMetaData.property.property);
			SmartField._push(sPath, aResult, oMetaData, oConfig);

			sPath = oConfig.helper.oAnnotation.getUnit(oMetaData.property.property);
			SmartField._push(sPath, aResult, oMetaData, oConfig);

			sPath = oConfig.helper.oAnnotation.getFieldControlPath(oMetaData.property.property);
			SmartField._push(sPath, aResult, oMetaData, oConfig);
		}
	};

	/**
	 * Adds some object with the ID <code>sId</code> to the association identified by <code>sAssociationName</code> and marks this ManagedObject
	 * as changed. This method does not avoid duplicates. <b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the
	 * class documentation</a>. Applications or frameworks must not use this method to generically add an object to an association. Use the concrete
	 * method add<i>XYZ</i> for association 'XYZ' or the generic {@link #applySettings} instead.
	 * 
	 * @param {string} sAssociationName the string identifying the association the object should be added to.
	 * @param {string | sap.ui.base.ManagedObject} sId the ID of the ManagedObject object to add; if empty, nothing is added; if a
	 *        <code>sap.ui.base.ManagedObject</code> is given, its ID is added
	 * @param {boolean} [bSuppressInvalidate] if true, this managed object as well as the newly associated object are not marked as changed
	 * @return {sap.ui.base.ManagedObject} Returns <code>this</code> to allow method chaining
	 * @protected
	 */
	SmartField.prototype.addAssociation = function(sAssociationName, sId, bSuppressInvalidate) {
		if (sAssociationName === "ariaLabelledBy") {
			this.getInnerControls().forEach(function(oControl) {
				if (oControl.addAriaLabelledBy) {
					oControl.addAriaLabelledBy(sId);
				}
			});
		}
		Control.prototype.addAssociation.apply(this, arguments);
	};

	return SmartField;

}, /* bExport= */true);

}; // end of sap/ui/comp/smartfield/SmartField.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.SmartLabel') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartfield.SmartLabel.
jQuery.sap.declare('sap.ui.comp.smartfield.SmartLabel'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.m.LabelRenderer'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/SmartLabel",[
	'jquery.sap.global', 'sap/m/Label', 'sap/m/LabelRenderer', 'sap/ui/comp/library', './BindingUtil', "./AnnotationHelper", "./SmartField"
], function(jQuery, Label, LabelRenderer, library, BindingUtil, AnnotationHelper, SmartField) {
	"use strict";

	/**
	 * Constructor for a new smartfield/SmartLabel.
	 * 
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * @class The SmartLabel control extends {@link sap.m.Label sap.m.Label} and displays the label for
	 *        {@link sap.ui.comp.smartfield.SmartField SmartField}. It uses the annotations <code>sap:label</code> or
	 *        <code>com.sap.vocabularies.Common.v1.Label</code> for the label text and <code>sap:quickinfo</code> or
	 *        <code>com.sap.vocabularies.Common.v1.QuickInfo</code> for the tooltip. The mandatory indicator is obtained from the SmartField
	 *        control. The association with a SmartField control is built using the setLabelFor method.
	 * @extends sap.m.Label
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartfield.SmartLabel
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var SmartLabel = Label.extend("sap.ui.comp.smartfield.SmartLabel", /** @lends sap.ui.comp.smartfield.SmartLabel.prototype */
	{
		metadata: {

			library: "sap.ui.comp"
		},
		renderer: LabelRenderer.render
	});

	SmartLabel.prototype.init = function() {

		this._sSmartFieldId = null;
	};

	/**
	 * Binds the required property to mandatory property of the assigned SmartField.
	 * 
	 * @private
	 */
	SmartLabel.prototype.bindRequiredPropertyToSmartField = function() {
		var oInfo = null, oBinding = null;

		var oSmartField = this._getField();

		if (oSmartField && oSmartField.getContextEditable() && oSmartField.getEditable()) {
			oBinding = new BindingUtil();
			oInfo = oSmartField.getBindingInfo("mandatory");
			if (oInfo) {
				this.bindProperty("required", oBinding.toBinding(oInfo));
			} else {
				this.setRequired(oSmartField.getMandatory());
			}
		} else {
			this.unbindProperty("required");
			this.setRequired(false);
		}
	};

	/**
	 * Binds the label properties.
	 * 
	 * @private
	 */
	SmartLabel.prototype._bindProperties = function() {

		var oSmartField = this._getField();

		if (oSmartField) {
			var oBinding = new BindingUtil();

			var oInfo = oSmartField.getBindingInfo("visible");
			if (oInfo) {
				this.bindProperty("visible", oBinding.toBinding(oInfo));
			} else {
				this.setVisible(oSmartField.getVisible());
			}

			this.bindRequiredPropertyToSmartField();

			oInfo = oSmartField.getBindingInfo("textLabel");
			if (oInfo) {
				this.bindProperty("text", oBinding.toBinding(oInfo));
			} else {
				if (!this.getBindingInfo("text")) {
					this.setText(oSmartField.getTextLabel());
				}
			}

			oInfo = oSmartField.getBindingInfo("tooltipLabel");
			if (oInfo) {
				this.bindProperty("tooltip", oBinding.toBinding(oInfo));
			} else {
				this.setTooltip(oSmartField.getTooltipLabel());
			}
		}

	};

	/**
	 * Triggers the obtainment of the meta data.
	 * 
	 * @private
	 */
	SmartLabel.prototype.getLabelInfo = function() {

		var oMetaDataProperty, oLabelInfo;

		var oSmartField = this._getField();

		if (oSmartField) {

			this._bindProperties();

			oMetaDataProperty = oSmartField.getDataProperty();
			if (oMetaDataProperty) {
				oLabelInfo = this._getLabelInfo(oMetaDataProperty);
				if (oLabelInfo) {
					if (oLabelInfo.text) {
						this._setProperty(this, "text", oLabelInfo.text);
					}
					if (oLabelInfo.quickinfo) {
						this._setProperty(this, "tooltip", oLabelInfo.quickinfo);
					}
				}
			}
		}
	};

	SmartLabel.prototype._setProperty = function(oObj, sProperty, sValue) {

		var sProp;

		if (oObj && sProperty) {

			if (sValue.match(/{@i18n>.+}/gi)) {
				oObj.bindProperty(sProperty, sValue.substring(1, sValue.length - 1));
			} else {
				sProp = sProperty.substring(0, 1).toUpperCase() + sProperty.substring(1);
				if (!oObj.getBindingInfo(sProperty) && !oObj["get" + sProp]()) {
					oObj["set" + sProp](sValue);
				}
			}
		}
	};

	/**
	 * Assigns SmartField.
	 * 
	 * @param {sap.ui.comp.SmartField} oSmartField The associated SmartField control
	 * @public
	 */
	SmartLabel.prototype.setLabelFor = function(oSmartField) {

		if (oSmartField) {

			if (typeof oSmartField === 'string') {
				this._sSmartFieldId = oSmartField;
			} else {
				this._sSmartFieldId = oSmartField.getId();
			}

			this._setLabelFor();

			sap.m.Label.prototype.setLabelFor.apply(this, [
				oSmartField
			]);
		}
	};

	SmartLabel.prototype._getField = function() {

		if (this._sSmartFieldId) {
			return sap.ui.getCore().byId(this._sSmartFieldId);
		}

		return null;
	};

	SmartLabel.prototype._setLabelFor = function() {

		var oDataProperty;

		var oSmartField = this._getField();

		if (oSmartField) {
			if (oSmartField && !this._bMetaDataApplied) {
				this._bMetaDataApplied = true;
				if (oSmartField.getDataProperty) {
					oDataProperty = oSmartField.getDataProperty();
					if (oDataProperty) {
						this.getLabelInfo();
					} else {
						oSmartField.attachInitialise(jQuery.proxy(this.getLabelInfo, this));
					}
				}
			}
		}
	};

	SmartLabel.prototype.updateLabelFor = function(aControls) {

		if (aControls && aControls.length > 0) {
			sap.m.Label.prototype.setLabelFor.apply(this, [
				aControls[0]
			]);
			aControls.splice(0, 1);
			this.updateAriaLabeledBy(aControls);
		}
	};

	SmartLabel.prototype.updateAriaLabeledBy = function(aControls) {

		if (aControls) {
			for (var i = 0; i < aControls.length; i++) {
				if (aControls[i].addAriaLabelledBy) {
					aControls[i].addAriaLabelledBy(this);
				}
			}
		}
	};

	SmartLabel.prototype.setText = function(sValue) {
		this.setProperty("text", sValue);
	};

	/**
	 * Retrieves all label related data from the OData property of a field
	 * 
	 * @param {object} oProperty the definition of a property of an OData entity.
	 * @returns {object} describing label specific data
	 * @private
	 */
	SmartLabel.prototype._getLabelInfo = function(oProperty) {

		var oAnnatotionHelper = new AnnotationHelper();

		if (oProperty && oProperty.property) {
			return {
				text: oAnnatotionHelper.getLabel(oProperty.property),
				quickinfo: oAnnatotionHelper.getQuickInfo(oProperty.property)
			};
		}
	};

	SmartLabel.prototype.onBeforeRendering = function() {

		if (this._sSmartFieldId && !this._bMetaDataApplied) {
			this._setLabelFor();

			var oSmartField = this._getField();
			if ((oSmartField && oSmartField instanceof SmartField) && (oSmartField.getId() === this.getLabelFor())) {
				this.updateLabelFor(oSmartField.getInnerControls());
			}
		}
	};

	/**
	 * Cleans up the resources associated with this element and all its children. After an element has been destroyed, it can no longer be used on the
	 * UI. Applications should call this method if they don't need the element any longer.
	 * 
	 * @param {boolean} bSuppressInvalidate If set to <code>true</code>, UI element is not marked for redraw
	 * @public
	 */
	SmartLabel.prototype.destroy = function(bSuppressInvalidate) {

		this._sSmartFieldId = null;

		Label.prototype.destroy.apply(this, [
			bSuppressInvalidate
		]);
	};

	return SmartLabel;

}, /* bExport= */true);

}; // end of sap/ui/comp/smartfield/SmartLabel.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfilterbar.FilterProvider') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// -----------------------------------------------------------------------------
// Generates the data-model required for SmartFilter using SAP-Annotations metadata
// -----------------------------------------------------------------------------
jQuery.sap.declare('sap.ui.comp.smartfilterbar.FilterProvider'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.ComboBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.DatePicker'); // unlisted dependency retained
jQuery.sap.require('sap.m.DateRangeSelection'); // unlisted dependency retained
jQuery.sap.require('sap.m.TimePicker'); // unlisted dependency retained
jQuery.sap.require('sap.m.Input'); // unlisted dependency retained
jQuery.sap.require('sap.m.MultiComboBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.MultiInput'); // unlisted dependency retained
jQuery.sap.require('sap.m.SearchField'); // unlisted dependency retained
jQuery.sap.require('sap.m.Token'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfilterbar/FilterProvider",[
	'jquery.sap.global', 'sap/m/ComboBox', 'sap/m/DatePicker', 'sap/m/DateRangeSelection', 'sap/m/TimePicker', 'sap/m/Input', 'sap/m/MultiComboBox', 'sap/m/MultiInput', 'sap/m/SearchField', 'sap/m/Token', 'sap/ui/comp/odata/MetadataAnalyser', 'sap/ui/comp/providers/ValueHelpProvider', 'sap/ui/comp/providers/ValueListProvider', 'sap/ui/model/Filter', 'sap/ui/model/json/JSONModel', 'sap/ui/comp/odata/ODataType', 'sap/ui/comp/util/FormatUtil'
], function(jQuery, ComboBox, DatePicker, DateRangeSelection, TimePicker, Input, MultiComboBox, MultiInput, SearchField, Token, MetadataAnalyser, ValueHelpProvider, ValueListProvider, Filter, JSONModel, ODataType, FormatUtil) {
	"use strict";

	/**
	 * Constructs a class to generate the view/datamodel metadata for the SmartFilterBar from the SAP-Annotations metadata
	 *
	 * @constructor
	 * @experimental This module is only for internal/experimental use!
	 * @public
	 * @param {object} mPropertyBag - PropertyBag having members model, serviceUrl, entityType, additionalConfiguration
	 * @author Pavan Nayak, Thomas Biesemann
	 */
	var FilterProvider = function(mPropertyBag) {
		this._bInitialized = false;
		this._bPending = true;
		if (mPropertyBag) {
			this._oParentODataModel = mPropertyBag.model;
			this._sServiceURL = mPropertyBag.serviceUrl;
			this._sBasicSearchFieldName = mPropertyBag.basicSearchFieldName;
			this._isBasicSearchEnabled = mPropertyBag.enableBasicSearch;
			this._bUseContainsAsDefault = mPropertyBag.useContainsAsDefaultFilter === "true";
			this.sEntityType = mPropertyBag.entityType;
			this._isRunningInValueHelpDialog = mPropertyBag.isRunningInValueHelpDialog;
			this._oAdditionalConfiguration = mPropertyBag.additionalConfiguration;
			this.sDefaultDropDownDisplayBehaviour = mPropertyBag.defaultDropDownDisplayBehaviour;
			this.sDefaultTokenDisplayBehaviour = mPropertyBag.defaultTokenDisplayBehaviour;
			if (typeof mPropertyBag.dateFormatSettings === "string") {
				try {
					this._oDateFormatSettings = mPropertyBag.dateFormatSettings ? JSON.parse(mPropertyBag.dateFormatSettings) : undefined;
				} catch (ex) {
					// Invalid dateformat provided!
				}
			} else {
				this._oDateFormatSettings = mPropertyBag.dateFormatSettings;
			}
			// Used for IN param handling (visible field)
			// TODO: CleanUp - a better handling
			this._oSmartFilter = mPropertyBag.smartFilter;
		}
		this.sFilterModelName = FilterProvider.FILTER_MODEL_NAME;
		this._sBasicFilterAreaID = FilterProvider.BASIC_FILTER_AREA_ID;
		this._aFilterBarViewMetadata = [];
		this._aFilterBarMultiValueFieldMetadata = [];
		this._aFilterBarDateFieldNames = [];
		this._aFilterBarTimeFieldNames = [];
		this._aFilterBarTimeIntervalFieldNames = [];
		this._aFilterBarDateTimeMultiValueFieldNames = [];
		this._aFilterBarStringFieldNames = [];
		// Array of FieldGroups from FieldGroup annotations
		this._aFieldGroupAnnotation = [];
		this._oMetadataAnalyser = new MetadataAnalyser(this._oParentODataModel || this._sServiceURL);
		// Initialise the model early so this can already be passed to the necessary helper classes --> Ex: BaseValueListProvider
		this.oModel = new JSONModel();

		this._aValueListProvider = [];
		this._aValueHelpDialogProvider = [];
		this._mConditionTypeFields = {};
		this._intialiseMetadata();
		this._bInitialized = true;
	};

	FilterProvider.FILTER_MODEL_NAME = "fi1t3rM0d31";
	FilterProvider.BASIC_FILTER_AREA_ID = "_BASIC";
	FilterProvider.BASIC_SEARCH_FIELD_ID = "_BASIC_SEARCH_FIELD";
	FilterProvider.CUSTOM_FIELDS_MODEL_PROPERTY = "_CUSTOM";
	FilterProvider.FIELD_NAME_REGEX = /\./g;

	/**
	 * Initialises the necessary filter metadata and model
	 *
	 * @private
	 */
	FilterProvider.prototype._intialiseMetadata = function() {
		var iGroupLen, iFieldLen, oODataFilterGroup, aODataFilterGroups, i, j, oODataFilterField, oFieldMetadata, oGroupMetadata, aCustomFilterField, aCustomGroup;
		// first, create a Basic Area Group (groupId/groupName shall be "_BASIC")
		this._aFilterBarViewMetadata.push({
			groupName: this._sBasicFilterAreaID,
			index: 0, // should be the 1st group on the UI
			fields: []
		});
		// Store name without namespace to determine the main entity (used for association filter expression)
		this.sEntityTypeName = this._oMetadataAnalyser.removeNamespace(this.sEntityType);
		aODataFilterGroups = this._oMetadataAnalyser.getAllFilterableFieldsByEntityTypeName(this.sEntityType);
		if (aODataFilterGroups) {
			// update TextArrangement
			this._updateDisplayBehaviour();

			// Get the array of FieldGroup annotations
			this._aFieldGroupAnnotation = this._oMetadataAnalyser.getFieldGroupAnnotation(this.sEntityType);

			// Create groups based on FieldGroup annotation
			if (this._aFieldGroupAnnotation) {
				iGroupLen = this._aFieldGroupAnnotation.length;
				for (i = 0; i < iGroupLen; i++) {
					// Create metadata for group
					oODataFilterGroup = this._aFieldGroupAnnotation[i];
					oGroupMetadata = this._createGroupMetadata(oODataFilterGroup);
					oGroupMetadata.index = this._aFilterBarViewMetadata.length; // Set the index to maintain the order
					this._aFilterBarViewMetadata.push(oGroupMetadata);
				}
			}

			// Create groups and fields based on entity metadata
			iGroupLen = aODataFilterGroups.length;
			for (i = 0; i < iGroupLen; i++) {
				// Create metadata for group
				oODataFilterGroup = aODataFilterGroups[i];
				iFieldLen = oODataFilterGroup.fields.length;
				oGroupMetadata = this._createGroupMetadata(oODataFilterGroup);
				this._aFilterBarViewMetadata.push(oGroupMetadata);

				// Create metadata for fields
				for (j = 0; j < iFieldLen; j++) {
					oODataFilterField = oODataFilterGroup.fields[j];
					// Check if field is not a Primitive type --> only generate metadata for primitive/simple type fields
					if (oODataFilterField.type.indexOf("Edm.") === 0) {
						oFieldMetadata = this._createFieldMetadata(oODataFilterField);
						oGroupMetadata.fields.push(oFieldMetadata);
					}
				}
			}
		}

		// custom groups
		aCustomGroup = this._getAdditionalConfigurationForCustomGroups(aODataFilterGroups);
		iGroupLen = aCustomGroup.length;
		for (j = 0; j < iGroupLen; j++) {
			oGroupMetadata = this._createGroupMetadataForCustomGroup(aCustomGroup[j]);
			if (oGroupMetadata) {
				this._aFilterBarViewMetadata.push(oGroupMetadata);
			}
		}

		// custom filter fields
		aCustomFilterField = this._getAdditionalConfigurationForCustomFilterFields();
		iFieldLen = aCustomFilterField.length;
		for (j = 0; j < iFieldLen; j++) {
			oFieldMetadata = this._createFieldMetadataForCustomFilterFields(aCustomFilterField[j]);
			if (oFieldMetadata) {
				this._aFilterBarViewMetadata[0].fields.push(oFieldMetadata);
			}
		}

		// Basic search
		if (this._hasBasicSearch()) {
			oFieldMetadata = this._createBasicSearchFieldMetadata();
			this._aFilterBarViewMetadata[0].fields.push(oFieldMetadata);
		}

		this._applyGroupId();
		this._applyIndexes();
		this._createInitialModel(true);
		this._initializeConditionTypeFields();
		this.setPending(this.isPending());
	};

	FilterProvider.prototype.attachPendingChange = function(fn) {
		this._fPendingChange = fn;
	};

	FilterProvider.prototype.detachPendingChange = function() {
		this._fPendingChange = null;
	};

	FilterProvider.prototype.setPending = function(bValue) {
		var bChanged = this._bPending !== bValue;
		this._bPending = bValue;
		if (bChanged && this._fPendingChange) {
			this._fPendingChange(bValue);
		}
	};

	FilterProvider.prototype.isPending = function() {
		if (!this._bInitialized) {
			return true;
		}
		for ( var n in this._mConditionTypeFields) {
			if (this._mConditionTypeFields[n].conditionType.isPending()) {
				return true;
			}
		}
		return false;
	};

	/**
	 * Updates the displayBehaviour from TextArrangment annotation, if necessary
	 *
	 * @private
	 */
	FilterProvider.prototype._updateDisplayBehaviour = function() {
		this._sTextArrangementDisplayBehaviour = this._oMetadataAnalyser.getTextArrangementValue(this.sEntityType);
		if (!this.sDefaultDropDownDisplayBehaviour) {
			if (this._sTextArrangementDisplayBehaviour) {
				this.sDefaultDropDownDisplayBehaviour = this._sTextArrangementDisplayBehaviour;
			} else {
				this.sDefaultDropDownDisplayBehaviour = sap.ui.comp.smartfilterbar.ControlConfiguration.DISPLAYBEHAVIOUR.descriptionOnly;
			}
		}
		if (!this.sDefaultTokenDisplayBehaviour) {
			if (this._sTextArrangementDisplayBehaviour) {
				this.sDefaultTokenDisplayBehaviour = this._sTextArrangementDisplayBehaviour;
			} else {
				this.sDefaultTokenDisplayBehaviour = sap.ui.comp.smartfilterbar.ControlConfiguration.DISPLAYBEHAVIOUR.descriptionAndId;
			}
		}
	};

	/**
	 * Returns a flag indicating whether a field for the basic search shall be rendered or not
	 *
	 * @returns {boolean} Flag
	 * @private
	 */
	FilterProvider.prototype._hasBasicSearch = function() {
		return this._isBasicSearchEnabled;
	};

	/**
	 * Looks for custom filter fields from the additional configuration which have a name which is not known in the ODATA metadata
	 *
	 * @returns {Array} Array containing the the control configuration of the additional filter fields
	 * @private
	 */
	FilterProvider.prototype._getAdditionalConfigurationForCustomFilterFields = function() {
		var aControlConfiguration, length, nODataFilterFieldKeyLength, i, aResult, j, bFound, aODataFilterFieldName;

		// get additional control configuration
		if (!this._oAdditionalConfiguration) {
			return [];
		}
		aControlConfiguration = this._oAdditionalConfiguration.getControlConfiguration();

		// get field names from OData metadata
		aODataFilterFieldName = this._oMetadataAnalyser.getAllFilterableFieldNamesByEntityTypeName(this.sEntityType);
		if (!aODataFilterFieldName || !aODataFilterFieldName.length) {
			return aControlConfiguration;
		}

		aResult = [];
		nODataFilterFieldKeyLength = aODataFilterFieldName.length;
		length = aControlConfiguration.length;
		for (i = 0; i < length; i++) {
			bFound = false;
			for (j = 0; j < nODataFilterFieldKeyLength; j++) {
				if (aODataFilterFieldName[j] === aControlConfiguration[i].key) {
					bFound = true;
					break;
				}
			}
			if (!bFound) { // filter field for control configuration could not be found in OData metadata...this is a custom filter field!
				aResult.push(aControlConfiguration[i]);
			}
		}

		return aResult;
	};

	/**
	 * Looks for custom groups from the additional configuration which have a name which is not known in the ODATA metadata
	 *
	 * @param {object} aODataFilterGroups - groups from the ODATA metadata
	 * @returns {Array} Array containing the the group configuration of the custom groups
	 * @private
	 */
	FilterProvider.prototype._getAdditionalConfigurationForCustomGroups = function(aODataFilterGroups) {
		var aGroupConfiguration, length, nODataGroupsLength, i, aResult, j, bFound, sGroupName;

		// get additional group configuration
		if (!this._oAdditionalConfiguration) {
			return [];
		}
		aGroupConfiguration = this._oAdditionalConfiguration.getGroupConfiguration();

		// get groups from OData metadata
		if (!aODataFilterGroups || !aODataFilterGroups.length) {
			return aGroupConfiguration;
		}

		aResult = [];
		nODataGroupsLength = aODataFilterGroups.length;
		length = aGroupConfiguration.length;
		for (i = 0; i < length; i++) {
			bFound = false;
			for (j = 0; j < nODataGroupsLength; j++) {
				sGroupName = aODataFilterGroups[j].groupName || aODataFilterGroups[j].groupEntityName;
				if (sGroupName === aGroupConfiguration[i].key) {
					bFound = true;
					break;
				}
			}
			if (!bFound) { // group from group configuration could not be found in OData metadata...this is a custom group!
				aResult.push(aGroupConfiguration[i]);
			}
		}

		return aResult;
	};

	/**
	 * Initialises the necessary filter metadata and model
	 *
	 * @param {object} oJSONData - The JSON data from the model
	 * @param {object} oFilterFieldMetadata - The metadata for the filter field
	 * @param {boolean} bUseDefaultValues - whether default values from configuration shall be used
	 * @private
	 */
	FilterProvider.prototype._createInitialModelForField = function(oJSONData, oFilterFieldMetadata, bUseDefaultValues) {
		var aDefaultFilterValues, oDefaultFilterValue, bHasDefaultFilterValue = false, bIsRangeField = false, sLowValue = null, sHighValue = null, iLength, oItem = null, aItems = [], aRanges = [];
		// Model will no be created for custom filter fields..
		if (!oFilterFieldMetadata || oFilterFieldMetadata.isCustomFilterField) {
			return;
		}
		if (oFilterFieldMetadata.filterRestriction !== sap.ui.comp.smartfilterbar.ControlConfiguration.FILTERTYPE.multiple) {
			bIsRangeField = true;
		}
		if (bUseDefaultValues) {
			// Get the array of default filter values
			aDefaultFilterValues = oFilterFieldMetadata.defaultFilterValues;
			bHasDefaultFilterValue = aDefaultFilterValues && aDefaultFilterValues.length;
		}
		if (oFilterFieldMetadata.filterRestriction === sap.ui.comp.smartfilterbar.ControlConfiguration.FILTERTYPE.single) {
			// If there is a default filter value use only the low value of 1st one --> single filter scenario!
			if (bHasDefaultFilterValue) {
				oDefaultFilterValue = aDefaultFilterValues[0];
				sLowValue = oDefaultFilterValue.low;
			}
			oJSONData[oFilterFieldMetadata.fieldName] = sLowValue;

		} else if (oFilterFieldMetadata.filterRestriction === sap.ui.comp.smartfilterbar.ControlConfiguration.FILTERTYPE.interval && oFilterFieldMetadata.type !== "Edm.Time") {
			// If there is a default filter value use both low and high, but only of the 1st one --> interval filter scenario!
			if (bHasDefaultFilterValue) {
				oDefaultFilterValue = aDefaultFilterValues[0];
				sLowValue = oDefaultFilterValue.low;
				sHighValue = oDefaultFilterValue.high;
			}
			oJSONData[oFilterFieldMetadata.fieldName] = {
				low: sLowValue,
				high: sHighValue
			};
		} else {
			// If there is a default filter value use all the low values as keys --> multiple/range
			if (bHasDefaultFilterValue) {
				iLength = aDefaultFilterValues.length;
				while (iLength--) {
					oDefaultFilterValue = aDefaultFilterValues[iLength];
					if (bIsRangeField) {
						oItem = {
							"exclude": oDefaultFilterValue.sign === "E",
							"operation": oDefaultFilterValue.operator,
							"keyField": oFilterFieldMetadata.fieldName,
							"value1": oDefaultFilterValue.low,
							"value2": oDefaultFilterValue.high
						};

					} else {
						oItem = {
							key: oDefaultFilterValue.low,
							text: oDefaultFilterValue.low
						};
					}

					aItems.push(oItem);
				}
			}
			// Add this to the local multi-value field array
			this._aFilterBarMultiValueFieldMetadata.push(oFilterFieldMetadata);
			// Update the model
			oJSONData[oFilterFieldMetadata.fieldName] = {
				value: null
			};
			if (bIsRangeField) {
				aRanges = aItems.slice(0);
				aItems = [];
				oJSONData[oFilterFieldMetadata.fieldName].ranges = aRanges;
			}
			oJSONData[oFilterFieldMetadata.fieldName].items = aItems;

			// Update the corresponding control with array value
			this._updateMultiValueControl(oFilterFieldMetadata.control, aItems, aRanges);
		}
	};

	/**
	 * Initialises the JSON model for filter fields
	 *
	 * @param {boolean} bUseDefaultValues - whether default values from configuration shall be used
	 * @private
	 */
	FilterProvider.prototype._createInitialModel = function(bUseDefaultValues) {
		var oJSONData, iGroupLength, iFieldLength, oGroup, j, i;
		oJSONData = {};
		this._bCreatingInitialModel = true;
		// This will now be recreated if required
		this._aFilterBarMultiValueFieldMetadata = [];
		if (this._aFilterBarViewMetadata) {
			iGroupLength = this._aFilterBarViewMetadata.length;
			for (i = 0; i < iGroupLength; i++) {
				oGroup = this._aFilterBarViewMetadata[i];
				iFieldLength = oGroup.fields.length;
				for (j = 0; j < iFieldLength; j++) {
					this._createInitialModelForField(oJSONData, oGroup.fields[j], bUseDefaultValues);
				}
			}
		}
		this.oModel.setData(oJSONData);
		this._updateConditionTypeFields([]);
		this._bCreatingInitialModel = false;
	};

	/**
	 * Updates the multi-value control with initial/filter data
	 *
	 * @param {Object} oControl - the control to be updated
	 * @param {Array} aItems = the array of key, text values to be set in the control
	 * @param {Array} aRanges = the array of range values to be set in the control
	 * @private
	 */
	FilterProvider.prototype._updateMultiValueControl = function(oControl, aItems, aRanges) {
		var i = 0, aTokens = null, oToken = null, oRange = null, sText = null, aKeys = null;
		// MultiComboBox and MultiInput fields cannot be bound, since the tokens are created internally and do not support 2 way binding
		// In case the model is reset/set initially, set the tokens manually through this
		if (oControl && aItems) {
			i = aItems.length;
			if (oControl instanceof MultiInput) {
				aTokens = [];
				while (i--) {
					sText = aItems[i].text || aItems[i].key;
					aTokens.push(new Token({
						key: aItems[i].key,
						text: sText,
						tooltip: sText
					}));
				}
				if (aRanges) {
					i = aRanges.length;
					while (i--) {
						oRange = aRanges[i];
						if (oRange.tokenText) {
							sText = oRange.tokenText;
						} else {
							sText = FormatUtil.getFormattedRangeText(oRange.operation, oRange.value1, oRange.value2, oRange.exclude);
						}
						oToken = new Token({
							text: sText,
							tooltip: sText
						});
						oToken.data("range", oRange);
						aTokens.push(oToken);
					}
				}
				oControl.setTokens(aTokens);
			}
			if (oControl instanceof MultiComboBox) {
				aKeys = [];
				while (i--) {
					aKeys.push(aItems[i].key);
				}
				oControl.setSelectedKeys(aKeys);
			}
		}
	};

	/**
	 * Updates the view metadata by applying index of groups and fields from the additional configuration.
	 *
	 * @private
	 */
	FilterProvider.prototype._applyIndexes = function() {
		var groupLength, i;

		if (!this._aFilterBarViewMetadata) {
			return;
		}

		// sort groups by index
		this._aFilterBarViewMetadata = this._sortByIndex(this._aFilterBarViewMetadata);

		groupLength = this._aFilterBarViewMetadata.length;
		for (i = 0; i < groupLength; i++) {
			// sort fields of a group by index
			if (this._aFilterBarViewMetadata[i].fields) {
				this._aFilterBarViewMetadata[i].fields = this._sortByIndex(this._aFilterBarViewMetadata[i].fields);
			}
		}
	};

	/**
	 * Returns a new Array containing all Elements from the incoming Array and the order was changed considering the indexes
	 *
	 * @param {Array} aArray - Array of objects having an index property
	 * @returns {Array} sorted array
	 * @private
	 */
	FilterProvider.prototype._sortByIndex = function(aArray) {
		var aFieldsHavingAnIndex, i, length, j, length2, aResult;

		if (!aArray || !aArray.length) {
			return aArray;
		}
		aResult = [];
		aFieldsHavingAnIndex = [];
		length = aArray.length;
		for (i = 0; i < length; i++) {
			if (parseInt(aArray[i].index, 10) || aArray[i].index === 0) {
				if (aFieldsHavingAnIndex.length === 0) {
					aFieldsHavingAnIndex.push(aArray[i]);
				} else {
					length2 = aFieldsHavingAnIndex.length;
					for (j = 0; j < length2; j++) {
						if (aFieldsHavingAnIndex[j].index > aArray[i].index) {
							aFieldsHavingAnIndex.splice(j, 0, aArray[i]);
							break;
						} else if (j + 1 === aFieldsHavingAnIndex.length) {
							aFieldsHavingAnIndex.push(aArray[i]);
							break;
						}
					}
				}
			} else {
				aResult.push(aArray[i]); // fields having no index...
			}
		}

		length = aFieldsHavingAnIndex.length;
		for (i = 0; i < length; i++) {
			if (aFieldsHavingAnIndex[i].index > aResult.length) {
				aResult.push(aFieldsHavingAnIndex[i]);
			} else {
				aResult.splice(aFieldsHavingAnIndex[i].index, 0, aFieldsHavingAnIndex[i]);
			}
		}
		return aResult;
	};

	/**
	 * Updates the view metadata by applying the groupId from the additional configuration.
	 *
	 * @private
	 */
	FilterProvider.prototype._applyGroupId = function() {
		var groupLength, i, fieldLength, j, oField, oNewParentGroup, k;
		groupLength = this._aFilterBarViewMetadata.length;

		for (i = 0; i < groupLength; i++) {
			if (!this._aFilterBarViewMetadata[i].fields) { // if there are no fields...
				continue;
			}
			fieldLength = this._aFilterBarViewMetadata[i].fields.length;
			for (j = 0; j < fieldLength; j++) {
				oField = this._aFilterBarViewMetadata[i].fields[j];
				if (oField && oField.groupId && oField.groupId !== this._aFilterBarViewMetadata[i].groupName) {
					// Find new parent group
					oNewParentGroup = undefined;
					for (k = 0; k < groupLength; k++) {
						if (this._aFilterBarViewMetadata[k].groupName === oField.groupId) {
							oNewParentGroup = this._aFilterBarViewMetadata[k];
							break;
						}
					}

					// Move field to new parent group
					if (oNewParentGroup) {
						this._aFilterBarViewMetadata[i].fields.splice(j, 1);
						j--;
						fieldLength--;
						oNewParentGroup.fields = oNewParentGroup.fields || [];
						oNewParentGroup.fields.push(oField);
					}
				}
			}
		}
	};

	/**
	 * Creates a group based on the OData metadata
	 *
	 * @private
	 * @param {object} oODataFilterBarGroup - OData metadata for group
	 * @returns {object} view metadata for group
	 */
	FilterProvider.prototype._createGroupMetadata = function(oODataFilterBarGroup) {
		var oGroupMetadata, oGroupConfiguration, sGroupName;

		sGroupName = oODataFilterBarGroup.groupName || oODataFilterBarGroup.groupEntityName;
		// Get additional configuration for groups
		oGroupConfiguration = this._oAdditionalConfiguration.getGroupConfigurationByKey(sGroupName);

		oGroupMetadata = {};
		oGroupMetadata.groupName = sGroupName;
		oGroupMetadata.groupLabel = this._getGroupLabel(oODataFilterBarGroup, oGroupConfiguration); // if label is specified in additional
		// configuration,
		// pick this
		// one
		oGroupMetadata.fields = [];
		oGroupMetadata.index = this._getGroupIndex(oGroupConfiguration);

		return oGroupMetadata;
	};

	/**
	 * Creates a group based on the additional configuration (GroupConfiguration)
	 *
	 * @private
	 * @param {object} oGroupConfiguration - OData metadata for group
	 * @returns {object} view metadata for group
	 */
	FilterProvider.prototype._createGroupMetadataForCustomGroup = function(oGroupConfiguration) {
		var oGroupMetadata;

		oGroupMetadata = {};
		oGroupMetadata.groupName = oGroupConfiguration.key;
		oGroupMetadata.groupLabel = oGroupConfiguration.label;
		// one
		oGroupMetadata.fields = [];
		oGroupMetadata.index = this._getGroupIndex(oGroupConfiguration);

		return oGroupMetadata;
	};

	/**
	 * Creates the control instance based on the OData Metadata and additional configuration
	 *
	 * @param {Object} oFieldViewMetadata - resolved filter view data with OData metadata and control configuration
	 * @returns {Object} an instance of the control to be used in the SmartFilterBar
	 * @private
	 */
	FilterProvider.prototype._createControl = function(oFieldViewMetadata) {
		var oControl, oType, bIsInterval = false, oFormatOptions, oConstraints = {}, iMaxLength, fClearModel;

		// if a custom control is specified, use it
		if (oFieldViewMetadata.customControl) {
			return oFieldViewMetadata.customControl;
		}

		// Set constraints from metadata
		if (oFieldViewMetadata.precision || oFieldViewMetadata.scale) {
			oConstraints.precision = oFieldViewMetadata.precision;
			oConstraints.scale = oFieldViewMetadata.scale;
		}
		if (oFieldViewMetadata.maxLength) {
			oConstraints.maxLength = oFieldViewMetadata.maxLength;
		}
		if (oFieldViewMetadata.displayFormat) {
			oConstraints.displayFormat = oFieldViewMetadata.displayFormat;
		}

		// Set Format options from metadata (only for date type for now)
		if (oFieldViewMetadata.fControlConstructor === DateRangeSelection || oFieldViewMetadata.fControlConstructor === DatePicker) {
			oFormatOptions = this._oDateFormatSettings;
		}
		oType = ODataType.getType(oFieldViewMetadata.type, oFormatOptions, oConstraints);

		oControl = new oFieldViewMetadata.fControlConstructor();
		if (oFieldViewMetadata.fControlConstructor === DateRangeSelection) {
			oControl.bindProperty('dateValue', this.sFilterModelName + ">/" + oFieldViewMetadata.fieldName + "/low");
			oControl.bindProperty('secondDateValue', this.sFilterModelName + ">/" + oFieldViewMetadata.fieldName + "/high");
		} else if (oFieldViewMetadata.fControlConstructor === ComboBox) {
			if (oControl.setForceSelection) {
				oControl.setForceSelection(true);
			}
			this._associateValueList(oControl, "items", oFieldViewMetadata);
			// Listen to the selection change and update the model accordingly
			oControl.attachSelectionChange(function() {
				// Do nothing while the data is being created/updated!
				if (this._bUpdatingFilterData || this._bCreatingInitialModel) {
					return;
				}
				// Manually trigger the change event on sapUI5 control since it doesn't do this internally on selectionChange!
				oControl.fireChange({
					filterChangeReason: oFieldViewMetadata.fieldName,
					value: ""
				});
			}.bind(this));
			oControl.bindProperty('selectedKey', this.sFilterModelName + ">/" + oFieldViewMetadata.fieldName);
		} else if (oFieldViewMetadata.fControlConstructor === MultiComboBox) {
			this._associateValueList(oControl, "items", oFieldViewMetadata);
			// Listen to the selection change and update the model accordingly
			oControl.attachSelectionChange(function(oEvt) {
				// Do nothing while the data is being created/updated!
				if (this._bUpdatingFilterData || this._bCreatingInitialModel) {
					return;
				}
				var oCtrl = oEvt.getSource(), aSelectedItems = null, aKeys = [], iLength;
				aSelectedItems = oCtrl.getSelectedItems();
				if (aSelectedItems) {
					iLength = aSelectedItems.length;
					while (iLength--) {
						aKeys.push({
							key: aSelectedItems[iLength].getKey(),
							text: aSelectedItems[iLength].getText()
						});
					}
				}
				if (this.oModel) {
					this.oModel.setProperty("/" + oFieldViewMetadata.fieldName + "/items", aKeys);
				}
				// Manually trigger the change event on sapUI5 control since it doesn't do this internally on selectionChange!
				oCtrl.fireChange({
					filterChangeReason: oFieldViewMetadata.fieldName,
					value: ""
				});
			}.bind(this));
			oControl.bindProperty('value', this.sFilterModelName + ">/" + oFieldViewMetadata.fieldName + "/value");
		} else if (oFieldViewMetadata.fControlConstructor === MultiInput) {
			if (oFieldViewMetadata.controlType === sap.ui.comp.smartfilterbar.ControlConfiguration.CONTROLTYPE.date || oFieldViewMetadata.type === "Edm.Time") {
				oControl.setValueHelpOnly(true);
				if (oFieldViewMetadata.filterRestriction === sap.ui.comp.smartfilterbar.ControlConfiguration.FILTERTYPE.interval) {
					this._associateValueHelpDialog(oControl, oFieldViewMetadata, false, false);
				} else {
					this._associateValueHelpDialog(oControl, oFieldViewMetadata, true, true);
				}
			} else {
				if (oFieldViewMetadata.hasValueHelpDialog) {
					this._associateValueHelpDialog(oControl, oFieldViewMetadata, oFieldViewMetadata.filterRestriction !== sap.ui.comp.smartfilterbar.ControlConfiguration.FILTERTYPE.multiple, true);
				} else {
					oControl.setShowValueHelp(false);
				}
				oControl.bindProperty('value', {
					path: this.sFilterModelName + ">/" + oFieldViewMetadata.fieldName + "/value",
					type: oType
				});
			}
			this._handleMultiInput(oControl, oFieldViewMetadata);
		} else if (oFieldViewMetadata.fControlConstructor === Input) {
			if (oFieldViewMetadata.filterRestriction === sap.ui.comp.smartfilterbar.ControlConfiguration.FILTERTYPE.interval) {
				bIsInterval = true;
				// we assume the interval values shall be split by "-"; so bind only to low and resolve this later while creating the filters
				oControl.bindProperty('value', this.sFilterModelName + ">/" + oFieldViewMetadata.fieldName + "/low");
				if (!this.oResourceBundle) {
					this.oResourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp");
				}
				if (!this.sIntervalPlaceholder) {
					this.sIntervalPlaceholder = this.oResourceBundle.getText("INTERVAL_PLACEHOLDER_TEXT");
				}
				oControl.setPlaceholder(this.sIntervalPlaceholder);
			} else {
				oControl.bindProperty('value', {
					path: this.sFilterModelName + ">/" + oFieldViewMetadata.fieldName,
					type: oType
				});
			}
			if (oFieldViewMetadata.hasValueHelpDialog) {
				oControl.setShowValueHelp(true);
				this._associateValueHelpDialog(oControl, oFieldViewMetadata, false, false);
			}
		} else if (oFieldViewMetadata.fControlConstructor === DatePicker || oFieldViewMetadata.fControlConstructor === TimePicker) {
			oControl.bindProperty('dateValue', this.sFilterModelName + ">/" + oFieldViewMetadata.fieldName);
		}

		if (oControl instanceof DatePicker) {
			if (this._oDateFormatSettings && this._oDateFormatSettings.style) {
				oControl.setDisplayFormat(this._oDateFormatSettings.style);
			}
			// Error handling for DatePicker controls!
			oControl.attachChange(function(oEvent) {
				var bValid = oEvent.getParameter("valid");
				// Clear mandatory empty error state flag
				oControl.data("__mandatoryEmpty", null);
				if (bValid) {
					// If value is valid clear value state
					oControl.setValueState(sap.ui.core.ValueState.None);
					oControl.setValueStateText();
				} else {
					// If value is invalid set value state as error
					oControl.setValueState(sap.ui.core.ValueState.Error);
					// Show the exception message from OData DateTime type by parsing a dummy value
					if (oType) {
						try {
							oType.parseValue("foo", "string");
						} catch (oEx) {
							// If value is invalid --> set value state text from exception message
							oControl.setValueStateText(oEx.message);
						}
					}
				}
			});
		}

		if (oFieldViewMetadata.hasTypeAhead) {
			oControl.setShowSuggestion(true);
			oControl.setFilterSuggests(false);
			this._associateValueList(oControl, "suggestionRows", oFieldViewMetadata, true);
		}

		// Convert typed in values to UpperCase for displayFormat = UpperCase
		if (oFieldViewMetadata.displayFormat === "UpperCase" && oControl.attachChange && oControl.setValue) {
			oControl.attachChange(function() {
				var sValue = oControl.getValue();
				if (sValue) {
					oControl.setValue(sValue.toUpperCase());
				}
			});
		}

		// Additional handling for Input and MultiInput
		if (oControl instanceof Input) {
			// Set MaxLength for fields without any ValueListAnnotation or non intervals!
			if (!oFieldViewMetadata.hasValueListAnnotation && !bIsInterval && oFieldViewMetadata.maxLength) {
				iMaxLength = parseInt(oFieldViewMetadata.maxLength, 10);
				if (!isNaN(iMaxLength)) {
					oControl.setMaxLength(iMaxLength);
				}
			}
		}

		// Special handling when users clears the value or enters an invalid one
		fClearModel = function(oEvent) {
			var oException = oEvent.getParameter("exception");
			if (oControl) {
				if (oException) {
					if (oControl.setValueStateText) {
						oControl.setValueStateText(oException.message);
					}
				}
				if (oControl.setValueState) {
					oControl.setValueState(sap.ui.core.ValueState.Error);
				}
				// Clear mandatory empty error state flag
				oControl.data("__mandatoryEmpty", null);
			}
		};
		oControl.attachParseError(fClearModel);
		oControl.attachFormatError(fClearModel);
		oControl.attachValidationError(fClearModel);
		oControl.attachValidationSuccess(function(oEvent) {
			if (oControl) {
				if (oControl.setValueState) {
					oControl.setValueState(sap.ui.core.ValueState.None);
				}
				if (oControl.setValueStateText) {
					oControl.setValueStateText();
				}
				// Clear mandatory empty error state flag
				oControl.data("__mandatoryEmpty", null);
				// Clear the ValidationText set during validation request
				delete oControl.__sValidationText;
			}
		});

		return oControl;
	};

	/**
	 * Creates the control instance based on the OData Metadata and additional configuration
	 *
	 * @param {Object} oFieldViewMetadata - view metadata for the filter field
	 * @returns {function} the constructor function of the control
	 * @private
	 */
	FilterProvider.prototype._getControlConstructor = function(oFieldViewMetadata) {
		// default to input
		var fControlConstructor = Input, bFilterRestrictionSingle, bFilterRestrictionInterval;

		// if a custom control is specified, use it
		if (oFieldViewMetadata.isCustomFilterField) {
			fControlConstructor = undefined;
		} else {
			bFilterRestrictionSingle = (oFieldViewMetadata.filterRestriction === sap.ui.comp.smartfilterbar.ControlConfiguration.FILTERTYPE.single);
			bFilterRestrictionInterval = (oFieldViewMetadata.filterRestriction === sap.ui.comp.smartfilterbar.ControlConfiguration.FILTERTYPE.interval);

			if (oFieldViewMetadata.controlType === sap.ui.comp.smartfilterbar.ControlConfiguration.CONTROLTYPE.date) {
				// If Date controls are being used --> force the displayFormat to be Date
				oFieldViewMetadata.displayFormat = "Date";
				if (bFilterRestrictionSingle) {
					fControlConstructor = DatePicker;
				} else {
					fControlConstructor = bFilterRestrictionInterval ? DateRangeSelection : MultiInput;
				}
				this._aFilterBarDateFieldNames.push(oFieldViewMetadata.fieldName); // Date fields need special handling to always store Date objects
				if (oFieldViewMetadata.filterRestriction === sap.ui.comp.smartfilterbar.ControlConfiguration.FILTERTYPE.multiple) {
					this._aFilterBarDateTimeMultiValueFieldNames.push(oFieldViewMetadata.fieldName);
				}
			} else if (oFieldViewMetadata.controlType === sap.ui.comp.smartfilterbar.ControlConfiguration.CONTROLTYPE.dropDownList) {
				fControlConstructor = (bFilterRestrictionSingle) ? ComboBox : MultiComboBox;
				// Filter Restriction is defaulted to auto, reset it to multiple if it is a MultiComboBox
				if (!bFilterRestrictionSingle) {
					oFieldViewMetadata.filterRestriction = sap.ui.comp.smartfilterbar.ControlConfiguration.FILTERTYPE.multiple;
				}
			} else if (oFieldViewMetadata.type === "Edm.Time") {
				if (bFilterRestrictionSingle) {
					fControlConstructor = TimePicker;
				} else {
					fControlConstructor = MultiInput;
				}
				this._aFilterBarTimeFieldNames.push(oFieldViewMetadata.fieldName); // Time fields need special handling to send back time values
				if (bFilterRestrictionInterval) {
					this._aFilterBarTimeIntervalFieldNames.push(oFieldViewMetadata.fieldName);
				} else if (oFieldViewMetadata.filterRestriction === sap.ui.comp.smartfilterbar.ControlConfiguration.FILTERTYPE.multiple) {
					this._aFilterBarDateTimeMultiValueFieldNames.push(oFieldViewMetadata.fieldName);
				}
			} else if (!bFilterRestrictionSingle && !bFilterRestrictionInterval) {
				fControlConstructor = MultiInput;
			}
		}
		return fControlConstructor;
	};

	/**
	 * handles MultiInput specific changes
	 *
	 * @param {object} oControl - The control
	 * @param {object} oFieldViewMetadata - The metadata merged from OData metadata and additional control configuration
	 * @private
	 */
	FilterProvider.prototype._handleMultiInput = function(oControl, oFieldViewMetadata) {
		oControl.setEnableMultiLineMode(true);
		oControl.attachTokenChange(function(oEvt) {
			// Do nothing while the data is being created/updated -or- if tokensChanged is not the event!
			if (this._bUpdatingFilterData || this._bCreatingInitialModel || oEvt.getParameter("type") !== "tokensChanged") {
				return;
			}
			var aTokens = oEvt.getSource().getTokens(), aItems = [], iLength, oToken = null, oRangeData = null, aRanges = [];
			if (aTokens) {
				iLength = aTokens.length;
				while (iLength--) {
					oToken = aTokens[iLength];
					oRangeData = oToken.data("range");
					// Check if token is a range token
					if (oRangeData) {
						oRangeData.tokenText = oToken.getText();
						aRanges.push(oRangeData);
					} else {
						// Items array
						aItems.push({
							key: oToken.getKey(),
							text: oToken.getText()
						});
					}
				}
			}
			if (this.oModel) {
				this.oModel.setProperty("/" + oFieldViewMetadata.fieldName + "/items", aItems);
				this.oModel.setProperty("/" + oFieldViewMetadata.fieldName + "/ranges", aRanges);
			}
			// Manually trigger the change event on sapUI5 control since it doesn't do this internally on setValue!
			oControl.fireChange({
				filterChangeReason: oFieldViewMetadata.fieldName,
				value: ""
			});
		}.bind(this));

		// Copy/Paste for multi values can work property only for String fields
		if (oFieldViewMetadata.hasValueListAnnotation || oFieldViewMetadata.type === "Edm.String") {
			// Handle internal _validateOnPaste event from MultiInput
			oControl.attachEvent("_validateOnPaste", function(oEvent) {
				var aTexts = oEvent.getParameter("texts"), oProperty, iLength, sText, aRanges;
				iLength = aTexts ? aTexts.length : 0;
				// When more than 1 text exists .. directly add it on the Input without any validation!
				if (iLength > 1) {
					// prevent the default behaviour --> (validation will not be done in the MultiInput)
					oEvent.preventDefault();
					// Get relevant property
					oProperty = this.oModel.getProperty("/" + oFieldViewMetadata.fieldName);
					// get existing ranges, if any
					aRanges = oProperty.ranges || [];
					// first clear the value on the MultiInput
					oControl.setValue("");
					// _updateMultiValue uses a reverse while to add tokens; use a reverse while here as well to make the tokens appear in same order
					// as pasted
					while (iLength--) {
						sText = aTexts[iLength];
						if (sText) {
							// Add text to ranges
							aRanges.push({
								"exclude": false,
								"operation": "EQ",
								"keyField": oFieldViewMetadata.fieldName,
								"value1": sText,
								"value2": null
							});
						}
					}
					// Set the updated ranges back to the model
					this.oModel.setProperty("/" + oFieldViewMetadata.fieldName + "/ranges", aRanges);
					// trigger update on the control
					this._updateMultiValueControl(oControl, oProperty.items, aRanges);
				}
			}.bind(this));
		}
	};

	/**
	 * Associates the control with a ValueHelp Dialog using the details retrieved from the metadata (annotation)
	 *
	 * @param {object} oControl - The control
	 * @param {object} oFieldViewMetadata - The metadata merged from OData metadata and additional control configuration
	 * @param {boolean} bSupportRanges - Specify if the ValueHelpDialog supports ranges
	 * @param {boolean} bSupportMultiselect - Specify if the ValueHelpDialog supports multi select
	 * @private
	 */
	FilterProvider.prototype._associateValueHelpDialog = function(oControl, oFieldViewMetadata, bSupportRanges, bSupportMultiselect) {
		this._aValueHelpDialogProvider.push(new ValueHelpProvider({
			loadAnnotation: oFieldViewMetadata.hasValueListAnnotation,
			fullyQualifiedFieldName: oFieldViewMetadata.fullName,
			metadataAnalyser: this._oMetadataAnalyser,
			control: oControl,
			filterModel: this.oModel,
			filterProvider: this,
			model: this._oParentODataModel,
			preventInitialDataFetchInValueHelpDialog: oFieldViewMetadata.preventInitialDataFetchInValueHelpDialog,
			dateFormatSettings: this._oDateFormatSettings,
			supportMultiSelect: bSupportMultiselect,
			supportRanges: bSupportRanges,
			isUnrestrictedFilter: oFieldViewMetadata.filterRestriction !== sap.ui.comp.smartfilterbar.ControlConfiguration.FILTERTYPE.multiple,
			isSingleIntervalRange: oFieldViewMetadata.filterRestriction === sap.ui.comp.smartfilterbar.ControlConfiguration.FILTERTYPE.interval,
			fieldName: oFieldViewMetadata.fieldName,
			type: oFieldViewMetadata.filterType,
			scale: oFieldViewMetadata.scale,
			precision: oFieldViewMetadata.precision,
			maxLength: oFieldViewMetadata.maxLength,
			displayFormat: oFieldViewMetadata.displayFormat,
			displayBehaviour: oFieldViewMetadata.displayBehaviour,
			title: oFieldViewMetadata.label
		}));
	};

	/**
	 * Associates the control with a ValueList using the details retrieved from the metadata (annotation)
	 *
	 * @param {object} oControl - The control
	 * @param {string} sAggregation - The aggregation in the control to bind to
	 * @param {object} oFieldViewMetadata - The metadata merged from OData metadata and additional control configuration
	 * @param {boolean} bHasTypeAhead - Indicates whether the control also supports TypeAhead aka Suggest
	 * @private
	 */
	FilterProvider.prototype._associateValueList = function(oControl, sAggregation, oFieldViewMetadata, bHasTypeAhead) {
		if (oFieldViewMetadata.hasValueListAnnotation) {
			this._aValueListProvider.push(new ValueListProvider({
				control: oControl,
				fieldName: oFieldViewMetadata.fieldName,
				typeAheadEnabled: bHasTypeAhead,
				aggregation: sAggregation,
				displayFormat: oFieldViewMetadata.displayFormat,
				displayBehaviour: oFieldViewMetadata.displayBehaviour,
				dateFormatSettings: this._oDateFormatSettings,
				loadAnnotation: true,
				fullyQualifiedFieldName: oFieldViewMetadata.fullName,
				metadataAnalyser: this._oMetadataAnalyser,
				filterModel: this.oModel,
				filterProvider: this,
				model: this._oParentODataModel
			}));
		}
	};

	/**
	 * Calculates additional flags and attributes for a field e.g. whether TypeAhead is switched on
	 *
	 * @param {Object} oFilterFieldODataMetadata - OData metadata for the filter field
	 * @returns {Object} the field metadata
	 * @private
	 */
	FilterProvider.prototype._createFieldMetadata = function(oFilterFieldODataMetadata) {
		var oFieldViewMetadata, oControlConfiguration;

		oFilterFieldODataMetadata.fieldName = this._getFieldName(oFilterFieldODataMetadata);
		oFilterFieldODataMetadata.fieldNameOData = oFilterFieldODataMetadata.fieldName.replace(FilterProvider.FIELD_NAME_REGEX, "/");

		// Get Additional configuration
		oControlConfiguration = this._oAdditionalConfiguration.getControlConfigurationByKey(oFilterFieldODataMetadata.fieldName);

		oFieldViewMetadata = jQuery.extend({}, oFilterFieldODataMetadata);

		oFieldViewMetadata.filterRestriction = this._getFilterRestriction(oFilterFieldODataMetadata, oControlConfiguration);
		this._updateValueListMetadata(oFieldViewMetadata, oFilterFieldODataMetadata);
		oFieldViewMetadata.hasValueHelpDialog = this._hasValueHelpDialog(oFieldViewMetadata, oControlConfiguration);
		oFieldViewMetadata.preventInitialDataFetchInValueHelpDialog = oControlConfiguration ? oControlConfiguration.preventInitialDataFetchInValueHelpDialog : true;
		oFieldViewMetadata.controlType = this._getControlType(oFieldViewMetadata, oControlConfiguration);
		if (oControlConfiguration && oControlConfiguration.displayBehaviour) {
			oFieldViewMetadata.displayBehaviour = oControlConfiguration.displayBehaviour;
		}
		oFieldViewMetadata.isCustomFilterField = !!(oControlConfiguration && oControlConfiguration.customControl);
		oFieldViewMetadata.visibleInAdvancedArea = !!(oControlConfiguration && oControlConfiguration.visibleInAdvancedArea);
		oFieldViewMetadata.label = this._getLabel(oFilterFieldODataMetadata, oControlConfiguration);
		oFieldViewMetadata.isMandatory = this._isMandatory(oFilterFieldODataMetadata, oControlConfiguration);
		oFieldViewMetadata.width = this._getWidth(oControlConfiguration);
		oFieldViewMetadata.isVisible = this._isVisible(oControlConfiguration);
		oFieldViewMetadata.groupId = this._getGroupID(oFilterFieldODataMetadata, oControlConfiguration);
		oFieldViewMetadata.index = this._getIndex(oFilterFieldODataMetadata, oControlConfiguration);
		oFieldViewMetadata.fControlConstructor = this._getControlConstructor(oFieldViewMetadata);
		oFieldViewMetadata.filterType = this._getFilterType(oFieldViewMetadata);
		oFieldViewMetadata.hasTypeAhead = this._hasTypeAhead(oFieldViewMetadata, oFilterFieldODataMetadata, oControlConfiguration);
		oFieldViewMetadata.customControl = oControlConfiguration ? oControlConfiguration.customControl : undefined;
		oFieldViewMetadata.control = this._createControl(oFieldViewMetadata);
		this._applyWidth(oFieldViewMetadata);
		oFieldViewMetadata.defaultFilterValues = oControlConfiguration ? oControlConfiguration.defaultFilterValues : undefined;
		if (oFieldViewMetadata.type === "Edm.String") {
			this._aFilterBarStringFieldNames.push(oFieldViewMetadata.fieldName);
		}
		oFieldViewMetadata.conditionType = null;
		var oConditionType = oControlConfiguration ? oControlConfiguration.conditionType : null;
		if (oConditionType) {
			var sConditionType = "";
			if (typeof oConditionType === "object") {
				sConditionType = oConditionType.module;
				delete oConditionType.module;
			} else {
				sConditionType = oConditionType;
				oConditionType = null;
			}
			try {
				jQuery.sap.require(sConditionType);
				var oConditionTypeClass = jQuery.sap.getObject(sConditionType);
				if (oConditionTypeClass) {
					oFieldViewMetadata.conditionType = new oConditionTypeClass(oFieldViewMetadata.fieldName, this, oFieldViewMetadata);
					this._mConditionTypeFields[oFieldViewMetadata.fieldName] = oFieldViewMetadata;
				}
				if (oConditionType) {
					oFieldViewMetadata.conditionType.applySettings(oConditionType);
				}
			} catch (ex) {
				jQuery.sap.log.error("Module " + sConditionType + " could not be loaded");
			}
		}
		return oFieldViewMetadata;
	};

	/**
	 * Returns the filterType of the field based on metadata, else undefined
	 *
	 * @param {object} oField - ViewMetadata for the filter field
	 * @returns {string} the filter type for the field
	 * @private
	 */
	FilterProvider.prototype._getFilterType = function(oField) {
		if (ODataType.isNumeric(oField.type)) {
			return "numeric";
		} else if (oField.type === "Edm.DateTime" && oField.displayFormat === "Date") {
			return "date";
		} else if (oField.type === "Edm.String") {
			return "string";
		} else if (oField.type === "Edm.Boolean") {
			return "boolean";
		} else if (oField.type === "Edm.Time") {
			return "time";
		}
		return undefined;
	};

	/**
	 * Update the metadata for ValueList annotation
	 *
	 * @param {Object} oFieldViewMetadata - view metadata for the filter field
	 * @param {object} oFieldODataMetadata - OData metadata for the filter field
	 * @private
	 */
	FilterProvider.prototype._updateValueListMetadata = function(oFieldViewMetadata, oFieldODataMetadata) {
		// First check for "sap:value-list" annotation
		oFieldViewMetadata.hasValueListAnnotation = oFieldODataMetadata["sap:value-list"] !== undefined;
		if (oFieldViewMetadata.hasValueListAnnotation) {
			oFieldViewMetadata.hasFixedValues = oFieldODataMetadata["sap:value-list"] === "fixed-values";
		} else if (oFieldODataMetadata["com.sap.vocabularies.Common.v1.ValueList"]) {
			// Then check for "com.sap.vocabularies.Common.v1.ValueList" and retrieve the semantics
			oFieldViewMetadata.hasValueListAnnotation = true;
			oFieldViewMetadata.hasFixedValues = this._oMetadataAnalyser.getValueListSemantics(oFieldODataMetadata["com.sap.vocabularies.Common.v1.ValueList"]) === "fixed-values";
		}
	};

	/**
	 * Creates the metadata for the basic search field. The basic search is supposed to be used in the ValuehelpDialog
	 *
	 * @returns {object} the field metadata
	 * @private
	 */
	FilterProvider.prototype._createBasicSearchFieldMetadata = function() {
		var oFieldViewMetadata;
		var oRb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp");

		oFieldViewMetadata = {};
		oFieldViewMetadata.filterRestriction = sap.ui.comp.smartfilterbar.ControlConfiguration.FILTERTYPE.single;
		oFieldViewMetadata.name = FilterProvider.BASIC_SEARCH_FIELD_ID;
		oFieldViewMetadata.fieldName = FilterProvider.BASIC_SEARCH_FIELD_ID;
		oFieldViewMetadata.label = undefined;
		oFieldViewMetadata.isMandatory = false;
		oFieldViewMetadata.isVisible = true;
		oFieldViewMetadata.groupId = FilterProvider.BASIC_FILTER_AREA_ID;
		oFieldViewMetadata.index = 0;
		oFieldViewMetadata.control = new SearchField({
			showSearchButton: false
		});

		if (!this._isRunningInValueHelpDialog) {
			oFieldViewMetadata.control.setPlaceholder(oRb.getText("FILTER_BAR_BSEARCH_PLACE_HOLDER"));
		}

		oFieldViewMetadata.control.bindProperty('value', this.sFilterModelName + ">/" + oFieldViewMetadata.fieldName);

		return oFieldViewMetadata;
	};

	/**
	 * If a width is specified in the additional configuration, it will be applied to the control
	 *
	 * @param {Object} oFieldViewMetadata - view metadata for the filter field
	 * @private
	 */
	FilterProvider.prototype._applyWidth = function(oFieldViewMetadata) {

		if (oFieldViewMetadata && oFieldViewMetadata.width && oFieldViewMetadata.control && oFieldViewMetadata.control.setWidth && (typeof oFieldViewMetadata.control.setWidth === 'function')) {
			oFieldViewMetadata.control.setWidth(oFieldViewMetadata.width);
		}
	};

	/**
	 * Calculates additional flags and attributes for a field e.g. whether TypeAhead is switched on
	 *
	 * @param {Object} oControlConfiguration - the control configuration for the field
	 * @returns {Object} the field metadata
	 * @private
	 */
	FilterProvider.prototype._createFieldMetadataForCustomFilterFields = function(oControlConfiguration) {
		var oFieldViewMetadata;

		// Custom filter fields are required to have a custom control
		if (!oControlConfiguration || !oControlConfiguration.customControl) {
			return undefined;
		}

		oFieldViewMetadata = {};
		oFieldViewMetadata.name = oControlConfiguration.key;
		oFieldViewMetadata.fieldName = oControlConfiguration.key;
		oFieldViewMetadata.label = oControlConfiguration.label;
		oFieldViewMetadata.visibleInAdvancedArea = !!(oControlConfiguration && oControlConfiguration.visibleInAdvancedArea);
		oFieldViewMetadata.isVisible = this._isVisible(oControlConfiguration);
		oFieldViewMetadata.groupId = oControlConfiguration.groupId;
		oFieldViewMetadata.isMandatory = this._isMandatory(undefined, oControlConfiguration);
		oFieldViewMetadata.index = oControlConfiguration.index;
		oFieldViewMetadata.width = this._getWidth(oControlConfiguration);
		oFieldViewMetadata.control = oControlConfiguration.customControl;
		oFieldViewMetadata.isCustomFilterField = true;
		this._applyWidth(oFieldViewMetadata);

		return oFieldViewMetadata;
	};

	/**
	 * Extends the filter metadata with fieldName attribute which has the entity name for associations
	 *
	 * @param {Object} oFilterFieldODataMetadata - OData metadata for the filter field
	 * @returns {string} the field name
	 * @private
	 */
	FilterProvider.prototype._getFieldName = function(oFilterFieldODataMetadata) {
		if (!oFilterFieldODataMetadata.parentPropertyName) {
			return oFilterFieldODataMetadata.name;
		} else {
			return oFilterFieldODataMetadata.parentPropertyName + "." + oFilterFieldODataMetadata.name;
		}
	};

	/**
	 * Returns a flag indicating whether the field supports the value help dialog, or not
	 *
	 * @param {Object} oFieldViewMetadata - view metadata for the filter field
	 * @param {Object} oControlConfiguration - Additional configuration for this filter field
	 * @returns {boolean} whether valuehelp is supported by the field
	 * @private
	 */
	FilterProvider.prototype._hasValueHelpDialog = function(oFieldViewMetadata, oControlConfiguration) {
		var bValueHelpDialog = true;

		if (oControlConfiguration) {
			if (oControlConfiguration.controlType === sap.ui.comp.smartfilterbar.ControlConfiguration.CONTROLTYPE.dropDownList) {
				bValueHelpDialog = false;
			} else if (oControlConfiguration.hasValueHelpDialog !== true) {
				bValueHelpDialog = false;
			}
		}
		if (oFieldViewMetadata && !oFieldViewMetadata.hasValueListAnnotation) {
			if (oFieldViewMetadata.filterRestriction === sap.ui.comp.smartfilterbar.ControlConfiguration.FILTERTYPE.single || oFieldViewMetadata.filterRestriction === sap.ui.comp.smartfilterbar.ControlConfiguration.FILTERTYPE.multiple) {
				bValueHelpDialog = false;
			}
		}

		return bValueHelpDialog;
	};

	/**
	 * Returns a flag indicating whether the field is visible, or not
	 *
	 * @param {object} oControlConfiguration - Additional configuration for this filter field
	 * @returns {boolean} whether the field is visible
	 * @private
	 */
	FilterProvider.prototype._isVisible = function(oControlConfiguration) {
		if (oControlConfiguration && oControlConfiguration.isVisible === false) {
			return false;
		}

		return true;
	};

	/**
	 * Returns the width from the control configuration. Undefined if there is no width specified
	 *
	 * @param {object} oControlConfiguration - Additional configuration for this filter field
	 * @returns {string} - width of the filter field
	 * @private
	 */
	FilterProvider.prototype._getWidth = function(oControlConfiguration) {
		if (oControlConfiguration && oControlConfiguration.width) {
			return oControlConfiguration.width;
		}

		return undefined;
	};

	/**
	 * Returns a flag indicating whether the field is required/mandatory, or not
	 *
	 * @param {object} oFilterFieldODataMetadata - OData metadata for the filter field
	 * @param {object} oControlConfiguration - Additional configuration for this filter field
	 * @returns {boolean} whether the field is mandatory
	 * @private
	 */
	FilterProvider.prototype._isMandatory = function(oFilterFieldODataMetadata, oControlConfiguration) {
		if (oControlConfiguration && oControlConfiguration.mandatory !== sap.ui.comp.smartfilterbar.ControlConfiguration.MANDATORY.auto) {
			return oControlConfiguration.mandatory === sap.ui.comp.smartfilterbar.ControlConfiguration.MANDATORY.mandatory;
		}
		if (oFilterFieldODataMetadata) {
			return oFilterFieldODataMetadata.requiredField;
		}
		return false;
	};

	/**
	 * Returns the effective filter restriction. Possible values can be found in this enum: sap.ui.comp.smartfilterbar.ControlConfiguration.FILTERTYPE
	 *
	 * @param {object} oFilterFieldODataMetadata - OData metadata for the filter field
	 * @param {object} oControlConfiguration - Additional configuration for this filter field
	 * @private
	 * @returns {string} sFilterRestriction; the effective filter restriction
	 */
	FilterProvider.prototype._getFilterRestriction = function(oFilterFieldODataMetadata, oControlConfiguration) {
		var sFilterRestriction;

		if (oControlConfiguration && oControlConfiguration.filterType && oControlConfiguration.filterType !== sap.ui.comp.smartfilterbar.ControlConfiguration.FILTERTYPE.auto) {
			sFilterRestriction = oControlConfiguration.filterType;
		} else if (oFilterFieldODataMetadata.filterRestriction === "single-value") {
			sFilterRestriction = sap.ui.comp.smartfilterbar.ControlConfiguration.FILTERTYPE.single;
		} else if (oFilterFieldODataMetadata.filterRestriction === "multi-value") {
			sFilterRestriction = sap.ui.comp.smartfilterbar.ControlConfiguration.FILTERTYPE.multiple;
		} else if (oFilterFieldODataMetadata.filterRestriction === "interval") {
			sFilterRestriction = sap.ui.comp.smartfilterbar.ControlConfiguration.FILTERTYPE.interval;
		} else {
			sFilterRestriction = sap.ui.comp.smartfilterbar.ControlConfiguration.FILTERTYPE.auto;
		}

		return sFilterRestriction;
	};

	/**
	 * Returns the effective control type. Control types can be found in enum: sap.ui.comp.smartfilterbar.ControlConfiguration.CONTROLTYPE
	 *
	 * @param {object} oFieldViewMetadata - view metadata for the filter field
	 * @param {object} oControlConfiguration - Additional configuration for this filter field
	 * @private
	 * @returns {string} sControlType; the effective control type
	 */
	FilterProvider.prototype._getControlType = function(oFieldViewMetadata, oControlConfiguration) {
		var sControlType;

		if (oControlConfiguration && oControlConfiguration.controlType && oControlConfiguration.controlType !== sap.ui.comp.smartfilterbar.ControlConfiguration.CONTROLTYPE.auto) {
			sControlType = oControlConfiguration.controlType;
		} else if (oFieldViewMetadata.type === "Edm.DateTime" && oFieldViewMetadata.displayFormat === "Date") {
			sControlType = sap.ui.comp.smartfilterbar.ControlConfiguration.CONTROLTYPE.date;
		} else if (oFieldViewMetadata.hasValueListAnnotation && oFieldViewMetadata.hasFixedValues) {
			sControlType = sap.ui.comp.smartfilterbar.ControlConfiguration.CONTROLTYPE.dropDownList;
		} else {
			sControlType = sap.ui.comp.smartfilterbar.ControlConfiguration.CONTROLTYPE.input;
		}
		return sControlType;
	};

	/**
	 * Returns the id of the parent group for a filter field from the additional configuration
	 *
	 * @param {Object} oFilterFieldODataMetadata - OData metadata for the filter field
	 * @param {Object} oControlConfiguration - Additional configuration for this filter field
	 * @private
	 * @returns {string} groupId; the groupId for the configuration
	 */
	FilterProvider.prototype._getGroupID = function(oFilterFieldODataMetadata, oControlConfiguration) {
		if (oControlConfiguration && oControlConfiguration.groupId) {
			return oControlConfiguration.groupId;
		} else if (oFilterFieldODataMetadata && oFilterFieldODataMetadata.requiredField) {
			return this._sBasicFilterAreaID;
		}
		return this._getGroupIDFromFieldGroup(oFilterFieldODataMetadata);
	};

	/**
	 * Returns the id (if found) of the parent group for a filter field from the FieldGroup annotation
	 *
	 * @param {Object} oFilterFieldODataMetadata - OData metadata for the filter field
	 * @private
	 * @returns {string} groupId; the groupId for the field (if found)
	 */
	FilterProvider.prototype._getGroupIDFromFieldGroup = function(oFilterFieldODataMetadata) {
		var iLen = 0, oFieldGroupAnnotation = null, sGroupName;
		if (oFilterFieldODataMetadata && this._aFieldGroupAnnotation && this._aFieldGroupAnnotation.length) {
			iLen = this._aFieldGroupAnnotation.length;
			// Loop through the FieldGroup annotation list and check if the field is found somewhere
			while (iLen--) {
				oFieldGroupAnnotation = this._aFieldGroupAnnotation[iLen];
				if (oFieldGroupAnnotation && oFieldGroupAnnotation.fields && oFieldGroupAnnotation.fields.indexOf(oFilterFieldODataMetadata.fieldNameOData) > -1) {
					sGroupName = oFieldGroupAnnotation.groupName;
					break;
				}
			}
		}
		return sGroupName;
	};

	/**
	 * Returns the label of the filter field. OData metadata and additional configuration are used for this
	 *
	 * @param {Object} oFilterFieldODataMetadata - OData metadata
	 * @param {Object} oControlConfiguration - Additional configuration for this filter field
	 * @private
	 * @returns {string} label for the filter field
	 */
	FilterProvider.prototype._getLabel = function(oFilterFieldODataMetadata, oControlConfiguration) {

		if (oControlConfiguration && oControlConfiguration.label) {
			return oControlConfiguration.label;
		}
		return this._getLabelFromFieldGroup(oFilterFieldODataMetadata) || oFilterFieldODataMetadata.fieldLabel || oFilterFieldODataMetadata.fieldName;
	};

	/**
	 * Returns the label (if found) of the filter field from the FieldGroup annotation
	 *
	 * @param {Object} oFilterFieldODataMetadata - OData metadata for the filter field
	 * @private
	 * @returns {string} label; undefined if field is no part of field group annotation
	 */
	FilterProvider.prototype._getLabelFromFieldGroup = function(oFilterFieldODataMetadata) {
		var iLen = 0, oFieldGroupAnnotation = null, sLabel;
		if (oFilterFieldODataMetadata && this._aFieldGroupAnnotation && this._aFieldGroupAnnotation.length) {
			iLen = this._aFieldGroupAnnotation.length;
			// Loop through the FieldGroup annotation list and check if the field is found somewhere
			while (iLen--) {
				oFieldGroupAnnotation = this._aFieldGroupAnnotation[iLen];
				if (oFieldGroupAnnotation && oFieldGroupAnnotation.fields && oFieldGroupAnnotation.fields.indexOf(oFilterFieldODataMetadata.fieldNameOData) > -1) {
					sLabel = oFieldGroupAnnotation.labels[oFilterFieldODataMetadata.fieldNameOData];
					break;
				}
			}
		}
		return sLabel;
	};

	/**
	 * Returns the index for a filter field from the additional configuration -or- based on FieldGroup annotation
	 *
	 * @param {Object} oFilterFieldODataMetadata - OData metadata for the filter field
	 * @param {Object} oControlConfiguration - Additional configuration for this filter field
	 * @private
	 * @returns {integer} index; undefined if index is not specified in additional configuration
	 */
	FilterProvider.prototype._getIndex = function(oFilterFieldODataMetadata, oControlConfiguration) {
		if (oControlConfiguration && (oControlConfiguration.index || oControlConfiguration.index === 0)) {
			return oControlConfiguration.index;
		}
		return this._getIndexFromFieldGroup(oFilterFieldODataMetadata);
	};

	/**
	 * Returns the index (if found) of the filter field from the FieldGroup annotation
	 *
	 * @param {Object} oFilterFieldODataMetadata - OData metadata for the filter field
	 * @private
	 * @returns {integer} index; undefined if field is no part of field group annotation
	 */
	FilterProvider.prototype._getIndexFromFieldGroup = function(oFilterFieldODataMetadata) {
		var iLen = 0, oFieldGroupAnnotation = null, iIndex;
		if (oFilterFieldODataMetadata && this._aFieldGroupAnnotation && this._aFieldGroupAnnotation.length) {
			iLen = this._aFieldGroupAnnotation.length;
			// Loop through the FieldGroup annotation list and check if the field is found somewhere
			while (iLen--) {
				oFieldGroupAnnotation = this._aFieldGroupAnnotation[iLen];
				if (oFieldGroupAnnotation && oFieldGroupAnnotation.fields) {
					iIndex = oFieldGroupAnnotation.fields.indexOf(oFilterFieldODataMetadata.fieldNameOData);
					if (iIndex > -1) {
						break;
					}
					iIndex = undefined;
				}
			}
		}
		return iIndex;
	};

	/**
	 * Returns the index for a filter group from the additional configuration
	 *
	 * @param {Object} oGroupConfiguration - Additional configuration for this filter group
	 * @private
	 * @returns {integer} index; undefined if index is not specified in additional configuration
	 */
	FilterProvider.prototype._getGroupIndex = function(oGroupConfiguration) {
		if (oGroupConfiguration && (oGroupConfiguration.index || oGroupConfiguration.index === 0)) {
			return oGroupConfiguration.index;
		}
	};

	/**
	 * Returns the label for a filter group from the additional configuration
	 *
	 * @param {Object} oFilterGroupODataMetadata - OData metadata for the filter group
	 * @param {Object} oGroupConfiguration - Additional configuration for this filter group
	 * @private
	 * @returns {integer} index; undefined if label is not specified in additional configuration
	 */
	FilterProvider.prototype._getGroupLabel = function(oFilterGroupODataMetadata, oGroupConfiguration) {
		if (oGroupConfiguration && oGroupConfiguration.label) {
			return oGroupConfiguration.label;
		}
		return oFilterGroupODataMetadata.groupLabel || oFilterGroupODataMetadata.groupName || oFilterGroupODataMetadata.groupEntityName;
	};

	/**
	 * Returns a flag indicating whether the field supports TypeAhead (aka. Suggest), or not
	 *
	 * @param {Object} oFieldViewMetadata - view metadata for the filter field
	 * @param {Object} oFilterFieldODataMetadata - OData metadata for the filter field
	 * @param {Object} oControlConfiguration - Additional configuration for this filter field
	 * @returns {boolean} whether type ahead can be enabled for the field
	 * @private
	 */
	FilterProvider.prototype._hasTypeAhead = function(oFieldViewMetadata, oFilterFieldODataMetadata, oControlConfiguration) {
		var bHasTypeAhead;

		bHasTypeAhead = true;
		if (oControlConfiguration) {
			bHasTypeAhead = oControlConfiguration.hasTypeAhead;
		} else if (oFilterFieldODataMetadata.type !== "Edm.String") {
			return false;
		}
		// Disable type ahead for anything other than Input/MultiInput
		if (!(oFieldViewMetadata.fControlConstructor === Input || oFieldViewMetadata.fControlConstructor === MultiInput)) {
			return false;
		}

		return bHasTypeAhead;
	};

	/**
	 * Get the model
	 *
	 * @returns {Object} the model
	 * @public
	 */
	FilterProvider.prototype.getModel = function() {
		return this.oModel;
	};

	/**
	 * Get the view metadata for filter fields
	 *
	 * @returns {Array} array of filter field view metadata
	 * @public
	 */
	FilterProvider.prototype.getFilterBarViewMetadata = function() {
		return this._aFilterBarViewMetadata;
	};

	/**
	 * Returns an parameter object which can be used to restrict the query result from OData. This function is required only for the basic search.
	 *
	 * @returns {object} object containing OData query parameters
	 * @public
	 */
	FilterProvider.prototype.getParameters = function() {
		var oParameter, sBasicSearchText = null;

		if (this.oModel) {
			sBasicSearchText = this.oModel.getProperty("/" + FilterProvider.BASIC_SEARCH_FIELD_ID);
		}

		if (this._sBasicSearchFieldName || sBasicSearchText) {
			oParameter = {
				custom: {}
			};

			if (this._sBasicSearchFieldName) {
				oParameter.custom["search-focus"] = this._sBasicSearchFieldName;
			}

			oParameter.custom["search"] = sBasicSearchText || "";
		}
		return oParameter;
	};

	/**
	 * Returns an array of filters that can be used to restrict the query result from OData
	 *
	 * @param {Array} aFieldNames - the names of the fields whose values should be returned (Ex: visible fields)
	 * @returns {Array} array of filters if any
	 * @public
	 */
	FilterProvider.prototype.getFilters = function(aFieldNames) {
		var oData = null;
		if (this.oModel) {
			oData = this.oModel.getData();
		}
		return FilterProvider.generateFilters(aFieldNames, oData, {
			dateSettings: this._oDateFormatSettings,
			useContainsAsDefault: this._bUseContainsAsDefault,
			stringFields: this._aFilterBarStringFieldNames,
			timeFields: this._aFilterBarTimeFieldNames
		});
	};

	/**
	 * Returns the data currently set in the filter data model
	 *
	 * @returns {object} the json data in the filter bar
	 * @public
	 */
	FilterProvider.prototype.getFilterData = function() {
		return this.oModel ? this.oModel.getData() : null;
	};

	/**
	 * Returns the data currently set in the filter data model as string
	 *
	 * @returns {string} the string json data in the filter bar
	 * @public
	 */
	FilterProvider.prototype.getFilterDataAsString = function() {
		return this.oModel ? this.oModel.getJSON() : null;
	};

	/**
	 * Returns the filled data currently set in the filter data model
	 *
	 * @param {Array} aFieldNames - the names of the fields whose values should be returned (Ex: visible fields)
	 * @returns {object} the json data in the filter bar
	 * @public
	 */
	FilterProvider.prototype.getFilledFilterData = function(aFieldNames) {
		var oData, oFilledData = {}, iFieldLength, sField, oValue;
		oData = this.oModel ? this.oModel.getData() : null;
		if (oData && aFieldNames) {
			iFieldLength = aFieldNames.length;
			while (iFieldLength--) {
				sField = aFieldNames[iFieldLength];
				if (sField && sField !== FilterProvider.BASIC_SEARCH_FIELD_ID) {
					oValue = oData[sField];
					if (oValue && oValue.hasOwnProperty("low")) {// interval
						if (oValue.low) {
							oFilledData[sField] = oValue;
						}
					} else if (oValue && oValue.hasOwnProperty("items")) {// unrestricted/multi-value
						if (oValue.value && typeof oValue.value === "string") {
							oValue.value = oValue.value.trim();
						}
						if (oValue.items.length || (oValue.ranges && oValue.ranges.length) || oValue.value) {
							oFilledData[sField] = oValue;
						}
					} else if (oValue) { // Single Value
						if (typeof oValue === "string") {
							oValue = oValue.trim();
						}
						if (oValue) {
							oFilledData[sField] = oValue;
						}
					}
				}
				// Finally fill the Custom data if it exists
				if (iFieldLength === 0) {
					sField = FilterProvider.CUSTOM_FIELDS_MODEL_PROPERTY;
					oValue = oData[sField];
					if (oValue) {
						oFilledData[sField] = oValue;
					}
				}
			}
		}
		// Always return a copy of the original data, since some objects may be referenced elsewhere and could get destroyed (or removed) during
		// usage!
		return jQuery.extend(true, {}, oFilledData);
	};

	/**
	 * Returns the filled data currently set in the filter data model as string
	 *
	 * @param {Array} aFieldNames - the names of the fields whose values should be returned (Ex: visible fields)
	 * @returns {string} the string json data in the filter bar
	 * @public
	 */
	FilterProvider.prototype.getFilledFilterDataAsString = function(aFieldNames) {
		return JSON.stringify(this.getFilledFilterData(aFieldNames));
	};

	/**
	 * Sets the data in the filter data model
	 *
	 * @param {object} oJson - the json data in the filter bar
	 * @param {boolean} bReplace - Replace existing filter data
	 * @public
	 */
	FilterProvider.prototype.setFilterData = function(oJson, bReplace) {
		var oData = null, aFieldNames = null, sKey = null;
		if (this.oModel && oJson) {
			// Set flag to indicate data is being updated
			this._bUpdatingFilterData = true;
			if (bReplace) {
				this._createInitialModel(false);
			}
			oData = this._parseFilterData(oJson, bReplace);
			if (oData) {
				this.oModel.setData(oData, true);
				aFieldNames = [];
				var sFieldName = arguments[2];
				if (sFieldName) {
					aFieldNames.push(sFieldName);
				}
				for (sKey in oData) {
					aFieldNames.push(sKey);
				}
				this._handleFilterDataUpdate(aFieldNames);
			}
			// Reset data update flag
			this._bUpdatingFilterData = false;
		}
	};

	/**
	 * Sets the data in the filter data model as string
	 *
	 * @param {string} sJson - the json data in the filter bar
	 * @param {boolean} bReplace - Replace existing filter data
	 * @public
	 */
	FilterProvider.prototype.setFilterDataAsString = function(sJson, bReplace) {
		if (sJson) {
			this.setFilterData(JSON.parse(sJson), bReplace);
		}
	};

	/**
	 * Parse the filter data to handle some formats and not consider all formats
	 *
	 * @param {Object} oJson = the filter data input
	 * @param {boolean} bReplace - whether the data shall be replaced instead of merged
	 * @returns {Object} the parsed filter data
	 * @private
	 */
	FilterProvider.prototype._parseFilterData = function(oJson, bReplace) {
		return FilterProvider.parseFilterData(this.oModel.getData(), oJson, {
			dateFields: this._aFilterBarDateFieldNames,
			timeFields: this._aFilterBarTimeFieldNames,
			timeIntervalFields: this._aFilterBarTimeIntervalFieldNames,
			dateTimeMultiValueFields: this._aFilterBarDateTimeMultiValueFieldNames,
			conditionTypeFields: this._mConditionTypeFields
		}, bReplace);
	};

	/**
	 * Called once the FilterData is set via SetFilterData. Handles control update for non binding controls (multi-value)
	 *
	 * @param {Array} aFieldNames - Array containing name of updated fields
	 * @private
	 */
	FilterProvider.prototype._handleFilterDataUpdate = function(aFieldNames) {
		var i = 0, oFilterFieldMetadata, oData, oFilterData;
		if (this._aFilterBarMultiValueFieldMetadata) {
			i = this._aFilterBarMultiValueFieldMetadata.length;
			while (i--) {
				if (!oData) {
					oData = this.oModel.getData();
				}
				if (oData) {
					oFilterFieldMetadata = this._aFilterBarMultiValueFieldMetadata[i];
					// Only update the value if the field was changed in the handleDataUpate
					if (aFieldNames.indexOf(oFilterFieldMetadata.fieldName) > -1) {
						oFilterData = oData[oFilterFieldMetadata.fieldName];
						if (oFilterData) {
							this._updateMultiValueControl(oFilterFieldMetadata.control, oFilterData.items, oFilterData.ranges);
						}
					}
				}
			}
			this._updateConditionTypeFields(aFieldNames);
		}
	};

	/**
	 * Clears the model
	 *
	 * @public
	 */
	FilterProvider.prototype.clear = function() {
		this._createInitialModel(false);
	};

	/**
	 * Resets the model
	 *
	 * @public
	 */
	FilterProvider.prototype.reset = function() {
		this._createInitialModel(true);
	};

	/**
	 * Updates the conditionType fields after changes to other fields and initially
	 *
	 * @private
	 */
	FilterProvider.prototype._initializeConditionTypeFields = function() {
		function handlePendingChange(oEvent) {
			that.setPending(that.isPending());
		}
		for ( var n in this._mConditionTypeFields) {
			this._mConditionTypeFields[n].conditionType.initialize(this.oModel.getData()[n]);
			var that = this;
			if (this._mConditionTypeFields[n].conditionType.getAsync()) {
				this._mConditionTypeFields[n].conditionType.attachPendingChange(handlePendingChange);
			}
		}
	};

	/**
	 * Updates the conditionType fields after changes to other fields and initially
	 *
	 * @private
	 */
	FilterProvider.prototype._updateConditionTypeFields = function(aUpdatedFields) {
		if (typeof aUpdatedFields === "string") {
			aUpdatedFields = [
				aUpdatedFields
			];
		}
		var aUpdateFields = aUpdatedFields || [];
		if (aUpdateFields.length === 0) {
			for ( var n in this.oModel.getData()) {
				aUpdateFields.push(n);
			}
		}
		for ( var n in this._mConditionTypeFields) {
			this._mConditionTypeFields[n].conditionType.providerDataUpdated(aUpdateFields, this.oModel.getData());
		}
	};

	FilterProvider.prototype._validateConditionTypeFields = function() {
		var bInvalid = false;
		for ( var n in this._mConditionTypeFields) {
			var bValid = this._mConditionTypeFields[n].conditionType.validate();
			if (!bValid && !bInvalid) {
				bInvalid = true;
			}
		}
		return bInvalid;
	};

	// TODO: Move this to a Util
	/**
	 * Static function to generate filter array from the given field name array and Json data object
	 *
	 * @param {Array} aFieldNames - array of field names
	 * @param {Object} oData - the json object data
	 * @param {Object} mSettings - optional settings used while creating filters
	 * @returns {Array} array of sap.ui.model.Filter
	 * @private
	 */
	FilterProvider.generateFilters = function(aFieldNames, oData, mSettings) {
		var aFilters = [], aArrayFilters = null, oExcludeFilters = null, aExcludeFilters = null, sField = null, sMatch = FilterProvider.FIELD_NAME_REGEX, oValue = null, oValue1, oValue2, aValue = null, iLen = 0, iFieldLength = 0;
		var oDateFormatSettings, bEnableUseContainsAsDefault, aStringFields, aTimeFields, bUseContains, bIsTimeField;
		if (mSettings) {
			oDateFormatSettings = mSettings.dateSettings;
			bEnableUseContainsAsDefault = mSettings.useContainsAsDefault;
			aStringFields = mSettings.stringFields;
			aTimeFields = mSettings.timeFields;
		}
		if (aFieldNames && oData) {
			iFieldLength = aFieldNames.length;
			while (iFieldLength--) {
				bIsTimeField = false;
				sField = aFieldNames[iFieldLength];
				if (sField && sField !== FilterProvider.BASIC_SEARCH_FIELD_ID) {
					bUseContains = false;
					if (bEnableUseContainsAsDefault && aStringFields) {
						if (aStringFields.indexOf(sField) > -1) {
							bUseContains = true;
						}
					} else if (aTimeFields && aTimeFields.indexOf(sField) > -1) {
						bIsTimeField = true;
					}
					oValue = oData[sField];
					// Replace all "." with "/" to convert to proper paths
					sField = sField.replace(sMatch, "/");
					if (oValue && oValue.hasOwnProperty("low")) {// The data in the model corresponds to low and high Objects
						if (oValue.low && oValue.high) {
							oValue1 = oValue.low;
							oValue2 = oValue.high;
							if (oDateFormatSettings && oDateFormatSettings.UTC && oValue1 instanceof Date && oValue2 instanceof Date) {
								oValue1 = FilterProvider.getDateInUTCOffset(oValue1);
								oValue2 = FilterProvider.getDateInUTCOffset(oValue2);
							}
							aFilters.push(new Filter(sField, sap.ui.model.FilterOperator.BT, oValue1, oValue2));
						} else if (oValue.low) {
							if (oValue.low instanceof Date) {
								// We do not have an interval value --> Use typed in value as a single value date filter
								oValue1 = oValue.low;
								if (oDateFormatSettings && oDateFormatSettings.UTC) {
									oValue1 = FilterProvider.getDateInUTCOffset(oValue1);
								}
								aFilters.push(new Filter(sField, sap.ui.model.FilterOperator.EQ, oValue1));
							} else if (typeof oValue.low === "string") {
								// since we bind non date interval values only to low; resolve this by splitting "-" into an interval
								aValue = oValue.low.split("-");
								if (aValue && aValue.length === 2) {
									aFilters.push(new Filter(sField, sap.ui.model.FilterOperator.BT, aValue[0], aValue[1]));
								} else {
									// We do not have an interval value --> Use typed in value as a single value filter
									aFilters.push(new Filter(sField, bUseContains ? sap.ui.model.FilterOperator.Contains : sap.ui.model.FilterOperator.EQ, oValue.low));
								}
							}
						}
					} else if (oValue && oValue.hasOwnProperty("items")) {// The data in the model corresponds to multi-value/range with a typed in
						// value
						aArrayFilters = [];
						aExcludeFilters = [];
						oExcludeFilters = null;
						if (oValue && oValue.hasOwnProperty("ranges")) { // Check if the data is for an unrestricted filter
							aValue = oValue.ranges;
							iLen = aValue.length;
							// Range Filters
							while (iLen--) {
								oValue1 = aValue[iLen].value1;
								oValue2 = aValue[iLen].value2;
								if (bIsTimeField) {
									if (oValue1 instanceof Date) {
										oValue1 = FormatUtil.getEdmTimeFromDate(oValue1);
									}
									if (oValue2 instanceof Date) {
										oValue2 = FormatUtil.getEdmTimeFromDate(oValue2);
									}
								} else if (oDateFormatSettings && oDateFormatSettings.UTC) {// Check if Date values have to be converted to UTC
									if (oValue1 instanceof Date) {
										oValue1 = FilterProvider.getDateInUTCOffset(oValue1);
									}
									if (oValue2 instanceof Date) {
										oValue2 = FilterProvider.getDateInUTCOffset(oValue2);
									}
								}
								if (aValue[iLen].exclude) { // Exclude Select Option is not supported entirely except EQ, which can be changed to NE
									if (aValue[iLen].operation === sap.ui.model.FilterOperator.EQ) {
										aExcludeFilters.push(new Filter(sField, sap.ui.model.FilterOperator.NE, oValue1));
									}
								} else {
									aArrayFilters.push(new Filter(sField, aValue[iLen].operation, oValue1, oValue2));
								}
							}
							if (aExcludeFilters.length) {
								oExcludeFilters = new Filter(aExcludeFilters, true);
							}
						}
						aValue = oValue.items;
						iLen = aValue.length;
						// Item filters
						while (iLen--) {
							aArrayFilters.push(new Filter(sField, sap.ui.model.FilterOperator.EQ, aValue[iLen].key));
						}
						// Only ignore "", null and undefined values
						if (oValue.value || oValue.value === 0 || oValue.value === false) {
							if (typeof oValue.value === "string") {
								oValue.value = oValue.value.trim();
							}
							if (oValue.value || oValue.value === 0 || oValue.value === false) {
								aArrayFilters.push(new Filter(sField, bUseContains ? sap.ui.model.FilterOperator.Contains : sap.ui.model.FilterOperator.EQ, oValue.value));
							}
						}

						// OR the array values while creating the filter
						if (aArrayFilters.length) {
							// If Exclude and array (inlcude) filters exists --> use AND between them before pushing to the filter array
							if (oExcludeFilters) {
								aFilters.push(new Filter([
									new Filter(aArrayFilters, false), oExcludeFilters
								], true));
							} else {
								aFilters.push(new Filter(aArrayFilters, false));
							}
						} else if (oExcludeFilters) {
							// Only exclude filters exists --> add to the filter array
							aFilters.push(oExcludeFilters);
						}
					} else if (oValue || oValue === 0 || oValue === false) {// Single Value
						// Only ignore "", null and undefined values
						if (typeof oValue === "string") {
							oValue = oValue.trim();
						}
						if (oValue && oValue instanceof Date) {
							if (bIsTimeField) {
								oValue = FormatUtil.getEdmTimeFromDate(oValue);
							} else if (oDateFormatSettings && oDateFormatSettings.UTC) {
								oValue = FilterProvider.getDateInUTCOffset(oValue);
							}
						}
						if (oValue || oValue === 0 || oValue === false) {
							aFilters.push(new Filter(sField, bUseContains ? sap.ui.model.FilterOperator.Contains : sap.ui.model.FilterOperator.EQ, oValue));
						}
					}
				}
			}
		}
		// AND the top level filter attributes if there is more than 1
		return (aFilters.length > 1) ? [
			new Filter(aFilters, true)
		] : aFilters;
	};

	// TODO: Move this to a Util
	/**
	 * Static function to parse and convert json data to be set into the data of the filter model (JsonModel.oData) into proper format
	 *
	 * @private
	 * @param {Object} oData - The data from the datamodel
	 * @param {Object} oInputJson - the json object data that needs to be convered/parsed
	 * @param {Object} mSettings - settings used while for parsing filter data
	 * @param {boolean} bReplace - whether the data shall be replaced instead of merged
	 * @returns {Object} The resolved/parsed/converted data that can be set into the model
	 */
	FilterProvider.parseFilterData = function(oData, oInputJson, mSettings, bReplace) {
		var oResolvedData = {}, mConditionTypeFields = null, sField = null, oValue = null, oNewValue, oJson, i, iLen, oRange, aFilterBarDateFieldNames, aFilterBarTimeFieldNames, aFilterBarTimeIntervalFieldNames, aFilterBarDateTimeMultiValueFieldNames, aEQRanges;
		if (mSettings) {
			aFilterBarDateFieldNames = mSettings.dateFields;
			aFilterBarTimeFieldNames = mSettings.timeFields;
			aFilterBarTimeIntervalFieldNames = mSettings.timeIntervalFields;
			aFilterBarDateTimeMultiValueFieldNames = mSettings.dateTimeMultiValueFields;
			mConditionTypeFields = mSettings.conditionTypeFields || {};
		}
		if (!aFilterBarDateFieldNames) {
			aFilterBarDateFieldNames = [];
		}
		if (!aFilterBarTimeFieldNames) {
			aFilterBarTimeFieldNames = [];
		}
		if (!aFilterBarTimeIntervalFieldNames) {
			aFilterBarTimeIntervalFieldNames = [];
		}
		if (!aFilterBarDateTimeMultiValueFieldNames) {
			aFilterBarDateTimeMultiValueFieldNames = [];
		}
		if (oData && oInputJson) {
			oJson = jQuery.extend({}, oInputJson, true);
			for (sField in oJson) {
				if (oData.hasOwnProperty(sField) && sField !== FilterProvider.CUSTOM_FIELDS_MODEL_PROPERTY) {
					oValue = oData[sField];
					oNewValue = oJson[sField];
					if (sField in mConditionTypeFields) {
						if ("conditionTypeInfo" in oNewValue || (!("conditionTypeInfo" in oNewValue) && oNewValue.ranges)) {
							// only if there is a saved conditionTypeInfo
							mConditionTypeFields[sField].conditionType.initialize(oNewValue);
						}
					} else if (oValue && oValue.hasOwnProperty("low")) {// interval
						oResolvedData[sField] = oNewValue;
						if (oNewValue) {
							if (oNewValue.low && oNewValue.high) { // Date Range
								// oResolvedData[sField] = oNewValue;
								if (!(oNewValue.low instanceof Date)) { // Date needs to be set as a Date Object always!
									oResolvedData[sField].low = new Date(oNewValue.low);
								}
								if (!(oNewValue.high instanceof Date)) {// Date needs to be set as a Date Object always!
									oResolvedData[sField].high = new Date(oNewValue.high);
								}
							} else if ((oNewValue.low || oNewValue.value) && !oNewValue.high) {
								if (!oNewValue.low && oNewValue.value) {
									oNewValue.low = oNewValue.value;
								}
								if ((aFilterBarDateFieldNames.indexOf(sField) > -1 || aFilterBarTimeFieldNames.indexOf(sField) > -1) && !(oNewValue.low instanceof Date)) {
									oResolvedData[sField].low = new Date(oNewValue.low);
								} else {
									oResolvedData[sField].low = oNewValue.low;
								}
								oResolvedData[sField].high = null;
							}
						}
					} else if (oValue && oValue.hasOwnProperty("items")) {// unrestricted/multi-value
						if (oNewValue && (oNewValue.items || oNewValue.ranges)) {
							if (oNewValue.ranges && oNewValue.ranges.length) {
								// Interval Edm.Time fields
								if (aFilterBarTimeIntervalFieldNames.indexOf(sField) > -1) {
									iLen = oNewValue.ranges.length;
									for (i = 0; i < iLen; i++) {
										oRange = oNewValue.ranges[i];
										if (!oRange.exclude && (oRange.operation === "EQ" || oRange.operation === "BT")) {
											break;
										}
										oRange = null;
									}
									if (oRange) {
										// String input but date expected
										if (oRange.value1 && typeof oRange.value1 === "string") {
											oRange.value1 = new Date(oRange.value1);
										}
										if (oRange.value2 && typeof oRange.value2 === "string") {
											oRange.value2 = new Date(oRange.value2);
										}
										// Create range data
										oResolvedData[sField] = {
											ranges: [
												oRange
											],
											items: [],
											value: ""
										};
									}
									// continue with next field as no further actions is necessary
									continue;
								} else if (aFilterBarDateTimeMultiValueFieldNames.indexOf(sField) > -1) {
									// multi-value Date/Time field
									iLen = oNewValue.ranges.length;
									aEQRanges = [];
									for (i = 0; i < iLen; i++) {
										oRange = oNewValue.ranges[i];
										if (!oRange.exclude && oRange.operation === "EQ") {
											// String input but date expected
											if (oRange.value1 && typeof oRange.value1 === "string") {
												oRange.value1 = new Date(oRange.value1);
											}
											aEQRanges.push(oRange);
										}
									}
									// Create range data
									oResolvedData[sField] = {
										ranges: aEQRanges,
										items: [],
										value: ""
									};
									// continue with next field as no further actions is necessary
									continue;
								} else if (aFilterBarDateFieldNames.indexOf(sField) > -1 || aFilterBarTimeFieldNames.indexOf(sField) > -1) {
									// Unrestricted Date/Time field
									iLen = oNewValue.ranges.length;
									for (i = 0; i < iLen; i++) {
										oRange = oNewValue.ranges[i];
										// String input but date expected
										if (oRange.value1 && typeof oRange.value1 === "string") {
											oRange.value1 = new Date(oRange.value1);
										}
										if (oRange.value2 && typeof oRange.value2 === "string") {
											oRange.value2 = new Date(oRange.value2);
										}
									}
								}
							}
							oResolvedData[sField] = oNewValue;
						} else if (typeof oNewValue === "string" || typeof oNewValue === "number" || oNewValue instanceof Date) { // Single Value
							// Unrestricted/multi-value Date field
							if (oNewValue && (aFilterBarDateFieldNames.indexOf(sField) > -1 || aFilterBarTimeFieldNames.indexOf(sField) > -1)) {
								if (typeof oNewValue === "string") {// String input but date expected
									oNewValue = new Date(oNewValue);
								}
								// Create Date range data
								oResolvedData[sField] = {
									ranges: [
										{
											"exclude": false,
											"operation": "EQ",
											"keyField": sField,
											"value1": oNewValue,
											"value2": null
										}
									],
									items: [],
									value: ""
								};
							} else {
								oResolvedData[sField] = {
									value: oNewValue,
									items: []
								};
							}
						}
					} else {// single value
						oResolvedData[sField] = null; // Default to null!
						// Single Date, string, boolean, number value
						if (typeof oNewValue === "string" || typeof oNewValue === "boolean" || typeof oNewValue === "number" || oNewValue instanceof Date) {
							// String input but date expected!
							if (typeof oNewValue === "string" && (aFilterBarDateFieldNames.indexOf(sField) > -1 || aFilterBarTimeFieldNames.indexOf(sField) > -1)) {
								oResolvedData[sField] = new Date(oNewValue);
							} else {
								oResolvedData[sField] = oNewValue;
							}
						} else if (oNewValue && (oNewValue.value || oNewValue.value === 0 || oNewValue.value === false)) { // Use the types in value
							// from multiValue if any
							oResolvedData[sField] = oNewValue.value;
						} else if (oNewValue && oNewValue.items && oNewValue.items.length) { // use the 1st value in items array if any
							oResolvedData[sField] = oNewValue.items[0].key;
						} else if (oNewValue && oNewValue.ranges && oNewValue.ranges.length) { // use the 1st value in ranges array if any
							iLen = oNewValue.ranges.length;
							for (i = 0; i < iLen; i++) {
								oRange = oNewValue.ranges[i];
								if (!oRange.exclude && oRange.operation === "EQ") {
									break;
								}
								oRange = null;
							}
							if (oRange && oRange.value1) {
								// String input but date expected!
								if (typeof oRange.value1 === "string" && (aFilterBarDateFieldNames.indexOf(sField) > -1 || aFilterBarTimeFieldNames.indexOf(sField) > -1)) {
									oResolvedData[sField] = new Date(oRange.value1);
								} else {
									oResolvedData[sField] = oRange.value1;
								}
							}
						}
					}
				} else if (bReplace || sField === FilterProvider.CUSTOM_FIELDS_MODEL_PROPERTY) {
					// Value is for _CUSTOM -> add it as it is
					oResolvedData[sField] = oJson[sField];
				}
			}
		}
		return oResolvedData;
	};

	/**
	 * Static function that returns a UTC offset date
	 *
	 * @private
	 * @param {Object} oDate - The input date object
	 * @returns {Object} The UTC offset date object
	 */
	FilterProvider.getDateInUTCOffset = function(oDate) {
		return new Date(oDate.valueOf() - oDate.getTimezoneOffset() * 60 * 1000);
	};

	/**
	 * Destroys the object
	 *
	 * @public
	 */
	FilterProvider.prototype.destroy = function() {
		var i = 0;
		this._aFilterBarViewMetadata = null;
		this._aFilterBarDateFieldNames = null;
		this._aFilterBarTimeFieldNames = null;
		this._aFilterBarTimeIntervalFieldNames = null;
		this._aFilterBarDateTimeMultiValueFieldNames = null;
		this._aFilterBarStringFieldNames = null;
		this._aFilterBarMultiValueFieldMetadata = null;
		this._aFieldGroupAnnotation = null;

		if (this._oMetadataAnalyser && this._oMetadataAnalyser.destroy) {
			this._oMetadataAnalyser.destroy();
		}
		this._oMetadataAnalyser = null;

		if (this._aValueHelpDialogProvider) {
			i = this._aValueHelpDialogProvider.length;
			while (i--) {
				this._aValueHelpDialogProvider[i].destroy();
			}
		}
		this._aValueHelpDialogProvider = null;

		if (this._aValueListProvider) {
			i = this._aValueListProvider.length;
			while (i--) {
				this._aValueListProvider[i].destroy();
			}
		}
		this._aValueListProvider = null;

		this.oResourceBundle = null;
		this.sIntervalPlaceholder = null;
		this.sDefaultDropDownDisplayBehaviour = null;
		this.sDefaultTokenDisplayBehaviour = null;
		this._oSmartFilter = null;

		this.bIsDestroyed = true;
	};

	return FilterProvider;

}, /* bExport= */true);

}; // end of sap/ui/comp/smartfilterbar/FilterProvider.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.GroupElement') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartform.GroupElement.
jQuery.sap.declare('sap.ui.comp.smartform.GroupElement'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.m.VBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.HBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.form.FormElement'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.ResponsiveFlowLayoutData'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.TooltipBase'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/GroupElement",[
	'jquery.sap.global', 'sap/m/Label', "sap/m/VBox", "sap/m/HBox", 'sap/ui/comp/library', 'sap/ui/core/Element', 'sap/ui/layout/form/FormElement', 'sap/ui/layout/ResponsiveFlowLayoutData', 'sap/ui/comp/smartfield/SmartLabel', 'sap/ui/comp/smartfield/SmartField', 'sap/ui/comp/smartfield/BindingUtil', 'sap/ui/comp/smartfield/Configuration', 'sap/ui/core/TooltipBase'
], function(jQuery, Label, VBox, HBox, library, Element, FormElement, ResponsiveFlowLayoutData, SmartLabel, SmartField, BindingUtil, Configuration, TooltipBase) {
	"use strict";

	/**
	 * Constructor for a new smartform/GroupElement.
	 * 
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class A GroupElement is a combination of one label and different controls associated to this label.
	 * @extends sap.ui.core.Control
	 * @author Alexander Fürbach
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartform.GroupElement
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var GroupElement = FormElement.extend("sap.ui.comp.smartform.GroupElement", /** @lends sap.ui.comp.smartform.GroupElement.prototype */
	{
		metadata: {

			library: "sap.ui.comp",
			properties: {

				/**
				 * Specifies whether the groups shall be rendered in a ResponsiveLayout with label on top of the group element. Each group will be
				 * rendered in a new line.
				 */
				useHorizontalLayout: {
					type: "boolean",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Specifies the minimal size in pixels of all group elements of the form if horizontal Layout is used.
				 */
				horizontalLayoutGroupElementMinWidth: {
					type: "int",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Index of element to be used for label determination
				 */
				elementForLabel: {
					type: "int",
					group: "Misc",
					defaultValue: 0
				}
			},
			defaultAggregation: "elements",
			aggregations: {

				/**
				 * Aggregation of controls to be displayed together with a label.
				 */
				elements: {
					type: "sap.ui.core.Control",
					multiple: true,
					singularName: "element"
				}
			},
			events: {

				/**
				 * The event is fired after the visibility of the control has changed.
				 */
				visibleChanged: {}
			}
		},
		_visibilityDerived: false
	});

	/**
	 * Initialize the control.
	 * 
	 * @private
	 */
	GroupElement.prototype.init = function() {
		FormElement.prototype.init.apply(this, arguments);
	};

	GroupElement.prototype._getFieldRelevantForLabel = function() {
		var aField = this.getFields();
		var aElements = [];
		var that = this;

		aField.forEach(function(oField) {
			if (oField instanceof VBox && that.getUseHorizontalLayout()) {
				aElements = aElements.concat(that._extractFields([
					oField
				]));
			} else {
				aElements.push(oField);
			}
		});

		aElements = aElements.filter(function(oField) {
			return !(oField instanceof sap.m.Label);
		});

		var iIndex = this.getElementForLabel();

		if (aElements.length > iIndex && (aElements[iIndex] instanceof SmartField)) {
			return aElements[iIndex];
		}

		return null;
	};

	GroupElement.prototype._extractFields = function(aElements, bExludeLabel) {
		var aFields = [];
		if (bExludeLabel === undefined) {
			bExludeLabel = false;
		}

		aElements.forEach(function(oElement) {
			if (oElement.getItems) {
				aFields = aFields.concat(oElement.getItems());
			} else {
				aFields.push(oElement);
			}
		});

		if (aFields.some(function(oElement) {
			return oElement.getItems;
		})) {
			aFields = this._extractFields(aFields);
		}

		if (bExludeLabel) {
			aFields = aFields.filter(function(oField) {
				return !(oField instanceof sap.m.Label);
			});
		}

		return aFields;
	};

	GroupElement.prototype._createLabel = function(sLabel) {
		var oLabel = null;
		var oInfo = null;
		var oBindingUtil = new BindingUtil();
		var oField = this._getFieldRelevantForLabel();

		if (oField) {
			if (oField.getShowLabel()) {
				if (sLabel) {
					oField.setTextLabel(sLabel);
				}
				oLabel = new SmartLabel();
				if (sLabel) {
					oLabel.setText(sLabel);
				}
				oLabel.setLabelFor(oField);
			}
		} else {
			oInfo = this.getBindingInfo("label");
			if (sLabel) {
				oLabel = new Label();
				oLabel.setText(sLabel);
			} else if (oInfo) {
				oLabel = new Label();
				oLabel.bindProperty("text", oBindingUtil.toBinding(oInfo));
			}
		}

		return oLabel;
	};

	GroupElement.prototype.updateLabelOfFormElement = function(aInnerElements, oSourceSmartField) {
		var oTooltip = null, bCreated = false;

		var oRelevantField = this._getFieldRelevantForLabel();

		var oLabel = this._getLabel();
		if (oLabel) { // label is always an object (see setLabel)
			if (oRelevantField && (!(oLabel instanceof SmartLabel))) {
				oLabel = this._createLabel(oLabel.getText());
				bCreated = true;
			}
		} else {
			oLabel = this._createLabel();
			bCreated = true;
		}

		if (oLabel) {
			if (oSourceSmartField && aInnerElements && (oLabel instanceof SmartLabel)) {
				if (oSourceSmartField === oRelevantField) {
					oLabel.updateLabelFor(aInnerElements);
				} else {
					// oLabel.updateAriaLabeledBy(aInnerElements);
				}
			}

			var oSmartField = this._getFieldRelevantForLabel();
			if (oLabel instanceof SmartLabel) {
				if (/* oLabel.getText() && */oSmartField && oSmartField.setTextLabel) {
					if (oSmartField.getTextLabel()) { // if the label was implicitly created and the SF has a textLabel -> set the same a label text
						oLabel.setText(oSmartField.getTextLabel());
					}
				}
			}

			oTooltip = this.getTooltip();
			if (oTooltip) {
				if (oLabel instanceof SmartLabel) {
					if (oSmartField && oSmartField.setTooltipLabel) {
						oSmartField.setTooltipLabel(oTooltip.getText());
					}
				}
			} else {
				oLabel.setTooltip(oTooltip);
			}
		}

		if (bCreated) {
			this.setLabel(oLabel);
		}

	};

	GroupElement.prototype.setLabel = function(oLabel) {

		var oOldLabel, oLabelNew = oLabel;
		var aItems;
		if (typeof oLabel === "string") {

			oOldLabel = this._getLabel();
			if (oOldLabel && oOldLabel instanceof SmartLabel) {
				oOldLabel.setText(oLabel);

				oLabelNew = oOldLabel;

				var oSmartField = this._getFieldRelevantForLabel();
				if (oSmartField && oSmartField.getTextLabel && oLabel != null) {// !oSmartField.getTextLabel()) {
					oSmartField.setTextLabel(oLabel);
				}

			} else {

				oLabelNew = new Label({
					text: oLabel
				});
			}
		}

		if (this.getUseHorizontalLayout()) {
			if (this.getFields()[0] instanceof VBox) {
				aItems = this.getFields()[0].getItems();
				aItems.some(function(oItem) {
					if (oItem instanceof Label) {
						oOldLabel = oItem;
						return true;
					}
				});

				if (oOldLabel) {
					oOldLabel = oLabelNew;
				} else {
					this.getFields()[0].insertItem(oLabelNew, 0);
				}
				return this;
			}
		}

		FormElement.prototype.setLabel.apply(this, [
			oLabelNew
		]);
	};

	GroupElement.prototype.setTooltip = function(oTooltip) {
		var oTooltipNew = oTooltip;
		if (typeof oTooltip === "string") {
			oTooltipNew = new TooltipBase({
				text: oTooltip
			});
		}

		FormElement.prototype.setTooltip.apply(this, [
			oTooltipNew
		]);
	};

	/**
	 * Returns the internal Label independent whether it comes direct from GroupElement or from internal used VBox
	 * 
	 * @return {object} which represents the internal Label
	 * @private
	 */
	GroupElement.prototype._getLabel = function() {
		var aElements = null, aItems = null, bResult = false;
		var oLabel = FormElement.prototype.getLabel.apply(this);

		if (!oLabel) {
			aElements = this.getElements();
			if (aElements && aElements.length > 0 && aElements[0] instanceof VBox) {
				aItems = aElements[0].getItems();
				aItems.some(function(oItem) {
					bResult = false;
					if (oItem instanceof Label) {
						oLabel = oItem;
						bResult = true;
					}
					return bResult;
				});
			}
		}

		return oLabel;
	};

	/**
	 * Returns the text of the label.
	 * 
	 * @return {string} text of the label.
	 * @public
	 */
	GroupElement.prototype.getLabelText = function() {
		var sLabel = "";

		var oLabel = this._getLabel();
		if (oLabel) {
			sLabel = oLabel.getText();
		}

		return sLabel;
	};

	/**
	 * Setter for property editable of all smart fields in children hierarchy.
	 * 
	 * @param {boolean} bEditMode new value for editable property of smart fields.
	 * @return {sap.ui.comp.smartform.GroupElement} <code>this</code> to allow method chaining.
	 * @public
	 */
	GroupElement.prototype.setEditMode = function(bEditMode) {

		var aElement = this.getElements();
		var aItem = [];
		var that = this;

		aElement.forEach(function(oElement) {
			if (oElement instanceof VBox) {
				aItem = that._extractFields([
					oElement
				]);
				aItem.forEach(function(oItem) {
					if (oItem instanceof SmartField) {
						if (!(oItem.data("editable") === false)) {
							oItem.setContextEditable(bEditMode);
						}
					}
				});
			} else if (oElement instanceof SmartField) {
				if (!(oElement.data("editable") === false)) {
					oElement.setContextEditable(bEditMode);
				}
			}
		});

		return this;
	};

	/**
	 * Checks whether at least one field is visible
	 * 
	 * @param {array} aFields contains all that fields that shall be checked
	 * @param {boolean} bIgnoreSmartLabels defines whether SmartLabels shall be considered for visibility determination (in VBox = false)
	 * @private
	 */
	GroupElement.prototype._getVisibilityOfFields = function(aFields, bIgnoreSmartLabels) {
		var bResult = false;
		var i = 0, iLength = 0, oField = null;

		if (aFields && aFields.length) {
			iLength = aFields.length;
			for (i = 0; i < iLength; i++) {
				oField = aFields[i];
				if (oField) {

					// this case shall ignore SmartLabels if they come from VBox
					if (bIgnoreSmartLabels && oField instanceof SmartLabel) {
						continue;
					}

					if (oField instanceof VBox) {
						bResult = this._getVisibilityOfFields(this._extractFields([
							oField
						]), true);
					} else {
						bResult = oField.getVisible();
					}
				}

				// break if at least one field is visible
				if (bResult) {
					break;
				}
			}
		}

		return bResult;
	};

	/**
	 * Updates the visibility of the FormElement
	 * 
	 * @private
	 */
	GroupElement.prototype._updateFormElementVisibility = function() {
		var bActualVisible = this.getVisible();
		var bVisible = false, aFields = null;

		if (bActualVisible === false && this._visibilityDerived === false) {
			return;
		}

		aFields = this.getFields();
		if (aFields && aFields.length) {
			bVisible = this._getVisibilityOfFields(aFields);
		}

		if (bActualVisible !== bVisible) {
			this._visibilityDerived = true;
			FormElement.prototype.setProperty.apply(this, [
				'visible', bVisible
			]);
			this.fireVisibleChanged({
				visible: bVisible
			});
			if (this.getParent()) {
				this.getParent()._updateLineBreaks();
			}
		}
	};

	/**
	 * Call back method in case of editable property in SmartField was changed
	 * 
	 * @private
	 */
	GroupElement.prototype._updateFormElementEditable = function(oEvent) {
		var oLabel = this._getLabel();
		if (oLabel && oLabel instanceof SmartLabel) {
			oLabel.bindRequiredPropertyToSmartField();
		}
	};

	GroupElement.prototype._updateLayout = function() {
		var that = this;
		var oVBox = null;
		var oHBox = null;
		var aFields = [];
		var aElements = [];
		var oLayoutData = null;

		if (this.getUseHorizontalLayout()) {
			aElements = this.getFields();
			aFields = this._extractFields(aElements, true);
		} else {
			aFields = this.getFields();
		}
		var oLabel = this._getLabel();

		if (this.getUseHorizontalLayout()) {
			// keep layout data
			if (this.getFields().length > 0 && this.getFields()[0].getLayoutData()) {
				oLayoutData = this.getFields()[0].getLayoutData().clone();
			}
			this.removeAllFields();
			if (aFields.length > 0) {

				if (aFields.length > 1) {
					oHBox = new HBox({
						"items": [].concat(aFields)
					});
				}

				if (oHBox) {
					oVBox = new VBox({
						"items": [].concat(oHBox)
					});
				} else {
					oVBox = new VBox({
						"items": [].concat(aFields)
					});
				}

				oVBox.addStyleClass("sapUiCompGroupElementVBox");
				if (oLayoutData) {
					oVBox.setLayoutData(oLayoutData);
				}
				this.addField(oVBox);
			}

			if (oLabel) {
				FormElement.prototype.setLabel.apply(this, [
					new sap.m.Label()
				]);
				FormElement.prototype.destroyLabel.apply(this);
				if (oVBox) {
					oVBox.insertItem(oLabel, 0);
				}
			}

		} else {
			this.removeAllFields();
			aFields.forEach(function(oField) {
				that.addField(oField);
			});
		}

	};

	/**
	 * Sets the given value for the given property
	 * 
	 * @param {string} sPropertyName name of the property to set
	 * @param {any} oValue value to set the property to
	 * @public
	 */
	GroupElement.prototype.setProperty = function(sPropertyName, oValue) {
		FormElement.prototype.setProperty.apply(this, [
			sPropertyName, oValue
		]);

		if (sPropertyName === 'visible') {
			this._visibilityDerived = false;
			this._updateFormElementVisibility();
		}

	};

	GroupElement.prototype.setVisible = function(bVisible) {
		this._visibilityDerived = false;
		FormElement.prototype.setProperty.apply(this, [
			'visible', bVisible
		]);
		this._updateFormElementVisibility();
	};

	GroupElement.prototype.setUseHorizontalLayout = function(bValue) {
		this.setProperty("useHorizontalLayout", bValue);

		this._updateLayout();
	};

	GroupElement.prototype.setHorizontalLayoutGroupElementMinWidth = function(nValue) {
		this.setProperty("horizontalLayoutGroupElementMinWidth", nValue);

		this._updateLayout();
	};

	/**
	 * Returns the from element.
	 * 
	 * @return {sap.ui.layout.form.FormElement} the form element.
	 * @public
	 */
	GroupElement.prototype.getFormElement = function() {
		return this;
	};

	/**
	 * Adds some control into the aggregation <code>elements</code>
	 * 
	 * @param {sap.ui.core.Control} oElement the control to add.
	 * @public
	 */
	GroupElement.prototype.addElement = function(oElement) {
		var that = this;
		if (oElement.getEditable) {
			if (!oElement.getEditable()) {
				oElement.data("editable", false);
			}
		}
		if (oElement.attachVisibleChanged) {
			oElement.attachVisibleChanged(function(oEvent) {
				that._updateFormElementVisibility();
			});
		}
		if (oElement.attachContextEditableChanged) {
			oElement.attachContextEditableChanged(function(oEvent) {
				that._updateFormElementEditable(oEvent);
			});
		}
		if (oElement.attachEditableChanged) {
			oElement.attachEditableChanged(function(oEvent) {
				that._updateFormElementEditable(oEvent);
			});
		}
		if (oElement.attachInnerControlsCreated) {
			oElement.attachInnerControlsCreated(function(oEvent) {
				that._updateFormElementLabel(oEvent);
			});
		}
		if (oElement.setControlContext) {
			oElement.setControlContext(sap.ui.comp.smartfield.ControlContextType.Form);
		}

		this.addField(oElement);
		this.updateLabelOfFormElement();

		this._updateLayout();
	};

	GroupElement.prototype._updateFormElementLabel = function(oEvent) {
		var aFields = this.getFields();
		if (aFields[0] instanceof VBox) {
			aFields = aFields[0].getItems();
			if (aFields[0] instanceof Label) {
				aFields.splice(0, 1);
			}
		}
		// var iIndex = this.getElementForLabel();

		// if (aFields[iIndex] === oEvent.oSource) {
		this.updateLabelOfFormElement(oEvent.getParameters(), oEvent.oSource);
		// }
	};

	/**
	 * Adds some customData into the aggregation <code>customData</code>. Additionally, customData is also added to the SmartField controls in the
	 * children hierarchy.
	 * 
	 * @param {sap.ui.core.CustomData} oCustomData the customData to add.
	 * @return {sap.ui.comp.smartform.GroupElement} <code>this</code> to allow method chaining.
	 * @public
	 */
	GroupElement.prototype.addCustomData = function(oCustomData) {
		FormElement.prototype.addCustomData.apply(this, arguments);

		var aElement = this.getFields();

		aElement.forEach(function(oElement) {
			if (oElement instanceof SmartField) {
				oElement.addCustomData(oCustomData.clone());
			}
		});
		return this;
	};

	/**
	 * Inserts a control into the aggregation <code>elements</code>
	 * 
	 * @param {sap.ui.core.Control} oElement the control to insert into aggregation named elements.
	 * @param {int} iIndex the 0-based index the control should be inserted at.
	 * @return {sap.ui.comp.smartform.GroupElement} <code>this</code> to allow method chaining.
	 * @public
	 */
	GroupElement.prototype.insertElement = function(oElement, iIndex) {
		this.insertField(oElement, iIndex);
		return this;
	};

	/**
	 * Getter for aggregation <code>elements</code>
	 * 
	 * @return {sap.ui.core.Controls[]} an array of the removed controls.
	 * @public
	 */
	GroupElement.prototype.getElements = function() {
		return this.getFields();
	};

	/**
	 * Removes an element from the aggregation named elements.
	 * 
	 * @param {int|string|sap.ui.core.Control} The element to remove or its index or ID
	 * @return {sap.ui.core.Control} The removed element or null
	 * @public
	 */
	GroupElement.prototype.removeElement = function(vElement) {
		return this.removeField(vElement);
	};

	/**
	 * Removes all the controls in the aggregation named elements.
	 * 
	 * @return {sap.ui.core.Control[]} An array of the removed elements (might be empty)
	 * @public
	 */
	GroupElement.prototype.removeAllElements = function() {
		return this.removeAllFields();
	};

	GroupElement.prototype.removeAggregation = function(sAggregationName, oObject) {
		if (sAggregationName === "elements") {
			return this.removeField(oObject);
		} else {
			return Element.prototype.removeAggregation.apply(this, arguments);
		}
	};

	GroupElement.prototype.removeAllAggregation = function(sAggregationName) {
		if (sAggregationName === "elements") {
			return this.removeAllElements();
		} else {
			return Element.prototype.removeAllAggregation.apply(this, arguments);
		}
	};

	/**
	 * Determines the visibility of a group element based on elements
	 * 
	 * @returns {boolean} Returns true, in case one element of the group element is visible
	 * @public
	 */
	GroupElement.prototype.getVisibleBasedOnElements = function() {
		var isVisible = true;

		var aElements = this.getElements();
		if (aElements && aElements.length > 0) {
			isVisible = aElements.some(function(oElement) {
				return oElement.getVisible();
			});
		}

		return isVisible;
	};

	return GroupElement;

}, /* bExport= */true);

}; // end of sap/ui/comp/smartform/GroupElement.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.flexibility.DialogContent') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartform.flexibility.DialogContent.
jQuery.sap.declare('sap.ui.comp.smartform.flexibility.DialogContent'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexAlignItems'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexAlignSelf'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexDirection'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexItemData'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexJustifyContent'); // unlisted dependency retained
jQuery.sap.require('sap.m.HBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.VBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.registry.Settings'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.Grid'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/flexibility/DialogContent",['jquery.sap.global', 'sap/m/Button', 'sap/m/FlexAlignItems', 'sap/m/FlexAlignSelf', 'sap/m/FlexDirection', 'sap/m/FlexItemData', 'sap/m/FlexJustifyContent', 'sap/m/HBox', 'sap/m/VBox', 'sap/ui/comp/library', 'sap/ui/comp/odata/FieldSelector', './FieldList', 'sap/ui/core/Control', 'sap/ui/core/ResizeHandler', 'sap/ui/fl/registry/Settings', 'sap/ui/layout/Grid'],
	function(jQuery, Button, FlexAlignItems, FlexAlignSelf, FlexDirection, FlexItemData, FlexJustifyContent, HBox, VBox, library, FieldSelector, FieldList, Control, ResizeHandler, Settings, Grid) {
	"use strict";



	/**
	 * Constructor for a new smartform/flexibility/DialogContent.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * The content of the personalization dialog of the SmartForm
	 * @extends sap.ui.core.Control
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartform.flexibility.DialogContent
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var DialogContent = Control.extend("sap.ui.comp.smartform.flexibility.DialogContent", /** @lends sap.ui.comp.smartform.flexibility.DialogContent.prototype */ { metadata : {

		library : "sap.ui.comp",
		aggregations : {

			/**
			 * Content of the control itself
			 */
			content : {type : "sap.ui.core.Control", multiple : false}
		}
	}});


	/**
	 * Initialisation
	 *
	 * @public
	 */
	DialogContent.prototype.init = function() {
		this._oScrollView = new sap.m.ScrollContainer();
		var smartFormDialog = sap.ui.getCore().byId("smartFormPersDialog");
		if (smartFormDialog) {
			this._oResizeDialogHandlerId = ResizeHandler.register(smartFormDialog, jQuery.proxy(this._handleResizeDialog, this));
		}

		this._textResources = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp");
		this._constructLayout();
		this._createButtons();
		this._createFieldList();
		this._createFieldSelector();
		this._createModels();
		this._initiateBinding();
		this.addStyleClass("sapUiSizeCompact");
		this._sFirstIdPart = undefined;
	};

	DialogContent.prototype._handleResizeDialog = function() {
		if (this._oScrollView) {
			var height = jQuery("#smartFormPersDialog-cont").height();
			var headerHeight = jQuery("#smartFormPersDialogFieldListHeader").height();
			this._oScrollView.setHeight(height - headerHeight + "px");
		}
	};

	/**
	 * Initialises the binding of the subordinate controls like move up/down button, field list, field selector
	 *
	 * @private
	 */
	DialogContent.prototype._initiateBinding = function() {

		this._oFieldList.bindAggregation("nodes", {
			path: "/children",
			factory: this._createNodeFactoryFunction.bind(this)
		});

		this._oFieldList.attachSelectionChanged(this._onSelectionChanged.bind(this));
		this._oFieldList.attachLabelChanged(this._onLabelChanged.bind(this));
		this._oFieldList.attachNodeHidden(this._onNodeAddedOrHidden.bind(this));

		this._oBtnMoveDown.bindProperty("enabled", {
			path: "/isMoveDownButtonEnabled"
		});
		this._oBtnMoveUp.bindProperty("enabled", {
			path: "/isMoveUpButtonEnabled"
		});

		this._oBtnMoveBottom.bindProperty("enabled", {
			path: "/isMoveBottomButtonEnabled"
		});
		this._oBtnMoveTop.bindProperty("enabled", {
			path: "/isMoveTopButtonEnabled"
		});
		this._oBtnAddField.bindProperty("enabled", {
			parts: [
				{path: "addFieldButtonDependencies>/selectedField"},
				{path: "addFieldButtonDependencies>/groups"}
			],
			formatter: this._isAddFieldEnabled.bind(this)
		});
	};

	/**
	 * Initialises the models for controling the display of the "add field" button
	 *
	 * @private
	 */
	DialogContent.prototype._createModels = function() {
		this._oAddFieldButtonDependenciesModel = new sap.ui.model.json.JSONModel({
			"selectedField": undefined,
			"groups": undefined
		});
		this.setModel(this._oAddFieldButtonDependenciesModel, 'addFieldButtonDependencies');
		// used to force retriggering of the binding when visibility of a group within the groups has changed
		// (workaround for UI5) the fact that the group stays the same object(reference) let the _oAddFieldButtonDependenciesModel think nothing has chanced
		this._emptyModel = new sap.ui.model.json.JSONModel();

	};

	/**
	 * Sets the first part of new control ids for the view context
	 *
	 * @param {string} sId	Control Id
	 * @public
	 */
	DialogContent.prototype.setViewId = function(sId) {
		this._sViewId = sId;
	};

	/**
	 * Returns Ids of the assigned changes of the component (correctly sorted)
	 *
	 * @param {sap.ui.model.odata.ODataModel} oODataModel The list of fields will be extracetd from the models metadata
	 * @param {string} sEntityType The entity type whose fields could be selected
	 * @param {string} sComponentName The name of the SAPUI5 component
	 * @param {array} aIgnoredFields List of fields which should be ignored
	 * @param {Object.<bindingPath:string, fieldListElement:Object>} mBindingPathToFieldListElement Map absolute odata binding paths to the field list elements
	 * @param {Object.<id:string, fieldListElement:Object>} mIdToFieldListElement Map field list element ids to the field list elements
	 * @param {map} mPropertyBag - (optional) contains additional data that are needed for reading of changes
	 * - appDescriptor that belongs to actual component
	 * - siteId that belongs to actual component   
	 * @public
	 */
	DialogContent.prototype.initialiseODataFieldSelector = function(oODataModel, sEntityType, sComponentName, aIgnoredFields, mBindingPathToFieldListElement, mIdToFieldListElement, mPropertyBag) {
		var oODataFieldSelector;
		var bShowCreateExtFieldButton = false;
		oODataFieldSelector = this._oFieldSelector;
		if (oODataFieldSelector) {
			// get the information of the
			Settings.getInstance(sComponentName, mPropertyBag).then(function(oSettings) {
				if (oSettings.isModelS) {
					bShowCreateExtFieldButton = oSettings.isModelS();
				}
				oODataFieldSelector.setModel(oODataModel, sEntityType, bShowCreateExtFieldButton, aIgnoredFields, mBindingPathToFieldListElement, mIdToFieldListElement);
			});
		}
	};

	/**
	 * Factory function used for the recursive binding of the FieldListNode
	 *
	 * @param {string} sId	id of the to-be-created FieldListNode
	 * @param {object} oContext Binding Context
	 * @returns {FieldListNode} Newly created FieldListNode
	 * @private
	 */
	DialogContent.prototype._createNodeFactoryFunction = function(sId, oContext) {

		var nodeBindingSettings, oNode;

		nodeBindingSettings = {
			label: {
				path: "label"
			},
			nodes: {
				path: oContext.getPath() + "/children",
				factory: this._createNodeFactoryFunction.bind(this)
			},
			isSelected: {
				path: "isSelected"
			},
			isVisible: {
				path: "isVisible"
			}
		};
		oNode = new sap.ui.comp.smartform.flexibility.FieldListNode(sId, nodeBindingSettings);
		return oNode;
	};

	/**
	 * Event handler called when the selection of a root FieldListNode has changed
	 *
	 * @param {object} oEvent Event
	 * @private
	 */
	DialogContent.prototype._onSelectionChanged = function(oEvent) {
		var oSelectedFieldListNode, oNode;
		oSelectedFieldListNode = oEvent.getParameter('node');
		oNode = oSelectedFieldListNode.getBindingContext().getObject();

		this._changeSelection(oNode);

		this.getModel().updateBindings();
	};

	/**
	 * Event handler called when a label contained in the field list has changed
	 *
	 * @param {object} oEvent Event
	 * @private
	 */
	DialogContent.prototype._onLabelChanged = function(oEvent) {
		var oChangedFieldListNode, oFieldListElement;
		oChangedFieldListNode = oEvent.getParameter('node');
		oFieldListElement = oChangedFieldListNode.getBindingContext().getObject();

		this._oFieldSelector.updateFieldLabel(oFieldListElement);
	};

	/**
	 * Event handler called when a node in the field list was hidden
	 *
	 * @param {object} oEvent Event
	 * @private
	 */
	DialogContent.prototype._onNodeAddedOrHidden = function(oEvent) {
		this._oAddFieldButtonDependenciesModel.setProperty("/groups", this.getModel().getData().children);
		this._triggerAddFieldButtonDependenciesBindings();
	};

	/**
	 * Changes the selected FieldListNode. Unselects previously selected FieldListNode
	 *
	 * @param {object} oNodeToBeSelected	JSON object from the model representing the newly selected node
	 * @private
	 */
	DialogContent.prototype._changeSelection = function(oNodeToBeSelected) {


		// Deselect previously selected node
		if (this._oSelectedFieldListNodeData) {
			this._oSelectedFieldListNodeData.isSelected = false;
		}

		// select newly selected node
		this._oSelectedFieldListNodeData = oNodeToBeSelected;
		this._oSelectedFieldListNodeData.isSelected = true;

		this._readDataFromModelAndUpdateMoveButtonEnabledState();

		this.getModel().updateBindings();
	};

	/**
	 * Reads the data from the model and recalculate the move button enabled state
	 *
	 * @private
	 */
	DialogContent.prototype._readDataFromModelAndUpdateMoveButtonEnabledState = function() {

		var oData;
		oData = this._getDataFromModel();
		this._updateMoveButtonEnabledState(oData);

	};

	/**
	 * Checks if node can be moved down
	 *
	 * @param {object} oNode Field list node to be moved
	 * @param {number} nLevelInAdjacenceList Level of node to be moved in field list tree
	 * @param {array} aAdjacenceList Adjacence list
	 * @returns {object} object which holds information if the move is possible, how many places
	 *                   the node has to be moved in the field list and on the new parent node
	 *                   if the move leads to a new one
	 * @private
	 */
	DialogContent.prototype._checkMoveDown = function(oNode, nLevelInAdjacenceList, aAdjacenceList) {

		var i, oMoveDown = {};

		oMoveDown.enabled = false;
		oMoveDown.moveStep = 0;
		oMoveDown.newParent = undefined;

		// moving down possible ?
		// first check - are there any children at higher index than the selected node ?
		oMoveDown.enabled = oNode.parent.children.length - 1 > oNode.index;
		// there is at least one child at higher index - but is it visible ?
		if (oMoveDown.enabled) {
			for (i = oNode.index + 1; i < oNode.parent.children.length; i++) {
				oMoveDown.moveStep += 1;
			    // found a visible child - moving down possible
				if (!oNode.parent.children[i].hasOwnProperty('isVisible') || oNode.parent.children[i].isVisible) {
					return oMoveDown;
			    }
			    // no visible child at higher index - have to check if moving down to new parent is possible
				if (i === (oNode.parent.children.length - 1)) {
					oMoveDown.enabled = false;
			    }
			}
		}

		// no move down possible at the same parent - check if moving down to new parent is possible
		if (!oMoveDown.enabled) {
			// first check - is there any parent at higher index than the current parent ?
			var nParentIndex = aAdjacenceList[nLevelInAdjacenceList - 1].indexOf(oNode.parent);
			oMoveDown.enabled = aAdjacenceList[nLevelInAdjacenceList - 1].length - 1 > nParentIndex;
			// there is at least one parent at a higher index - but is it visible ?
			if (oMoveDown.enabled) {
				for (i = nParentIndex + 1; i < aAdjacenceList[nLevelInAdjacenceList - 1].length; i++) {
				    // found a visible parent - moving down possible
					if (!aAdjacenceList[nLevelInAdjacenceList - 1][i].hasOwnProperty('isVisible') || aAdjacenceList[nLevelInAdjacenceList - 1][i].isVisible) {
                        oMoveDown.newParent = aAdjacenceList[nLevelInAdjacenceList - 1][i];
						return oMoveDown;
				    }
				    // no visible parent at higher index - moving down is not possible
					if (i === (aAdjacenceList[nLevelInAdjacenceList - 1].length - 1)) {
						oMoveDown.enabled = false;
				    }
				}
			}
		}

		return oMoveDown;

	};

	/**
	 * Checks if node can be moved up
	 *
	 * @param {object} oNode Field list node to be moved
	 * @param {number} nLevelInAdjacenceList Level of node to be moved in field list tree
	 * @param {array} aAdjacenceList Adjacence list
	 * @returns {object} object which holds information if the move is possible, how many places
	 *                   the node has to be moved in the field list and on the new parent node
	 *                   if the move leads to a new one
	 * @private
	 */
	DialogContent.prototype._checkMoveUp = function(oNode, nLevelInAdjacenceList, aAdjacenceList) {

		var i, oMoveUp = {};

		oMoveUp.enabled = false;
		oMoveUp.moveStep = 0;
		oMoveUp.newParent = undefined;

		// moving up possible ?
		// first check - is selected node not the top child ?
		oMoveUp.enabled = oNode.index > 0;
		// not the top child - but is there a visible child above the selected node ?
		if (oMoveUp.enabled) {
			for (i = oNode.index - 1; i >= 0; i--) {
				oMoveUp.moveStep += 1;
			    // found a visible child - moving up possible
				if (!oNode.parent.children[i].hasOwnProperty('isVisible') || oNode.parent.children[i].isVisible) {
                    return oMoveUp;
			    }
				// no visible child found - have to check if the node can be moved up to a new parent
				if (i === 0) {
					oMoveUp.enabled = false;
				}
			}
		}
		// moving up at the same parent not possible - check if the node can be moved up to a new parent
		if (!oMoveUp.enabled) {
			var nParentIndex = aAdjacenceList[nLevelInAdjacenceList - 1].indexOf(oNode.parent);
			oMoveUp.enabled = nParentIndex > 0;
			// there is at least one parent at lower index - but is it visible ?
			if (oMoveUp.enabled) {
				for (i = nParentIndex - 1; i >= 0; i--) {
				    // found a visible parent - moving up possible
					if (!aAdjacenceList[nLevelInAdjacenceList - 1][i].hasOwnProperty('isVisible') || aAdjacenceList[nLevelInAdjacenceList - 1][i].isVisible) {
                        oMoveUp.newParent = aAdjacenceList[nLevelInAdjacenceList - 1][i];
						return oMoveUp;
				    }
				    // no visible parent at lower index - moving up is not possible
					if (i === 0) {
						oMoveUp.enabled = false;
				    }
				}
			}
		}

		return oMoveUp;

	};

	/**
	 * Recalculates the move button enabled state
	 *
	 * @param {object} oData The data of the whole JSON model
	 * @private
	 */
	DialogContent.prototype._updateMoveButtonEnabledState = function(oData) {

		var fn, bIsMoveDownEnabled, bIsMoveUpEnabled, bIsMoveBottomEnabled, bIsMoveTopEnabled;

		var that = this;

		fn = function(oNode, nLevelInAdjacenceList, aAdjacenceList) {

			var oMoveDown = that._checkMoveDown(oNode, nLevelInAdjacenceList, aAdjacenceList);
			var oMoveUp = that._checkMoveUp(oNode, nLevelInAdjacenceList, aAdjacenceList);

			bIsMoveDownEnabled = oMoveDown.enabled;
			bIsMoveUpEnabled = oMoveUp.enabled;

			bIsMoveBottomEnabled = bIsMoveDownEnabled;
			bIsMoveTopEnabled = bIsMoveUpEnabled;

		};

		if (this._oSelectedFieldListNodeData) {
			this._findNodeInDataModel(oData, this._oSelectedFieldListNodeData.id, fn);
		} else { // nothing selected
			bIsMoveDownEnabled = false;
			bIsMoveUpEnabled = false;
			bIsMoveBottomEnabled = false;
			bIsMoveTopEnabled = false;
		}

		oData.isMoveDownButtonEnabled = bIsMoveDownEnabled;
		oData.isMoveUpButtonEnabled = bIsMoveUpEnabled;
		oData.isMoveBottomButtonEnabled = bIsMoveBottomEnabled;
		oData.isMoveTopButtonEnabled = bIsMoveTopEnabled;
	};

	DialogContent.prototype._constructLayout = function() {
		this.oLayout = new HBox({
			direction: FlexDirection.Row
		});
		this.oLayoutLeft = new VBox({
			direction: FlexDirection.Column,
			layoutData: new FlexItemData({
				order: 1,
				growFactor: 2
			})
		});
		this.oLayoutLeft.addStyleClass("sapUiCompDialogContentFieldListContainer");

		this.oLayoutMiddle = new VBox({
			direction: FlexDirection.Column,
			layoutData: new FlexItemData({
				order: 2,
				growFactor: 1
			})
		});
		this.oLayoutMiddle.addStyleClass("sapUiCompDialogContentMiddle");

		this.oLayoutTopLeft = new Grid("smartFormPersDialogFieldListHeader");
		this.oLayoutTopLeft.addStyleClass("sapUiCompDialogContentFieldListContainerTop");

		this.oLayoutLeft.addItem(this.oLayoutTopLeft);

		this.oLayoutRight = new VBox({
			direction: FlexDirection.Column,
			layoutData: new FlexItemData({
				order: 3,
				growFactor: 9
			})
		});

		this.oLayout.addItem(this.oLayoutLeft);
		this.oLayout.addItem(this.oLayoutMiddle);
		this.oLayout.addItem(this.oLayoutRight);
		this.setContent(this.oLayout);
	};

	/**
	 * Creates an instance of the FieldList Control
	 *
	 * @private
	 */
	DialogContent.prototype._createFieldList = function() {
		this._oScrollView.setWidth("100%");
		this._oScrollView.setVertical(true);

		this._oFieldList = new FieldList(this.getId() + '-FieldList');
		this._oScrollView.addContent(this._oFieldList);
		this._handleResizeDialog();

		this.oLayoutLeft.addItem(this._oScrollView);
	};

	/**
	 * Creates an instance of the FieldSelector Control
	 *
	 * @private
	 */
	DialogContent.prototype._createFieldSelector = function() {
		this._oFieldSelector = new FieldSelector({
			layoutData: new FlexItemData({
				order: 3,
				growFactor: 9
			})
		});

		this._oFieldSelector.attachFieldSelectionChanged(this._writeSelectedFieldToModel.bind(this));
		this.oLayoutRight.addItem(this._oFieldSelector);
	};

	DialogContent.prototype._writeSelectedFieldToModel = function (oSelection) {
		this._oAddFieldButtonDependenciesModel.setProperty("/selectedField", oSelection.mParameters);
		this._triggerAddFieldButtonDependenciesBindings();
	};

	DialogContent.prototype._triggerAddFieldButtonDependenciesBindings = function () {
		this.setModel(this._emptyModel, 'addFieldButtonDependencies');
		if (!this._oAddFieldButtonDependenciesModel.getData().groups) {
			this._oAddFieldButtonDependenciesModel.setProperty("groups", this.getModel().getData().children);
		}
		this.setModel(this._oAddFieldButtonDependenciesModel, 'addFieldButtonDependencies');
	};

	/**
	 * Reacts on a change within the intanciated FieldSelector Control
	 *
	 * @private
	 */
	DialogContent.prototype._isAddFieldEnabled = function(oSelectedField, aGroups) {
		var bValidFieldSelected = !!oSelectedField && !!oSelectedField.name;
		return bValidFieldSelected && aGroups && this._containsVisibleGroups(aGroups);
	};

	DialogContent.prototype._containsVisibleGroups = function(oGroups) {
		var oVisibleFieldListGroups = this._getVisibleGroups(oGroups);
		return oVisibleFieldListGroups.length > 0;
	};

	DialogContent.prototype._getVisibleGroups = function(oGroups) {
		var oVisibleFieldListGroups = [];

		oGroups.forEach(function (oNode) {
			if (oNode.isVisible) {
				oVisibleFieldListGroups.push(oNode);
			}
		});

		return oVisibleFieldListGroups;
	};

	/**
	 * Creates the Move up/down buttons, add group button, add field button
	 *
	 * @private
	 */
	DialogContent.prototype._createButtons = function() {
		var sText, sTooltip;

		this._oBtnMoveBottom = new Button(this.getId() + '-MoveBottomButton', {
			layoutData : new sap.ui.layout.GridData({
				span : "L2 M3 S3"
			})
		});
		this._oBtnMoveBottom.setIcon("sap-icon://expand-group");
		this._oBtnMoveBottom.attachPress(this._onMoveBottomClick.bind(this));
		sTooltip = this._textResources.getText("FORM_PERS_DIALOG_MOVE_BOTTOM");
		this._oBtnMoveBottom.setTooltip(sTooltip);
		this.oLayoutTopLeft.addContent(this._oBtnMoveBottom);

		this._oBtnMoveDown = new Button(this.getId() + '-MoveDownButton', {
			layoutData : new sap.ui.layout.GridData({
				span : "L2 M3 S3"
			})
		});
		this._oBtnMoveDown.setIcon("sap-icon://slim-arrow-down");
		this._oBtnMoveDown.attachPress(this._onMoveDownClick.bind(this));
		sTooltip = this._textResources.getText("FORM_PERS_DIALOG_MOVE_DOWN");
		this._oBtnMoveDown.setTooltip(sTooltip);
		this.oLayoutTopLeft.addContent(this._oBtnMoveDown);

		this._oBtnMoveUp = new Button(this.getId() + '-MoveUpButton', {
			layoutData : new sap.ui.layout.GridData({
				span : "L2 M3 S3"
			})
		});
		this._oBtnMoveUp.setIcon("sap-icon://slim-arrow-up");
		this._oBtnMoveUp.attachPress(this._onMoveUpClick.bind(this));
		sTooltip = this._textResources.getText("FORM_PERS_DIALOG_MOVE_UP");
		this._oBtnMoveUp.setTooltip(sTooltip);
		this.oLayoutTopLeft.addContent(this._oBtnMoveUp);

		this._oBtnMoveTop = new Button(this.getId() + '-MoveTopButton', {
			layoutData : new sap.ui.layout.GridData({
				span : "L2 M3 S3"
			})
		});
		this._oBtnMoveTop.setIcon("sap-icon://collapse-group");
		this._oBtnMoveTop.attachPress(this._onMoveTopClick.bind(this));
		sTooltip = this._textResources.getText("FORM_PERS_DIALOG_MOVE_TOP");
		this._oBtnMoveTop.setTooltip(sTooltip);
		this.oLayoutTopLeft.addContent(this._oBtnMoveTop);

		this._oBtnAddGroup = new Button(this.getId() + '-AddGroupButton', {
			layoutData : new sap.ui.layout.GridData({
				span : "L4 M12 S12"
			})
		});
		sText = this._textResources.getText("FORM_PERS_DIALOG_ADD_GROUP");
		this._oBtnAddGroup.setText(sText);
		this._oBtnAddGroup.attachPress(this._onAddGroupClick.bind(this));
		sTooltip = this._textResources.getText("FORM_PERS_DIALOG_ADD_GROUP");
		this._oBtnAddGroup.setTooltip(sTooltip);
		this.oLayoutTopLeft.addContent(this._oBtnAddGroup);

		this._oBtnAddField = new Button(this.getId() + '-AddFieldButton');
		this._oBtnAddField.setIcon("sap-icon://slim-arrow-left");
		this._oBtnAddField.attachPress(this._onAddFieldClick.bind(this));
		sTooltip = this._textResources.getText("FORM_PERS_DIALOG_ADD_FIELD");
		this._oBtnAddField.setTooltip(sTooltip);
		this.oLayoutMiddle.addItem(this._oBtnAddField);
	};

	/**
	 * Event handler called when the move up button is clicked
	 *
	 * @private
	 */
	DialogContent.prototype._onMoveUpClick = function() {

		var oModel, oData, sId;

		oModel = this.getModel();
		if (oModel) {
			sId = this._getIdOfSelectedFieldListNode();
			oData = this._getDataFromModel();
			this._executeMoveUp(oData, sId);
			this._updateMoveButtonEnabledState(oData);
			oModel.setData(oData);
		}
	};

	/**
	 * Event handler called when the move down button is clicked
	 *
	 * @private
	 */
	DialogContent.prototype._onMoveDownClick = function() {

		var oData, sId, oModel;

		oModel = this.getModel();
		if (oModel) {
			sId = this._getIdOfSelectedFieldListNode();
			oData = this._getDataFromModel();
			this._executeMoveDown(oData, sId);
			this._updateMoveButtonEnabledState(oData);
			oModel.setData(oData);
		}
	};

	/**
	 * Event handler called when the move top button is clicked
	 *
	 * @private
	 */
	DialogContent.prototype._onMoveTopClick = function() {

		var oModel, oData, sId;

		oModel = this.getModel();
		if (oModel) {
			sId = this._getIdOfSelectedFieldListNode();
			oData = this._getDataFromModel();
			this._executeMoveTop(oData, sId);
			this._updateMoveButtonEnabledState(oData);
			oModel.setData(oData);
		}
	};

	/**
	 * Event handler called when the move bottom button is clicked
	 *
	 * @private
	 */
	DialogContent.prototype._onMoveBottomClick = function() {

		var oData, sId, oModel;

		oModel = this.getModel();
		if (oModel) {
			sId = this._getIdOfSelectedFieldListNode();
			oData = this._getDataFromModel();
			this._executeMoveBottom(oData, sId);
			this._updateMoveButtonEnabledState(oData);
			oModel.setData(oData);
		}
	};

	/**
	 * Event handler called when the add group button is clicked
	 *
	 * @private
	 */
	DialogContent.prototype._onAddGroupClick = function() {

		var oData, oModel;

		oModel = this.getModel();
		if (oModel) {
			oData = this._getDataFromModel();
			this._executeAddGroup(oData);
			oModel.setData(oData);
			this._onNodeAddedOrHidden();
		}
	};

	/**
	 * Returns the id of the currently selected FieldListNode. Undefined if no FieldListNode is selected
	 *
	 * @returns {string} Id of selected FieldListNode
	 * @private
	 */
	DialogContent.prototype._getIdOfSelectedFieldListNode = function() {

		var oNode;
		oNode = this._oSelectedFieldListNodeData;

		if (oNode) {
			return oNode.id;
		}
	};

	/**
	 * Event handler, called when add field button was clicked
	 *
	 * @param {object} oEvent Event
	 * @private
	 */
	DialogContent.prototype._onAddFieldClick = function(oEvent) {
		var oModel, oData;

		oModel = this.getModel();
		if (oModel) {
			oData = this._getDataFromModel();
			this._executeAddField(oData);
			oModel.setData(oData);
		}
	};

	/**
	 * Calculates position where a new field would be added to. Basis for this calculation is the currently selected node.
	 *
	 * @param {object} oData JSON data from model
	 * @returns {object} Map having a member 'parent' (new parent node) and 'index' (Position in parent's children collection)
	 * @private
	 */
	DialogContent.prototype._getParentAndIndexNodeForNewField = function(oData) {
		var sId, nIndex, oParentNode;

		// Search for the currently selected field list node and determine new parent
		sId = this._getIdOfSelectedFieldListNode();
		this._findNodeInDataModel(oData, sId, function(oNode) {
			if (oNode.type === 'group') {
				oParentNode = oNode;
				if (oParentNode.children && oParentNode.children.length) {
					nIndex = oParentNode.children.length;
				}
			} else {
				oParentNode = oNode.parent;
				nIndex = oNode.index + 1;
			}
		});
		// if no FieldNode was selected, append to last group
		if (!oParentNode) {
			oParentNode = this._getBottomGroup(oData);
			nIndex = oParentNode.children.length;
		}

		return {
			parent: oParentNode,
			index: nIndex
		};

	};

	/**
	 * Returns the last group
	 *
	 * @param {object} oData JSON data from model returns {object} The very last group. Undefined if there are no groups.
	 * @returns {object} Parent node instance
	 * @private
	 */
	DialogContent.prototype._getBottomGroup = function(oData) {
		var oBottomGroup;

		if (oData && oData.children && oData.children.length > 0) {
			var oVisibleGroups = this._getVisibleGroups(oData.children);
			oBottomGroup = oVisibleGroups[oVisibleGroups.length - 1]; // get last element
		}
		return oBottomGroup;
	};

	/**
	 * Gets the data from the model
	 *
	 * @returns {object} JSON data from model
	 * @private
	 */
	DialogContent.prototype._getDataFromModel = function() {

		var oModel;

		oModel = this.getModel();
		if (oModel) {
			return oModel.getData();
		}
	};

	/**
	 * Creates an adjacence list from the provided JSON tree. The data has a single root node and multiple children. Each child can have multiple children
	 * too. The tree depth is not limited. The adjacence list is an array of arrays. list[i] contains an ordered list of all nodes of the tree, having the
	 * depth i. This means list[0] equals the root node. As a side effect two additional properties will be added to all nodes of the model: - index:
	 * Contains the position of this node in the parent's children collection - parent: The parent of this node These properties can be removed with
	 * _destroyAdjacenceList
	 *
	 * @param {object} oData The data from the JSON model
	 * @returns {Array} Adjacence list
	 * @private
	 */
	DialogContent.prototype._createAdjacenceList = function(oData) {

		var aAdjacenceList, fCreateAdjacenceList;

		aAdjacenceList = [];
		fCreateAdjacenceList = function(oNode, oParent, nIndex, nDepth) {
			oNode.index = nIndex;
			oNode.parent = oParent;
			aAdjacenceList[nDepth] = aAdjacenceList[nDepth] || [];
			aAdjacenceList[nDepth].push(oNode);
		};

		this._dfs(oData, fCreateAdjacenceList);

		return aAdjacenceList;
	};

	/**
	 * Removes the properties from the data model added, which were added when calling _createAdjacenceList
	 *
	 * @param {object} oData The data from the JSON model
	 * @private
	 */
	DialogContent.prototype._destroyAdjacenceList = function(oData) {

		var fDestroyAdjacenceList;

		fDestroyAdjacenceList = function(oNode, oParent, nIndex, nDepth) {
			delete oNode.index;
			delete oNode.parent;
		};

		this._dfs(oData, fDestroyAdjacenceList);
	};

	/**
	 * DFS (depth first search) traverses the full graph an calls fn for each node. Method is recursive
	 *
	 * @param {object} oData The data of the current node
	 * @param {function} fn Function to be called for each node
	 * @param {object} oParent The parent node
	 * @param {number} nIndex The index of the cirrent node within the parent's children collection
	 * @param {number} nDepth The depth within the tree of the current node
	 * @private
	 */
	DialogContent.prototype._dfs = function(oData, fn, oParent, nIndex, nDepth) {

		var i;

		if (!oData) {
			return;
		}

		nDepth = nDepth || 0;
		nIndex = nIndex || 0;

		fn(oData, oParent, nIndex, nDepth);

		if (oData && oData.children) {
			for (i = 0; i < oData.children.length; i++) {
				this._dfs(oData.children[i], fn, oData, i, nDepth + 1);
			}
		}
	};

	/**
	 * Searches for a node in the data tree and executes the funtion fn for this node
	 *
	 * @param {object} oData The data of the JSON model
	 * @param {String} sId oParent The parent node
	 * @param {function} fn Function to be executed for this node. Function will be called with these parameters: fn(oNode, nDepth, aAdjacenceList).
	 * @private
	 */
	DialogContent.prototype._findNodeInDataModel = function(oData, sId, fn) {

		var aAdjacenceList;

		aAdjacenceList = this._createAdjacenceList(oData);

		(function() {
			var nDepth, j, nMaxHierarchyDepth, length, oNode;

			nMaxHierarchyDepth = aAdjacenceList.length;
			for (nDepth = 0; nDepth < nMaxHierarchyDepth; nDepth++) {
				length = aAdjacenceList[nDepth].length;
				for (j = 0; j < length; j++) {
					oNode = aAdjacenceList[nDepth][j];
					if (oNode.id === sId) {
						fn(oNode, nDepth, aAdjacenceList);
						return;
					}
				}
			}
		}());

		this._destroyAdjacenceList(oData);
	};

	/**
	 * Moves a node down in the data model
	 *
	 * @param {object} oNode The JSON node representing a FieldListNode to be moved down
	 * @param {number} nLevelInAdjacenceList Depth of the node in the tree
	 * @param {Array} aAdjacenceList Adjacence List
	 * @private
	 */
	DialogContent.prototype._moveDownNode = function(oNode, nLevelInAdjacenceList, aAdjacenceList) {

		var oMoveDown = this._checkMoveDown(oNode, nLevelInAdjacenceList, aAdjacenceList);

		if (oMoveDown.enabled) {
			// move leads to new parent node
			if (oMoveDown.newParent) {
				oNode.parent.children.splice(oNode.index, 1);
				oMoveDown.newParent.children = oMoveDown.newParent.children || [];
				oMoveDown.newParent.children.splice(0, 0, oNode);
			// move within the same parent
			} else {
				oNode.parent.children.splice(oNode.index, 1);
				oNode.parent.children.splice(oNode.index + oMoveDown.moveStep, 0, oNode);
			}
		}

	};

	/**
	 * Moves a node up in the data model
	 *
	 * @param {object} oNode The JSON node representing a FieldListNode to be moved up
	 * @param {number} nLevelInAdjacenceList Depth of the node in the tree
	 * @param {Array} aAdjacenceList Adjacence List
	 * @private
	 */
	DialogContent.prototype._moveUpNode = function(oNode, nLevelInAdjacenceList, aAdjacenceList) {

		var oMoveUp = this._checkMoveUp(oNode, nLevelInAdjacenceList, aAdjacenceList);

		if (oMoveUp.enabled) {
			// move leads to new parent node
			if (oMoveUp.newParent) {
				oNode.parent.children.splice(oNode.index, 1);
				oMoveUp.newParent.children = oMoveUp.newParent.children || [];
				oMoveUp.newParent.children.push(oNode);
			// move within the same parent
			} else {
				oNode.parent.children.splice(oNode.index, 1);
				oNode.parent.children.splice(oNode.index - oMoveUp.moveStep, 0, oNode);
			}
		}

	};

	/**
	 * Moves a node down to the bottom in the data model
	 *
	 * @param {object} oNode The JSON node representing a FieldListNode to be moved down to the bottom
	 * @param {number} nLevelInAdjacenceList Depth of the node in the tree
	 * @param {Array} aAdjacenceList Adjacence List
	 * @private
	 */
	DialogContent.prototype._moveBottomNode = function(oNode, nLevelInAdjacenceList, aAdjacenceList) {

		var oMoveDown = this._checkMoveDown(oNode, nLevelInAdjacenceList, aAdjacenceList);

		if (oMoveDown.enabled) {
			// move leads to new parent node
			if (oMoveDown.newParent) {
				oNode.parent.children.splice(oNode.index, 1);
				oMoveDown.newParent.children = oMoveDown.newParent.children || [];
				oMoveDown.newParent.children.push(oNode);
			// move within the same parent
			} else {
				oNode.parent.children.splice(oNode.index, 1);
				oNode.parent.children.push(oNode);
			}
		}

	};

	/**
	 * Moves a node up to the top in the data model
	 *
	 * @param {object} oNode The JSON node representing a FieldListNode to be moved up to the top
	 * @param {number} nLevelInAdjacenceList Depth of the node in the tree
	 * @param {Array} aAdjacenceList Adjacence List
	 * @private
	 */
	DialogContent.prototype._moveTopNode = function(oNode, nLevelInAdjacenceList, aAdjacenceList) {

		var oMoveUp = this._checkMoveUp(oNode, nLevelInAdjacenceList, aAdjacenceList);

		if (oMoveUp.enabled) {
			// move leads to new parent node
			if (oMoveUp.newParent) {
				oNode.parent.children.splice(oNode.index, 1);
				oMoveUp.newParent.children = oMoveUp.newParent.children || [];
				oMoveUp.newParent.children.splice(0, 0, oNode);
			// move within the same parent
			} else {
				oNode.parent.children.splice(oNode.index, 1);
				oNode.parent.children.splice(0, 0, oNode);
			}
		}

	};

	/**
	 * Moves a node down in the data model
	 *
	 * @param {object} oData The data of the JSON model
	 * @param {String} sId The id of the node to be moved down
	 * @returns {object} Node in data model after move
	 * @private
	 */
	DialogContent.prototype._executeMoveDown = function(oData, sId) {

		return this._findNodeInDataModel(oData, sId, this._moveDownNode.bind(this));
	};

	/**
	 * Moves a node up in the data model
	 *
	 * @param {object} oData The data of the JSON model
	 * @param {String} sId The id of the node to be moved up
	 * @returns {object} Node in the data model after the move
	 * @private
	 */
	DialogContent.prototype._executeMoveUp = function(oData, sId) {

		return this._findNodeInDataModel(oData, sId, this._moveUpNode.bind(this));
	};

	/**
	 * Moves a node down to the bottom in the data model
	 *
	 * @param {object} oData The data of the JSON model
	 * @param {String} sId The id of the node to be moved down to the bottom
	 * @return {object} Bottom node in the data model
	 * @private
	 */
	DialogContent.prototype._executeMoveBottom = function(oData, sId) {

		return this._findNodeInDataModel(oData, sId, this._moveBottomNode.bind(this));
	};

	/**
	 * Moves a node up to the top in the data model
	 *
	 * @param {object} oData The data of the JSON model
	 * @param {String} sId The id of the node to be moved up to the top
	 * @returns {object} Top node in the data model
	 * @private
	 */
	DialogContent.prototype._executeMoveTop = function(oData, sId) {

		return this._findNodeInDataModel(oData, sId, this._moveTopNode.bind(this));
	};

	/**
	 * Reads the selected field from the field selector and adds it to the data
	 *
	 * @param {object} oData The data of the JSON model
	 * @private
	 */
	DialogContent.prototype._executeAddField = function(oData) {
		var oNewPosition, oNewNode, that = this;

		oNewPosition = this._getParentAndIndexNodeForNewField(oData);

		oNewNode = this._getNewNodeFromSelectedODataField(oData, this._getSelectedFieldFromFieldSelector());

		// check if the field is already delivered as hidden but with configuration. If not add a new field
		var oExistingField = this._getExistingField(oNewNode, oData);
		if (oExistingField) {
			this._findNodeInDataModel(oData, oExistingField.id, function(oNode, nLevelInAdjacenceList, aAdjacenceList){
				// set the existing field to visible
				oNode.isVisible = true;
				// remove the existing node
				oNode.parent.children.splice(oNode.index, 1);
				// check if the old node will be removed before the new position
				if (oNode.parent === oNewPosition.parent) {
					if (oNode.index < oNewPosition.index) {
						oNewPosition.index--;
					}
				}
				// add the existing node to the new position
				that._addField(oNode, oNewPosition.parent, oNewPosition.index);

			});
		} else {
			this._addField(oNewNode, oNewPosition.parent, oNewPosition.index);
		}
	};

	/**
	 * Tries to add a predefined field
	 *
	 * @param {object} oNewNode The node to be added
	 * @param {object} oData - internal data structure
	 *
	 * @returns {boolean} true if the predefined field was added
	 */
	DialogContent.prototype._getExistingField = function(oNewNode, oData) {
		var bFound = false;
		var sReferenceValue = '';

		if (oNewNode.isBoundToODataService) { // used to identifying existing field which is bound to the odata service
			sReferenceValue = oNewNode.entityType + '/' + oNewNode.fieldValue;
		} else { // used to identifying existing field which is not bound to the odata service
			sReferenceValue = oNewNode.id;
		}

		var fnCheckIfBoundToODataService = function(index, bindingPath) {
			if (bindingPath.path === sReferenceValue) {
				bFound = true;
			}
		};
		var fnCheckIfNotBoundToODataService = function(id) {
			if (id === sReferenceValue) {
				bFound = true;
			}
		};
		if (oData.children) {
			for (var i = 0; i < oData.children.length; i++) {
				var oChild = oData.children[i];
				if (oChild.type === "field") {
					if (oChild.isBoundToODataService) {
						jQuery.each(oChild.bindingPaths, fnCheckIfBoundToODataService);
					} else {
						fnCheckIfNotBoundToODataService(oChild.id);
					}
				}
				if (bFound) {
					return oChild;
				}

				var oFoundChild = this._getExistingField(oNewNode, oChild);
				if (oFoundChild) {
					return oFoundChild;
				}
			}
		}
	};


	/**
	 * Adds the new node to the specified position
	 *
	 * @param {object} oNewNode The node to be added
	 * @param {object} oParentNode The new parent of the node
	 * @param {number} nIndex The position where the new node will be added into the parent's children collection. If undefined, the new node will be
	 *        appended as last node.
	 * @private
	 */
	DialogContent.prototype._addField = function(oNewNode, oParentNode, nIndex) {

		if (!oNewNode) {
			return;
		}

		// Add new field
		oParentNode.children = oParentNode.children || [];
		if (nIndex || nIndex === 0) {
			oParentNode.children.splice(nIndex, 0, oNewNode);
		} else {
			oParentNode.children.push(oNewNode);
		}
	};

	/**
	 * Gets the currently selected field from the OData Field Selector and creates and returns a new node which can be added to the model
	 * @param {object} oData	Data object
	 * @param {object} oSelectedField	Selected field instance
	 * @returns {object} The new node for the OData field
	 * @private
	 */
	DialogContent.prototype._getNewNodeFromSelectedODataField = function(oData, oSelectedField) {
		var oNewNode;

		if (!oSelectedField) {
			return null;
		}

	// create new entry
		oNewNode = {
			bindingPaths : (oSelectedField.isBoundToODataService) ? [ { path : oSelectedField.entityName + '/' + oSelectedField.path } ] : [ { path : '' } ],
			isBoundToODataService: oSelectedField.isBoundToODataService, // used in _getExistingField
			id: (oSelectedField.isBoundToODataService) ? oData.id + "_" + oSelectedField.entityType + "_" + oSelectedField.path.replace("/","_") : oSelectedField.id, // oSelectedField.id only available for fields which are not bound to odata service (are already on the UI view and therefore have an id)
			entitySet: oSelectedField.entitySet,
			entityType: oSelectedField.entityType,
			entityName: oSelectedField.entityName,
			label: oSelectedField.field, // "{" + oSelectedField.name + "/@sap:label}"
			valueProperty: "value",
			fieldValue: oSelectedField.path,
			jsType: "sap.ui.comp.smartfield.SmartField",
			isVisible: true,
			type: "field"
		};

		return oNewNode;
	};

	/**
	 * Gets the currently selected field from the OData Field Selector
	 *
	 * @returns {object} Selected OData field as JSON object
	 * @private
	 */
	DialogContent.prototype._getSelectedFieldFromFieldSelector = function() {
		return this._oFieldSelector.getSelectedField();
	};

	/**
	 * Adds a new group as first element to the data
	 *
	 * @param {object} oData The data of the JSON model
	 * @private
	 */
	DialogContent.prototype._executeAddGroup = function(oData) {
		var sText, oNewGroup;
		sText = this._textResources.getText("FORM_PERS_DIALOG_NEW_GROUP");

		// create new entry
		oNewGroup = {
			id: this._sViewId + jQuery.sap.uid(),
			label: sText,
			isVisible: true,
			type: "group",
			children: []
		};

		oData.children.splice(0, 0, oNewGroup); // Insert new group as first group
		this._changeSelection(oNewGroup);
	};

	DialogContent.prototype.exit = function() {
		if (this._oScrollView) {
			this._oScrollView.destroy();
			this._oScrollView = null;
		}
		if (this._oBtnMoveBottom) {
			this._oBtnMoveBottom.destroy();
			this._oBtnMoveBottom = null;
		}
		if (this._oBtnMoveDown) {
			this._oBtnMoveDown.destroy();
			this._oBtnMoveDown = null;
		}
		if (this._oBtnMoveUp) {
			this._oBtnMoveUp.destroy();
			this._oBtnMoveUp = null;
		}
		if (this._oBtnMoveTop) {
			this._oBtnMoveTop.destroy();
			this._oBtnMoveTop = null;
		}
		if (this._oBtnAddGroup) {
			this._oBtnAddGroup.destroy();
			this._oBtnAddGroup = null;
		}
		if (this._oBtnAddField) {
			this._oBtnAddField.destroy();
			this._oBtnAddField = null;
		}

		if (this._oFieldSelector) {
			this._oFieldSelector.destroy();
			this._oFieldSelector = null;
		}
		if (this.oLayoutRight) {
			this.oLayoutRight.destroy();
			this.oLayoutRight = null;
		}
		if (this.oLayoutMiddle) {
			this.oLayoutMiddle.destroy();
			this.oLayoutMiddle = null;
		}
		if (this.oLayoutTopLeft) {
			this.oLayoutTopLeft.destroy();
			this.oLayoutTopLeft = null;
		}
		if (this.oLayoutLeft) {
			this.oLayoutLeft.destroy();
			this.oLayoutLeft = null;
		}
		if (this.oLayout) {
			this.oLayout.destroy();
			this.oLayout = null;
		}

	};


	return DialogContent;

}, /* bExport= */ true);

}; // end of sap/ui/comp/smartform/flexibility/DialogContent.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.flexibility.FieldListNode') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartform.flexibility.FieldListNode.
jQuery.sap.declare('sap.ui.comp.smartform.flexibility.FieldListNode'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.CheckBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/flexibility/FieldListNode",['jquery.sap.global', 'sap/m/CheckBox', 'sap/m/FlexBox', 'sap/ui/comp/library', './Input', 'sap/ui/core/Control', 'sap/m/Button'],
	function(jQuery, CheckBox, FlexBox, library, Input, Control, Button) {
	"use strict";



	/**
	 * Constructor for a new smartform/flexibility/FieldListNode.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * A node within the field list control
	 * @extends sap.ui.core.Control
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartform.flexibility.FieldListNode
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var FieldListNode = Control.extend("sap.ui.comp.smartform.flexibility.FieldListNode", /** @lends sap.ui.comp.smartform.flexibility.FieldListNode.prototype */ { metadata : {

		library : "sap.ui.comp",
		properties : {

			/**
			 * The label
			 */
			label : {type : "string", group : "Misc", defaultValue : null},

			/**
			 * is visible flag
			 */
			isVisible : {type : "boolean", group : "Misc", defaultValue : null},

			/**
			 * is node selected
			 */
			isSelected : {type : "boolean", group : "Misc", defaultValue : null}
		},
		aggregations : {

			/**
			 * Nodes representing either a Form, a Group or a field
			 */
			nodes : {type : "sap.ui.comp.smartform.flexibility.FieldListNode", multiple : true, singularName : "node"},

			/**
			 * private aggregation
			 */
			layout : {type : "sap.ui.core.Control", multiple : false}
		},
		events : {

			/**
			 * node was selected
			 */
			selected : {
				parameters : {

					/**
					 * The inner node which was clicked
					 */
					target : {type : "sap.ui.comp.smartform.flexibility.FieldListNode"}
				}
			},
			/**
			 * label of node was changed
			 */
			labelChanged : {
				parameters : {

					/**
					 * The inner node which was clicked
					 */
					target : {type : "sap.ui.comp.smartform.flexibility.FieldListNode"}
				}
			},
			/**
			 * node was hidden
			 */
			nodeHidden : {
				parameters : {

					/**
					 * The inner node which was hidden
					 */
					target : {type : "sap.ui.comp.smartform.flexibility.FieldListNode"}
				}
			}
		}
	}});


	/**
	 * Init
	 *
	 * @private
	 */
	FieldListNode.prototype.init = function() {
		this._textResources = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp");

		this._oLayout = new FlexBox({
			direction : sap.m.FlexDirection.Row,
			justifyContent: sap.m.FlexJustifyContent.SpaceBetween
		});

		// inputField
		this._oLabelInputField = new Input(this.getId() + '-Input');
		this._oLabelInputField.addStyleClass("sapUiCompFieldListNodeLabelInputField");
		this._oLabelInputField.setValue(this.getLabel());
		this._oLabelInputField.setEditable(false);
		this._oLabelInputField.attachChange(this._onLabelChanged.bind(this));
		this._oLabelInputField.attachSelectedByKeyboard(this._onLabelSelectedByKeyboard.bind(this));
		this._oLabelInputField.setLayoutData(new sap.m.FlexItemData({
		}));
		this._oLayout.addItem(this._oLabelInputField);

		// delete button
		this._oDeleteButton = new Button(this.getId() + '_Button');
		this._oDeleteButton.setType("Transparent");
		this._oDeleteButton.setIcon("sap-icon://decline");
		this._oDeleteButton.setIconDensityAware(false);
		this._oDeleteButton.setTooltip(this._textResources.getText("FORM_PERS_VIS_CHECKBOX_TOOLTIP"));
		this._oDeleteButton.attachPress(this._hideNode.bind(this));
		this._oDeleteButton.setLayoutData(new sap.m.FlexItemData({
		}));
		this._oLayout.addItem(this._oDeleteButton);

		this.setLayout(this._oLayout);
	};

	/**
	 * Overwritten - Sets the label property
	 *
	 * @param {string} sLabel Label
	 * @public
	 */
	FieldListNode.prototype.setLabel = function(sLabel) {
		this._oLabelInputField.setValue(sLabel);
		this.setProperty("label", sLabel);
	};

	/**
	 * Overwritten - Sets the isVisible property
	 *
	 * @param {boolean} bIsVisible isVisible
	 * @public
	 */
	FieldListNode.prototype.setIsVisible = function(bIsVisible) {
		if (this.getModel()) {
			this.getModel().setData(this.getModel().getData());
		}
		this.setProperty("isVisible", bIsVisible);
		this.setVisible(bIsVisible);
	};

	/**
	 * Overwritten - Sets the isSelected property
	 *
	 * @param {boolean} bIsSelected field list node selected
	 * @public
	 */
	FieldListNode.prototype.setIsSelected = function(bIsSelected) {
		if (!bIsSelected) {
			this._oLabelInputField.setEditable(false);
		}
		this.setProperty("isSelected", bIsSelected);
	};

	/**
	 * Event handler - called when the user press the hide button
	 *
	 * @param {object} oEvent Event
	 * @private
	 */
	FieldListNode.prototype._hideNode = function(oEvent) {
		this.setIsVisible(false);
		this._fireNodeHiddenAndDelegateToParent(this);
	};


	/**
	 * Event handler - called when the user changes the label
	 *
	 * @param {object} oEvent Event
	 * @public
	 */
	FieldListNode.prototype._onLabelChanged = function(oEvent) {
		var sLabel;
		sLabel = this._oLabelInputField.getValue();
		if (sLabel !== this.getLabel()) {
			this.setProperty("label", sLabel);
		}
		this._oLabelInputField.setEditable(false);
		this._fireLabelChangedAndDelegateToParent(this);
	};

	/**
	 * Event handler - called when the user has selected the label using the keyboard
	 *
	 * @param {object} oEvent Event
	 * @public
	 */
	FieldListNode.prototype._onLabelSelectedByKeyboard = function(oEvent) {
		this._oLabelInputField.setEditable(true);
		this._fireSelectedAndDelegateToParent(this);
	};

	/**
	 * Overwritten - Registers to DOM events after rendering
	 *
	 * @private
	 */
	FieldListNode.prototype.onAfterRendering = function() {
		this.registerToDOMEvents();
	};

	/**
	 * Overwritten - Registers to DOM events before rendering
	 *
	 * @private
	 */
	FieldListNode.prototype.onBeforeRendering = function() {
		this.deregisterToDOMEvents();
	};

	/**
	 * @private Registers to DOM events like mouse events
	 */
	FieldListNode.prototype.registerToDOMEvents = function() {
		jQuery("#" + this.getId()).on('click', jQuery.proxy(this._handleClick, this));
	};

	/**
	 * @private Deregisters from DOM events
	 */
	FieldListNode.prototype.deregisterToDOMEvents = function() {
		jQuery("#" + this.getId()).off('click');
	};

	/**
	 * @private Event handler, called when the user clicks somewhere into the form. Raises the Selected event.
	 * @param {object} oEvent event
	 */
	FieldListNode.prototype._handleClick = function(oEvent) {
		var target, oSourceNode;
		target = oEvent.target || oEvent.srcElement;

		if (target) {
			oSourceNode = sap.ui.getCore().byId(target.id); // Get SAPUI5 control by DOM reference
			if (!(oSourceNode instanceof FieldListNode)) {
				if (target.parentElement) {
					oSourceNode = sap.ui.getCore().byId(target.parentElement.id); // Get SAPUI5 control by DOM reference
				}
			}
		}

		// If node is already selected and label is clicked, make label editable
		if ((oSourceNode === this._oLabelInputField) && this.getIsSelected()) {
			this._oLabelInputField.setEditable(true);
		}

		// Fire event only if a field list node was clicked
		if (oSourceNode === this || oSourceNode === this._oLabelInputField) {
			this._fireSelectedAndDelegateToParent(this);
		}
	};

	/**
	 * @private Fires the is selected event for itself and for the parent field list node
	 * @param {sap.ui.comp.smartform.flexibility.FieldListNode} oFieldListNode field list node instance
	 */
	FieldListNode.prototype._fireSelectedAndDelegateToParent = createFireEventAndDelegateToParent('fireSelected', '_fireSelectedAndDelegateToParent');

	/**
	 * @private Fires the is labelChanged event for itself and for the parent field list node
	 * @param {sap.ui.comp.smartform.flexibility.FieldListNode} oFieldListNode field list node instance
	 */
	FieldListNode.prototype._fireLabelChangedAndDelegateToParent = createFireEventAndDelegateToParent('fireLabelChanged', '_fireLabelChangedAndDelegateToParent');

	/**
	 * @private Fires the is NodeHidden event for itself and for the parent field list node
	 * @param {sap.ui.comp.smartform.flexibility.FieldListNode} oFieldListNode field list node instance
	 */
	FieldListNode.prototype._fireNodeHiddenAndDelegateToParent = createFireEventAndDelegateToParent('fireNodeHidden', '_fireNodeHiddenAndDelegateToParent');

	function createFireEventAndDelegateToParent(sFunctionNameToFireEvent, sFunctionNameOnParent){
		return function(oFieldListNode){
			var oParent;

			if (!(oFieldListNode instanceof FieldListNode)) {
				return;
			}

			this[sFunctionNameToFireEvent]({
				target: oFieldListNode
			});

			// Call parent to fire event, too
			oParent = this.getParent();
			if (oParent && oParent instanceof FieldListNode) {
				oParent[sFunctionNameOnParent](oFieldListNode);
			}
		};
	}

	return FieldListNode;

}, /* bExport= */ true);

}; // end of sap/ui/comp/smartform/flexibility/FieldListNode.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartvariants.SmartVariantManagement') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartvariants.SmartVariantManagement.
jQuery.sap.declare('sap.ui.comp.smartvariants.SmartVariantManagement'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Change'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Persistence'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.registry.Settings'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartvariants/SmartVariantManagement",[
	'jquery.sap.global', 'sap/ui/comp/library', './PersonalizableInfo', 'sap/ui/comp/variants/VariantItem', 'sap/ui/comp/variants/VariantManagement', 'sap/ui/fl/Change', 'sap/ui/fl/Persistence', 'sap/ui/fl/registry/Settings', 'sap/ui/fl/Utils'
], function(jQuery, library, PersonalizableInfo, VariantItem, VariantManagement, Change, Persistence, Settings, FlexUtils) {
	"use strict";

	/**
	 * Constructor for a new SmartVariantManagement.
	 * 
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class The SmartVariantManagement control is a specialization of the {@link sap.ui.comp.variants.VariantManagement VariantManagement} control
	 *        and communicates with the layer that offers SAPUI5 flexibility services to manage the variants.<br>
	 *        For more information about SAPUI5 flexibility, refer to the Developer Guide.
	 * @extends sap.ui.comp.variants.VariantManagement
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartvariants.SmartVariantManagement
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var SmartVariantManagement = VariantManagement.extend("sap.ui.comp.smartvariants.SmartVariantManagement", /** @lends sap.ui.comp.smartvariants.SmartVariantManagement.prototype */
	{
		metadata: {

			library: "sap.ui.comp",
			aggregations: {

				/**
				 * All controls that rely on variant handling have to be added to this aggregation.
				 */
				personalizableControls: {
					type: "sap.ui.comp.smartvariants.PersonalizableInfo",
					multiple: true,
					singularName: "personalizableControl"
				}
			},
			events: {

				/**
				 * This event is fired when the SmartVariantManagement control is initialized.
				 */
				initialise: {},

				/**
				 * This event is fired after a variant has been saved. This event can be used to retrieve the ID of the saved variant.
				 */
				afterSave: {}
			}
		},

		renderer: function(oRm, oControl) {
			VariantManagement.getMetadata().getRenderer().render(oRm, oControl);
		}
	});

	/**
	 * Sets the current variant ID.
	 * 
	 * @name sap.ui.comp.smartvariants.SmartVariantManagement#setCurrentVariantId
	 * @function
	 * @param {string} sVariantKey The variant key
	 * @param {boolean} bDoNotApplyVariant If set to <code>true</code>, the <code>applyVariant</code> method is not executed yet. Relevant during
	 *        navigation, when called before the initialise event has been executed.
	 * @type void
	 * @public
	 * @since 1.28.1
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */

	/**
	 * Retrieves the current variant ID. If a standard variant is currently set, an empty string is returned.
	 * 
	 * @name sap.ui.comp.smartvariants.SmartVariantManagement#getCurrentVariantId
	 * @function
	 * @type string
	 * @public
	 * @since 1.28.1
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */

	/**
	 * control initialization
	 * 
	 * @public
	 * @since 1.26.1
	 */
	SmartVariantManagement.prototype.init = function() {
		VariantManagement.prototype.init.apply(this); // Call base class

		this._mStandardVariants = {};
		this._mControlPersistence = {};
		this._mControlComponent = {};
		this._mControlPromise = {};
		this._mCurrentVariantId = {};

		this._aPersonalizableControls = null;

		this._bIsInitialized = false;

		if (this.setLifecycleSupport) {
			this.setLifecycleSupport(true);
		}
		this._setBackwardCompatibility(false);
	};

	/**
	 * Registers all controls interested and relying on variant handling.
	 * 
	 * @public
	 * @param {sap.ui.comp.smartvariants.PersonalizableInfo} oCurrentControlInfo Provides information about the personalizable control.
	 */
	SmartVariantManagement.prototype.addPersonalizableControl = function(oCurrentControlInfo) {
		var oControl = null;
		var sControlId = oCurrentControlInfo.getControl();

		this.addAggregation("personalizableControls", oCurrentControlInfo, true);

		if (sControlId) {
			oControl = sap.ui.getCore().byId(sControlId);
			this._mControlPersistence[oControl] = new Persistence(oControl, oCurrentControlInfo.getKeyName());

			this._mControlComponent[oControl] = sap.ui.fl.Utils.getComponentClassName(oControl);
		}

		this._handleGetChanges(oControl);
	};

	SmartVariantManagement.prototype._handleGetChanges = function(oControl) {
		var that = this;

		if (oControl && this._mControlPersistence && this._mControlPersistence[oControl]) {

			this._mControlPromise[oControl] = {};
			this._mControlPromise[oControl].promise = new Promise(function(resolve, reject) {
				that._mControlPersistence[oControl].getChanges().then(function(mVariants) {

					var sComponentName = that._mControlPersistence[oControl].getComponentName();
					var mPropertyBag = {
						appDescriptor: FlexUtils.getAppDescriptor(oControl),
						siteId: FlexUtils.getSiteId(oControl)
					};
					sap.ui.fl.registry.Settings.getInstance(sComponentName, mPropertyBag).then(function(oSettings) {

						var oResolvedObj = {
							variants: mVariants,
							settings: oSettings
						};
						resolve(oResolvedObj);
					});
				}, function(args) {
					reject(args);
				});

			});
		}
	};

	SmartVariantManagement.prototype._createControlWrapper = function(oCurrentControlInfo) {
		var oControlInfo = null;
		var oControl = sap.ui.getCore().byId(oCurrentControlInfo.getControl());
		if (oControl) {
			oControlInfo = {
				control: oControl,
				type: oCurrentControlInfo.getType(),
				dataSource: oCurrentControlInfo.getDataSource(),
				persistence: this._mControlPersistence[oControl],
				keyName: oCurrentControlInfo.getKeyName()
			};

			if (this._mControlPromise[oControl] && this._mControlPromise[oControl].promise) {
				oControlInfo.promise = this._mControlPromise[oControl].promise;
			}
		}

		return oControlInfo;
	};

	/**
	 * Retrieves the variant content.
	 * 
	 * @public
	 * @param {sap.ui.core.Control} oControl Current personalizable control
	 * @param {string} sKey The variant key
	 * @returns {object} JSON Representing the content of the variant
	 */
	SmartVariantManagement.prototype.getVariantContent = function(oControl, sKey) {
		var oContent = null;

		if (sKey === this.STANDARDVARIANTKEY) {
			oContent = this.getStandardVariant(oControl);
		} else {
			oContent = this._getVariantContent(oControl, sKey);
		}

		return oContent;
	};

	/**
	 * Retrieves the variant with the requested ID.
	 * 
	 * @private
	 * @param {sap.ui.core.Control} oCurrentControl current control
	 * @param {string} id the variant key
	 * @returns {sap.ui.fl.Change} object representing the variant
	 */
	SmartVariantManagement.prototype._getVariant = function(oCurrentControl, id) {

		var oChange = null;

		if (oCurrentControl) {

			var oPersistence = this._mControlPersistence[oCurrentControl];
			if (oPersistence) {
				oChange = oPersistence.getChange(id);
			}
		}

		return oChange;
	};

	SmartVariantManagement.prototype._getVariantContent = function(oCurrentControl, sKey) {

		var oContent = null;

		var oVariant = this._getVariant(oCurrentControl, sKey);
		if (oVariant) {
			oContent = oVariant.getContent();
		}

		return oContent;
	};

	/**
	 * Returns all registered providers.
	 * 
	 * @private
	 * @returns {array} a list of all registered controls
	 */
	SmartVariantManagement.prototype._getAllPersonalizableControls = function() {
		var i;
		var oControlWrapper = null;

		if (!this._aPersonalizableControls) {

			this._aPersonalizableControls = [];

			var aPersInfos = this.getPersonalizableControls();
			if (aPersInfos) {
				for (i = 0; i < aPersInfos.length; i++) {

					oControlWrapper = this._createControlWrapper(aPersInfos[i]);
					if (oControlWrapper) {
						this._aPersonalizableControls.push(oControlWrapper);
					}
				}
			}
		}

		return this._aPersonalizableControls;
	};

	/**
	 * Creates entries into the variant management control, based on the list of variants.
	 * 
	 * @private
	 * @param {map} mVariants list of variants, as determined by the flex layer
	 * @param {object} oCurrentControlInfo describes the personalizable control
	 * @returns {array} containing all variant keys
	 */
	SmartVariantManagement.prototype._createVariantEntries = function(mVariants, oCurrentControlInfo) {

		var n = null;
		var sVariantKey, sStandardVariantKey = null;
		var oVariant, oVariantItem;
		var aVariantKeys = [];

		this.removeAllItems();

		if (mVariants) {
			for (n in mVariants) {
				if (n) {
					oVariant = mVariants[n];
					if (oVariant.isVariant()) {
						oVariantItem = new VariantItem({
							key: oVariant.getId(),
							text: oVariant.getText("variantName"),
							global: !oVariant.isUserDependent(),
							executeOnSelection: this._getExecuteOnSelection(oVariant),
							lifecycleTransportId: oVariant.getRequest(),
							lifecyclePackage: oVariant.getPackage(),
							namespace: oVariant.getNamespace(),
							readOnly: oVariant.isReadOnly(),
							labelReadOnly: oVariant.isLabelReadOnly()
						});

						if (this._hasStoredStandardVariant(oVariant)) {
							sStandardVariantKey = oVariant.getId();
						}

						this.addVariantItem(oVariantItem);

						aVariantKeys.push(oVariant.getId());
					}
				}
			}
		}

		if (oCurrentControlInfo) {
			sVariantKey = this._getDefaultVariantKey(oCurrentControlInfo);
			if (sVariantKey) {
				this.setInitialSelectionKey(sVariantKey); // set the current selected variant
			}

			var bFlag = this._isApplicationVariant(oCurrentControlInfo.control);
			if (bFlag) {
				this.setIndustrySolutionMode(bFlag);

				bFlag = FlexUtils.isVendorLayer();
				this._setVendorLayer(bFlag);
			}

			if (this.getIndustrySolutionMode()) {
				if (oCurrentControlInfo.standardvariantkey !== undefined) {
					delete oCurrentControlInfo.standardvariantkey;
				}

				if (sStandardVariantKey) {
					oCurrentControlInfo.standardvariantkey = sStandardVariantKey;
					this.setStandardVariantKey(sStandardVariantKey);
				}
			}
		}

		if (this._isVariantDownport(oCurrentControlInfo)) {
			this._enableManualVariantKey(true);
		}

		return aVariantKeys;
	};

	/**
	 * Retrieves the list of known variants via access to
	 * 
	 * @private
	 * @param {Function} fCallBack will be called once the promise is full filled
	 */
	SmartVariantManagement.prototype.getVariantsInfo = function(fCallBack) {

		if (!fCallBack) {
			jQuery.sap.log.error("'getVariantsInfo' failed . Expecting callBack not passed.");
			return;
		}

		var n = null;
		var oVariant;
		var aVariants = [];
		var aCurrentControls;
		var that = this;

		try {

			aCurrentControls = this._getAllPersonalizableControls();
			if (aCurrentControls && (aCurrentControls.length === 1) && aCurrentControls[0].persistence && aCurrentControls[0].control) {

				aCurrentControls[0].persistence.getChanges().then(function(mVariants) {
					if (mVariants) {
						for (n in mVariants) {
							if (n) {
								oVariant = mVariants[n];
								if (oVariant.isVariant()) {
									aVariants.push({
										key: oVariant.getId(),
										text: oVariant.getText("variantName")
									});
								}
							}
						}
					}

					fCallBack(aVariants);
				}, function(args) {
					var sError = "'getChanges' failed:";
					if (args && args[0] && args[0].messages && args[0].messages[0]) {
						sError += (' ' + args[0].messages[0]);
					}
					that._setErrorValueState(that.oResourceBundle.getText("VARIANT_MANAGEMENT_READ_FAILED"), sError, aCurrentControls[0].control);

					fCallBack(aVariants);
				});
			}

		} catch (ex) {
			this._setErrorValueState(this.oResourceBundle.getText("VARIANT_MANAGEMENT_READ_FAILED"), "'getChanges' throws an exception", null);
		}
	};

	/**
	 * Retrieves the current variant ID. For a standard variant, an empty string is returned.
	 * 
	 * @public
	 * @since 1.28.1
	 * @returns {string} Current variant ID
	 */
	SmartVariantManagement.prototype.getCurrentVariantId = function() {
		var sKey = "";
		var oItem = this._getSelectedItem();
		if (oItem) {
			sKey = oItem.getKey();
			if (sKey === this.STANDARDVARIANTKEY) {
				sKey = "";
			}
		}

		return sKey;
	};

	/**
	 * Sets the current variant ID.
	 * 
	 * @public
	 * @since 1.28.1
	 * @param {string} sVariantId ID of the variant
	 * @param {boolean} bDoNotApplyVariant If set to <code>true</code>, the <code>applyVariant</code> method is not executed yet. Relevant during
	 *        navigation, when called before the initialise event has been executed
	 */
	VariantManagement.prototype.setCurrentVariantId = function(sVariantId, bDoNotApplyVariant) {
		var oContent;

		var sId = this._determineVariantId(sVariantId);

		var aCurrentControls = this._getAllPersonalizableControls();
		if (aCurrentControls && (aCurrentControls.length === 1) && aCurrentControls[0].persistence && aCurrentControls[0].control) {

			if (!this._bIsInitialized) {

				this._mCurrentVariantId[aCurrentControls[0].control] = sVariantId;

			} else {
				oContent = this.getVariantContent(aCurrentControls[0].control, sId);
				if (oContent) {
					this._setSelectionByKey(sId); // set the current selected variant
					if (bDoNotApplyVariant !== true) {
						this._applyVariant(aCurrentControls[0].control, oContent);
					}
				}
			}
		}

	};

	SmartVariantManagement.prototype._determineVariantId = function(sVariantId) {
		var sId = sVariantId;
		if (!sId) {
			sId = this.getStandardVariantKey();
		} else {

			/* eslint-disable no-lonely-if */
			if (!this.getItemByKey(sId)) {
				sId = this.getStandardVariantKey();
			}
			/* eslint-enable no-lonely-if */
		}

		return sId;
	};

	/**
	 * Initializes the SAPUI5 layer with the flexibility services by retrieving the list of variants. Once the initialization has been completed, the
	 * control for personalization is informed via the initialise event.
	 * 
	 * @public
	 */
	SmartVariantManagement.prototype.initialise = function() {
		var that = this;
		var aCurrentControls;
		var oContent = null, oContent2 = null, oVariant;
		var parameter = {
			variantKeys: []
		};
		var sKey;

		try {

			aCurrentControls = this._getAllPersonalizableControls();
			if (aCurrentControls && (aCurrentControls.length === 1) && aCurrentControls[0].persistence && aCurrentControls[0].control && aCurrentControls[0].promise) {

				aCurrentControls[0].promise.then(function(oResolvedObj) {

					var mVariants = oResolvedObj.variants;
// var oSettings = oResolvedObj.settings;
// if (oSettings) {
// that.setShowShare(oSettings.isKeyUser());
// }

					parameter.variantKeys = that._createVariantEntries(mVariants, aCurrentControls[0]);

					var sDefaultKey = that._getDefaultVariantKey(aCurrentControls[0]);
					if (sDefaultKey) {
						oVariant = that._getVariant(aCurrentControls[0].control, sDefaultKey);
						if (oVariant) {
							that.setDefaultVariantKey(sDefaultKey); // set the default variant
							that.setInitialSelectionKey(sDefaultKey); // set the current selected variant
						}
					}

					var oStdVariant = null;
					if (aCurrentControls[0].standardvariantkey) {
						oStdVariant = that._getVariantContent(aCurrentControls[0].control, aCurrentControls[0].standardvariantkey);
					}

					if (aCurrentControls[0].standardvariantkey && ((aCurrentControls[0].type === "table") || (aCurrentControls[0].type === "chart"))) {
						oContent2 = oStdVariant;
						that._applyVariant(aCurrentControls[0].control, oContent2, "STANDARD", true);
// that._assignStandardVariant(aCurrentControls[0].control);
					}

					that.fireEvent("initialise", parameter);
					that._bIsInitialized = true;

					if (!aCurrentControls[0].standardvariantkey) {
						that._setStandardVariant(aCurrentControls[0]);
					}

					// navigation to FilterBar: initialize leads to VM.clearVariantSelection --> ignore an eventual defaultVariant
					var sCurrentVariant = that._mCurrentVariantId[aCurrentControls[0].control];
					if (sCurrentVariant) {
						sKey = that._determineVariantId(sCurrentVariant);
						that.setInitialSelectionKey(sKey);
						that._mCurrentVariantId[aCurrentControls[0].control] = undefined;
					}

					sKey = that.getSelectionKey();
					if (sKey && (sKey !== that.getStandardVariantKey())) {
						oContent = that._getVariantContent(aCurrentControls[0].control, sKey);
					} else {
						/* eslint-disable no-lonely-if */
						if (aCurrentControls[0].standardvariantkey && (!oContent2)) {
							oContent = oStdVariant;
						}
						/* eslint-enable no-lonely-if */
					}

					if (aCurrentControls[0].standardvariantkey) {
						that._updateStandardVariant(aCurrentControls[0].control, oStdVariant);
					}

					if (oContent) {

// if (aCurrentControls[0].standardvariantkey /* && (aCurrentControls[0].standardvariantkey === sKey) */) {
// that._updateStandardVariant(aCurrentControls[0].control, oContent);
// }

						that._applyVariant(aCurrentControls[0].control, oContent, null, true);

					} else {
						/* eslint-disable no-lonely-if */
						if ((sKey === that.STANDARDVARIANTKEY) && that.bExecuteOnSelectForStandard) {
							if (aCurrentControls[0].control.search) {
								that.setInitialSelectionKey(sKey);
								aCurrentControls[0].control.search();
							}
						}
						/* eslint-enable no-lonely-if */
					}

				}, function(args) {
					var sError = "'getChanges' failed:";
					if (args && args[0] && args[0].messages && args[0].messages[0]) {
						sError += (' ' + args[0].messages[0]);
					}
					that._setErrorValueState(that.oResourceBundle.getText("VARIANT_MANAGEMENT_READ_FAILED"), sError, aCurrentControls[0].control);

					that.fireEvent("initialise", parameter);
					that._setStandardVariant(aCurrentControls[0].control);
				});

			} else {
				this._setErrorValueState(this.oResourceBundle.getText("VARIANT_MANAGEMENT_READ_FAILED"), "'initialise' no personalizable component available", null);

				this.fireEvent("initialise", parameter);
				if (aCurrentControls && (aCurrentControls.length === 1) && aCurrentControls[0].control) {
					this._setStandardVariant(aCurrentControls[0].control);
				}
			}

		} catch (ex) {
			this._setErrorValueState(this.oResourceBundle.getText("VARIANT_MANAGEMENT_READ_FAILED"), "'getChanges' throws an exception", null);

			this.fireEvent("initialise", parameter);
			if (aCurrentControls && (aCurrentControls.length === 1) && aCurrentControls[0].control) {
				this._setStandardVariant(aCurrentControls[0].control);
			}
		}
	};

	SmartVariantManagement.prototype._updateVariant = function(oVariantInfo, oCurrentControlInfo) {

		if (this._isIndustrySolutionModeAndVendorLayer() || (oVariantInfo.key !== this.getStandardVariantKey())) {

			if (oVariantInfo && oCurrentControlInfo && oCurrentControlInfo.control && oCurrentControlInfo.control.fetchVariant) {
				var oVariant = this._getVariant(oCurrentControlInfo.control, oVariantInfo.key);
				if (oVariant) {
					try {

						if ((oVariantInfo.lifecycleTransportId !== null) && (oVariantInfo.lifecycleTransportId !== undefined)) {
							oVariant.setRequest(oVariantInfo.lifecycleTransportId);
						}

						var oContent = oCurrentControlInfo.control.fetchVariant();
						if (oContent) {

							var oItem = this.getItemByKey(oVariantInfo.key);
							if (oItem) {
								oContent.executeOnSelection = oItem.getExecuteOnSelection();
							}

							if (oContent.standardvariant !== undefined) {
								delete oContent.standardvariant;
							}

							if (this._isIndustrySolutionModeAndVendorLayer() && (oVariantInfo.key === this.getStandardVariantKey())) {
								oContent.standardvariant = true;
							}

							oVariant.setContent(oContent);
						}

					} catch (ex) {
						jQuery.sap.log.error("'_updateVariant' throws an exception");
					}
				}
			}
		}
	};

	SmartVariantManagement.prototype._newVariant = function(oVariantInfo, oCurrentControlInfo) {

		var sId;

		if (oVariantInfo && oCurrentControlInfo && oCurrentControlInfo.control && oCurrentControlInfo.control.fetchVariant && oCurrentControlInfo.persistence) {

			var sType = oCurrentControlInfo.type;
			var sDataService = oCurrentControlInfo.dataSource;

			var bUserDependent = !oVariantInfo.global;

			var sPackage = "";
			if ((oVariantInfo.lifecyclePackage !== null) && (oVariantInfo.lifecyclePackage !== undefined)) {
				sPackage = oVariantInfo.lifecyclePackage;
			}

			var sTransportId = "";
			if ((oVariantInfo.lifecycleTransportId !== null) && (oVariantInfo.lifecycleTransportId !== undefined)) {
				sTransportId = oVariantInfo.lifecycleTransportId;
			}

			var oContent = oCurrentControlInfo.control.fetchVariant();
			if (oContent) {

				var sContent = JSON.stringify(oContent);
				oContent = JSON.parse(sContent);

				if (oVariantInfo.exe) {
					oContent.executeOnSelection = oVariantInfo.exe;
				}
				if (oVariantInfo.tile) {
					oContent.tile = oVariantInfo.tile;
				}

				if (oContent.standardvariant !== undefined) {
					delete oContent.standardvariant;
				}
				if (this._isIndustrySolutionModeAndVendorLayer() && oVariantInfo.key === this.STANDARDVARIANTKEY) {
					oContent.standardvariant = true;
				}

			}

			sId = this._isVariantDownport(oCurrentControlInfo) ? oVariantInfo.key : null;

			var mParams = {
				type: sType,
				ODataService: sDataService,
				texts: {
					variantName: oVariantInfo.name
				},
				content: oContent,
				isVariant: true,
				packageName: sPackage,
				isUserDependent: bUserDependent,
				id: sId
			};

			sId = oCurrentControlInfo.persistence.addChange(mParams);
			this.replaceKey(oVariantInfo.key, sId);
			this.setInitialSelectionKey(sId);

			if (this.getIndustrySolutionMode() && oVariantInfo.key === this.STANDARDVARIANTKEY) {
				this.setStandardVariantKey(sId);
			}

			var oVariant = this._getVariant(oCurrentControlInfo.control, sId);
			if (oVariant) {
				oVariant.setRequest(sTransportId);

				var oItem = this.getItemByKey(sId);
				if (oItem) {
					oItem.setNamespace(oVariant.getNamespace());
				}
			}

			if (oVariantInfo.def === true) {
				this._setDefaultVariantKey(oCurrentControlInfo, sId);
			}
		}
	};

	SmartVariantManagement.prototype._appendLifecycleInformation = function(oVariant, sId) {

		var sTransportId;

		var oItem = this.getItemByKey(sId);

		if (oItem) {
			// sPackage = oItem.getLifecyclePackage();
			// if (sPackage === null || sPackage === undefined) {
			// sPackage = "";
			// }

			sTransportId = oItem.getLifecycleTransportId();
			if (sTransportId === null || sTransportId === undefined) {
				sTransportId = "";
			}

			if (oVariant) {
				oVariant.setRequest(sTransportId);
			}
		}

	};

	SmartVariantManagement.prototype._renameVariant = function(oVariantInfo, oCurrentControlInfo) {

		if (oVariantInfo.key !== this.getStandardVariantKey()) {
			if (oVariantInfo && oCurrentControlInfo && oCurrentControlInfo.control) {
				var oVariant = this._getVariant(oCurrentControlInfo.control, oVariantInfo.key);
				if (oVariant) {
					oVariant.setText("variantName", oVariantInfo.name);
					this._appendLifecycleInformation(oVariant, oVariantInfo.key);
				}
			}
		}
	};

	SmartVariantManagement.prototype._deleteVariants = function(aVariantInfo, oCurrentControlInfo) {
		var i;
		if (aVariantInfo && aVariantInfo.length && oCurrentControlInfo && oCurrentControlInfo.control) {

			var sVariantKey = this._getDefaultVariantKey(oCurrentControlInfo);

			for (i = 0; i < aVariantInfo.length; i++) {

				if (aVariantInfo[i] === this.getStandardVariantKey()) {
					continue;
				}

				var oVariant = this._getVariant(oCurrentControlInfo.control, aVariantInfo[i]);
				if (oVariant) {
					oVariant.markForDeletion();
					if (sVariantKey && sVariantKey === aVariantInfo[i]) {
						this._setDefaultVariantKey(oCurrentControlInfo, "");
					}

					this._appendLifecycleInformation(oVariant, aVariantInfo[i]);
				}
			}
		}
	};

	SmartVariantManagement.prototype._getDefaultVariantKey = function(oCurrentControlInfo) {

		var sDefaultVariantKey = "";
		if (oCurrentControlInfo && oCurrentControlInfo.persistence) {
			sDefaultVariantKey = oCurrentControlInfo.persistence.getDefaultVariantIdSync();
		}

		return sDefaultVariantKey;
	};

	SmartVariantManagement.prototype._setDefaultVariantKey = function(oCurrentControlInfo, sVariantKey) {

		// if (sVariantKey !== this.getStandardVariantKey()) {
		if (oCurrentControlInfo && oCurrentControlInfo.persistence) {
			oCurrentControlInfo.persistence.setDefaultVariantIdSync(sVariantKey);
		}
		// }
	};

	SmartVariantManagement.prototype._isVariantDownport = function(oCurrentControlInfo) {

		var bDownport = false;
		if (oCurrentControlInfo && oCurrentControlInfo.persistence) {
			bDownport = oCurrentControlInfo.persistence.isVariantDownport();
		}

		return bDownport;
	};

	SmartVariantManagement.prototype._getExecuteOnSelection = function(oVariant) {

		var oContent;

		if (oVariant) {
			oContent = oVariant.getContent();
			if (oContent && (oContent.executeOnSelection !== undefined)) {
				return oContent.executeOnSelection;
			}
		}

		return false;
	};

	SmartVariantManagement.prototype._hasStoredStandardVariant = function(oVariant) {

		var oContent;

		if (oVariant) {
			oContent = oVariant.getContent();
			if (oContent && oContent.standardvariant) {
				return oContent.standardvariant;
			}
		}

		return false;
	};

	SmartVariantManagement.prototype._isComponentTemplate = function(oControl) {

		var bIsTemplate = false;

		var oComponent = FlexUtils.getComponentForControl(oControl);

		// special case for SmartTemplating to reach the real appComponent
		if (oComponent && oComponent.getAppComponent) {
			oComponent = oComponent.getAppComponent();

			if (oComponent) {
				bIsTemplate = true;
			}

		}

		return bIsTemplate;

	};

	SmartVariantManagement.prototype._isApplicationVariant = function(oControl) {
		if (FlexUtils.isApplicationVariant(oControl)) {
			return true;
		}

		if (this._isComponentTemplate(oControl)) {
			return true;
		}

		return false;
	};

	SmartVariantManagement.prototype._setExecuteOnSelections = function(aVariantInfo, oCurrentControlInfo) {

		var i;
		if (aVariantInfo && aVariantInfo.length && oCurrentControlInfo && oCurrentControlInfo.control) {

			for (i = 0; i < aVariantInfo.length; i++) {

// if (aVariantInfo[i].key === this.getStandardVariantKey()) {
// continue;
// }

				var oVariant = this._getVariant(oCurrentControlInfo.control, aVariantInfo[i].key);
				if (oVariant) {
					var oJson = oVariant.getContent();
					if (oJson) {
						oJson.executeOnSelection = aVariantInfo[i].exe;
						oVariant.setContent(oJson);
					}

					this._appendLifecycleInformation(oVariant, aVariantInfo[i].key);
				}
			}
		}
	};

	/**
	 * Save all variants.
	 * 
	 * @private
	 * @param {sap.ui.comp.smartvariants.PersonalizableInfo} oCurrentControlInfo information about the control to be personalized
	 */
	SmartVariantManagement.prototype._save = function(oCurrentControlInfo) {

		var that = this;

		if (oCurrentControlInfo && oCurrentControlInfo.persistence) {
			try {
				oCurrentControlInfo.persistence.saveAll().then(function() {
					that.fireEvent("afterSave");
				}, function(args) {
					var sError = "'_save' failed:";
					if (args && args[0] && args[0].messages && args[0].messages[0]) {
						sError += (' ' + args[0].messages[0]);
					}
					that._setErrorValueState(that.oResourceBundle.getText("VARIANT_MANAGEMENT_SAVE_FAILED"), sError, oCurrentControlInfo.control);
				});
			} catch (ex) {
				this._setErrorValueState(this.oResourceBundle.getText("VARIANT_MANAGEMENT_SAVE_FAILED"), "'_save' throws an exception", oCurrentControlInfo.control);
			}
		}
	};

	/**
	 * Eventhandler for the save event of the VariantManagement control.
	 * 
	 * @public
	 * @param {object} oVariantInfo Describes the variant to be saved
	 */
	SmartVariantManagement.prototype.fireSave = function(oVariantInfo) {

		var bSave = false;

		var aCurrentControls = this._getAllPersonalizableControls();
		if (aCurrentControls && (aCurrentControls.length === 1)) {

			if (oVariantInfo) {
				if (oVariantInfo.overwrite) {
					if (this._isIndustrySolutionModeAndVendorLayer() || (oVariantInfo.key !== this.getStandardVariantKey())) { // Prohibit save on
						// standard variant

						this.fireEvent("save");

						if (oVariantInfo.key === this.STANDARDVARIANTKEY) {
							this._newVariant(oVariantInfo, aCurrentControls[0]);
						} else {
							this._updateVariant(oVariantInfo, aCurrentControls[0]);
						}

						bSave = true;
					}
				} else {

					this.fireEvent("save");
					this._newVariant(oVariantInfo, aCurrentControls[0]);
					bSave = true;
				}

				if (bSave) {
					this._save(aCurrentControls[0]);
				}
			}
		}
	};

	/**
	 * Eventhandler for the manage event of the VariantManagement control.
	 * 
	 * @public
	 * @param {object} oVariantInfo Describes the variants that will be deleted/renamed
	 */
	SmartVariantManagement.prototype.fireManage = function(oVariantInfo) {

		var i;
		var aCurrentControlsInfo = this._getAllPersonalizableControls();
		if (aCurrentControlsInfo && (aCurrentControlsInfo.length === 1)) {

			if (oVariantInfo) {

				if (oVariantInfo.renamed) {

					for (i = 0; i < oVariantInfo.renamed.length; i++) {
						this._renameVariant(oVariantInfo.renamed[i], aCurrentControlsInfo[0]);
					}
				}

				if (oVariantInfo.deleted) {
					this._deleteVariants(oVariantInfo.deleted, aCurrentControlsInfo[0]);
				}

				if (oVariantInfo.exe) {
					this._setExecuteOnSelections(oVariantInfo.exe, aCurrentControlsInfo[0]);
				}

				if (oVariantInfo.def) {

					var sDefaultVariantKey = this._getDefaultVariantKey(aCurrentControlsInfo[0]);
					if (sDefaultVariantKey !== oVariantInfo.def) {
						this._setDefaultVariantKey(aCurrentControlsInfo[0], oVariantInfo.def);
					}
				}

				if ((oVariantInfo.deleted && oVariantInfo.deleted.length > 0) || (oVariantInfo.renamed && oVariantInfo.renamed.length > 0) || (oVariantInfo.exe && oVariantInfo.exe.length > 0) || oVariantInfo.def) {
					this._save(aCurrentControlsInfo[0]);
				}
			}
		}
	};

	/**
	 * Eventhandler for the select event of the VariantManagement control.
	 * 
	 * @public
	 * @param {object} oVariantInfo Describes the selected variant
	 */
	SmartVariantManagement.prototype.fireSelect = function(oVariantInfo) {

		var oContent = null;

		var aCurrentControls = this._getAllPersonalizableControls();
		if (aCurrentControls && (aCurrentControls.length === 1)) {
			if (oVariantInfo && oVariantInfo.key) {

				oContent = this.getVariantContent(aCurrentControls[0].control, oVariantInfo.key);

				if (oContent) {
					var sContent = JSON.stringify(oContent);
					oContent = JSON.parse(sContent);

					if ((oVariantInfo.key === this.STANDARDVARIANTKEY) && this.bExecuteOnSelectForStandard) {
						oContent.executeOnSelection = this.bExecuteOnSelectForStandard;
					}

					this._applyVariant(aCurrentControls[0].control, oContent);
				}
			}
		}
	};

	/**
	 * Retrieves the standard variant from the ui - control.
	 * 
	 * @private
	 * @param {sap.ui.comp.smartvariants.PersonalizableInfo} oCurrentControlInfo information about the control to be personalized
	 */
	SmartVariantManagement.prototype._setStandardVariant = function(oCurrentControlInfo) {

		var oCurrentControl = oCurrentControlInfo.control;

		if (oCurrentControl) {

			if (oCurrentControl.fireBeforeVariantSave) {
				oCurrentControl.fireBeforeVariantSave(VariantManagement.STANDARD_NAME); // to obtain the CUSTOM_DATA
			}

			this._assignStandardVariant(oCurrentControl);
		}
	};

	SmartVariantManagement.prototype._updateStandardVariant = function(oCurrentControl, oContent) {

// if (oCurrentControl && oCurrentControl.mergeVariant) {
// var oNewBase = oCurrentControl.mergeVariant(this.getStandardVariant(oCurrentControl), oContent);
// this._assignStandardVariantForCotrol(oCurrentControl, oNewBase);
// }

		this._assignStandardVariantForCotrol(oCurrentControl, oContent);
	};

	SmartVariantManagement.prototype._assignStandardVariant = function(oCurrentControl) {

		var oStandardVariant = null;

		if (oCurrentControl) {

			if (oCurrentControl.fetchVariant) {
				oStandardVariant = oCurrentControl.fetchVariant();
			}

			this._assignStandardVariantForCotrol(oCurrentControl, oStandardVariant);
		}
	};

	SmartVariantManagement.prototype._assignStandardVariantForCotrol = function(oCurrentControl, oStandardVariant) {

		if (oCurrentControl) {
			this._mStandardVariants[oCurrentControl] = oStandardVariant;
		}
	};

	/**
	 * Returns the standard variant.
	 * 
	 * @public
	 * @returns {Object} The standard variant.
	 */
	SmartVariantManagement.prototype.getStandardVariant = function(oCurrentControl) {
		var oContent = null;

		if (this._mStandardVariants && oCurrentControl && this._mStandardVariants[oCurrentControl]) {

			oContent = this._mStandardVariants[oCurrentControl];
		}

		return oContent;
	};

	/**
	 * Appliance of the the standard variant.
	 * 
	 * @private
	 * @param {sap.ui.core.Control} oCurrentControl Personalizable Control
	 * @param {object} oContent JSON object
	 * @param {string} sContext Describes in what context the apply was executed. The context will be forwarded, via the event
	 *        <code>afterVariantLoad</code> to the application.
	 * @param {boolean} bInitial indicates if this apply is called during the initialization phase.
	 */
	SmartVariantManagement.prototype._applyVariant = function(oCurrentControl, oContent, sContext, bInitialize) {

		if (oCurrentControl && oCurrentControl.applyVariant) {

			oCurrentControl.applyVariant(oContent, sContext, bInitialize);
		}
	};

	/**
	 * Sets an error state on the variant management control.
	 * 
	 * @private
	 * @param {string} sText describing the error reason
	 * @param {string} sLogText describing the error reason for logging
	 * @param {object} oControl to obtain the correspondinf component name; may be null
	 */
	SmartVariantManagement.prototype._setErrorValueState = function(sText, sLogText, oControl) {
		this.setEnabled(false);

		if (sLogText) {
			jQuery.sap.log.error(sLogText);
		}
	};

	/**
	 * Destroys the control.
	 * 
	 * @public
	 */
	SmartVariantManagement.prototype.exit = function() {
		VariantManagement.prototype.exit.apply(this, arguments);

		this._mStandardVariants = null;
		this._mControlPersistence = null;

		this._aPersonalizableControls = null;

		var n;

		for (n in this._mControlPromise) {
			if (n && this._mControlPromise[n].promise) {
				this._mControlPromise[n].promise = null;
				delete this._mControlPromise[n].promise;
			}
		}

		this._mControlPromise = null;
		this._mControlComponent = null;
		this._mCurrentVariantId = null;
	};

	return SmartVariantManagement;

}, /* bExport= */true);

}; // end of sap/ui/comp/smartvariants/SmartVariantManagement.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartvariants.SmartVariantManagementUi2') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartvariants.SmartVariantManagementUi2.
jQuery.sap.declare('sap.ui.comp.smartvariants.SmartVariantManagementUi2'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartvariants/SmartVariantManagementUi2",['jquery.sap.global', 'sap/ui/comp/library', './PersonalizableInfo', 'sap/ui/comp/variants/VariantItem', 'sap/ui/comp/variants/VariantManagement'],
	function(jQuery, library, PersonalizableInfo, VariantItem, VariantManagement) {
	"use strict";


	
	/**
	 * Constructor for a new SmartVariantManagementUi2.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given 
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * The SmartVariantManagementUi2 control is a specialization of the {@link "sap.ui.comp.variants.VariantManagement VariantManagement} control and communicates with the Ui2 personalization layer to manage the variants.
	 * @extends sap.ui.comp.variants.VariantManagement
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartvariants.SmartVariantManagementUi2
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var SmartVariantManagementUi2 = VariantManagement.extend("sap.ui.comp.smartvariants.SmartVariantManagementUi2", /** @lends sap.ui.comp.smartvariants.SmartVariantManagementUi2.prototype */ { metadata : {
	
		library : "sap.ui.comp",
		aggregations : {
	
			/**
			 * All controls that rely on variant handling have to be added to this aggregation. The only consumer currently known is the FilterBar control.
			 */
			personalizableControl : {type : "sap.ui.comp.smartvariants.PersonalizableInfo", multiple : false}
		},
		events : {
	
			/**
			 * Once the SmartVariantManagement control has been initialized, and especially after retrieving the variants via the UI2 personalization service, the registered consumer will be notified that this phase has completed
			 */
			initialise : {}, 
	
			/**
			 * Fired after a variant is saved. This event can be used to retrieve the id of the saved variant.
			 */
			afterSave : {}
		}
	},
	renderer: function(oRm, oControl) {
		VariantManagement.getMetadata().getRenderer().render(oRm, oControl);
	}
	
	});
	
	
	/**
	 * Sets the current variant ID. In case an invalid ID is passed, a standard variant is set.
	 *
	 * @name sap.ui.comp.smartvariants.SmartVariantManagementUi2#setCurrentVariantId
	 * @function
	 * @param {string} sSVariantId
	 *         Retrieves the current variant; if a standard variant is the current one, an empty string is returned.
	 * @param {boolean} bBDoNotApplyVariant
	 *         if set to true the applyVariant method will not be executed yet. Relevant during navigation, where the pers-controller sets the variant id, but the initialise - sequence triggers the applyVariant method
	 * @type void
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	
	
	/**
	 * Retrieves the current variant ID. If a standard variant is the current one, an empty string is returned.
	 *
	 * @name sap.ui.comp.smartvariants.SmartVariantManagementUi2#getCurrentVariantId
	 * @function
	 * @type string
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	
	
	/**
	 * Control initialization.
	 * 
	 * @public
	 * @since 1.28.0
	 */
	SmartVariantManagementUi2.prototype.init = function() {
		VariantManagement.prototype.init.apply(this); // Call base class
	
		this._oStandardVariant = null;
		this._oPersController = null;
		this._sKeyName = null;
	
		this._oContainer = null;
		this._oVariantSet = null;
	
		if (this.setLifecycleSupport) {
			this.setLifecycleSupport(false);
		}
		this._setBackwardCompatibility(false);
	};
	
	/**
	 * Retrieves the variant content.
	 * 
	 * @public
	 * @param {sap.ui.core.Control} oControl current control
	 * @param {string} sKey the variant key
	 * @returns {object} json object representing the content of the variant
	 */
	SmartVariantManagementUi2.prototype.getVariantContent = function(oControl, sKey) {
		var oContent = null;
	
		if (sKey === this.STANDARDVARIANTKEY) {
			oContent = this._getStandardVariant();
	
		} else {
	
			/* eslint-disable no-lonely-if */
			if (this._oVariantSet) {
				var oVariant = this._oVariantSet.getVariant(sKey);
				if (oVariant) {
					oContent = this._getContent(oVariant);
				}
			}
			/* eslint-enable no-lonely-if */
		}
	
		return oContent;
	};
	
	/**
	 *  Retrieves the current variant ID. For a standard variant, an empty string is returned.
	 * 
	 * @public
	 * @returns {string} Current variant ID
	 */
	SmartVariantManagementUi2.prototype.getCurrentVariantId = function() {
		var sKey = "";
		var oItem = this._getSelectedItem();
		if (oItem) {
			sKey = oItem.getKey();
			if (sKey === this.STANDARDVARIANTKEY) {
				sKey = "";
			}
		}
	
		return sKey;
	};
	
	/**
	 * Sets the current variant ID.
	 * 
	 * @public
	 * @param {string} sVariantId ID of the variant
	 * @param {boolean} bDoNotApplyVariant If set to <code>true</code>, the <code>applyVariant</code> method is not executed yet. Relevant during navigation, when called before the initialise event has been executed
	 */
	SmartVariantManagementUi2.prototype.setCurrentVariantId = function(sVariantId, bDoNotApplyVariant) {
		var oContent;
	
		var sId = sVariantId;
		if (!sId) {
			sId = this.STANDARDVARIANTKEY;
		} else {
			/* eslint-disable no-lonely-if */
			if (!this.getItemByKey(sId)) {
				sId = this.STANDARDVARIANTKEY;
			}
			/* eslint-enable no-lonely-if */
		}
	
		if (this._oVariantSet) {
	
			oContent = this.getVariantContent(this._oPersController, sId);
			if (oContent) {
				this._setSelectionByKey(sId); // set the current selected variant
				if (bDoNotApplyVariant !== true) {
					this._applyVariantContent(oContent);
				}
			}
		}
	};
	
	/**
	 * Registers all controls interested and relying on variant handling.
	 * 
	 * @public
	 * @param {sap.ui.comp/smartvariants/PersonalizableInfo} oCurrentControlInfo control providing the required aggregation for flex-layer
	 */
	SmartVariantManagementUi2.prototype.addPersonalizableControl = function(oCurrentControlInfo) {
		this.setAggregation("personalizableControl", oCurrentControlInfo, true);
	
		if (oCurrentControlInfo.getControl()) {
			this._oPersController = sap.ui.getCore().byId(oCurrentControlInfo.getControl());
		}
	
		this._sKeyName = oCurrentControlInfo.getKeyName();
	};
	
	/**
	 * Initializes the UI2 personalization layer by retrieving the list of variants. Once the initialization has been completed, the control for personalization is informed via the initialise event.
	 * 
	 * @public
	 */
	SmartVariantManagementUi2.prototype.initialise = function() {
	
		var sContainerKey = this._getPersistencyKey();
	
		if (!sContainerKey) {
			jQuery.sap.log.warning("PersistencyKey not set");
			this.fireEvent("initialise");
	
			return;
		}
	
		if (sap.ushell && sap.ushell.Container) {
	
			var that = this;
			sap.ushell.Container.getService("Personalization").getContainer(sContainerKey, {
				validity: Infinity
			}).fail(function() {
				jQuery.sap.log.error("Loading personalization container failed");
				that._setErrorValueState(that.oResourceBundle.getText("VARIANT_MANAGEMENT_READ_FAILED"));
	
				that.fireEvent("initialise");
			}).done(function(oContainer) {
				that._readPersonalization(oContainer);
				that.fireEvent("initialise");
	
				that._setStandardVariant();
	
				that._setSelectedVariant();
			});
	
			return;
		}
	
		jQuery.sap.log.error("Could not obtain the personalization container");
		this._setErrorValueState(this.oResourceBundle.getText("VARIANT_MANAGEMENT_READ_FAILED"));
	
		this.fireEvent("initialise");
	};
	
	/**
	 * Obtains from the variant management the current selected entry ands applies the corresponding variant. In case nothing was selected variant management returns null -> no variant will be applied
	 * 
	 * @private
	 */
	SmartVariantManagementUi2.prototype._setSelectedVariant = function() {
		var oVariant = null;
	
		if (this._oVariantSet) { // in case a variant is currently selected, re-apply this variant
			var sKey = this.getSelectionKey();
			if (sKey) {
				oVariant = this._oVariantSet.getVariant(sKey);
	
				if (oVariant) {
					this._applyVariant(oVariant);
				}
			}
		}
	};
	
	/**
	 * Create the variant items.
	 * 
	 * @private
	 */
	SmartVariantManagementUi2.prototype._reCreateVariantEntries = function() {
	
		var n = null;
		var sVariantKey = null;
		var oVariant, oVariantItem;
	
		this.removeAllItems();
	
		if (this._oVariantSet) {
			var mVariantList = this._oVariantSet.getVariantNamesAndKeys();
			if (mVariantList) {
				for (n in mVariantList) {
					if (n) {
	
						oVariantItem = new VariantItem({
							text: n,
							key: mVariantList[n]
						});
						this.addVariantItem(oVariantItem);
					}
				}
	
				sVariantKey = this._oVariantSet.getCurrentVariantKey();
				oVariant = this._oVariantSet.getVariant(sVariantKey);
				if (oVariant) {
					this.setDefaultVariantKey(sVariantKey); // set the default variant
					this.setInitialSelectionKey(sVariantKey); // set the current selected variant
				}
			}
		}
	};
	
	/**
	 * Reads the variant adapter.
	 * 
	 * @private
	 * @returns {object} the variant set adapter
	 */
	SmartVariantManagementUi2.prototype._getVariantSetAdapter = function() {
	
		var oVariantSetAdapter = null;
	
		if (this._oContainer) {
			// jQuery.sap.require("sap.ushell.services.Personalization.VariantSetAdapter");
			oVariantSetAdapter = new sap.ushell.services.Personalization.VariantSetAdapter(this._oContainer);
		}
	
		return oVariantSetAdapter;
	};
	
	/**
	 * Reads the variant container and create the variant items.
	 * 
	 * @private
	 */
	SmartVariantManagementUi2.prototype._createVariantEntries = function() {
	
		var oVariantSetAdapter = this._getVariantSetAdapter();
		if (oVariantSetAdapter) {
			this._oVariantSet = oVariantSetAdapter.getVariantSet("filterBarVariantSet");
			if (this._oVariantSet) {
				this._reCreateVariantEntries();
			} else {
				this._oVariantSet = oVariantSetAdapter.addVariantSet("filterBarVariantSet");
			}
		}
	
	};
	
	/**
	 * Reads the personalization.
	 * 
	 * @private
	 * @param {object} oContainer personalization conmteiner
	 */
	SmartVariantManagementUi2.prototype._readPersonalization = function(oContainer) {
	
		this._oContainer = oContainer;
	
		if (this._oContainer) {
			this._createVariantEntries();
		}
	};
	
	/**
	 * Handling the save of the personalization container.
	 * 
	 * @private
	 */
	SmartVariantManagementUi2.prototype._savePersonalizationContainer = function() {
	
		var that = this;
	
		if (this._oContainer) {
	
			this._oContainer.save() // save the whole container!
			.fail(function() {
				jQuery.sap.log.error("Saving personalization data failed");
				that._setErrorValueState(that.oResourceBundle.getText("VARIANT_MANAGEMENT_SAVE_FAILED"));
	
			}).done(function() {
				// Before the next save is triggered the last one has to be finished.
				// Could be done by disabling the save button during the save.
				jQuery.sap.log.info("Saving personalization data succeeded");
				that.fireEvent("afterSave");
			});
		}
	};
	
	/**
	 * Eventhandler for the VariantManagement save event.
	 * 
	 * @private
	 * @param {object} oVariantInfo Describes the variant to be saved
	 */
	SmartVariantManagementUi2.prototype.fireSave = function(oVariantInfo) {
	
		var oVariant = null, oNewVariant = null;
		var sVariantKey;
	
		if (!this._oVariantSet) {
			return;
		}
	
		if (oVariantInfo) {
	
			if (oVariantInfo.overwrite) {
				if (oVariantInfo.key) {
					oVariant = this._oVariantSet.getVariant(oVariantInfo.key);
				}
			} else {
				/* eslint-disable no-lonely-if */
				if (oVariantInfo.name) {
					oVariant = this._oVariantSet.addVariant(oVariantInfo.name);
					oNewVariant = oVariant; // indicates that we have to adapt the variant management key
	
					sVariantKey = oNewVariant.getVariantKey();
					this.replaceKey(oVariantInfo.key, sVariantKey);
	
					this.setInitialSelectionKey(sVariantKey);
				}
				/* eslint-enable no-lonely-if */
			}
	
			if (oVariant) {
	
				this.fireEvent("save", oVariantInfo); 
				var oVariantContent = this._fetchVariant();
				if (oVariantContent) {
	
					oVariant.setItemValue("filterBarVariant", oVariantContent.filterBarVariant);
					oVariant.setItemValue("filterbar", oVariantContent.filterbar);
					
					if (oVariantContent.basicSearch) {
						oVariant.basicSearch = oVariantContent.basicSearch;
					}
	
					sVariantKey = oVariant.getVariantKey();
					if (oVariantInfo.def) {
						if (sVariantKey) {
							this._oVariantSet.setCurrentVariantKey(sVariantKey);
						}
					} else {
						var sDefaultVariantKey = this._oVariantSet.getCurrentVariantKey();
						if (sVariantKey === sDefaultVariantKey) {
							this._oVariantSet.setCurrentVariantKey(null);
						}
					}
				}
	
				this._savePersonalizationContainer();
	// if (oNewVariant) {
	// sVariantKey = oNewVariant.getVariantKey();
	// this.replaceKey(oVariantInfo.key, sVariantKey);
	//
	// this.setInitialSelectionKey(sVariantKey);
	// }
			}
		}
	
	};
	
	/**
	 * Stores the STANDARD variant.
	 * 
	 * @private
	 */
	SmartVariantManagementUi2.prototype._setStandardVariant = function() {
		
		if (this._oPersController && this._oPersController.fireBeforeVariantSave) {
			this._oPersController.fireBeforeVariantSave(VariantManagement.STANDARD_NAME);
		}				
		
		this._oStandardVariant = this._fetchVariant();
	};
	
	/**
	 * returns a previously stored representation of the standard variant. Only relevant for the UI2 personalization-service
	 * 
	 * @private
	 * @returns {object} json compatible object representing the standard variant
	 */
	SmartVariantManagementUi2.prototype._getStandardVariant = function() {
		return this._oStandardVariant;
	};
	SmartVariantManagementUi2.prototype.getStandardVariant = function() {
		return this._getStandardVariant();
	};	
	/**
	 * Workaround for missing Variant feature 'setVariantName' with U2 < 1.24.0.
	 * 
	 * @private
	 * @param {object} oVariant the original variant
	 * @param {string} sVariantKey the key of the original variant
	 * @param {string} sNewName the new name of the original variant
	 */
	SmartVariantManagementUi2.prototype._setVariantName = function(oVariant, sVariantKey, sNewName) {
	
		var sKey;
		var aFieldsAndValues, aFields;
	
		if (this._oVariantSet) {
			var oNewVariant = this._oVariantSet.addVariant(sNewName);
	
			aFieldsAndValues = oVariant.getItemValue("filterBarVariant");
			oNewVariant.setItemValue("filterBarVariant", aFieldsAndValues);
	
			aFields = oVariant.getItemValue("filterbar");
			oNewVariant.setItemValue("filterbar", aFields);
	
			sKey = this._oVariantSet.getCurrentVariantKey();
			if (sKey === sVariantKey) {
				this._oVariantSet.setCurrentVariantKey(oNewVariant.getVariantKey());
			}
			this._oVariantSet.delVariant(sVariantKey);
	
			sKey = oNewVariant.getVariantKey();
			this.replaceKey(sVariantKey, sKey);
	
			this.setInitialSelectionKey(sKey);
	
		}
	
	};
	
	/**
	 * Eventhandler for the VariantManagement manage event.
	 * 
	 * @private
	 * @param {object} oVariantInfo Describes the variants, which will be deleted/renamed
	 */
	SmartVariantManagementUi2.prototype.fireManage = function(oVariantInfo) {
	
		var i;
		var renamed = null, deleted = null;
		var oVariant;
	
		if (!this._oVariantSet) {
			return;
		}
	
		if (oVariantInfo) {
			renamed = oVariantInfo.renamed;
			deleted = oVariantInfo.deleted;
	
			if (renamed) {
				for (i = 0; i < renamed.length; i++) {
					oVariant = this._oVariantSet.getVariant(renamed[i].key);
					if (oVariant) {
						if (oVariant.setVariantName) { // available with 1.24.0
							oVariant.setVariantName(renamed[i].name);
						} else {
							this._setVariantName(oVariant, renamed[i].key, renamed[i].name); // workaround for missing variant feature 'setVariantName'
						}
					}
				}
			}
	
			if (deleted) {
				var sVariantKey = this._oVariantSet.getCurrentVariantKey();
				for (i = 0; i < deleted.length; i++) {
					oVariant = this._oVariantSet.getVariant(deleted[i]);
					if (oVariant) {
						if (sVariantKey && sVariantKey === oVariant.getVariantKey()) {
							this._oVariantSet.setCurrentVariantKey(null);
						}
	
						this._oVariantSet.delVariant(deleted[i]);
					}
				}
			}
	
			if (oVariantInfo.def) {
				oVariant = this._oVariantSet.getVariant(oVariantInfo.def);
				if (oVariant || (oVariantInfo.def === this.STANDARDVARIANTKEY)) {
					this._oVariantSet.setCurrentVariantKey(oVariantInfo.def);
				}
			}
	
			if ((deleted && deleted.length > 0) || (renamed && renamed.length > 0) || (oVariantInfo.def)) {
				this._savePersonalizationContainer();
			}
		}
	
	};
	
	/**
	 * Eventhandler for the VariantManagement select event.
	 * 
	 * @private
	 * @param {object} oVariantInfo Describes the selected variant
	 */
	SmartVariantManagementUi2.prototype.fireSelect = function(oVariantInfo) {
	
		var oVariant = null;
	
		if (oVariantInfo && oVariantInfo.key) {
	
			if (this._oVariantSet) {
	
				if (oVariantInfo.key === this.STANDARDVARIANTKEY) {
					oVariant = this._getStandardVariant();
				} else {
					oVariant = this._oVariantSet.getVariant(oVariantInfo.key);
				}
			}
		}
	
		if (oVariant) {
			this._applyVariant(oVariant);
		}
	};
	
	/**
	 * Retrieves variant content.
	 * 
	 * @private
	 * @param {object} oVariant json object representing the variant data
	 * @returns {object} the variant content
	 */
	SmartVariantManagementUi2.prototype._getContent = function(oVariant) {
		var oContent = null;
	
		if (oVariant) {
			if (oVariant.getItemValue) {
				oContent = {
					filterbar: oVariant.getItemValue("filterbar"),
					filterBarVariant: oVariant.getItemValue("filterBarVariant")
				};
				
				if (oVariant.basicSearch) {
				  oContent.basicSearch = oVariant.basicSearch;	
				}
			} else {
				oContent = oVariant; // STANDARD variant
			}
		}
	
		return oContent;
	
	};
	
	/**
	 * Apply a variant.
	 * 
	 * @private
	 * @param {object} oVariant json object representing the variant data
	 */
	SmartVariantManagementUi2.prototype._applyVariant = function(oVariant) {
	
		var oContent = this._getContent(oVariant);
	
		this._applyVariantContent(oContent);
	};
	
	/**
	 * Apply a variant.
	 * 
	 * @private
	 * @param {object} oContent json object representing the variant data
	 */
	SmartVariantManagementUi2.prototype._applyVariantContent = function(oContent) {
	
		if (oContent && this._oPersController && this._oPersController.applyVariant) {
			this._oPersController.applyVariant(oContent);
		}
	};
	
	/**
	 * Fetch a variant.
	 * 
	 * @private
	 * @returns {object} json object representing the content of a variant
	 */
	SmartVariantManagementUi2.prototype._fetchVariant = function() {
	
		if (this._oPersController && this._oPersController.fetchVariant) {
			return this._oPersController.fetchVariant();
		}
	
		return null;
	};
	
	/**
	 * Retrieves the persistency key.
	 * 
	 * @private
	 * @returns {string} persistency key value
	 */
	SmartVariantManagementUi2.prototype._getPersistencyKey = function() {
	
		if (this._oPersController && this._sKeyName) {
			return this._oPersController.getProperty(this._sKeyName);
		}
	
		return null;
	};
	
	/**
	 * Sets an error state on the variant management control.
	 * 
	 * @private
	 * @param {string} sText describing the error reason
	 */
	SmartVariantManagementUi2.prototype._setErrorValueState = function(sText) {
		this.setEnabled(false);
	};

	
	/**
	 * Destroys the control.
	 * 
	 * @public
	 */
	SmartVariantManagementUi2.prototype.exit = function() {
		VariantManagement.prototype.exit.apply(this, arguments);
	
		this._oStandardVariant = null;
		this._oPersController = null;
		this._sKeyName = null;
	
		this._oContainer = null;
		this._oVariantSet = null;
	};
	

	return SmartVariantManagementUi2;

}, /* bExport= */ true);

}; // end of sap/ui/comp/smartvariants/SmartVariantManagementUi2.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.filterbar.FilterBar') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.filterbar.FilterBar.
jQuery.sap.declare('sap.ui.comp.filterbar.FilterBar'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.MultiInput'); // unlisted dependency retained
jQuery.sap.require('sap.m.Bar'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.ButtonType'); // unlisted dependency retained
jQuery.sap.require('sap.m.CheckBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.m.LabelDesign'); // unlisted dependency retained
jQuery.sap.require('sap.m.Link'); // unlisted dependency retained
jQuery.sap.require('sap.m.List'); // unlisted dependency retained
jQuery.sap.require('sap.m.ListSeparators'); // unlisted dependency retained
jQuery.sap.require('sap.m.Panel'); // unlisted dependency retained
jQuery.sap.require('sap.m.PlacementType'); // unlisted dependency retained
jQuery.sap.require('sap.m.SearchField'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.m.Toolbar'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarSpacer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Icon'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.TextAlign'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Title'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ValueState'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.Grid'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.GridRenderer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.GridData'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.HorizontalLayout'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.ResponsiveFlowLayout'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.ResponsiveFlowLayoutData'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.VerticalLayout'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.form.Form'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.form.FormContainer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.form.FormElement'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.form.ResponsiveGridLayout'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.form.FormRenderer'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/filterbar/FilterBar",[
	'jquery.sap.global', 'sap/m/MultiInput', 'sap/m/Bar', 'sap/m/Button', 'sap/m/ButtonType', 'sap/m/CheckBox', 'sap/m/Label', 'sap/m/LabelDesign', 'sap/m/Link', 'sap/m/List', 'sap/m/ListSeparators', 'sap/m/Panel', 'sap/m/PlacementType', 'sap/m/SearchField', 'sap/m/Text', 'sap/m/Toolbar', 'sap/m/ToolbarSpacer', 'sap/ui/Device', './VariantConverterFrom', './VariantConverterTo', 'sap/ui/comp/library', 'sap/ui/comp/smartvariants/PersonalizableInfo', 'sap/ui/comp/smartvariants/SmartVariantManagementUi2', 'sap/ui/comp/variants/VariantManagement', 'sap/ui/core/Icon', 'sap/ui/core/TextAlign', 'sap/ui/core/Title', 'sap/ui/core/ValueState', 'sap/ui/layout/Grid', 'sap/ui/layout/GridRenderer', 'sap/ui/layout/GridData', 'sap/ui/layout/HorizontalLayout', 'sap/ui/layout/ResponsiveFlowLayout', 'sap/ui/layout/ResponsiveFlowLayoutData', 'sap/ui/layout/VerticalLayout', 'sap/ui/layout/form/Form', 'sap/ui/layout/form/FormContainer', 'sap/ui/layout/form/FormElement', 'sap/ui/layout/form/ResponsiveGridLayout', 'sap/ui/layout/form/FormRenderer'
], function(jQuery, MultiInput, Bar, Button, ButtonType, CheckBox, Label, LabelDesign, Link, List, ListSeparators, Panel, PlacementType, SearchField, Text, Toolbar, ToolbarSpacer, Device, VariantConverterFrom, VariantConverterTo, library, PersonalizableInfo, SmartVariantManagementUi2, VariantManagement, Icon, TextAlign, Title, ValueState, Grid, GridRenderer, GridData, HorizontalLayout, ResponsiveFlowLayout, ResponsiveFlowLayoutData, VerticalLayout, Form, FormContainer, FormElement, ResponsiveGridLayout, FormRenderer) {
	"use strict";

	/**
	 * Constructor for a new FilterBar.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class The control displays filters in a user-friendly manner to populate values for a query. The FilterBar consists of a row containing the
	 *        {@link sap.ui.comp.variants.VariantManagement VariantManagement} control, the related buttons, and an area underneath displaying the
	 *        filters. The filters are arranged in a logical row that is divided depending on the space available and the width of the filters. The
	 *        area containing the filters can be hidden or shown using the Hide Filter Bar / Show Filter Bar button. The Go button triggers the search
	 *        event, and the Filters button shows the filter dialog.<br>
	 *        In this dialog, the consumer has full control over the filter bar. The filters in this dialog are displayed in one column and organized
	 *        in groups. The filter items of the <code>filterItems</code> aggregation are grouped in the Basic group . Each filter can be marked as
	 *        visible in the filter bar by selecting Add to Filter Bar. In addition, the items in the <code>filterGroupItems</code> aggregation can
	 *        be marked as part of the current variant. The FilterBar also supports a different UI layout when used inside a value help dialog. In
	 *        this case the FilterBar consists of two logical areas, one containing the general search button and in the Advanced Search area. The
	 *        Advanced Search is a collapsible area displaying the advanced filters in two columns.
	 * @extends sap.ui.layout.Grid
	 * @author Franz Mueller
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.filterbar.FilterBar
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) design-time meta model
	 */
	var FilterBar = Grid.extend("sap.ui.comp.filterbar.FilterBar", /** @lends sap.ui.comp.filterbar.FilterBar.prototype */
	{
		metadata: {

			library: "sap.ui.comp",
			properties: {

				/**
				 * Key used to access personalization data.
				 */
				persistencyKey: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * The advanced mode overwrites the standard behavior and is used in the value help scenario.
				 */
				advancedMode: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * Collapses/expands the advanced area.
				 *
				 * @deprecated Since version 1.30.0. Replaced by property <code>filterBarExpanded</code> This property is mapped to the
				 *             filterBarExpanded property.
				 * @since 1.30.0
				 */
				expandAdvancedArea: {
					type: "boolean",
					group: "Misc",
					defaultValue: false,
					deprecated: true
				},

				/**
				 * Enables/disables the Search button.
				 *
				 * @deprecated Since version 1.32.0.
				 */
				searchEnabled: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Shows/hides the filter row.
				 *
				 * @since 1.26.1
				 */
				filterBarExpanded: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * If this property is set, then the label for filters will be prefixed with the group title.
				 *
				 * @since 1.28.0
				 */
				considerGroupTitle: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * Handles visibility of the Clear button on the Filters dialog.
				 *
				 * @since 1.26.1
				 */
				showClearButton: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * Handles visibility of the Restore button on the Filters dialog.
				 *
				 * @since 1.26.1
				 */
				showRestoreButton: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Handles visibility of the Go button on the filter bar.
				 *
				 * @since 1.28.0
				 */
				showGoOnFB: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Handles visibility of the Restore button on the filter bar.
				 *
				 * @since 1.28.0
				 */
				showRestoreOnFB: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * Handles visibility of the Clear button on the filter bar.
				 *
				 * @since 1.28.0
				 */
				showClearOnFB: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * Handles visibility of the Go button on the filter bar.
				 *
				 * @since 1.26.1
				 * @deprecated Since version 1.28.0. Replaced by property <code>showGoOnFB</code>
				 */
				showGoButton: {
					type: "boolean",
					group: "Misc",
					defaultValue: null,
					deprecated: true
				},

				/**
				 * Stores the delta as compared to the standard variant.
				 *
				 * @since 1.34.0
				 */
				deltaVariantMode: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Sets the width of the filters container.
				 *
				 * @since 1.34.0
				 */
				filterContainerWidth: {
					type: "string",
					group: "Misc",
					defaultValue: "12rem"
				}

			},
			aggregations: {

				/**
				 * Filters belonging to the basic group.
				 */
				filterItems: {
					type: "sap.ui.comp.filterbar.FilterItem",
					multiple: true,
					singularName: "filterItem"
				},

				/**
				 * Filters belonging to groups other than the basic group.
				 */
				filterGroupItems: {
					type: "sap.ui.comp.filterbar.FilterGroupItem",
					multiple: true,
					singularName: "filterGroupItem"
				}
			},
			associations: {

				/**
				 * Populates the basic search area on the filter bar and the Filters dialog.
				 *
				 * @since 1.30.0
				 */
				basicSearch: {
					type: "sap.m.SearchField",
					multiple: false
				}
			},
			events: {

				/**
				 * This event is fired when the Cancel button on the Filters dialog is pressed and the variant is marked as dirty.
				 */
				cancel: {},

				/**
				 * This event is fired when the Restore button is pressed.
				 */
				reset: {
					parameters: {
						/**
						 * Visible controls
						 */
						selectionSet: {
							type: "sap.ui.core.Control[]"
						}
					}
				},

				/**
				 * This event is fired when the Go button is pressed.
				 */
				search: {
					parameters: {
						/**
						 * Visible controls
						 */
						selectionSet: {
							type: "sap.ui.core.Control[]"
						}
					}
				},

				/**
				 * This event is fired before a variant is saved. The event can be used to adapt the data of the custom filters, which will be saved
				 * as variant later.
				 */
				beforeVariantSave: {
					parameters: {
						/**
						 * Context of the event. Can also be <code>null</code> or <code>undefined</code>
						 */
						context: {
							type: "string"
						}
					}
				},

				/**
				 * This event is fired before a variant is fetched.
				 *
				 * @since 1.28.13
				 */
				beforeVariantFetch: {},

				/**
				 * This event is fired after a variant has been loaded and applied to the FilterBar. The event can be used to adapt custom filters
				 * with data from the variant.
				 */
				afterVariantLoad: {
					parameters: {
						/**
						 * Context of the event. Can also be <code>null</code> or <code>undefined</code>
						 */
						context: {
							type: "string"
						}
					}
				},

				/**
				 * This event is fired when a filter has changed.
				 */
				filterChange: {},

				/**
				 * This event is fired when the Clear button is pressed. The consumer has to clear all filters.
				 */
				clear: {
					parameters: {
						/**
						 * Visible controls
						 */
						selectionSet: {
							type: "sap.ui.core.Control[]"
						}
					}
				},

				/**
				 * This event is fired when the filter bar is initialized.
				 */
				initialise: {},

				/**
				 * This event is fired after a variant has been saved. ID of the saved variant.
				 */
				afterVariantSave: {},

				/**
				 * This event is fired after the filters dialog is closed.
				 *
				 * @since 1.34.0
				 */
				filtersDialogClosed: {}
			}
		},

		renderer: GridRenderer.render
	});

	/**
	 * Resets the aggregation FilterItems.
	 *
	 * @name sap.ui.comp.filterbar.FilterBar#removeAllFilterItems
	 * @function
	 * @type void
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */

	/**
	 * Resets the aggregation FilterGroupItems.
	 *
	 * @name sap.ui.comp.filterbar.FilterBar#removeAllFilterGroupItems
	 * @function
	 * @type void
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */

	/**
	 * Returns filters of the FilterBar.
	 *
	 * @name sap.ui.comp.filterbar.FilterBar#getAllFilterItems
	 * @function
	 * @param {boolean} bConsiderOnlyVisibleFields If set to <code>true</code> only visible filters are returned
	 * @type sap.ui.comp.filterbar.FilterItem[]
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */

	/**
	 * Registration of a callback function. The provided callback function will be executed before a variant is saved and has to provide all relevant
	 * fields and values in JSON.
	 *
	 * @name sap.ui.comp.filterbar.FilterBar#registerFetchData
	 * @function
	 * @param {function} fCallBack Provided by the FilterBar consumer.
	 * @type void
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */

	/**
	 * Registration of a callback function. The provided callback function is executed when a variant has to be applied. The callback function will
	 * receive the corresponding data set containing all relevant data in JSON.
	 *
	 * @name sap.ui.comp.filterbar.FilterBar#registerApplyData
	 * @function
	 * @param {function} fCallBack Provided by the FilterBar consumer.
	 * @type void
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */

	/**
	 * Registration of a callback function. The provided callback function is executed to obtain the filters with values.
	 *
	 * @name sap.ui.comp.filterbar.FilterBar#registerGetFiltersWithValues
	 * @function
	 * @param {function} fCallBack Provided by the FilterBar consumer
	 * @type sap.ui.comp.filterbar.FilterItem[]
	 * @public
	 * @since 1.26.1
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */

	/**
	 * Returns the associated control for a filter item.
	 *
	 * @name sap.ui.comp.filterbar.FilterBar#determineControlByFilterItem
	 * @function
	 * @param {sap.ui.comp.filterbar.FilterItem} oFilterItem Filter from the aggregations
	 * @type sap.ui.core.Control
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */

	/**
	 * Returns the associated control based on the filter's name and optional group name.
	 *
	 * @name sap.ui.comp.filterbar.FilterBar#determineControlByName
	 * @function
	 * @param {string} sName Name of the filter
	 * @param {string} sGroupName Group name of the filter; <code>null</code> for filter that belong to basic group
	 * @type sap.ui.core.Control
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */

	/**
	 * Resets the current variant management selection which is required for the navigation scenario.
	 *
	 * @name sap.ui.comp.filterbar.FilterBar#clearVariantSelection
	 * @function
	 * @type void
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */

	/**
	 * Retrieves the mandatory filters.
	 *
	 * @name sap.ui.comp.filterbar.FilterBar#determineMandatoryFilterItems
	 * @function
	 * @type sap.ui.comp.filterbar.FilterItem[]
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */

	/**
	 * Retrieves the current variant ID. For standard variant an empty string will be returned.
	 *
	 * @name sap.ui.comp.filterbar.FilterBar#getCurrentVariantId
	 * @function
	 * @type string
	 * @public
	 * @since 1.28.0
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */

	/**
	 * Sets the current variant ID.
	 *
	 * @name sap.ui.comp.filterbar.FilterBar#setCurrentVariantId
	 * @function
	 * @param {string} sVariantId The variant key
	 * @param {boolean} bDoNotApplyVariant If set to <code>true</code>, the <code>applyVariant</code> method is not executed yet. Relevant during
	 *        navigation, when called before the initialise event has been executed.
	 * @type void
	 * @public
	 * @since 1.28.0
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */

	/**
	 * Retrieves the filter bar data as selection variant for UI navigation in JSON format.
	 *
	 * @name sap.ui.comp.filterbar.FilterBar#getDataSuiteFormat
	 * @function
	 * @param {boolean} bConsiderAllFilters If set to <code>false</code> only visible filters will be retrieved
	 * @type string
	 * @public
	 * @since 1.28.0
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */

	/**
	 * Sets the selection variant for UI navigation to filter bar.
	 *
	 * @name sap.ui.comp.filterbar.FilterBar#setDataSuiteFormat
	 * @function
	 * @param {string} sSuiteData Represents the selection variant for UI navigation
	 * @param {boolean} bReplace Indicates a clean-up before appliance
	 * @type void
	 * @public
	 * @since 1.28.0
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */

	FilterBar.INTERNAL_GROUP = "__$INTERNAL$";

	/**
	 * Initializes the FilterBar control.
	 *
	 * @private
	 */
	FilterBar.prototype.init = function() {

		this._oBasicAreaLayout = null;
		this._oVariantManagement = null;
		this._oCollectiveSearch = null;

		this._aBasicAreaSelection = null;
		this._mAdvancedAreaFilter = null;

		this._fRegisteredFetchData = null;
		this._fRegisteredApplyData = null;
		this._fRegisterGetFiltersWithValues = null;
		this._oHideShowButton = null;
		this._oSearchButton = null;
		this._oFiltersButton = null;
		this._oClearButtonOnFB = null;
		this._oRestoreButtonOnFB = null;

		this._bIsInitialized = false;

		this._oDialog = null;
		this._oFilterDialog = null;

		this._aFields = null;

		this._oBasicSearchField = null;

		this._oVariant = {};

		this._filterChangeSemaphore = true;
		this._triggerFilterChangeState = true;

		this._fRegisteredFilterChangeHandlers = null;
		this._fInitialiseVariants = null;

		this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp");

		this.addStyleClass("sapUiCompFilterBar");
		if (this._isPhone()) {
			this.addStyleClass("sapUiCompFilterBarPhone");
		} else {
			this.addStyleClass("sapUiCompFilterBarNonPhone");
		}

		this.addStyleClass("sapUiCompFilterBarMarginBottom");
		this.addStyleClass("sapUiCompFilterBarPaddingPanel");

		this._oToolbar = this._createToolbar();
		this._oToolbar.setLayoutData(new GridData({
			span: "L12 M12 S12"
		}));
		this.addContent(this._oToolbar);

		// Basic
		this._oBasicAreaLayout = this._createBasicAreaLayout();
		this._oBasicAreaLayout.setLayoutData(new GridData({
			span: "L12 M12 S12"
		}));
		this.addContent(this._oBasicAreaLayout);

		// Advanced
		this._oAdvancedPanel = new Panel();
		this._oAdvancedPanel.setLayoutData(new GridData({
			span: "L12 M12 S12"
		}));

		// this._oAdvancedPanel.setExpandable(false);

		this._oAdvancedPanel.setVisible(false);
		this._oAdvancedAreaForm = this._createAdvancedAreaForm();
		this._oAdvancedPanel.addContent(this._oAdvancedAreaForm);

		this.addContent(this._oAdvancedPanel);

		// register event handler for resizing
		jQuery(window).on("resize.basicsearch", jQuery.proxy(this._fHandleResize, this));

		this.oModel = new sap.ui.model.json.JSONModel({});
		this.setModel(this.oModel, "FilterBar");

		this._oHintText = new Text({
			text: this._oRb.getText("FILTER_BAR_NO_FILTERS_ON_FB"),
			textAlign: TextAlign.Center
		});
		this._oHintText.setVisible(false);
		this._oHintText.addStyleClass("sapUiCompFilterBarHint");
		this._oBasicAreaLayout.addContent(this._oHintText);

		if (this._isTablet() || this._isPhone()) {
			this.setFilterBarExpanded(false);
		}
	};

	FilterBar.prototype._hasAnyVisibleFiltersOnFB = function() {

		var aItems = this._retrieveVisibleAdvancedItems();

		for (var i = 0; i < aItems.length; i++) {
			if (aItems[i].filterItem.getVisibleInFilterBar()) {
				return true;
			}
		}

		return false;
	};

	FilterBar.prototype._showHintText = function() {

		var i = 0;

		if (!this.getAdvancedMode() && !this._isPhone()) {

			var bFlag = !this._hasAnyVisibleFiltersOnFB();
			if (bFlag && this._mAdvancedAreaFilter) {
				i = this._oBasicAreaLayout.indexOfContent(this._oHintText);
				if (i < 0) {
					this._oBasicAreaLayout.insertContent(this._oHintText, 0);
				}
			}

			this._oHintText.setVisible(bFlag);

			if (i < 0) {
				this._oBasicAreaLayout.rerender();
			}
		}
	};

	FilterBar.prototype._adaptButtonsEnablement = function() {

		var bFlag = false || !!this._mAdvancedAreaFilter;

		this._oHideShowButton.setEnabled(bFlag);
		this._oClearButtonOnFB.setEnabled(bFlag);
		this._oRestoreButtonOnFB.setEnabled(bFlag);
		this._oFiltersButton.setEnabled(bFlag);

		if (bFlag && this.getFilterBarExpanded() && !this._isPhone() && !this.getAdvancedMode()) {
			this._oBasicAreaLayout.setVisible(true);
		}
	};

	/**
	 * Handles the visibility for the Clear button in the filter bar. On phone devices, the value is always treated as false.
	 *
	 * @public
	 * @since 1.28.0
	 * @param {boolean} bFlag State of visibility
	 */
	FilterBar.prototype.setShowClearOnFB = function(bFlag) {

		if (!this._isPhone()) {
			this.setProperty("showClearOnFB", bFlag);
			this._oClearButtonOnFB.setVisible(bFlag);
		}
	};

	/**
	 * Handles the visibility of the Restore button in the filter bar. On phone devices, the value is always treated as false.
	 *
	 * @public
	 * @since 1.28.0
	 * @param {boolean} bFlag State of visibility
	 */
	FilterBar.prototype.setShowRestoreOnFB = function(bFlag) {

		if (!this._isPhone()) {
			this.setProperty("showRestoreOnFB", bFlag);
			this._oRestoreButtonOnFB.setVisible(bFlag);
		}
	};

	/**
	 * Handles the visibility of the Go button on filter bar.
	 *
	 * @public
	 * @since 1.28.0
	 * @param {boolean} bFlag State of visibility
	 */
	FilterBar.prototype.setShowGoOnFB = function(bFlag) {

		this.setProperty("showGoOnFB", bFlag);

		this._oSearchButton.setVisible(bFlag);
	};

	/**
	 * Handles the visibility for the Go button on filter bar. This property is deprecated, please use instead the property <code>showGoOnFB</code>.
	 *
	 * @private
	 * @since 1.26.1
	 * @param {boolean} bFlag State of visibility
	 */
	FilterBar.prototype.setShowGoButton = function(bFlag) {

		this.setShowGoOnFB(bFlag);
	};

	/**
	 * Handles the visibility for the Go button on filter bar. This property is deprecated, please use instead the property <code>showGoOnFB</code>.
	 *
	 * @private
	 * @since 1.26.1
	 * @returns {boolean} bFlag State of visibility
	 */
	FilterBar.prototype.getShowGoButton = function() {

		return this.getShowGoOnFB();
	};

	/**
	 * Sets the current variant ID.
	 *
	 * @public
	 * @since 1.28.0
	 * @param {string} sVariantId ID of the variant
	 * @param {boolean} bDoNotApplyVariant If set to <code>true</code>, the <code>applyVariant</code> method is not executed yet. Relevant during
	 *        navigation, when called before the initialise event has been executed.
	 */
	FilterBar.prototype.setCurrentVariantId = function(sVariantId, bDoNotApplyVariant) {

		if (this._oVariantManagement) {
			this._oVariantManagement.setCurrentVariantId(sVariantId, bDoNotApplyVariant);
		}
	};

	/**
	 * Retrieves the current variant ID.
	 *
	 * @public
	 * @since 1.28.0
	 * @returns {string} ID of the current variant
	 */
	FilterBar.prototype.getCurrentVariantId = function() {

		var sKey = "";

		if (this._oVariantManagement) {
			sKey = this._oVariantManagement.getCurrentVariantId();
		}

		return sKey;
	};

	/**
	 * Retrieves the current variant as selection variant for UI navigation
	 *
	 * @public
	 * @since 1.28.0 Also include empty/invisible fields filter data
	 * @param {boolean} bConsiderAllFilters also include empty/invisible fields filter data
	 * @returns {string} JSON string representing the selection variant for UI navigation; <code>null</code> otherwise
	 */
	FilterBar.prototype.getDataSuiteFormat = function(bConsiderAllFilters) {

		var sSuiteVariant = null;
		var sKey, sContent, aFiltersInfo;

		if (this._oVariantManagement) {
			sKey = this.getCurrentVariantId();

			if (this.getFilterDataAsString) {
				aFiltersInfo = this._determineVariantFiltersInfo(bConsiderAllFilters, true);

				sContent = this.getFilterDataAsString(bConsiderAllFilters);
				if (sContent) {
					var oConverter = new VariantConverterTo();
					sSuiteVariant = oConverter.convert(sKey, aFiltersInfo, sContent, this);
				}
			}
		}

		return sSuiteVariant;
	};

	/**
	 * Sets the selection variant for UI navigation to FilterBar.
	 *
	 * @public
	 * @since 1.28.0
	 * @param {string} sSuiteData Represents the selection variants for UI navigation
	 * @param {boolean} bReplace Replaces existing filter data
	 */
	FilterBar.prototype.setDataSuiteFormat = function(sSuiteData, bReplace) {

		var oConverter, oContent;
		var bModified;

		if (sSuiteData) {

			oConverter = new VariantConverterFrom();
			oContent = oConverter.convert(sSuiteData, this);
			if (oContent) {

				bModified = this._getConsiderFilterChanges();

				if (oContent.variantId && this._oVariantManagement) {
					if (this._bIsInitialized) {
						this._setFilterVisibility(oContent.variantId);
					} else {
						this._oVariantManagement.setInitialSelectionKey(oContent.variantId);
					}
				}

				if (oContent.payload && this.setFilterDataAsString) {
					this._setConsiderFilterChanges(false);
					this.setFilterDataAsString(oContent.payload, bReplace);
				}

				this._setConsiderFilterChanges(bModified);
			}
		}
	};

// FilterBar.prototype._applyVariantById = function(sVariantId) {
// if (this._oVariantManagement.getSelectionKey() !== sVariantId) {
// this._oVariantManagement.setInitialSelectionKey(sVariantId);
//
// var oVariant = this._oVariantManagement.getVariantContent(this, sVariantId);
// if (oVariant) {
// this._oVariantManagement._applyVariant(this, oVariant);
// }
// }
// };

	FilterBar.prototype._setFilterVisibility = function(sVariantId) {

		if (this._oVariantManagement.getSelectionKey() !== sVariantId) {
			this._oVariantManagement.setInitialSelectionKey(sVariantId);

			var oStandardVariant = this._getStandardVariant();
			if (oStandardVariant) {
				var oVariant = this._oVariantManagement.getVariantContent(this, sVariantId);
				if (oVariant && oVariant.filterbar) {
					if (oVariant.version === "V2") {
						oVariant = this.mergeVariant(oStandardVariant, oVariant);
					}

					this._reapplyVisibility(oVariant.filterbar);
				}
			}
		}
	};

	/**
	 * Sets the persistency key.
	 *
	 * @public
	 * @param {string} sPersistenceKey ID for persistency
	 */
	FilterBar.prototype.setPersistencyKey = function(sPersistenceKey) {

		this.setProperty("persistencyKey", sPersistenceKey);

		if (this._oVariantManagement) {
			this._oVariantManagement.setVisible(true);
		}
	};

	/**
	 * Resets the current selection in the variant management control to standard.
	 *
	 * @public
	 */
	FilterBar.prototype.clearVariantSelection = function() {

		if (this._oVariantManagement) {
			this._oVariantManagement.clearVariantSelection();
		}
	};

	/**
	 * Enables/disables the Search button.
	 *
	 * @private
	 * @param {boolean} bValue Sets the enable state of the Search button
	 */
	FilterBar.prototype.setSearchEnabled = function(bValue) {

		this.setProperty("searchEnabled", bValue);

		if (this._oSearchButton) {
			this._oSearchButton.setEnabled(bValue);
		}
	};
	FilterBar.prototype.getSearchEnabled = function() {
		return this.getProperty("searchEnabled");
	};

	/**
	 * Sets the type of the Search to Emphasize.
	 *
	 * @private
	 * @since 1.28
	 * @param {boolean} bSetEmphasize Sets the type to Emphasize or Default
	 */
	FilterBar.prototype.setSearchButtonEmphType = function(bSetEmphasize) {

	};

	/**
	 * Sets the simplified mode.
	 *
	 * @param {boolean} bFlag Sets the simplified mode
	 * @private
	 */
	FilterBar.prototype.setSimplifiedMode = function(bFlag) {

		// the simplified mode is with beginning of 1.25 always implicitly used.
		// The former setter-method method stays in place, so that the former usages do not have to be adapted.
	};

	/**
	 * Retrieves the simplified mode.
	 *
	 * @returns {boolean} Indicates if the current advanced mode is set
	 * @private
	 */
	FilterBar.prototype.getSimplifiedMode = function() {

		if (this.getAdvancedMode()) {
			return false;
		}

		return true;
	};

	/**
	 * Sets the advanced area to collapsed or expanded mode.
	 *
	 * @private
	 * @param {boolean} bFlag Sets the advanced area to expanded/collapsed
	 */
	FilterBar.prototype.setExpandAdvancedArea = function(bFlag) {

		this.setFilterBarExpanded(bFlag);
	};

	/**
	 * Determines if the advanced area is displayed collapsed or expanded.
	 *
	 * @private
	 * @returns {boolean} The state of the advanced area
	 */
	FilterBar.prototype.getExpandAdvancedArea = function() {

		return this.getFilterBarExpanded();
	};

	/**
	 * The advanced mode is only relevant for the value help scenario. UI representation is different from the standard filter bar.
	 *
	 * @public
	 * @param {boolean} bFlag Sets the advanced mode
	 */
	FilterBar.prototype.setAdvancedMode = function(bFlag) {

		this.setProperty("advancedMode", bFlag);

		if (bFlag) {
			if (this._oVariantManagement) {
				this._oVariantManagement.setVisible(false);
			}

			if (this._oToolbar) {
				this._oToolbar.addStyleClass("sapUiCompFilterBarToolbarBasicSearchNoVariant");
			}

			if (this._oBasicSearchField) {
				if (this._oToolbar.indexOfContent(this._oBasicSearchField) < 0) {
					this._oToolbar.insertContent(this._oBasicSearchField, 1);
				}
			}

		} else {
			/* eslint-disable no-lonely-if */
			if (this.getPersistencyKey()) {
				if (this._oVariantManagement) {
					this._oVariantManagement.setVisible(true);
				}
				if (this._oToolbar) {
					this._oToolbar.removeStyleClass("sapUiCompFilterBarToolbarBasicSearchNoVariant");
				}
			}
			/* eslint-enable no-lonely-if */
		}

		this._oFiltersButton.setVisible(!bFlag);

		this._oHideShowButton.setVisible((bFlag && this._isPhone()) ? false : true);

		this._oBasicAreaLayout.setVisible(!bFlag);
		this._oAdvancedPanel.setVisible(bFlag && this.getFilterBarExpanded());
	};

	FilterBar.prototype._setCollectiveSearch = function(oCollectiveSearch) {
		if (this.getAdvancedMode() && oCollectiveSearch) {
			if (this._oToolbar) {
				if (this._oVariantManagement) {
					this._oToolbar.removeContent(this._oVariantManagement);
					this._oVariantManagement = null;
				}

				if (this._oCollectiveSearch) {
					this._oToolbar.removeContent(this._oCollectiveSearch);
				}
				this._oCollectiveSearch = oCollectiveSearch;
				this._oToolbar.insertContent(this._oCollectiveSearch, 0);

				this._oToolbar.removeStyleClass("sapUiCompFilterBarToolbarBasicSearchNoVariant");
			}
		}
	};

	/**
	 * Adds a basic search field to the toolbar.
	 *
	 * @public
	 * @param {sap.m.SearchField} oBasicSearchField Control
	 */
	FilterBar.prototype.setBasicSearch = function(oBasicSearchField) {
		this.setAssociation("basicSearch", oBasicSearchField, true);

		var that = this;

		if (this._oBasicSearchField) {
			this._oToolbar.removeContent(this._oBasicSearchField);
		}

		if (oBasicSearchField && (!this._isPhone() || this.getAdvancedMode())) {
			this._oToolbar.insertContent(oBasicSearchField, 1);
			if (this._isUi2Mode()) {
				oBasicSearchField.attachLiveChange(function(oEvent) {
					that.fireFilterChange(oEvent);
				});
			}
		}

		this._oBasicSearchField = oBasicSearchField;
	};

	/**
	 * Adds a <code>FilterItem</code> element to the aggregation <code>filterItems</code>.
	 *
	 * @public
	 * @param {sap.ui.comp.filterbar.FilterItem} oFilterItem Belongs to the basic group
	 */
	FilterBar.prototype.addFilterItem = function(oFilterItem) {

		var sName, oControl, oFilterGroupItem;

		if (!oFilterItem) {
			throw new Error("sap.ui.comp.filterbar.FilterBar.prototype.addFilterItem()" + " Expected argument 'oFilterItem' may not be null nor empty");
		}

		sName = oFilterItem.getName();
		if (!sName) {
			throw new Error("sap.ui.comp.filterbar.FilterBar.prototype.addFilterItem()" + " Expected argument 'oFilterItem.name' may not be null nor empty");
		}

		oControl = oFilterItem.getControl();
		if (!oControl) {
			throw new Error("sap.ui.comp.filterbar.FilterBar.prototype.addFilterItem()" + " Expected argument 'oFilterItem.control' may not be null nor empty");
		}

		this.addAggregation("filterItems", oFilterItem, true);

		// has to be initialized before the call to the container creation
		if (!this._aBasicAreaSelection) {
			this._aBasicAreaSelection = [];
		}

		var oObj = {
			control: oFilterItem.getControl(),
			filterItem: oFilterItem
		};
		this._aBasicAreaSelection.push(oObj);

		oFilterGroupItem = new sap.ui.comp.filterbar.FilterGroupItem({
			label: oFilterItem.getLabel(),
			labelTooltip: oFilterItem.getLabelTooltip(),
			name: oFilterItem.getName(),
			mandatory: oFilterItem.getMandatory(),
			visible: oFilterItem.getVisible(),
			visibleInFilterBar: oFilterItem.getVisibleInFilterBar(),
			partOfCurrentVariant: true,
			control: oFilterItem.getControl(),
			groupName: FilterBar.INTERNAL_GROUP,
			groupTitle: ""
		});

		oFilterGroupItem._iSpan = oFilterItem._iSpan;
		if (oFilterItem.data('isCustomField')) {
			oFilterGroupItem.data('isCustomField', true);
		}

		oFilterItem.attachChange(this._filterItemChange.bind(this, null));

		this.addFilterGroupItem(oFilterGroupItem);

	};

	/**
	 * Adds a <code>FilterGroupItem</code> element to the aggregation <code>filterGroupItems</code>.
	 *
	 * @public
	 * @param {sap.ui.comp.filterbar.FilterGroupItem} oFilterGroupItem Belongs to any group other than basic
	 */
	FilterBar.prototype.addFilterGroupItem = function(oFilterGroupItem) {

		var sName, sGroupName, oObj, oContainer;

		if (!oFilterGroupItem) {
			throw new Error("sap.ui.comp.filterbar.FilterBar.prototype.addFilterGroupItem()" + " Expected argument 'oFilterGroupItem' may not be null nor empty");
		}

		this.addAggregation("filterGroupItems", oFilterGroupItem, true);

		sGroupName = oFilterGroupItem.getGroupName();
		if (!sGroupName) {
			throw new Error("sap.ui.comp.filterbar.FilterBar.prototype.addFilterGroupItems()" + " GroupName may not be null nor empty");
		}

		sName = oFilterGroupItem.getName();
		if (!sName) {
			throw new Error("sap.ui.comp.filterbar.FilterBar.prototype.addFilterGroupItems()" + " Name may not be null nor empty");
		}

		if (!this._mAdvancedAreaFilter) {
			this._mAdvancedAreaFilter = {};
		}
		if (!this._mAdvancedAreaFilter[sGroupName]) {
			this._mAdvancedAreaFilter[sGroupName] = {};
			this._mAdvancedAreaFilter[sGroupName].filterItem = null;
			this._mAdvancedAreaFilter[sGroupName].items = [];
		}

		if (!this._mAdvancedAreaFilter[sGroupName].filterItem) {
			this._mAdvancedAreaFilter[sGroupName].filterItem = oFilterGroupItem;
		}

		oObj = {
			control: oFilterGroupItem.getControl(),
			filterItem: oFilterGroupItem
		};

		if (this.getAdvancedMode() || oFilterGroupItem.getVisibleInFilterBar()) {
			oFilterGroupItem.setVisibleInFilterBar(true);
		} else {
			oFilterGroupItem.setVisibleInFilterBar(false);
		}

		this._mAdvancedAreaFilter[sGroupName].items.push(oObj);

		oContainer = this._addControlToBasicAreaFormContainer(oFilterGroupItem);
		if (oContainer) {
			oObj.container = oContainer;

			oContainer.setVisible(oFilterGroupItem.getVisible() && oFilterGroupItem.getVisibleInFilterBar());
			if (oFilterGroupItem.getVisibleInFilterBar()) {
				oFilterGroupItem.setPartOfCurrentVariant(oFilterGroupItem.getVisibleInFilterBar());
			}

			oFilterGroupItem.attachChange(this._filterGroupItemChange.bind(this));
		}

		if (this.getAdvancedMode()) {
			this._rerenderAA();
		} else {
			this._showHintText();
		}

		this._adaptButtonsEnablement();
	};

	/**
	 * Event-handler is called when the property of a filter item has changed.
	 *
	 * @private
	 * @param {object} oContainer the container of the filter item's control and label
	 * @param {object} oEvent the event
	 */
	FilterBar.prototype._filterItemChange = function(oContainer, oEvent) {

		var oItem;
		var bFlag;
		var sPropertyName;

		if (oEvent && oEvent.oSource && (oEvent.oSource instanceof sap.ui.comp.filterbar.FilterItem)) {

			sPropertyName = oEvent.getParameter("propertyName");

			if (sPropertyName === "visibleInFilterBar" || sPropertyName === "visible" || sPropertyName === "label" || sPropertyName === "labelTooltip" || sPropertyName === "mandatory") {
				oItem = this._determineItemByName(oEvent.oSource.getName(), FilterBar.INTERNAL_GROUP);

				if (oItem && oItem.filterItem) {
					if ((sPropertyName === "visible")) {
						bFlag = oEvent.oSource.getVisible();
						oItem.filterItem.setVisible(bFlag);
					} else if (sPropertyName === "visibleInFilterBar") {
						bFlag = oEvent.oSource.getVisibleInFilterBar();
						var bChangePossible = this._checkChangePossibleVisibleInFilterBar(oItem.filterItem, bFlag);
						if (bChangePossible) {
							oItem.filterItem.setVisibleInFilterBar(bFlag);
						} else {
							oEvent.oSource.setVisibleInFilterBar(true);
						}

					} else if (sPropertyName === "label") {
						oItem.filterItem.setLabel(oEvent.oSource.getLabel());
					} else if (sPropertyName === "labelTooltip") {
						oItem.filterItem.setLabelTooltip(oEvent.oSource.getLabelTooltip());
					} else if (sPropertyName === "mandatory") {
						bFlag = oEvent.oSource.getMandatory();
						oItem.filterItem.setMandatory(bFlag);
					}
				}
			}
		}
	};

	/**
	 * Event handler called when the property of a filter group item has changed.
	 *
	 * @private
	 * @param {object} oEvent the event
	 */
	FilterBar.prototype._filterGroupItemChange = function(oEvent) {

		var oItem;
		var sPropertyName;

		if (oEvent && oEvent.oSource) {
			sPropertyName = oEvent.getParameter("propertyName");

			if (sPropertyName === "visibleInFilterBar" || sPropertyName === "visible") {

				oItem = this._determineItemByName(oEvent.oSource.getName(), oEvent.oSource.getGroupName());
				if (oItem) {
					if (sPropertyName === "visibleInFilterBar") {
						var bFlag = oEvent.oSource.getVisibleInFilterBar();

						var bChangePossible = this._checkChangePossibleVisibleInFilterBar(oEvent.oSource, bFlag);
						if (!bChangePossible) {
							oEvent.oSource.setVisibleInFilterBar(true);
							bFlag = true;
						}

						if (bFlag) {
							oEvent.oSource.setPartOfCurrentVariant(true);
							// this._setVisibleInFilterBar(oItem);
						}

						if (!this.getAdvancedMode()) {
							this._rerenderItem(oItem);
							this._adaptLinkText(oEvent.oSource.getGroupName());
						}

					} else if (sPropertyName === "visible") {

						if (this.getAdvancedMode() && oItem.container) {
							oItem.container.setVisible(true);
						} else {
							this._updateToolbarText();
							this._rerenderGroup(oItem, oEvent.oSource.getGroupName());
						}
					}

					this._showHintText();
				}
			} else if (sPropertyName === "groupTitle") {
				if (this._mAdvancedAreaFilter && this._mAdvancedAreaFilter[oEvent.oSource.getGroupName()]) {
					if (this._mAdvancedAreaFilter[oEvent.oSource.getGroupName()].formcontainer) {
						this._mAdvancedAreaFilter[oEvent.oSource.getGroupName()].formcontainer.setTitle(oEvent.oSource.getGroupTitle());
					} else {
						this._adaptGroupTitle(oEvent.oSource.getGroupName());
					}
				}
			} else if (sPropertyName === "label") {
				if (!this._mAdvancedAreaFilter[oEvent.oSource.getGroupName()].formcontainer) { // do not adapt in case the advanced filters dialog is
					// active
					this._adaptGroupTitleForFilter(oEvent.oSource);
				}
			} else if (sPropertyName === "mandatory") {
				if (this._oFilterDialog) { // adapt only in case the advanced filters dialog is active
					this._adaptMandatoryForFilter(oEvent.oSource);
				}
			}

			if (this.getAdvancedMode()) {
				this._rerenderAA();
			}
		}
	};

	FilterBar.prototype._addContainer = function(oItem) {

		if (oItem) {

			if (this._oBasicAreaLayout && !this._oFilterDialog) {

				if (oItem.container && (this._oBasicAreaLayout.indexOfContent(oItem.container) === -1)) {
					this._addContainerInOrder(oItem.filterItem, oItem.container);
				}
			}
		}
	};

	FilterBar.prototype._addContainerInOrder = function(oFilterItem, oContainer) {
		var n, i, idx, aContainers = this._oBasicAreaLayout.getContent(), oPredecessorContainerIdx = -1;

		if (this._mAdvancedAreaFilter) {
			for (n in this._mAdvancedAreaFilter) {
				var oGroupElement = this._mAdvancedAreaFilter[n];
				if (oGroupElement && oGroupElement.items) {
					for (i = 0; i < oGroupElement.items.length; i++) {

						if (oGroupElement.items[i].container === oContainer) {

							this._oBasicAreaLayout.insertContent(oContainer, oPredecessorContainerIdx + 1);
							return;
						}

						idx = aContainers.indexOf(oGroupElement.items[i].container);
						if (idx >= 0) {
							oPredecessorContainerIdx = idx;
						}
					}
				}
			}
		}
	};

	/**
	 * VisibleInFilterBar-property may not be changed to false, when the filter is mandatory and has no value
	 *
	 * @private
	 * @param {sap.ui.comp.filterbar.FilterItem} oFilterItem in question
	 * @param {boolean} bFlag - represents the value of visibleInFilterBar
	 * @returns {boolean} allowed or not allowed change
	 */
	FilterBar.prototype._checkChangePossibleVisibleInFilterBar = function(oFilterItem, bFlag) {

		if (oFilterItem && oFilterItem.getMandatory() && !bFlag) {
			var bHasValue = this._hasFilterValue(oFilterItem);
			if (!bHasValue) {
				oFilterItem.setVisibleInFilterBar(true);
				return false;
			}
		}

		return true;
	};

	/**
	 * In case the visibility was changed, check if the link text has to be adapted.
	 *
	 * @private
	 * @param {string} sGroupName the group name
	 */
	FilterBar.prototype._adaptLinkText = function(sGroupName) {

		if (this._mAdvancedAreaFilter && this._mAdvancedAreaFilter[sGroupName] && this._mAdvancedAreaFilter[sGroupName].link) {
			this._setLinkText(sGroupName, this._mAdvancedAreaFilter[sGroupName].link);
		}
	};

	/**
	 * Checks if a filter has a value.
	 *
	 * @private
	 * @param {sap.ui.comp.filterbar.FilterItem} oFilterItem the filter
	 * @returns {boolean} returns if the filter has a value or not
	 */
	FilterBar.prototype._hasFilterValue = function(oFilterItem) {

		var aFilters = this._getFiltersWithValues();
		return this._checkFilterForValue(aFilters, oFilterItem);
	};

	/**
	 * Handles dynamic change of the mandatory property.
	 *
	 * @private
	 * @param {sap.ui.comp.filterbar.FilterItem} oFilterItem the filter
	 */
	FilterBar.prototype._adaptMandatoryForFilter = function(oFilterItem) {

		var oItem;
		var sGroupName = oFilterItem.getGroupName();

		if (oFilterItem) {
			oItem = this._determineItemByName(oFilterItem.getName(), sGroupName);
			if (oItem && oItem.checkbox && oItem.checkbox.getVisible()) {

				var bEnabled = true;
				if (oFilterItem.getMandatory()) {
					var bHasValue = this._hasFilterValue(oFilterItem);
					if (!bHasValue) {
						bEnabled = false;
						oFilterItem.setVisibleInFilterBar(true);
					}
				}

				oItem.checkbox.setEnabled(bEnabled);
			}
		}
	};

	/**
	 * In case considerGroupTitle is set then all labels of filters of a specific group will post-fixed with the group title.
	 *
	 * @private
	 * @param {sap.ui.comp.filterbar.FilterGroupItem} oFilterItem the filter
	 */
	FilterBar.prototype._adaptGroupTitleForFilter = function(oFilterItem) {

		var sLabel;
		var oLabel;

		if (oFilterItem) {
			sLabel = oFilterItem.getLabel();
			oLabel = oFilterItem.getLabelControl(this.getId());
			if (this.getConsiderGroupTitle()) {
				if (oLabel && oFilterItem.getGroupTitle()) {
					oLabel.setText(sLabel + " (" + oFilterItem.getGroupTitle() + ')');
				}
			} else {
				oLabel.setText(sLabel);
			}
		}
	};

	/**
	 * In case considerGroupTitle is set then all labels of filters of a specific group will post-fixed with the group title.
	 *
	 * @private
	 * @param {string} sGroupName filter group name
	 */
	FilterBar.prototype._adaptGroupTitle = function(sGroupName) {

		var i;
		var oItem;

		if (this._mAdvancedAreaFilter && this._mAdvancedAreaFilter[sGroupName] && this._mAdvancedAreaFilter[sGroupName].items) {
			for (i = 0; i < this._mAdvancedAreaFilter[sGroupName].items.length; i++) {
				oItem = this._mAdvancedAreaFilter[sGroupName].items[i];
				if (oItem && oItem) {
					this._adaptGroupTitleForFilter(oItem.filterItem);
				}
			}
		}
	};

	/**
	 * In case considerGroupTitle is set then all labels of all filters of all groups will be post-fixed with the group title.
	 *
	 * @private
	 * @param {string} sGroupName the group name
	 */
	FilterBar.prototype._adaptGroupsTitle = function() {

		var n = null;

		if (this._mAdvancedAreaFilter) {
			for (n in this._mAdvancedAreaFilter) {
				if (n && n !== FilterBar.INTERNAL_GROUP) {
					this._adaptGroupTitle(n);
				}
			}
		}

	};

	/**
	 * Registration of a callback function. The provided callback function is executed to obtain the filters with values.
	 *
	 * @public
	 * @since 1.26.1
	 * @param {function} fCallBack Called when a variant must be applied
	 */
	FilterBar.prototype.registerGetFiltersWithValues = function(fCallBack) {

		this._fRegisterGetFiltersWithValues = fCallBack;
	};

	/**
	 * Registration of a callback function. The provided callback function is executed when saving a variant is triggered and must provide all
	 * relevant fields and values in JSON.
	 *
	 * @public
	 * @param {function} fCallBack Called when a variant must be fetched
	 */
	FilterBar.prototype.registerFetchData = function(fCallBack) {

		this._fRegisteredFetchData = fCallBack;
	};

	/**
	 * Registration of a callback function. The provided callback function is executed when a variant must be applied. The callback function will
	 * receive the corresponding data set containing all relevant data in JSON, as initially provided by the callback for fetchData.
	 *
	 * @public
	 * @param {function} fCallBack Called when a variant must be applied
	 */
	FilterBar.prototype.registerApplyData = function(fCallBack) {

		this._fRegisteredApplyData = fCallBack;
	};

	FilterBar.prototype._isTINAFScenario = function() {

		if (this._oVariantManagement) {

			if (!this._isUi2Mode()) {
				return true;
			}
// if (this._oVariantManagement instanceof SmartVariantManagement) {
// return true;
// }
		} else {

			/* eslint-disable no-lonely-if */
			// scenario: VH dialog: VM replaced with collective search control
			if (this._oCollectiveSearch && this.getAdvancedMode()) {
				return true;
			}
			/* eslint-enable no-lonely-if */
		}

		return false;
	};

	/**
	 * This method has to be called by the consumer to indicate that the data model is available.
	 *
	 * @public
	 */
	FilterBar.prototype.fireInitialise = function() {

		if (this._isTINAFScenario()) {
			this._createVisibleFilters();
			if (this.getAdvancedMode()) {
				this._ensureFilterLoaded(null);
			}
			this._fireInitialiseEvent();
		} else {
			this._initializeVariantManagement();
		}
	};

	/**
	 * Initializes the variant management, when the prerequisites are full filled. In this case the initialise-event will be triggered lated, after
	 * the variant management initialization. Triggers the initialise-event immediately, in case the pre-requisits are not full filled.
	 *
	 * @private
	 */
	FilterBar.prototype._initializeVariantManagement = function() {
		this._createVisibleFilters();
		// initialise SmartVariant stuff only if it is necessary! (Ex: has a persistencyKey)
		if (this._oVariantManagement && this.getPersistencyKey()) {

			this._fInitialiseVariants = jQuery.proxy(this._initialiseVariants, this);
			this._oVariantManagement.attachInitialise(this._fInitialiseVariants);

			this._oVariantManagement.initialise();

		} else {
			this._fireInitialiseEvent();
		}
	};

	FilterBar.prototype._fireInitialiseEvent = function() {

		this.fireEvent("initialise");
		this._bIsInitialized = true;

		this._updateToolbarText();
	};

	/**
	 * Is triggered, whenever the flex layer is initialized.
	 *
	 * @private
	 */
	FilterBar.prototype._initialiseVariants = function() {

		this._fireInitialiseEvent();
		if (this._oVariantManagement) { // mark any changes as irrelevant
			this._oVariantManagement.currentVariantSetModified(false);
		}
	};

	/**
	 * Informs the consumer of the filter bar that a new variant was applied.
	 *
	 * @private
	 * @param {string} sContext may be undefined, has the values 'RESET' or 'CANCEL' and indicates the initial trigger source
	 */
	FilterBar.prototype.fireAfterVariantLoad = function(sContext) {

		this._rerenderFilters();

		var oEvent = {
			context: sContext
		};
		this.fireEvent("afterVariantLoad", oEvent);
	};

	/**
	 * Informs the consumer of the filter bar, that a variant is about to be saved.
	 *
	 * @private
	 * @param {string} sContext may be undefined, have the value <code>STANDARD</code> and indicates the initial trigger source
	 */
	FilterBar.prototype.fireBeforeVariantSave = function(sContext) {

		var oEvent = {
			context: sContext
		};

		var bFlag = this._getConsiderFilterChanges();

		if (sContext) {
			this._setConsiderFilterChanges(false);
		}

		this.fireEvent("beforeVariantSave", oEvent);

		if (sContext) {
			this._setConsiderFilterChanges(bFlag);
		}
	};

	/**
	 * Removes all entries in the aggregation filterItems.
	 *
	 * @public
	 */
	FilterBar.prototype.removeAllFilterItems = function() {

		var i;
		var aFilters;

		this._aBasicAreaSelection = null;

		var aContent = this._oBasicAreaLayout.getContent();
		if (aContent) {
			for (i = 0; i < aContent.length; i++) { // 'variant management' ... 'plus', ' more-less', buttons container
				this._oBasicAreaLayout.removeContent(aContent[i]);
// if (aContent[i]).exit) {
// aContent[i].exit();
// }
			}
		}

		aFilters = this.getFilterItems();
		if (this._mAdvancedAreaFilter) {
			if ((this._mAdvancedAreaFilter[FilterBar.INTERNAL_GROUP]) && (this._mAdvancedAreaFilter[FilterBar.INTERNAL_GROUP].items)) {
				for (i = 0; i < this._mAdvancedAreaFilter[FilterBar.INTERNAL_GROUP].items.length; i++) {
					if (this._mAdvancedAreaFilter[FilterBar.INTERNAL_GROUP].items[i].filterItem) {
						aFilters.push(this._mAdvancedAreaFilter[FilterBar.INTERNAL_GROUP].items[i].filterItem);
					}
				}

				delete this._mAdvancedAreaFilter[FilterBar.INTERNAL_GROUP];
			}

			if (Object.keys(this._mAdvancedAreaFilter).length === 0) {
				this._mAdvancedAreaFilter = null;
			}
		}

		// this.removeAggregation("filterItems");

		this._destroyItems(aFilters);

		this._adaptButtonsEnablement();
	};

	/**
	 * Removes all entries in the aggregation filterGroupItems.
	 *
	 * @public
	 */
	FilterBar.prototype.removeAllFilterGroupItems = function() {

		var n = null, i;
		var aFilters = [];

		for (n in this._mAdvancedAreaFilter) {
			if (n) {
				if (this._mAdvancedAreaFilter[n] && this._mAdvancedAreaFilter[n].items) {
					for (i = 0; i < this._mAdvancedAreaFilter[n].items.length; i++) {
						if (this._mAdvancedAreaFilter[n].items[i].filterItem) {
							aFilters.push(this._mAdvancedAreaFilter[n].items[i].filterItem);
						}
					}

					delete this._mAdvancedAreaFilter[n];
				}
			}

			if (Object.keys(this._mAdvancedAreaFilter).length === 0) {
				this._mAdvancedAreaFilter = null;
			}
		}

		this.__bDeleteMode = true;
		// this.removeAggregation("filterGroupItems");
		this._destroyItems(aFilters);

		this.__bDeleteMode = false;

		this._adaptButtonsEnablement();
	};

	/**
	 * Removes all entries in the aggregations filterItems, filterGroupItems, basicSearch
	 *
	 * @public
	 */
	FilterBar.prototype.removeAllFilters = function() {
		this.removeAllFilterItems();
		this.removeAllFilterGroupItems();
		this.removeBasicSearch();
	};

	/**
	 * Removes the association basicSearch.
	 *
	 * @public
	 * @since 1.30.0
	 */
	FilterBar.prototype.removeBasicSearch = function() {
		this.setBasicSearch(null);
	};

	/**
	 * Retrieves filters belonging to the current variant.
	 *
	 * @public
	 * @param {boolean} bConsiderOnlyVisibleFields Indicates that only visible filters are retrieved
	 * @returns {array} filters Of the current variant
	 */
	FilterBar.prototype.getAllFilterItems = function(bConsiderOnlyVisibleFields) {

		var i, n = null;
		var aFilters = [];
		var oElement, oItem;

		if (!bConsiderOnlyVisibleFields) {
			this._ensureFilterLoaded(null);
		}

		if (this._mAdvancedAreaFilter) {
			for (n in this._mAdvancedAreaFilter) {
				if (n) {
					oElement = this._mAdvancedAreaFilter[n];
					if (oElement.items) {
						for (i = 0; i < oElement.items.length; i++) {
							oItem = oElement.items[i];
							if (oItem && oItem.filterItem && oItem.filterItem.getVisible()) {
								if (bConsiderOnlyVisibleFields) {
									if (oItem.filterItem.getVisibleInFilterBar() || oItem.filterItem.getPartOfCurrentVariant()) {
										aFilters.push(oItem.filterItem);
									}
								} else {
									aFilters.push(oItem.filterItem);
								}
							}
						}
					}
				}
			}
		}

		return aFilters;
	};

	/**
	 * Clears an eventual error state on all filter.
	 *
	 * @private
	 */
	FilterBar.prototype._clearErrorState = function() {

		var i;
		var oControl;

		var aFilterItems = this.determineMandatoryFilterItems();
		if (aFilterItems) {
			for (i = 0; i < aFilterItems.length; i++) {
				oControl = this.determineControlByFilterItem(aFilterItems[i]);
				if (oControl && oControl.setValueState) {
					oControl.setValueState(ValueState.None);
				}
			}
		}
	};

	FilterBar.prototype.getAggregation = function(sName) {

		if (sName == "filterGroupItems" && !this.__bDeleteMode) {
			this._ensureFilterLoaded(null);
		}

		return Grid.prototype.getAggregation.apply(this, arguments);
	};

	/**
	 * Provides filter information for lazy instantiation
	 *
	 * @protected
	 * @returns {array} of filter information
	 */
	FilterBar.prototype._getFilterInformation = function() {
		return [];
	};

	FilterBar.prototype._createVisibleFilters = function() {

		this._aFields = this._getFilterInformation();
		var i, oField;

		if (this._aFields && this._aFields.length > 0) {
			if (!this._mAdvancedAreaFilter) {
				this._mAdvancedAreaFilter = {};
			}

			for (i = 0; i < this._aFields.length; i++) {
				oField = this._aFields[i];

				if (oField.groupName !== FilterBar.INTERNAL_GROUP) {
					if (!this._mAdvancedAreaFilter[oField.groupName]) {
						this._mAdvancedAreaFilter[oField.groupName] = {};
						this._mAdvancedAreaFilter[oField.groupName].groupTitle = oField.groupTitle;
						this._mAdvancedAreaFilter[oField.groupName].filterItem = null;
						this._mAdvancedAreaFilter[oField.groupName].items = [];
					}
				}

				if (oField.visibleInAdvancedArea || (oField.groupName === FilterBar.INTERNAL_GROUP)) {

					this._instanciateFilterItem(oField);
				}
			}

			this._adaptButtonsEnablement();
		}
	};

	FilterBar.prototype._ensureFilterLoaded = function(aFilterNames) {
		var i, j, oField;

		if (this._aFields && this._aFields.length > 0) {

			for (j = 0; j < this._aFields.length; j++) {
				oField = this._aFields[j];

				if (!oField.factory) {
					continue;
				}

				if (aFilterNames) {
					for (i = 0; i < aFilterNames.length; i++) {
						if ((oField.fieldName === aFilterNames[i].name) && (oField.groupName === aFilterNames[i].group)) {
							this._instanciateFilterItem(oField);
							break;
						}
					}
				} else {
					this._instanciateFilterItem(oField);
				}

			}

			if (!aFilterNames) {
				this._aFields = [];
			}
		}

	};

	FilterBar.prototype._instanciateFilterItem = function(oField) {

		if (oField.factory) {
			oField.factory();
			delete oField.factory;
		}
	};

	/**
	 * Destroys the passed filters.
	 *
	 * @private
	 * @param {array} aFilterItems aggregation items
	 */
	FilterBar.prototype._destroyItems = function(aFilterItems) {

		if (aFilterItems && aFilterItems.length) {
			for (var i = 0; i < aFilterItems.length; i++) {
				aFilterItems[i].destroy();
			}
		}
	};

	/**
	 * Handles the visibility of the filters, during the variant appliance, according to the persisted information.
	 *
	 * @private
	 * @param {array} aPersData information about the filter fields
	 */
	FilterBar.prototype._reapplyVisibility = function(aPersData) {

		var i, n = null;
		var oItem;

		if (this._mAdvancedAreaFilter) {
			for (n in this._mAdvancedAreaFilter) {
				if (n) {
					var oGroup = this._mAdvancedAreaFilter[n];
					if (oGroup && oGroup.items) {
						for (i = 0; i < oGroup.items.length; i++) {
							oItem = oGroup.items[i];
							if (oItem && oItem.filterItem) {
								this._setPersVisibility(aPersData, oItem.filterItem);
							}
						}

						if (n !== FilterBar.INTERNAL_GROUP) {
							this._adaptLinkText(n);
						}
					}
				}
			}
		}
	};

	/**
	 * Determines if the current filter is marks as visible via the personalization
	 *
	 * @private
	 * @param {array} aPersData array of filters as obtain by the persistence layer
	 * @param {sap.ui.comp.filterBar.FilterItem} oFilterItem current filterItem
	 */
	FilterBar.prototype._setPersVisibility = function(aPersData, oFilterItem) {

		var sGroupName, sName;
		var oFilterInfo;

		if (oFilterItem) {
			sName = oFilterItem.getName();
			sGroupName = oFilterItem.getGroupName();

			oFilterInfo = this._checkForFilterInfo(aPersData, sName, sGroupName);
			if (this._isTINAFScenario()) {
				if (oFilterInfo) {
					oFilterItem.setVisibleInFilterBar(oFilterInfo.visibleInFilterBar);
					oFilterItem.setPartOfCurrentVariant(oFilterInfo.partOfCurrentVariant);
				} else {
					oFilterItem.setVisibleInFilterBar(false);
					oFilterItem.setPartOfCurrentVariant(sGroupName === FilterBar.INTERNAL_GROUP);
				}
			} else {
				/* eslint-disable no-lonely-if */
				if (oFilterInfo && (oFilterInfo.visibleInFilterBar !== undefined)) {
					oFilterItem.setVisibleInFilterBar((oFilterInfo.visibleInFilterBar));
					oFilterItem.setPartOfCurrentVariant((oFilterInfo.partOfCurrentVariant));
				} else { // old format
					if ((sGroupName !== FilterBar.INTERNAL_GROUP) && oFilterInfo && (oFilterInfo.group === sGroupName)) {

						oFilterItem.setVisibleInFilterBar((oFilterInfo !== null));
					}
				}
				/* eslint-enable no-lonely-if */
			}

			if (sGroupName === FilterBar.INTERNAL_GROUP) { // basic fields are always partOfCurentVariant
				oFilterItem.setPartOfCurrentVariant(true);
			}
		}
	};

	/**
	 * Determines the filter info from the persistence data for a specific filter.
	 *
	 * @private
	 * @param {array} aPersData array of filters as obtain by the persistence layer
	 * @param {string} sName Name of the filter
	 * @param {string} sGroupName Group name of the filter
	 * @returns {object} filter info object
	 */
	FilterBar.prototype._checkForFilterInfo = function(aPersData, sName, sGroupName) {

		var i;
		var oFilterInfo = null;

		if (aPersData && aPersData.length) {
			for (i = 0; i < aPersData.length; i++) {
				if ((aPersData[i].name === sName) && (aPersData[i].group === sGroupName)) {
					oFilterInfo = aPersData[i];
					break;
				}
			}
		}

		return oFilterInfo;
	};

	/**
	 * Creates the variant management control.
	 *
	 * @private
	 * @returns {sap.ui.comp.smartvariants.SmartVariantManagementUi2} the instance of variant management
	 */
	FilterBar.prototype._createVariantManagement = function() {

		var oVarMgm = new SmartVariantManagementUi2({
		// showExecuteOnSelection: true,
		// showShare: true
		});

		var oPersInfo = new PersonalizableInfo({
			type: "filterBar",
			keyName: "persistencyKey"
		});
		oPersInfo.setControl(this);

		oVarMgm.addPersonalizableControl(oPersInfo);

		oVarMgm.addStyleClass("sapUiCompFilterBarMarginLeft");
		return oVarMgm;
	};

	/**
	 * Retrieve all filters with values.
	 *
	 * @private
	 * @returns {array} of filters with values
	 */
	FilterBar.prototype._getFiltersWithValues = function() {

		if (this._fRegisterGetFiltersWithValues) {
			try {
				return this._fRegisterGetFiltersWithValues();
			} catch (ex) {
				jQuery.sap.log.error("callback for obtaining the filter count throws an exception");
			}
		}

		return null;
	};

	/**
	 * Retrieve the count for visible filters with values.
	 *
	 * @private
	 * @returns {number} count of visible filters with values
	 */
	FilterBar.prototype._getFiltersWithValuesCount = function() {

		var i, n = 0;

		var aFilters = this._getFiltersWithValues();
		if (aFilters) {
			for (i = 0; i < aFilters.length; i++) {
				if (aFilters[i].getVisible() && (aFilters[i].getVisibleInFilterBar() || aFilters[i].getPartOfCurrentVariant())) {
					n++;
				}
			}
		}

		if (this._oBasicSearchField && this._oBasicSearchField.getValue && this._oBasicSearchField.getValue()) {
			n++;
		}

		return n;
	};

	/**
	 * Determines if at least one filter is visible.
	 *
	 * @private
	 * @param {array} aFilterItemsWithValues contains all filters with values
	 * @param {sap.ui.comp.filterbar.FilterItem} oFilterItem filter to check
	 * @returns {boolean} indicated whether at least one filter is visible
	 */
	FilterBar.prototype._checkFilterForValue = function(aFilterItemsWithValues, oFilterItem) {

		var i;
		if (aFilterItemsWithValues) {
			for (i = 0; i < aFilterItemsWithValues.length; i++) {
				if (aFilterItemsWithValues[i] === oFilterItem) {
					return true;
				}
			}
		}

		return false;
	};

	FilterBar.prototype._handleVisibilityOfToolbar = function() {

		if (this.getAdvancedMode()) {

			var bFlag = false;

			var aContent = this._oToolbar.getContent();
			for (var i = 0; i < aContent.length; i++) {
				if (aContent[i] instanceof ToolbarSpacer) {
					continue;
				}

				if (aContent[i].getVisible && aContent[i].getVisible()) {
					bFlag = true;
					break;
				}
			}

			this._oToolbar.setVisible(bFlag);
		}
	};

	/**
	 * Toggles the filterbar mode Hide/Show.
	 *
	 * @private
	 */
	FilterBar.prototype._toggleHideShow = function() {

		this.setFilterBarExpanded(!this.getFilterBarExpanded());
	};

	/**
	 * Updates the 'Filters'-button text with the count of filters with values
	 *
	 * @private
	 */
	FilterBar.prototype._updateToolbarText = function() {

		var nFilterCount = this._getFiltersWithValuesCount();
		var sText = nFilterCount ? (this._oRb.getText("FILTER_BAR_ACTIVE_FILTERS", [
			nFilterCount
		])) : (this._oRb.getText("FILTER_BAR_ACTIVE_FILTERS_ZERO"));
		this._oFiltersButton.setText(sText);
	};

	/**
	 * Sets filterbar in collapsed/expanded mode.
	 *
	 * @public
	 * @since 1.26.1
	 * @param {boolean} bShowExpanded Mode
	 */
	FilterBar.prototype.setFilterBarExpanded = function(bShowExpanded) {

		if (this.getAdvancedMode()) {

			this.setProperty("filterBarExpanded", bShowExpanded);

			if (bShowExpanded) {
				this._oHideShowButton.setText(this._oRb.getText("FILTER_BAR_VH_HIDE"));
			} else {
				this._oHideShowButton.setText(this._oRb.getText("FILTER_BAR_VH_SHOW"));
			}
			// this._oHideShowButton.setVisible(true);
			this._oSearchButton.setVisible(this.getShowGoOnFB());

			this._oAdvancedPanel.setVisible(bShowExpanded);

		} else {

			var bExpanded = this._isPhone() ? false : bShowExpanded;

			this.setProperty("filterBarExpanded", bExpanded);

			if (this._isPhone()) {
				this._oHideShowButton.setVisible(false);
				this._oSearchButton.setVisible(this.getShowGoOnFB());

				this._oBasicAreaLayout.setVisible(false);

			} else {

				if (bExpanded) {
					this._oHideShowButton.setText(this._oRb.getText("FILTER_BAR_HIDE"));
				} else {
					this._oHideShowButton.setText(this._oRb.getText("FILTER_BAR_SHOW"));
				}
				this._oHideShowButton.setVisible(true);
				this._oSearchButton.setVisible(this.getShowGoOnFB());

				if (this._oHideShowButton.getEnabled()) {
					this._oBasicAreaLayout.setVisible(bExpanded);
				} else {
					this._oBasicAreaLayout.setVisible(false);
				}
			}

		}

		this._updateToolbarText();
	};

	/**
	 * Eventhandler for visibility change in the 'Filters'-dialog.
	 *
	 * @private
	 * @param {sap.m.Checkbox } oCheckBox on which the select-state was changed
	 * @param {sap.ui.comp.filterbar.FilterItem } oFilterItem manipulated by the checkbox
	 */
	FilterBar.prototype._selectionChangedInFilterDialog = function(oCheckBox, oFilterItem) {

		oFilterItem.setVisibleInFilterBar(oCheckBox.getSelected());

		if (this._getConsiderFilterChanges() && this._oVariantManagement && this._oVariantManagement.getEnabled()) {
			this._oVariantManagement.currentVariantSetModified(true);
		}

		this._bDirtyViaDialog = true;
	};

	/**
	 * Cross-checks if a mandatory filter has a value.
	 *
	 * @private
	 * @param {object } oEvent general event object
	 */
	FilterBar.prototype._mandatoryFilterChange = function(oEvent) {

		if (!oEvent) {
			return;
		}

		var params = oEvent.getParameters();
		if (!params || !params.oSource) {
			return;
		}

		var oItem = this._determineByControl(params.oSource);
		if (oItem && oItem.checkbox) {

			var oFilterItem = oItem.filterItem;

			if (!oFilterItem.getMandatory()) {
				return;
			}

			var bHasValue = this._hasFilterValue(oFilterItem);
			if (oFilterItem.getVisibleInFilterBar()) {
				if (bHasValue) {
					oItem.checkbox.setEnabled(true);
				} else {
					oItem.checkbox.setEnabled(false);
				}
			} else {
				/* eslint-disable no-lonely-if */
				if (!bHasValue) {
					oFilterItem.setVisibleInFilterBar(true);
					oItem.checkbox.setSelected(true);
					oItem.checkbox.setEnabled(false);
				}
				/* eslint-enable no-lonely-if */
			}
		}
	};

	/**
	 * Called from 'Filters'-dialog and creates the form containing all filters.
	 *
	 * @private
	 * @returns {sap.ui.layout.form.Form} the filter form
	 */
	FilterBar.prototype._createFiltersAndAdaptBasicArea = function() {

		var oForm;

		this._setConsiderFilterChanges(false);
		this._recreateBasicAreaContainer(true);

		oForm = this._createFilters();
		this._setConsiderFilterChanges(true);

		return oForm;
	};

	/**
	 * Determines how many filters of a specific group are yet not part of the current variant.
	 *
	 * @private
	 * @param {string} sGroupName name of the current group
	 * @returns {number} count of filters, for the current group, yet not part of the current variant
	 */
	FilterBar.prototype._determineNotAssignedFiltersCount = function(sGroupName) {

		var nCount = 0, i, oFilterItem;

		if (this._mAdvancedAreaFilter[sGroupName] && this._mAdvancedAreaFilter[sGroupName].items) {
			for (i = 0; i < this._mAdvancedAreaFilter[sGroupName].items.length; i++) {
				oFilterItem = this._mAdvancedAreaFilter[sGroupName].items[i].filterItem;
				if (!oFilterItem.getVisible()) {
					continue;
				}
				if (!oFilterItem.getPartOfCurrentVariant() && !oFilterItem.getVisibleInFilterBar()) {
					nCount++;
				}
			}
		}

		return nCount;
	};

	/**
	 * Handles the visibility of the passed oItem; adapts the more-link text; handles the visibility for the form-container.
	 *
	 * @private
	 * @param {object} oItem representing a filter
	 * @param {string} sGroupName name of the current group
	 */
	FilterBar.prototype._rerenderGroup = function(oItem, sGroupName) {

		var i;
		var oFilterItem;

		this._rerenderItem(oItem);
		this._adaptLinkText(sGroupName);

		if (oItem.formelement) {

			if (this._mAdvancedAreaFilter[sGroupName] && this._mAdvancedAreaFilter[sGroupName].items && this._mAdvancedAreaFilter[sGroupName].formcontainer) {
				for (i = 0; i < this._mAdvancedAreaFilter[sGroupName].items.length; i++) {

					oFilterItem = this._mAdvancedAreaFilter[sGroupName].items[i].filterItem;
					if (oFilterItem && oFilterItem.getVisible()) {
						this._mAdvancedAreaFilter[sGroupName].formcontainer.setVisible(true);
						return;
					}
				}

				this._mAdvancedAreaFilter[sGroupName].formcontainer.setVisible(false);
			}
		}
	};

	/**
	 * Sets the group's 'More'- link text containing the info about not yet assigned filters to the current group.
	 *
	 * @private
	 * @param {string} sGroupName name of the group
	 * @param {sap.m.Link } oLink control
	 * @param {number } nNotAssignedFilterCount count of not yet assigned filters
	 */
	FilterBar.prototype._setLinkTextAndCount = function(sGroupName, oLink, nNotAssignedFilterCount) {

		var sText;

		if (nNotAssignedFilterCount) {
			sText = this._oRb.getText("FILTER_BAR_SHOW_MORE_FILTERS", [
				nNotAssignedFilterCount
			]);
		} else {
			sText = this._oRb.getText("FILTER_BAR_SHOW_CHANGE_FILTERS");
		}

		oLink.setText(sText);
	};

	/**
	 * Sets the group's 'More'- link text containing the info about not yet assigned filters to the current group.
	 *
	 * @private
	 * @param {string} sGroupName name of the group
	 * @param {sap.m.Link } oLink control
	 */
	FilterBar.prototype._setLinkText = function(sGroupName, oLink) {

		var nNotAssignedFilterCount = this._determineNotAssignedFiltersCount(sGroupName);

		this._setLinkTextAndCount(sGroupName, oLink, nNotAssignedFilterCount);
	};

	/**
	 * Creates a link control for the current group. The link will open the 'Add/Remove Filters'- dialog
	 *
	 * @private
	 * @param {string} sGroupName name of the group
	 * @param {Title} oGroupTitle title of the group to which the link should belong
	 * @returns {sap.m.Link} link control
	 */
	FilterBar.prototype._createLink = function(sGroupName, oGroupTitle) {

		var that = this;
		var oLink = new Link();
		this._setLinkText(sGroupName, oLink);

		oLink.attachPress(function() {
			that._createAddRemoveFiltersDialog(sGroupName, oLink);
		});

		if (oGroupTitle) {
			oLink.addAriaLabelledBy(oGroupTitle);
		}

		return oLink;
	};

	/**
	 * Checks if running on phone.
	 *
	 * @private
	 * @returns {boolean} true if phone, false other wise
	 */
	FilterBar.prototype._isPhone = function() {

		return (Device.system.phone) ? true : false;
	};

	/**
	 * Checks if running on tablet.
	 *
	 * @private
	 * @returns {boolean} true if phone, false other wise
	 */
	FilterBar.prototype._isTablet = function() {
		return (Device.system.tablet && !Device.system.desktop) ? true : false;
	};

	FilterBar.prototype._createForm = function(oAdvancedLayout) {
		var that = this;
		var FiltersForm = null;

		FiltersForm = Form.extend('sap.ui.comp.filterbar.Form', {
			metadata: {},
			renderer: function(oRm, oControl) {
				FormRenderer.render.apply(this, arguments);
			}
		});
		(function() {
			FiltersForm.prototype.contentOnAfterRendering = function() {

				Form.prototype.contentOnAfterRendering.apply(this, arguments);

				that._adaptStyleSheet();

				if (!that._isPhone()) {
					that._repositionAddToFilterBarLabel();
				}
			};
		}());

		return new FiltersForm({
			editable: true,
			layout: oAdvancedLayout
		});
	};

	FilterBar.prototype._adaptStyleSheet = function() {

		var i, sOverFlowValue;
		var oItem, oTitleElement, n = null;

		for (n in this._mAdvancedAreaFilter) {
			if (n && this._mAdvancedAreaFilter[n].items) {

				for (i = 0; i < this._mAdvancedAreaFilter[n].items.length; i++) {
					oItem = this._mAdvancedAreaFilter[n].items[i];

					if (oItem && oItem.control && oItem.control instanceof MultiInput) {

						oTitleElement = oItem.control.$();
						if (oTitleElement) {
							sOverFlowValue = oTitleElement.parent().css("overflow");
							if (sOverFlowValue !== "visible") {
								oTitleElement.parent().css({
									"overflow": "visible"
								});
							}
						}
					}
				}
			}
		}

	};

	/**
	 * Creates the form containing all visible filters belonging to the current variant
	 *
	 * @private
	 * @returns {sap.ui.layout.form.Form} form with all filters
	 */
	FilterBar.prototype._createFilters = function() {

		var that = this;
		var n = null, i;
		var sGroupName;
		var oFormContainer = null, oFormElement, aFormElements, oItem;
		var oLink, oLabel, oGroupTitle;
		var oCheckBox = null;
		var bHasValue;
		var oAddToFilterBarLabel = null;
		var bFirstGroup = true;
		var nInvisibleCount;

		var oAdvancedLayout = new ResponsiveGridLayout();
		oAdvancedLayout.setColumnsL(1);
		oAdvancedLayout.setColumnsM(1);

		var oForm = this._createForm(oAdvancedLayout);

		oForm.addStyleClass("sapUiCompFilterBarDialogForm");

		if (this._oVariantManagement) {
			var idx = this._oToolbar.indexOfContent(this._oVariantManagement);
			if (idx >= 0) {
				var oClonedVM = this._oVariantManagement.clone();
				oClonedVM._setSelectionByKey(this._oVariantManagement.getSelectionKey());
				this._oToolbar.removeContent(this._oVariantManagement);
				this._oToolbar.insertContent(oClonedVM, idx);

				this._oVariant.key = this._oVariantManagement.getSelectionKey();
				this._oVariant.modified = this._oVariantManagement.currentVariantGetModified();

				oFormContainer = new FormContainer();

				this._oVariantManagement.setLayoutData(new GridData({
					span: "L10 M10 S12"
				}));
				oFormElement = new FormElement({
					fields: this._oVariantManagement
				});

				oFormContainer.addFormElement(oFormElement);

				if (!this._isPhone()) { // label 'Add To Filterbar'

					oAddToFilterBarLabel = new Label({
					// text: this._oRb.getText("FILTER_BAR_SHOW_IN_FILTERBAR")
					});

					oAddToFilterBarLabel.setLayoutData(new GridData({
						span: "L2 M2 S2"
					}));
					oAddToFilterBarLabel.addStyleClass("sapUiCompFilterBarAddFilterLabel");
					this._oAddToFilterBarLabel = oAddToFilterBarLabel;

					oFormElement = new FormElement({
						label: oAddToFilterBarLabel
					});

					oFormContainer.addFormElement(oFormElement);
				}

				oForm.addFormContainer(oFormContainer);
			}

			oForm.addStyleClass("sapUiCompFilterBarGroupTitle");
		}

		// basic serach field
		if (this._oBasicSearchField) {
			if (!oFormContainer) {
				oFormContainer = new FormContainer();
			}

			if (!this._isPhone()) {
				this._oToolbar.removeContent(this._oBasicSearchField);
				this._oBasicSearchFieldClone = this._oBasicSearchField.clone();

				this._oToolbar.insertContent(this._oBasicSearchFieldClone, 1);
			} else {
				/* eslint-disable no-lonely-if */
				if (this.getAdvancedMode()) {
					this._oBasicSearchFieldClone = this._oBasicSearchField.clone();
				}
				/* eslint-enable no-lonely-if */
			}

			if (this._isPhone()) {
				this._oBasicSearchField.setLayoutData(new GridData({
					span: "L8 M8 S12"
				}));
			} else {
				this._oBasicSearchField.setLayoutData(new GridData({
					span: "L8 M8 S11",
					indent: "L0 M3 S0"
				}));
			}

			if (this._isPhone() && this.getAdvancedMode()) {
				oFormElement = new FormElement({
					fields: [
						this._oBasicSearchFieldClone
					]
				});
			} else {
				oFormElement = new FormElement({
					fields: [
						this._oBasicSearchField
					]
				});
			}

			oFormContainer.addFormElement(oFormElement);
		}

		this._ensureFilterLoaded(null);

		// filters
		var aFilters = this._getFiltersWithValues();
		this._fRegisteredFilterChangeHandlers = function(oEvent) {
			that._mandatoryFilterChange(oEvent);
		};
		this.attachFilterChange(this._fRegisteredFilterChangeHandlers);

		this._oVariant.content = this.fetchVariant();
		this._oInitialVariant = {};
		jQuery.extend(true, this._oInitialVariant, this._oVariant);

		for (n in this._mAdvancedAreaFilter) {
			if (n && this._mAdvancedAreaFilter[n].items) {

				if (n === FilterBar.INTERNAL_GROUP) {
					sGroupName = this._oRb.getText("FILTER_BAR_BASIC_GROUP");
				} else {
					sGroupName = this._mAdvancedAreaFilter[n].filterItem.getGroupTitle();
				}

				oGroupTitle = new Title({
					text: sGroupName
				});
				oFormContainer = new FormContainer({
					title: oGroupTitle
				});

				if (bFirstGroup && sGroupName === "" && oAddToFilterBarLabel) {
					oAddToFilterBarLabel.removeStyleClass("sapUiCompFilterBarAddFilterLabel");
					oAddToFilterBarLabel.addStyleClass("sapUiCompFilterBarAddFilterLabelNoGroup");
				}

				bFirstGroup = false;
				nInvisibleCount = 0;

				this._mAdvancedAreaFilter[n].formcontainer = oFormContainer;

				for (i = 0; i < this._mAdvancedAreaFilter[n].items.length; i++) {
					oItem = this._mAdvancedAreaFilter[n].items[i];

					if (oItem.control.getWidth) {
						oItem.width = oItem.control.getWidth();

						if (oItem.control.setWidth) {
							oItem.control.setWidth("100%");
						}
					}

					oLabel = oItem.filterItem.getLabelControl(this.getId());

					if (this.getConsiderGroupTitle()) {
						oLabel.setText(oItem.filterItem.getLabel());
					}

					oCheckBox = new CheckBox({
						tooltip: this._oRb.getText("FILTER_BAR_SHOW_IN_FILTERBAR")
					});
					oCheckBox.setSelected(oItem.filterItem.getVisibleInFilterBar());
					if (oItem.filterItem.getMandatory()) {
						bHasValue = this._checkFilterForValue(aFilters, oItem.filterItem);
						if (!bHasValue && oItem.filterItem.getVisibleInFilterBar()) {
							oCheckBox.setEnabled(false);
						}
					}
					oCheckBox.attachSelect(jQuery.proxy(this._selectionChangedInFilterDialog, this, oCheckBox, oItem.filterItem));

					if (this._isPhone()) {
						oLabel.setLayoutData(new GridData({
							span: "L3 M3 S12"
						}));
						oItem.control.setLayoutData(new GridData({
							span: "L8 M8 S12"
						}));

						oCheckBox.setVisible(false);

					} else {
						oLabel.setLayoutData(new GridData({
							span: "L3 M3 S12"
						}));
						oItem.control.setLayoutData(new GridData({
							span: "L8 M8 S11"
						}));
						oCheckBox.setLayoutData(new GridData({
							span: "L1 M1 S1"
						}));
					}

					oFormElement = new FormElement({
						label: oLabel,
						fields: [
							oItem.control, oCheckBox
						]
					});
					oFormElement.setVisible(oItem.filterItem.getVisible() && (oItem.filterItem.getVisibleInFilterBar() || oItem.filterItem.getPartOfCurrentVariant()));
					if (!oItem.filterItem.getVisible()) {
						nInvisibleCount++;
					}

					oItem.formelement = oFormElement;
					oItem.checkbox = oCheckBox;

					oFormContainer.addFormElement(oFormElement);
				}

				// More link
				aFormElements = oFormContainer.getFormElements();
				if (aFormElements && aFormElements.length > 0) {

					if ((n !== FilterBar.INTERNAL_GROUP) && !this.getAdvancedMode()) {
						oLink = this._createLink(n, oGroupTitle);
						if (oLink) {

							if (this._isPhone()) {
								oLink.setLayoutData(new GridData({
									span: "L8 M8 S12"
								}));
							} else {
								oLink.setLayoutData(new GridData({
									span: "L8 M8 S12",
									indent: "L3 M3 S0"
								}));
							}

							oFormElement = new FormElement({
								fields: [
									oLink
								]
							});

							this._mAdvancedAreaFilter[n].link = oLink;

							oFormContainer.addFormElement(oFormElement);
						}

						if (nInvisibleCount === aFormElements.length) {
							oFormContainer.setVisible(false);
						}
					}

					oForm.addFormContainer(oFormContainer);
				}
			}
		}

		return oForm;

	};

	/**
	 * Creates the content of the basic area, either by replacing the controls with their clones, or removing the clones and moving the original
	 * controls back to it.
	 *
	 * @private
	 * @param {boolean} bUseClone indicates if clones or 'original' controls should be placed inside the basic area
	 */
	FilterBar.prototype._recreateBasicAreaContainer = function(bUseClone) {

		var n = null, i;
		var oControl, oLabel;
		var oFilterGroupItem, oContainer;

		if (this._oVariantManagement) {
			var aContent = this._oToolbar.getContent();
			this._oToolbar.removeContent(aContent[0]);
			this._oToolbar.insertContent(this._oVariantManagement, 0);
		}

		if (this._oBasicSearchField) {
			if (!this._isPhone()) {
				if (this._oBasicSearchFieldClone) {
					this._oToolbar.removeContent(this._oBasicSearchFieldClone);
					this._oBasicSearchFieldClone = null;
				}
				if (this._oToolbar.indexOfContent(this._oBasicSearchField) < 0) {
					this._oToolbar.insertContent(this._oBasicSearchField, 1);
				}
			} else {
				/* eslint-disable no-lonely-if */
				if (this.getAdvancedMode()) {
					this._oBasicSearchFieldClone = null;
				}
				/* eslint-enable no-lonely-if */
			}
		}

		this._oBasicAreaLayout.removeAllContent();

		for (n in this._mAdvancedAreaFilter) {
			if (n && this._mAdvancedAreaFilter[n].items) {

				for (i = 0; i < this._mAdvancedAreaFilter[n].items.length; i++) {
					oFilterGroupItem = this._mAdvancedAreaFilter[n].items[i].filterItem;

					if (bUseClone) {
						if (!oFilterGroupItem.getVisible() || !oFilterGroupItem.getVisibleInFilterBar()) {
							continue; // handle only visible filters
						}
						oControl = this._mAdvancedAreaFilter[n].items[i].control.clone();
						oLabel = oFilterGroupItem.getLabelControl(this.getId()).clone();

						if (this.getConsiderGroupTitle()) {
							// in advanced filters dialog the label should not contain group title
							oFilterGroupItem.getLabelControl(this.getId()).setText(oFilterGroupItem.getLabel());
						}
					} else {
						oControl = this._mAdvancedAreaFilter[n].items[i].control;
						oLabel = oFilterGroupItem.getLabelControl(this.getId());

						if (this._mAdvancedAreaFilter[n].items[i].width) {
							oControl.setWidth(this._mAdvancedAreaFilter[n].items[i].width);
						}
					}

					oContainer = this._addControlToBasicAreaContainer(oFilterGroupItem, oControl, oLabel);
					if (oContainer) {
						oContainer.setVisible(oFilterGroupItem.getVisible() && oFilterGroupItem.getVisibleInFilterBar());
						this._mAdvancedAreaFilter[n].items[i].container = oContainer;
					}
				}
			}
		}
	};

	/**
	 * Search was executed. Check afterwards if any filer is in error state. Close dialog only in case non of the filters is in error state.
	 *
	 * @private
	 * @param {sap.ui.layout.form.Form} oForm representing the filters
	 */
	FilterBar.prototype._searchRequested = function(oForm) {

		if (this.search()) {
			this._oFilterDialog.close();
		}
	};

	/**
	 * Close the 'Filters'-dialog and restores the filterbar.
	 *
	 * @private
	 * @param {sap.ui.layout.form.Form} oForm representing the filters
	 */
	FilterBar.prototype._closeDialogAndRestoreFilterBar = function(oForm) {

		this._sSearchCriteriaInFiltersDialog = null;

		this._oVariant = {};

		oForm.removeAllFormContainers();

		this._recreateBasicAreaContainer();

		// this._oBasicAreaLayout.rerender(); // seems to be required from 1.32...

		this._deleteProperties();
		this._adaptGroupsTitle();

		if (this._fRegisteredFilterChangeHandlers) {

			this.detachFilterChange(this._fRegisteredFilterChangeHandlers);
			this._fRegisteredFilterChangeHandlers = null;
		}

		this._updateToolbarText();
	};

	FilterBar.prototype._variantSave = function(oEvent) {

		var sKey;
		this._oVariant = {};

		this.fireBeforeVariantSave();

		if (this._oVariantManagement && this._oFilterDialog) {
			sKey = this._oVariantManagement.getSelectionKey();
			this._oVariant.key = sKey;
			this._oVariant.modified = false;
			this._oVariant.content = this._oVariantManagement.getVariantContent(this, sKey);
		}
	};

	FilterBar.prototype._afterVariantSave = function(oEvent) {

		this.fireAfterVariantSave();
	};

	FilterBar.prototype._variantSavePressed = function(oEvent) {

		if (this._oVariantManagement) {

			var sKey = this._oVariantManagement.getSelectionKey();
			var oCurrentItem = this._oVariantManagement.getItemByKey(this._oVariantManagement.getSelectionKey());

			if (!this._oVariantManagement._isIndustrySolutionModeAndVendorLayer() && ((sKey === this._oVariantManagement.getStandardVariantKey()) || (oCurrentItem && oCurrentItem.getReadOnly && oCurrentItem.getReadOnly()))) {
				this._oVariantManagement._openSaveAsDialog();
			} else {
				this._oVariantManagement._variantSavePressed();
			}

			this._bDirtyViaDialog = false;

			if (this._oInitialVariant && this._oVariantManagement._getVariantContent) {
				this._oInitialVariant.content = this._oVariantManagement._getVariantContent(this, sKey);
			}
		}

	};

	FilterBar.prototype._findFirstVisibleGroup = function() {
		var n = null;

		for (n in this._mAdvancedAreaFilter) {
			if (n && this._mAdvancedAreaFilter[n].formcontainer && this._mAdvancedAreaFilter[n].formcontainer.getVisible()) {
				return this._mAdvancedAreaFilter[n].formcontainer.getTitle();
			}
		}

		return null;
	};

	FilterBar.prototype._repositionAddToFilterBarLabel = function() {

		if (!this._isPhone()) {

			var oTitle = this._findFirstVisibleGroup();

			if (oTitle && this._oAddToFilterBarLabel) {

				var oTitleElement = oTitle.$();
				if (oTitleElement) {

					var oTitlePosition = oTitleElement.offset();
					var oLabelElement = this._oAddToFilterBarLabel.$();
					if (oLabelElement) {
						var oLabelOffset = oLabelElement.offset();
						if (oLabelOffset && oTitlePosition) {
							oLabelOffset.top = oTitlePosition.top + 5;
							oLabelOffset.right = 32;
							oLabelElement.offset(oLabelOffset);
						}
					}
				}
			}

			if (this._oAddToFilterBarLabel && !this._oAddToFilterBarLabel.getText()) {
				this._oAddToFilterBarLabel.setText(this._oRb.getText("FILTER_BAR_SHOW_IN_FILTERBAR"));
			}
		}
	};

	FilterBar.prototype._cancelFilterDialog = function() {

		if (this._oInitialVariant && this._oInitialVariant.content && this._bDirtyViaDialog) {
			this.applyVariant(this._oInitialVariant.content, "CANCEL");

			if (this._oVariantManagement) {
				this._oVariantManagement._setSelectionByKey(this._oInitialVariant.key);
				this._oVariantManagement.currentVariantSetModified(this._oInitialVariant.modified);
			}

			this.fireCancel();
		}
	};

	/**
	 * Creates and shows the 'Filters'-dialog.
	 *
	 * @private
	 */
	FilterBar.prototype._showFilterDialog = function() {

		jQuery.sap.require("sap.m.Dialog");

		var that = this;

		this._oFilterDialog = new sap.m.Dialog({
			stretch: Device.system.phone
		});
		this._oFilterDialog.setParent(this);

		this._oFilterDialog.addStyleClass("sapUiPopupWithPadding");

		if (this.$().closest(".sapUiSizeCompact").length > 0) {
			this._oFilterDialog.addStyleClass("sapUiSizeCompact");
		}

		this._oFilterDialog.addStyleClass("sapUiCompFilterBarDialog");
		if (!this._isPhone()) {
			this._oFilterDialog.addStyleClass("sapUiCompFilterBarDialogNonPhone");
		}

		// oDialog.afterClose
		this._oFilterDialog.setTitle(this._oRb.getText("FILTER_BAR_ADV_FILTERS_DIALOG"));

		this._oFilterDialog.addStyleClass("sapMH4FontSize");
		this._oFilterDialog.addStyleClass("sapMH4Style");

		this._oFilterDialog.setVerticalScrolling(true);

		var oSubHeader = new Bar();
		var oSearchField = new SearchField({
			placeholder: this._oRb.getText("FILTER_BAR_SEARCH")
		});
		oSearchField.attachLiveChange(function(oEvent) {
			if (that._oFilterDialog) {
				that._triggerSearchInFilterDialog(oEvent);
			}
		});

		this._oFiltersSearchField = oSearchField;

		oSubHeader.addContentRight(oSearchField);
		this._oFilterDialog.setSubHeader(oSubHeader);

		var oForm = this._createFiltersAndAdaptBasicArea();
		if (!oForm) {
			jQuery.sap.log.error("Content for Advanced Filters Dialog could not be created");
			return;
		}
		this._oFilterDialog.addContent(oForm);

		this._bOKFiltersDialogTriggered = false;

		this._oFilterDialog.attachBeforeClose(function() {

			if (!that._bOKFiltersDialogTriggered) {
				that._cancelFilterDialog();
			}
			that._closeDialogAndRestoreFilterBar(oForm);
		});

		this._oFilterDialog.attachAfterClose(function() {
			that._oBasicAreaLayout.rerender(); // seems to be required from 1.32...

			that._oInitialVariant = null;
			that._oFilterDialog.destroy();
			that._oFilterDialog = null;

			that._showHintText();

			that.fireFiltersDialogClosed();
		});

		this._oFilterDialog.setInitialFocus(oSearchField);

		this._addFilterDialogButtons(oForm);

		if (!this._isPhone()) {
			this._oFilterDialog.setContentWidth("42rem");
		}

		var nHeight = jQuery(document).height() / 16;
		this._oFilterDialog.setContentHeight((nHeight - 17) + "rem");

		this._bDirtyViaDialog = false;
		this._oFilterDialog.open();
	};

	FilterBar.prototype._addFilterDialogButtons = function(oForm) {

		jQuery.sap.require("sap.m.OverflowToolbarPriority");
		jQuery.sap.require("sap.m.OverflowToolbarLayoutData");

		var that = this;
		var oModel;
		var oVariantSaveButton = null, oClearButton, oRestoreButton, oSearchButton, oCancelButton;

		// search button
		oSearchButton = new Button(this.getId() + "-btnGoFilterDialog", {
			text: this._oRb.getText("FILTER_BAR_GO"),
			press: function() {
				that._bOKFiltersDialogTriggered = true;
				oSearchButton.focus();
				that._searchRequested(oForm);
			},
			layoutData: new sap.m.OverflowToolbarLayoutData({
				priority: sap.m.OverflowToolbarPriority.NeverOverflow
			}),
			type: ButtonType.Emphasized
		});
		this._oFilterDialog.addButton(oSearchButton);

		if (!this.getAdvancedMode()) {

			// variant save button
			if (this._oVariantManagement && this._oVariantManagement.getVisible() && this._oVariantManagement.oVariantSave) {
				oVariantSaveButton = new Button(this.getId() + "-btnSaveFilterDialog", {
					text: this._oRb.getText("VARIANT_MANAGEMENT_SAVE"),
					enabled: this._oVariantManagement.oVariantSave.getEnabled(),
					press: function() {
						that._variantSavePressed();
					},
					layoutData: new sap.m.OverflowToolbarLayoutData({
						priority: sap.m.OverflowToolbarPriority.Low
					})
				});

				oModel = this._oVariantManagement.getModel("save_enablement");

				oVariantSaveButton.setModel(oModel);
				oVariantSaveButton.bindProperty("enabled", "/enabled");

				this._oFilterDialog.addButton(oVariantSaveButton);

			}

			// clear button
			oClearButton = new Button(this.getId() + "-btnClearFilterDialog", {
				text: this._oRb.getText("FILTER_BAR_CLEAR"),
				visible: this.getShowClearButton(),
				press: function() {
					that.clear();
				},
				layoutData: new sap.m.OverflowToolbarLayoutData({
					priority: sap.m.OverflowToolbarPriority.Low
				})
			});

			this._oFilterDialog.addButton(oClearButton);

			// restore button
			oRestoreButton = new Button(this.getId() + "-btnRestoreFilterDialog", {
				text: this._oRb.getText("FILTER_BAR_RESTORE"),
				visible: this.getShowRestoreButton(),
				press: function() {
					that.reset();

					if (that._oVariantManagement) {
						that._oVariantManagement.currentVariantSetModified(false);
					}
				},
				layoutData: new sap.m.OverflowToolbarLayoutData({
					priority: sap.m.OverflowToolbarPriority.Low
				})
			});

			if (oModel) {
				oRestoreButton.setEnabled(this._oVariantManagement.oVariantSave.getEnabled());
				oRestoreButton.setModel(oModel);
				oRestoreButton.bindProperty("enabled", "/enabled");
			}

			this._oFilterDialog.addButton(oRestoreButton);

			// Cancel button
			oCancelButton = new Button(this.getId() + "-btnCancelFilterDialog", {
				text: this._oRb.getText("FILTER_BAR_CANCEL"),
				press: function() {
					that._oFilterDialog.close();
				},
				layoutData: new sap.m.OverflowToolbarLayoutData({
					priority: sap.m.OverflowToolbarPriority.High
				})
			});
			this._oFilterDialog.addButton(oCancelButton);
		}
	};

	FilterBar.prototype._createButtons = function(oToolbar) {

		var that = this;

		this._oHideShowButton = new Button(this.getId() + "-btnShowHide", {
			text: this._oRb.getText("FILTER_BAR_HIDE"),
			type: ButtonType.Transparent,
			enabled: false
		});
		this._oHideShowButton.attachPress(function() {
			that._toggleHideShow();
		});
		oToolbar.addContent(this._oHideShowButton);

		// clear button
		this._oClearButtonOnFB = new Button(this.getId() + "-btnClear", {
			visible: this.getShowClearOnFB(),
			text: this._oRb.getText("FILTER_BAR_CLEAR"),
			type: ButtonType.Transparent,
			enabled: false
		});
		this._oClearButtonOnFB.attachPress(function() {
			that.clear();
		});
		oToolbar.addContent(this._oClearButtonOnFB);

		this._oRestoreButtonOnFB = new Button(this.getId() + "-btnRestore", {
			visible: this.getShowRestoreOnFB(),
			text: this._oRb.getText("FILTER_BAR_RESTORE"),
			type: ButtonType.Transparent,
			enabled: false
		});
		this._oRestoreButtonOnFB.attachPress(function() {
			that.reset();
			if (that._oVariantManagement) {
				that._oVariantManagement.currentVariantSetModified(false);
			}
		});
		oToolbar.addContent(this._oRestoreButtonOnFB);

		this._oFiltersButton = new Button(this.getId() + "-btnFilters", {
			text: this._oRb.getText("FILTER_BAR_ACTIVE_FILTERS_ZERO"),
			type: ButtonType.Transparent,
			enabled: false
		});

		this._oFiltersButton.attachPress(function() {
			that._showFilterDialog();
		});
		oToolbar.addContent(this._oFiltersButton);

		this._oSearchButton = new Button(this.getId() + "-btnGo", {
			visible: this.getShowGoOnFB(),
			text: this._oRb.getText("FILTER_BAR_GO"),
			type: ButtonType.Emphasized
		});
		this._oSearchButton.attachPress(function() {
			that._oSearchButton.focus();
			that.search();
		});
		oToolbar.addContent(this._oSearchButton);
	};

	/**
	 * Creates the variant management.
	 *
	 * @private
	 * @returns {sap.ui.comp.variants.VariantManagement} the VM control
	 */
	FilterBar.prototype._createVariantLayout = function() {

		this._oVariantManagement = this._createVariantManagement();
		this._oVariantManagement.setVisible(false);

		this._fSaveVariant = jQuery.proxy(this._variantSave, this);
		this._oVariantManagement.attachSave(this._fSaveVariant);

		this._fAfterSaveVariant = jQuery.proxy(this._afterVariantSave, this);
		this._oVariantManagement.attachAfterSave(this._fAfterSaveVariant);

		return this._oVariantManagement;
	};

	/**
	 * Creates the layout for the basic area.
	 *
	 * @private
	 * @returns {sap.m.Toolbar} the toolbar
	 */
	FilterBar.prototype._createToolbar = function() {

		var oToolbar = new Toolbar();

		var oVariantLayout = this._createVariantLayout();
		oToolbar.addContent(oVariantLayout);

		oToolbar.addContent(new ToolbarSpacer());

		this._createButtons(oToolbar);

		oToolbar.addStyleClass("sapUiCompFilterBarToolbar");
		oToolbar.addStyleClass("sapUiCompFilterBarToolbarMarker");
		return oToolbar;
	};

	/**
	 * Creates the layout for the basic area.
	 *
	 * @private
	 * @returns {sap.ui.layout.HorizontalLayout} the layout for the selected fields
	 */
	FilterBar.prototype._createBasicAreaLayout = function() {

		// form for selection parameters
		var oBasicAreaLayout = new HorizontalLayout({
			visible: false
		});
		oBasicAreaLayout.setAllowWrapping(true);

		oBasicAreaLayout.addStyleClass("sapUiCompFilterBarWidth100");
		oBasicAreaLayout.addStyleClass("sapUiCompFilterBarBasicArea");
		return oBasicAreaLayout;
	};

	/**
	 * Creates the form for the advanced area, where all the filters will be placed. Only relevant for the value help scenario.
	 *
	 * @private
	 * @returns {sap.ui.layout.form.Form} the form for the filter fields
	 */
	FilterBar.prototype._createAdvancedAreaForm = function() {

		var oAdvancedLayout = new ResponsiveGridLayout();

		oAdvancedLayout.addStyleClass("sapUiCompFilterBarPaddingForm");

		oAdvancedLayout.setColumnsL(3);
		oAdvancedLayout.setColumnsM(2);
		var oForm = new Form({
			editable: true
		});
		oForm.setLayout(oAdvancedLayout);

		return oForm;
	};

	/**
	 * Adds a selection field to a FormContainer and this FormContainer to the basic area form.
	 *
	 * @private
	 * @param {sap.ui.comp.filterbar.FilterBar} oFilterItem filter
	 * @returns {sap.ui.layout.VerticalLayout} the container
	 */
	FilterBar.prototype._addControlToBasicAreaFormContainer = function(oFilterItem) {

		var oControl = oFilterItem.getControl();
		if (!oControl) {
			jQuery.sap.log.error("no Control obtained");
			return null;
		}

		var oLabel = oFilterItem.getLabelControl(this.getId());
		if (!oLabel) {
			jQuery.sap.log.error("no Label obtained");
			return null;
		}

		this._adaptGroupTitleForFilter(oFilterItem);

		return this._addControlToBasicAreaContainer(oFilterItem, oControl, oLabel);

	};

	/**
	 * Adds a selection field to a FormContainer and the FormContainer to the basic area form
	 *
	 * @private
	 * @param {sap.ui.comp.filterbar.FilterBar} oFilterItem the filter item
	 * @param {sap.ui.core.Control} oControl the filter control
	 * @param {sap.m.Label} oLabel the label of the filter
	 * @returns {sap.ui.layout.VerticalLayout} the container
	 */
	FilterBar.prototype._addControlToBasicAreaContainer = function(oFilterItem, oControl, oLabel) {

		var oVLayout = new VerticalLayout();
		oVLayout.setLayoutData(new ResponsiveFlowLayoutData({
			margin: true
		}));

		// if (oControl.getWidth) {
		if (oFilterItem._iSpan && oFilterItem._iSpan > 1) {
			var iWidth = parseInt(this.getFilterContainerWidth(), 10), sUnit = this.getFilterContainerWidth().replace("" + iWidth, "");
			iWidth = (iWidth * oFilterItem._iSpan) + 1;
			oVLayout.setWidth(iWidth + sUnit);
		} else {
			oVLayout.setWidth(this.getFilterContainerWidth());
		}
		// }

		if (oLabel) {
			oVLayout.addContent(oLabel);

			var oConditionType = null;
			if (this.getConditionTypeByKey) {
				oConditionType = this.getConditionTypeByKey(oFilterItem.getName());
			}

			if (oConditionType) {
				oConditionType.setLabel(oLabel);
			} else if (oLabel.setLabelFor) {
				oLabel.setLabelFor(oControl);
			}
		}

		oVLayout.addContent(oControl);

		oVLayout.addStyleClass("sapUiCompFilterBarPaddingRight");
		oVLayout.addStyleClass("sapUiCompFilterBarPaddingTop");

		if (!this.getAdvancedMode()) {

			if (oFilterItem && oFilterItem.getVisible() && oFilterItem.getVisibleInFilterBar()) {
				this._oBasicAreaLayout.addContent(oVLayout);
			}
		}

		return oVLayout;
	};

	FilterBar.prototype._rerenderAA = function() {

		this._oAdvancedAreaForm.removeAllFormContainers();

		var aControls = this._flattenMap();
		this._layOutAA(aControls);
	};

	/**
	 * Recreates the layout for all visible filters in the advanced area.
	 *
	 * @private
	 * @param {array} aControls list of visible advanced area filter elements
	 */
	FilterBar.prototype._layOutAA = function(aControls) {

		if (this._mAdvancedAreaFilter && Object.keys(this._mAdvancedAreaFilter).length > 1) {
			this._layOutAAMultipleGroup(aControls);
		} else {
			this._layOutAASingleGroup(aControls);
		}
	};

	/**
	 * Recreates the layout for all visible filters in the advanced area. Each Group will be rendered in a FormContainer.
	 *
	 * @private
	 * @param {array} aControls list of visible advanced area filter elements
	 */
	FilterBar.prototype._layOutAAMultipleGroup = function(aControls) {

		var i, j, nGroups = 0;
		var oFormContainer = null;

		for (i = 0; i < aControls.length; i++) {
			if (aControls[i].control === null) {
				nGroups++;
			}
		}

		var oAdvancedLayout = this._oAdvancedAreaForm.getLayout();
		if (oAdvancedLayout) {
			if (nGroups >= 3) {
				oAdvancedLayout.setLabelSpanL(5);
				oAdvancedLayout.setLabelSpanM(5);
				oAdvancedLayout.setColumnsL(3);
				oAdvancedLayout.setColumnsM(2);
			} else if (nGroups === 2) {
				oAdvancedLayout.setLabelSpanL(4);
				oAdvancedLayout.setLabelSpanM(5);
				oAdvancedLayout.setColumnsL(2);
				oAdvancedLayout.setColumnsM(2);
			} else if (nGroups === 1) {

				// + dummy group
				oAdvancedLayout.setLabelSpanL(4);
				oAdvancedLayout.setLabelSpanM(5);
				oAdvancedLayout.setColumnsL(2);
				oAdvancedLayout.setColumnsM(2);
			}
		}

		for (i = 0; i < aControls.length; i++) {
			if (aControls[i].control === null) {
				oFormContainer = new FormContainer();

				if (Object.keys(this._mAdvancedAreaFilter).length > 1) { // hide group when only one group is present

					oFormContainer.setTitle(aControls[i].filterItem.getGroupTitle());
				}
				this._oAdvancedAreaForm.addFormContainer(oFormContainer);

				j = i + 1;
				while (j < aControls.length && (aControls[j].control)) {
					this._addControlToAdvancedArea(aControls[j].filterItem, aControls[j].control, oFormContainer);
					j++;
				}

				i = j - 1;
			}
		}

		if (nGroups === 1) {
			this._oAdvancedAreaForm.addFormContainer(new FormContainer()); // dummy
		}
	};

	/**
	 * If only one group with multiple filter fields is available, it will be layouted in two columns. a dummy group will be created and the controls
	 * will be destributed between them.
	 *
	 * @private
	 * @param {array} aControls list of visible advanced area filter elements. First element is a group
	 */
	FilterBar.prototype._layOutAASingleGroup = function(aControls) { // adapt to LMS

		var i, idx, nCount, bMod;
		var nFields = aControls.length - 1;
		var nNewGroups = nFields > 2 ? 2 : 1;

		if (nNewGroups > 1) {
			nCount = Math.floor(nFields / nNewGroups);
			bMod = ((nCount * nNewGroups) < nFields);

			for (i = 1; i < nNewGroups; i++) {
				idx = i * nCount;
				if (bMod) {
					++idx;
				}

				if ((idx + i) < aControls.length) {
					aControls.splice(idx + i, 0, aControls[0]); // add dummy group
				}
			}
		}

		this._layOutAAMultipleGroup(aControls);
	};

	/**
	 * Converts the map containing the advanced area filters to an array for simpler handling; only visible filter items are considered.
	 *
	 * @private
	 * @returns {array} oControl the visible filter fields
	 */
	FilterBar.prototype._flattenMap = function() {

		var n = null, i;
		var aControls = [];
		var bGroupIsAdded;

		if (this._mAdvancedAreaFilter) {

			for (n in this._mAdvancedAreaFilter) {

				if (n && this._mAdvancedAreaFilter[n].items) {

					bGroupIsAdded = false;
					for (i = 0; i < this._mAdvancedAreaFilter[n].items.length; i++) {
						var oItem = this._mAdvancedAreaFilter[n].items[i];

						if (oItem.filterItem && oItem.filterItem.getVisibleInFilterBar() && oItem.filterItem.getVisible()) {

							if (!bGroupIsAdded) {
								bGroupIsAdded = true;

								aControls.push({
									control: null,
									filterItem: this._mAdvancedAreaFilter[n].filterItem
								});
							}

							aControls.push({
								control: oItem.control,
								filterItem: oItem.filterItem
							});
						}
					}
				}
			}
		}

		return aControls;
	};

	/**
	 * Executes search in the 'Add/Remove Filters' dialog.
	 *
	 * @private
	 * @param {string} sValue the search string
	 */
	FilterBar.prototype._triggerSearchByValue = function(sValue) {

		var i, sText, sTooltip;
		var aContent;
		var bIsVisible;

		sValue = sValue.replace(/^\s+|\s+$/g, "").toLowerCase();

		if (this._aListItems) {

			var iSelectedItems = 0;
			for (i = this._aListItems.length - 1; i >= 0; i--) {

				aContent = this._aListItems[i].getContent();
				if (aContent && (aContent.length > 0)) {
					sText = aContent[0].getText();
					sTooltip = this._aListItems[i].data("quickinfo");
					// we want to show an item if it's either an item matching the search or if it's a group item with at least one item selected.
					if ((sText.toLowerCase().indexOf(sValue) >= 0 || (sTooltip && sTooltip.toLowerCase().indexOf(sValue) >= 0)) || (this._aListItems[i].hasStyleClass("sapUiCompFilterBarGroupListItem") && iSelectedItems > 0)) {

						bIsVisible = true;
						if (this._aListItems[i].hasStyleClass("sapUiCompFilterBarGroupListItem")) {

							if (!iSelectedItems) {
								bIsVisible = false; // matching text for group, but not hits in items
							}

						} else {
							iSelectedItems++; // a matching non-group item
						}
						this._aListItems[i].setVisible(bIsVisible);
					} else {
						this._aListItems[i].setVisible(false); // no hit
					}
				}
			}
		}
	};

	/**
	 * Reacts to search field selection.
	 *
	 * @private
	 * @param {object} oEvent containing the search string
	 */
	FilterBar.prototype._triggerSearch = function(oEvent) {

		if (!oEvent) {
			return;
		}

		var parameters = oEvent.getParameters();
		if (!parameters) {
			return;
		}

		var sValue = parameters.newValue ? parameters.newValue : "";

		this._triggerSearchByValue(sValue);
	};

	/**
	 * Reacts to search field selection. Hide all non matching list entries.
	 *
	 * @private
	 * @param {string} sValue the search string
	 */
	FilterBar.prototype._triggerSearchByValueInFilterDialog = function(sValue) {

		var n = null, i;
		var sText, sTooltip;
		var oGroupElement, oFilterItem;
		var nCountInvisibleElements;
		var nCountNonPartOfCurrentVariant;

		var bNoFilterIsVisible = true;

		sValue = sValue.replace(/^\s+|\s+$/g, "").toLowerCase();

		if (this._mAdvancedAreaFilter) {
			for (n in this._mAdvancedAreaFilter) {
				if (n) {
					oGroupElement = this._mAdvancedAreaFilter[n];
					if (oGroupElement && oGroupElement.items) {

						nCountInvisibleElements = 0;
						nCountNonPartOfCurrentVariant = 0;

						for (i = 0; i < oGroupElement.items.length; i++) {
							if (oGroupElement.items[i] && oGroupElement.items[i].filterItem && oGroupElement.items[i].formelement) {

								oFilterItem = oGroupElement.items[i].filterItem;

								if (oFilterItem.getVisible()) {

									if (sValue) {

										// if (oFilterItem.getPartOfCurrentVariant()) {
										sText = oFilterItem.getLabel();
										sTooltip = oFilterItem.getLabelTooltip();

										if ((sText.toLowerCase().indexOf(sValue) >= 0 || (sTooltip && sTooltip.toLowerCase().indexOf(sValue) >= 0))) {
											if (oFilterItem.getPartOfCurrentVariant()) {
												oGroupElement.items[i].formelement.setVisible(true);
											} else {
												++nCountNonPartOfCurrentVariant;
											}
										} else {
											++nCountInvisibleElements;
											oGroupElement.items[i].formelement.setVisible(false);
										}

									} else {
										// reset to a state without considering search
										oGroupElement.items[i].formelement.setVisible(oFilterItem.getVisibleInFilterBar() || oFilterItem.getPartOfCurrentVariant());
										if (oGroupElement.link && !oGroupElement.link.getVisible()) {
											oGroupElement.link.setVisible(true);
										}
									}
								} else {
									++nCountInvisibleElements;
								}
							}
						}

						if (oGroupElement && oGroupElement.formcontainer) {
							if (nCountInvisibleElements === oGroupElement.items.length) {
								oGroupElement.formcontainer.setVisible(false);
							} else {

								bNoFilterIsVisible = false;

								oGroupElement.formcontainer.setVisible(true);

								if (oGroupElement.link) {
									oGroupElement.link.setVisible((sValue && (nCountNonPartOfCurrentVariant === 0)) ? false : true);

									if (sValue && (nCountNonPartOfCurrentVariant > 0)) {
										this._setLinkTextAndCount(n, oGroupElement.link, nCountNonPartOfCurrentVariant);
									} else {
										this._setLinkText(n, oGroupElement.link);
									}
								}
							}
						}
					}
				}
			}
		}

		if (this._oAddToFilterBarLabel) {
			this._oAddToFilterBarLabel.setVisible(!bNoFilterIsVisible);
		}
	};

	/**
	 * Reacts to search from 'Filters'- dialog. Hide all non matching list entries.
	 *
	 * @private
	 * @param {object} oEvent containing the search string
	 */
	FilterBar.prototype._triggerSearchInFilterDialog = function(oEvent) {

		if (!oEvent) {
			return;
		}

		var parameters = oEvent.getParameters();
		if (!parameters) {
			return;
		}

		var sValue = parameters.newValue ? parameters.newValue : "";

		this._sSearchCriteriaInFiltersDialog = sValue;

		this._triggerSearchByValueInFilterDialog(sValue);
	};

	/**
	 * Generate for a passed group all the filters in the 'Add/Remove Filters'-dialog
	 *
	 * @private
	 * @param {string} sGroupName filter group name
	 * @param {sap.m.List} oList containing the fileds of a group
	 */
	FilterBar.prototype._generateListItems = function(sGroupName, oList) {

		jQuery.sap.require("sap.m.CustomListItem");

		var i;
		var oListItem, aAdvacedElements;
		// var aListItems = [];
		var oLabel;
		var bCompactMode = false;

		if (this.$().closest(".sapUiSizeCompact").length > 0) {
			bCompactMode = true;
		}

		if (sGroupName && this._mAdvancedAreaFilter) {

			aAdvacedElements = this._mAdvancedAreaFilter[sGroupName];

			if (aAdvacedElements && aAdvacedElements.items) {

				for (i = 0; i < aAdvacedElements.items.length; i++) {
					var oItem = aAdvacedElements.items[i];

					if (oItem && oItem.filterItem) {

						if (!oItem.filterItem.getVisible()) {
							continue;
						}

						oListItem = new sap.m.CustomListItem();
						oListItem.setVisible(true);

						// details
						if (!bCompactMode) {
							oListItem.addStyleClass("sapUiCompFilterBarListItem");
						} else {
							oListItem.addStyleClass("sapUiCompFilterBarListItemCompact");
						}
						oListItem.data("quickinfo", oItem.filterItem.getLabelTooltip());

						oItem.initialPartOfCurrentVariant = oItem.filterItem.getPartOfCurrentVariant();

						oListItem.data('item', oItem);

						oLabel = new Label({
							text: oItem.filterItem.getLabel(),
							tooltip: oItem.filterItem.getLabelTooltip()
						});
						oListItem.addContent(oLabel);

						oList.addItem(oListItem);
						if (oItem.filterItem.getPartOfCurrentVariant()) {
							oList.setSelectedItem(oListItem);
						}

						if (((oItem.filterItem.getMandatory() && oItem.checkbox && !oItem.checkbox.getEnabled()) || oItem.filterItem.getVisibleInFilterBar())) {
							oListItem.getModeControl().setEnabled(false);
						}
					}
				}
			}
		}

		var that = this;
		oList.attachSelectionChange(function(oEvent) {
			if (oEvent) {
				var oParams = oEvent.getParameters();
				if (oParams) {
					var oListItem = oParams.listItem;
					if (oListItem) {
						var oCheckBox = oListItem.getModeControl();
						var oItem = oListItem.data('item');
						that._selectionChangedInAddFiltersDialog(oCheckBox, oItem);
					}
				}
			}
		});
	};

	/**
	 * Adapts the visibility of the filter containers.
	 *
	 * @private
	 * @param {object} oItem representing the filter item
	 */
	FilterBar.prototype._rerenderItem = function(oItem) {

		var bFlag;
		if (oItem) {

			bFlag = oItem.filterItem.getVisible() && oItem.filterItem.getVisibleInFilterBar();

			if (oItem.container) {
				oItem.container.setVisible(bFlag);

				if (bFlag) {
					this._addContainer(oItem);
				}
			}

			if (oItem.formelement) {
				oItem.formelement.setVisible(oItem.filterItem.getVisible() && (oItem.filterItem.getVisibleInFilterBar() || oItem.filterItem.getPartOfCurrentVariant()));
				if (oItem.checkbox) {
					oItem.checkbox.setSelected(oItem.filterItem.getVisibleInFilterBar());
				}
			}
		}
	};

	/**
	 * Adapt the visibility for all filter containers.
	 *
	 * @private
	 */
	FilterBar.prototype._rerenderFilters = function() {

		var i;
		var n = null;
		var oItem = null;

		if (this._mAdvancedAreaFilter) {
			for (n in this._mAdvancedAreaFilter) {
				if (n && this._mAdvancedAreaFilter[n] && this._mAdvancedAreaFilter[n].items) {
					for (i = 0; i < this._mAdvancedAreaFilter[n].items.length; i++) {
						oItem = this._mAdvancedAreaFilter[n].items[i];
						this._rerenderItem(oItem);
					}
				}
			}
		}

		this._updateToolbarText();
	};

	/**
	 * Adapts the visibility for all filter containers.
	 *
	 * @private
	 */
	FilterBar.prototype.rerenderFilters = function() {

		this._rerenderFilters();
	};

	/**
	 * Cleans-up and closes the 'Add/Remove Filters'- dialog.
	 *
	 * @private
	 * @param {string} sGroupName name of the group for which the filters will be displayed
	 * @param {sap.m.Link} oLink control from filters dialog
	 */
	FilterBar.prototype._closeAddRemoveFiltersDialog = function(sGroupName, oLink) {

		if (sGroupName && oLink) {
			if (this._sSearchCriteriaInFiltersDialog && this._oFilterDialog) {
				this._triggerSearchByValueInFilterDialog(this._sSearchCriteriaInFiltersDialog);
			} else {
				this._setLinkText(sGroupName, oLink);
			}
		}
	};

	/**
	 * Eventhandler for the 'Cancel'-button on the 'Add/Remove Filters'- dialog.
	 *
	 * @private
	 * @param {string} sGroupName name of the group for which the filters will be displayed
	 */
	FilterBar.prototype._cancelAddRemoveFiltersDialog = function(sGroupName) {

		var i;
		var oItem;

		if (sGroupName && this._mAdvancedAreaFilter && this._mAdvancedAreaFilter[sGroupName] && this._mAdvancedAreaFilter[sGroupName].items) {
			for (i = 0; i < this._mAdvancedAreaFilter[sGroupName].items.length; i++) {
				oItem = this._mAdvancedAreaFilter[sGroupName].items[i];
				if (oItem.initialPartOfCurrentVariant !== undefined && oItem.filterItem) {
					if (oItem.filterItem.getPartOfCurrentVariant() !== oItem.initialPartOfCurrentVariant) {
						oItem.filterItem.setPartOfCurrentVariant(oItem.initialPartOfCurrentVariant);

						this._rerenderItem(oItem);

						this._notifyAboutChangedFilters(oItem.initialPartOfCurrentVariant, oItem.control);
					}
				}
			}
		}

		if (this._oVariantManagement && (this._oVariant.modified2 !== undefined)) {
			this._oVariantManagement.currentVariantSetModified(this._oVariant.modified2);
		}
	};

	/**
	 * Creates the 'Add/Remove Filters' - dialog.
	 *
	 * @private
	 * @param {string} sGroupName filter group name
	 * @param {sap.m.Link} oLink more/clear filters link
	 */
	FilterBar.prototype._createAddRemoveFiltersDialog = function(sGroupName, oLink) {

		jQuery.sap.require("sap.m.Dialog");
		jQuery.sap.require("sap.m.ListMode");

		var i, that = this;

		if (!sGroupName) {
			return;
		}

		this._oDialog = new sap.m.Dialog({
			stretch: Device.system.phone
		});
		this._oDialog.addStyleClass("sapUiPopupWithPadding");
		this._oDialog.addStyleClass("sapUiCompAddRemoveFilterDialog");

		if (this.$().closest(".sapUiSizeCompact").length > 0) {
			this._oDialog.addStyleClass("sapUiSizeCompact");
		}

		this._oDialog.setTitle(this._oRb.getText("SELECT_FILTER_FIELDS"));

		this._oDialog.addStyleClass("sapMH4FontSize");
		this._oDialog.addStyleClass("sapMH4Style");

		this._oDialog.setVerticalScrolling(true);

		var oSubHeader = new Bar();
		var oSearchField = new SearchField({
			placeholder: this._oRb.getText("FILTER_BAR_SEARCH")
		});
		this._oSearchField = oSearchField;
		oSearchField.attachLiveChange(function(oEvent) {
			that._triggerSearch(oEvent);
		});

		oSubHeader.addContentRight(oSearchField);
		this._oDialog.setSubHeader(oSubHeader);

		var oList = new List({
			mode: sap.m.ListMode.MultiSelect
		});
		oList.setShowSeparators(ListSeparators.None);
		this._oDialog.addContent(oList);

		this._generateListItems(sGroupName, oList);

		this._aListItems = oList.getItems();

		for (i = 0; i < this._aListItems.length; i++) {
			oList.addItem(this._aListItems[i]);
		}

		if (this._oVariant && this._oVariantManagement) {
			this._oVariant.modified2 = this._oVariantManagement.currentVariantGetModified();
		}

		this._bOKButtonAddRemoveFilterDialogTriggered = false;
		// OK button
		var oOKButton = new Button(this.getId() + "-btnOKAddRemoveDialog", {
			text: this._oRb.getText("FILTER_BAR_OK")
		});
		oOKButton.attachPress(function() {
			that._bOKButtonAddRemoveFilterDialogTriggered = true;
			that._oDialog.close();
		});
		this._oDialog.addAggregation("buttons", oOKButton);

		this._oDialog.setInitialFocus(this._oSearchField);

		this._oDialog.setContentHeight("23.25rem"); // 30.25 - 2*2.5rem - 2rem

		if (this._sSearchCriteriaInFiltersDialog) {
			this._oSearchField.setValue(this._sSearchCriteriaInFiltersDialog);
			this._triggerSearchByValue(this._sSearchCriteriaInFiltersDialog);
		}

		// Cancel button
		var oCancelButton = new Button(this.getId() + "-btnCancelAddRemoveDialog", {
			text: this._oRb.getText("FILTER_BAR_CANCEL"),
			press: function() {
				that._oDialog.close();
			}
		});
		this._oDialog.addAggregation("buttons", oCancelButton);

		this._oDialog.attachBeforeClose(function() {
			if (!that._bOKButtonAddRemoveFilterDialogTriggered) {
				that._cancelAddRemoveFiltersDialog(sGroupName);
			}

			that._closeAddRemoveFiltersDialog(sGroupName, oLink);
		});

		this._oDialog.attachAfterClose(function() {
			this._aListItems = null;

			that._oDialog.destroy();
			that._oDialog = null;
		});

		this._oDialog.open();
	};

	/**
	 * Handles the selection change of the checkbox in the 'Add/Remove Filters' - dialog.
	 *
	 * @private
	 * @param {sap.m.Checkbox} oCheckBox representing visible in filter bar
	 * @param {object} oItem internal object associated with this checkbox
	 */
	FilterBar.prototype._selectionChangedInAddFiltersDialog = function(oCheckBox, oItem) {

		var bVisible = oCheckBox.getSelected();

		if (!bVisible && ((oItem.filterItem.getMandatory() && !oItem.checkbox.getEnabled()) || oItem.filterItem.getVisibleInFilterBar())) {
			oCheckBox.setSelected(true);
			return; // only enabled entries (mandatory with values) can be removed from the filters dialog
		}

		oItem.filterItem.setPartOfCurrentVariant(bVisible);

		this._rerenderItem(oItem);

		this._notifyAboutChangedFilters(bVisible, oItem.control);
	};

	FilterBar.prototype._setTriggerFilterChangeState = function(bFlag) {

		this._triggerFilterChangeState = bFlag;
	};
	FilterBar.prototype._getTriggerFilterChangeState = function() {

		return this._triggerFilterChangeState;
	};

	/**
	 * Sets the semaphore for variant change.
	 *
	 * @private
	 * @param {boolean} bFlag setting the semaphore state
	 */
	FilterBar.prototype._setConsiderFilterChanges = function(bFlag) {

		this._filterChangeSemaphore = bFlag;
	};

	/**
	 * Retrieves the semaphore for variant change.
	 *
	 * @private
	 * @returns {boolean} the semaphore state
	 */
	FilterBar.prototype._getConsiderFilterChanges = function() {

		return this._filterChangeSemaphore;
	};

	/**
	 * Notifies about a filter change.
	 *
	 * @private
	 * @param {object} oEvent general event object
	 * @param {boolean} bDoNotPropagate if set do not raise the filterChange event
	 */
	FilterBar.prototype.fireFilterChange = function(oEvent) {

		this._updateToolbarText();

		if (!this._getTriggerFilterChangeState()) {
			return;
		}

		if (this._getConsiderFilterChanges() && this._oVariantManagement && this._oVariantManagement.getEnabled()) {
			this._oVariantManagement.currentVariantSetModified(true);
		}

		if (this._oFilterDialog && !(this._oFilterDialog.isOpen())) {
			return;
		}

		this._bDirtyViaDialog = true;
		this.fireEvent("filterChange", oEvent);
	};

	/**
	 * Prepares event object and fire the 'filterChange' event.
	 *
	 * @private
	 * @param {boolean} bVisible indicated whether an filter was added or removed
	 * @param {sap.ui.core.Control} oControl which was either added or removed
	 */
	FilterBar.prototype._notifyAboutChangedFilters = function(bVisible, oControl) {

		var oObj;

		if (bVisible) {
			oObj = {
				"added": oControl
			};
		} else {
			oObj = {
				"deleted": oControl
			};
		}

		this.fireFilterChange(oObj);

	};

	/**
	 * Prepares the information of all filters for the variant persistency.
	 *
	 * @private
	 * @param {boolean} bConsiderInvisibleFilters Indicates if invisible filters are considered
	 * @param {boolean} bIgnoreConsiderFilter Indicates if the considerFilter check is ignored
	 * @returns {array} of variant specific filter info
	 */
	FilterBar.prototype._determineVariantFiltersInfo = function(bConsiderInvisibleFilters, bIgnoreConsiderFilter) {

		var i;
		var n = null, oItem, oFilter;

		var aFilters = [];

		if (this._mAdvancedAreaFilter) {

			for (n in this._mAdvancedAreaFilter) {

				if (n) {
					if (this._mAdvancedAreaFilter[n].items) {

						for (i = 0; i < this._mAdvancedAreaFilter[n].items.length; i++) {
							oItem = this._mAdvancedAreaFilter[n].items[i];

							if (bConsiderInvisibleFilters || oItem.filterItem.getVisible()) {
								oFilter = {
									group: oItem.filterItem.getGroupName(),
									name: oItem.filterItem.getName(),
									partOfCurrentVariant: oItem.filterItem.getPartOfCurrentVariant(),
									visibleInFilterBar: oItem.filterItem.getVisibleInFilterBar()
								};
								if (bIgnoreConsiderFilter || this._considerFilter(oFilter)) {
									aFilters.push(oFilter);
								}
							}
						}
					}
				}
			}
		}

		return aFilters;
	};

	FilterBar.prototype.mergeVariant = function(oBase, oDelta) {

		var oMerge = {};
		jQuery.extend(true, oMerge, oDelta);
		oMerge.filterbar = [];
		oMerge.filterBarVariant = {};

		jQuery.extend(true, oMerge.filterbar, oBase.filterbar);
		jQuery.extend(true, oMerge.filterBarVariant, oBase.filterBarVariant);

		if (oDelta && oDelta.version === "V2") {
			oMerge.filterbar = this._mergeVariantFields(oMerge.filterbar, oDelta.filterbar);
			oMerge.filterBarVariant = oDelta.filterBarVariant;
		}

		return oMerge;
	};

	FilterBar.prototype._mergeVariantFields = function(aBaseFilters, aDeltaFilters) {

		var i;

		aDeltaFilters.forEach(function(element) {
			for (i = 0; i < aBaseFilters.length; i++) {
				if ((aBaseFilters[i].group === element.group) && (aBaseFilters[i].name === element.name)) {
					aBaseFilters.splice(i, 1);
					break;
				}
			}

		});

		return aBaseFilters.concat(aDeltaFilters);

	};

	FilterBar.prototype._isUi2Mode = function() {
		if (this._oVariantManagement instanceof SmartVariantManagementUi2) {
			return true;
		}

		return false;
	};

	FilterBar.prototype._isDeltaHandling = function() {
		if (this._isUi2Mode()) {
			return false;
		}

		return this.getDeltaVariantMode();
	};

	FilterBar.prototype._getStandardVariant = function() {

		return this._oVariantManagement.getStandardVariant(this);

	};

	FilterBar.prototype._considerFilter = function(oFilter) {

		if (!this._isDeltaHandling()) {
			return true;
		}

		var oBaseFilter = null;
		var oStandardVariant = this._getStandardVariant();
		if (oStandardVariant && oStandardVariant.filterbar) {
			for (var i = 0; i < oStandardVariant.filterbar.length; i++) {
				if ((oStandardVariant.filterbar[i].group === oFilter.group) && (oStandardVariant.filterbar[i].name === oFilter.name)) {
					oBaseFilter = oStandardVariant.filterbar[i];
					break;
				}
			}
		}

		if (!oBaseFilter) {

			if (!oFilter.partOfCurrentVariant) {
				return false;
			}
			return true;
		}

		if ((oBaseFilter.partOfCurrentVariant !== oFilter.partOfCurrentVariant) || (oBaseFilter.visibleInFilterBar !== oFilter.visibleInFilterBar)) {
			return true;
		}

		return false;
	};

	/**
	 * Adds a filter to the form container.
	 *
	 * @private
	 * @param {sap.ui.comp.filterbar.FilterItem} oFilterItem the corresponding filter item
	 * @param {sap.ui.core.Control} oControl the control itself
	 * @param {sap.ui.layout.form.FormContainer} oFormContainer in which the control will be added
	 */
	FilterBar.prototype._addControlToAdvancedArea = function(oFilterItem, oControl, oFormContainer) {

		var oFormElement = new FormElement({
			label: oFilterItem.getLabelControl(this.getId()),
			fields: [
				(oControl !== null) ? oControl : new Text()
			]
		});

		oFormContainer.addFormElement(oFormElement);
	};

	/**
	 * Determines if an item is relevant for the query, based on its visibility.
	 *
	 * @private
	 * @param {sap.ui.comp.filterbar.FilterItem} oFilterItem which is beeing checked
	 * @returns {boolean} true for relevant, false for not relevat
	 */
	FilterBar.prototype._determineVisibility = function(oFilterItem) {

		var bVisible = false;

		if (oFilterItem) {
			bVisible = oFilterItem.getVisible() && (oFilterItem.getVisibleInFilterBar() || oFilterItem.getPartOfCurrentVariant());
		}

		return bVisible;
	};

	/**
	 * Returns an array of all visible filters.
	 *
	 * @private
	 * @returns {array} all visible advanced items
	 */
	FilterBar.prototype._retrieveVisibleAdvancedItems = function() {

		var i, n = null, oItem;
		var aAdvancedItems = [];

		if (this._mAdvancedAreaFilter) {
			for (n in this._mAdvancedAreaFilter) {
				if (n) {
					if (this._mAdvancedAreaFilter[n] && this._mAdvancedAreaFilter[n].items) {
						for (i = 0; i < this._mAdvancedAreaFilter[n].items.length; i++) {
							oItem = this._mAdvancedAreaFilter[n].items[i];
							if (oItem) {
								// if (oItem.filterItem.getVisibleInFilterBar() || oItem.filterItem.getPartOfCurrentVariant()) {
								if (this._determineVisibility(oItem.filterItem)) {
									aAdvancedItems.push(oItem);
								}
							}
						}
					}
				}
			}
		}

		return aAdvancedItems;
	};

	/**
	 * Retrieves the controls for all visible filters.
	 *
	 * @private
	 * @returns {array} all visible controls from the basic and advanced area area
	 */
	FilterBar.prototype._retrieveCurrentSelectionSet = function() {

		var i;
		var aControls = [];

		var aItems = this._retrieveVisibleAdvancedItems();

		for (i = 0; i < aItems.length; i++) {
			if (aItems[i].control) {
				aControls.push(aItems[i].control);
			}
		}

		return aControls;
	};

	/**
	 * Executes the search event. Controls of all visible filters will be passed as event-parameters.
	 *
	 * @private
	 * @returns {boolean} indicates the validation result. true means no validation errors.
	 */
	FilterBar.prototype.search = function() {

		var parameter = {};
		parameter.selectionSet = this._retrieveCurrentSelectionSet();

		this.fireSearch(parameter);

		return true;
	};

	/**
	 * Executes the clear event. Controls of all visible filters will be passed as event-parameters.
	 *
	 * @private
	 */
	FilterBar.prototype.clear = function() {

		var parameter = {};
		parameter.selectionSet = this._retrieveCurrentSelectionSet();

		this._clearErrorState();

		this.fireClear(parameter);

		this._updateToolbarText();
	};

	/**
	 * Executes the reset event. Controls of all visible filters will be passed as event-parameters.
	 *
	 * @private
	 */
	FilterBar.prototype.reset = function() {

		var parameter = {};
		parameter.selectionSet = this._retrieveCurrentSelectionSet();

		this.fireReset(parameter);

		this._resetVariant();
	};

	/**
	 * Obtains from the variant management the current selected entry ands applies the corresponding variant. In case nothing was selected variant
	 * management returns null -> no variant will be applied.
	 *
	 * @private
	 */
	FilterBar.prototype._resetVariant = function() {

		var oVariant = null;

		if (this._oVariantManagement) { // in case a variant is currently selected, re-apply this variant
			var sKey = this._oVariantManagement.getSelectionKey();
			if (sKey) {

				oVariant = this._oVariantManagement.getVariantContent(this, sKey);
				if (this._oVariant) {
					this._oVariant.content = oVariant;
					this._oVariant.modified = false;
				}

				if (oVariant) {
					this.applyVariant(oVariant, "RESET");
				}
			}
		}

		this._resetFilterBarSearch();
		// this._bDirtyViaDialog = false;
	};

	FilterBar.prototype._resetFilterBarSearch = function() {

		this._sSearchCriteriaInFiltersDialog = "";
		this._oFiltersSearchField.setValue(this._sSearchCriteriaInFiltersDialog);
		this._triggerSearchByValueInFilterDialog(this._sSearchCriteriaInFiltersDialog);
	};

	/**
	 * Retrieve the data for a specific variant and apply it.
	 *
	 * @private
	 * @param {object} oVariant the variant
	 * @param {string} sContext may be undefined, RESET or CANCEL and indicates the source of the appliance
	 * @param {boolean} bInitial indicates if the apply was executed during the initialization phase
	 */
	FilterBar.prototype._applyVariant = function(oVariant, sContext, bInitial) {

		var aPersFields = null;
		var aFieldsAndValues;
		var bTriggerFilterChangeState, bExecuteOnSelection = false;

		if (oVariant) {

			if (bInitial) {
				bTriggerFilterChangeState = this._getTriggerFilterChangeState();
				this._setTriggerFilterChangeState(false);
			}

			this._setConsiderFilterChanges(false);

			aFieldsAndValues = oVariant.filterBarVariant;
			aPersFields = oVariant.filterbar;

			this._applyVariantFields(aFieldsAndValues);

			this._ensureFilterLoaded(aPersFields);

			this._reapplyVisibility(aPersFields);

			if (this._oBasicSearchField && this._oBasicSearchField.setValue) {
				this._oBasicSearchField.setValue("" || oVariant.basicSearch);
			}

			this.fireAfterVariantLoad(sContext);

			this._setConsiderFilterChanges(true);

			this._updateToolbarText();

			if (oVariant.executeOnSelection) {
				bExecuteOnSelection = oVariant.executeOnSelection;
			}

			if (bExecuteOnSelection) {
				this.search();
			} else {
				this._clearErrorState();
			}

			if (bInitial) {
				this._setTriggerFilterChangeState(bTriggerFilterChangeState);
			}
		}
	};

	/**
	 * Triggers the registered callBack for fetching the current variant data.
	 *
	 * @private
	 * @returns {Object} the data representing part of the variant content
	 */
	FilterBar.prototype._fetchVariantFiltersData = function() {

		if (this._fRegisteredFetchData) {
			try {
				return this._fRegisteredFetchData();
			} catch (ex) {
				jQuery.sap.log.error("callback for fetching data throws an exception");
			}
		} else {
			jQuery.sap.log.warning("no callback for fetch data supplied");
		}

		return null;
	};

	/**
	 * Triggers the registered callBack for applying the variant data.
	 *
	 * @private
	 * @param {Object} oJson the data blob representing part of the variant content
	 * @returns {object} data to be stored as part of the variant content
	 */
	FilterBar.prototype._applyVariantFields = function(oJson) {

		if (this._fRegisteredApplyData) {
			try {
				return this._fRegisteredApplyData(oJson);
			} catch (ex) {
				jQuery.sap.log.error("callback for applying data throws an exception");
			}
		} else {
			jQuery.sap.log.warning("no callback for appy data supplied");
		}
	};

	FilterBar.prototype._isStandardVariant = function() {
		var sKey = this.getCurrentVariantId();
		if (!sKey) {
			return true;
		}

		if (this._oVariantManagement && (sKey === this._oVariantManagement.getStandardVariantKey())) {
			return true;
		}

		return false;
	};

	/**
	 * Creates and returns the variant representation. This method is executed from the SmartVariantManagement control.
	 *
	 * @param {boolean} bConsiderInvisibleFilters Indicates if invisible filters should be considered
	 * @returns {object} JSON object
	 * @public
	 */
	FilterBar.prototype.fetchVariant = function(bConsiderInvisibleFilters) {

		var aFiltersInfo;
		var oVariant = {};

		if (this._isDeltaHandling()) {
			if (!this._isStandardVariant()) {
				oVariant.version = "V2";
			}
		}

		this.fireBeforeVariantFetch();

		aFiltersInfo = this._determineVariantFiltersInfo(bConsiderInvisibleFilters, !oVariant.version);

		oVariant.filterbar = (!aFiltersInfo) ? [] : aFiltersInfo;

		oVariant.filterBarVariant = this._fetchVariantFiltersData();

		if (this._oBasicSearchField && this._oBasicSearchField.getValue) {
			oVariant.basicSearch = this._oBasicSearchField.getValue();
		}

		if (this._oVariant && this._oVariant.content) {
			this._oVariant.content = oVariant;
		}

		return oVariant;
	};

	/**
	 * Applies the variant. This method is executed from the {@link sap.ui.comp.smartvariants.SmartVariantManagement SmartVariantManagement} control.
	 *
	 * @param {object} oVariant JSON object
	 * @param {string} sContext Describes in which context the variant is applied. The context is passed on to the application via the
	 *        afterVariantLoad event
	 * @param {boolean} bInitial indicates if the apply was executed during the initialization phase.
	 * @public
	 */
	FilterBar.prototype.applyVariant = function(oVariant, sContext, bInitial) {

		if (oVariant.version === "V2") {
			oVariant = this.mergeVariant(this._getStandardVariant(), oVariant, sContext);
		}

		this._applyVariant(oVariant, sContext, bInitial);
	};

	/**
	 * Retrieves the mandatory filters.
	 *
	 * @public
	 * @returns {array} Of visible mandatory filters
	 */
	FilterBar.prototype.determineMandatoryFilterItems = function() {

		var i;
		var aMandatoryFilters = [];

		var aItems = this._retrieveVisibleAdvancedItems();

		for (i = 0; i < aItems.length; i++) {
			if (aItems[i].filterItem.getMandatory() === true) {
				if (aItems[i].control) {
					aMandatoryFilters.push(aItems[i].filterItem);
				}
			}
		}

		return aMandatoryFilters;
	};

	/**
	 * Retrieves the control associated to the filter.
	 *
	 * @public
	 * @param {sap.ui.comp.filterbar.FilterItem} oFilterItem From the aggregations
	 * @returns {sap.ui.core.Control} The corresponding control. If no match is found <code>null</code> is returned.
	 */
	FilterBar.prototype.determineControlByFilterItem = function(oFilterItem) {

		var i, n = null;
		var oItem, oGroupElement;

		if (this._aBasicAreaSelection) {
			for (i = 0; i < this._aBasicAreaSelection.length; i++) {
				oItem = this._aBasicAreaSelection[i];
				if (oFilterItem === oItem.filterItem) {
					return oItem.control;
				}
			}
		}

		if (this._mAdvancedAreaFilter) {
			for (n in this._mAdvancedAreaFilter) {
				if (n) {
					oGroupElement = this._mAdvancedAreaFilter[n];
					if (oGroupElement && oGroupElement.items) {
						for (i = 0; i < oGroupElement.items.length; i++) {
							oItem = oGroupElement.items[i];
							if (oFilterItem === oItem.filterItem) {
								return oItem.control;
							}
						}
					}
				}
			}
		}

		return null;
	};

	/**
	 * Retrieves the control based on the name and group name.
	 *
	 * @public
	 * @param {string} sName Name of the filter.
	 * @param {string} sGroupName Group name of the filter; <code>null</code> for filter that belongs to basic group.
	 * @returns {sap.ui.core.Control} The corresponding control, if no match is found, <code>null</code> is returned.
	 */
	FilterBar.prototype.determineControlByName = function(sName, sGroupName) {

		if (sGroupName) {
			this._ensureFilterLoaded([
				{
					name: sName,
					group: sGroupName
				}
			]);
		}

		var oItem = this._determineItemByName(sName, sGroupName);
		if (oItem) {
			return oItem.control;
		}

		return null;
	};

	/**
	 * Retrieves the internal filter representation based on the name and (optional) group name.
	 *
	 * @private
	 * @param {string} sName the control's name
	 * @param {string} sGrpName sGroupName is null for basic area
	 * @returns {object} the corresponding internal item. If no match is found null will returned.
	 */
	FilterBar.prototype._determineItemByName = function(sName, sGrpName) {

		var i;
		var oItem, oGroupElement;
		var sGroupName = sGrpName;

		if (!sName) {
			return null;
		}

		if (!sGroupName) {
			sGroupName = FilterBar.INTERNAL_GROUP;
		}

		if (this._mAdvancedAreaFilter) {
			// check the filter
			oGroupElement = this._mAdvancedAreaFilter[sGroupName];
			if (oGroupElement && oGroupElement.items) {
				for (i = 0; i < oGroupElement.items.length; i++) {
					oItem = oGroupElement.items[i];
					if (oItem && oItem.filterItem && (oItem.filterItem.getName() === sName)) {
						return oItem;
					}
				}
			}
		}

		return null;
	};

	/**
	 * Retrieves the filter corresponding to the name.
	 *
	 * @private
	 * @param {string} sName the control's name
	 * @returns {sap.ui.comp.filterbar.FilterItem} the corresponding filter item. If no match is found null will returned.
	 */
	FilterBar.prototype.determineFilterItemByName = function(sName) {

		var n, oItem;

		if (this._mAdvancedAreaFilter) {
			for (n in this._mAdvancedAreaFilter) {
				oItem = this._determineItemByName(sName, n);
				if (oItem) {
					return oItem.filterItem;
				}
			}
		}

		return null;
	};

	/**
	 * Retrieves the internal represenation for a filter.
	 *
	 * @private
	 * @param {sap.ui.comp.filterbar.FilterGroupItem} oFilterGroupItem group filter item
	 * @returns {object} the corresponding internal representation. If no match is found null will returned.
	 */
	FilterBar.prototype._determineByFilterGroupItem = function(oFilterGroupItem) {

		var i, sGroupName = oFilterGroupItem.getGroupName();

		if (this._mAdvancedAreaFilter && this._mAdvancedAreaFilter[sGroupName]) {

			var oGroupElement = this._mAdvancedAreaFilter[sGroupName];
			if (oGroupElement && oGroupElement.items) {
				for (i = 0; i < oGroupElement.items.length; i++) {
					if (oGroupElement.items[i] && oGroupElement.items[i].filterItem === oFilterGroupItem) {
						return oGroupElement.items[i];
					}
				}
			}
		}

		return null;
	};

	/**
	 * Retrives for a givven control the corresponding filter.
	 *
	 * @private
	 * @param {sap.ui.core.Control} oControl for a filter
	 * @returns {object} the corresponding internal representation. If no match is found null will returned.
	 */
	FilterBar.prototype._determineByControl = function(oControl) {

		var n = null, i;

		if (this._mAdvancedAreaFilter) {
			for (n in this._mAdvancedAreaFilter) {
				if (n) {
					var oGroupElement = this._mAdvancedAreaFilter[n];
					if (oGroupElement && oGroupElement.items) {
						for (i = 0; i < oGroupElement.items.length; i++) {
							if (oGroupElement.items[i] && oGroupElement.items[i].control === oControl) {
								return oGroupElement.items[i];
							}
						}
					}
				}
			}
		}

		return null;
	};

	/**
	 * Delete all 'Filters'-dialog specific informations.
	 *
	 * @private
	 */
	FilterBar.prototype._deleteProperties = function() {

		var n = null, i;

		if (this._mAdvancedAreaFilter) {
			for (n in this._mAdvancedAreaFilter) {
				if (n) {
					var oGroupElement = this._mAdvancedAreaFilter[n];
					if (oGroupElement && oGroupElement.items) {

						if (oGroupElement.formcontainer) {
							delete oGroupElement.formcontainer;
						}

						if (oGroupElement.link) {
							delete oGroupElement.link;
						}

						for (i = 0; i < oGroupElement.items.length; i++) {
							if (oGroupElement.items[i] && oGroupElement.items[i].checkbox) {
								delete oGroupElement.items[i].checkbox;
							}
							if (oGroupElement.items[i] && oGroupElement.items[i].formelement) {
								delete oGroupElement.items[i].formelement;
							}
						}
					}
				}
			}
		}
	};

	/**
	 * Handles the correct positioning of the 'Add to FilteBar' checkbox in the 'Filters'-dialog.
	 *
	 * @private
	 */
	FilterBar.prototype._fHandleResize = function() {
		if (!this._isPhone() && this._oFilterDialog && this._mAdvancedAreaFilter) {
			this._repositionAddToFilterBarLabel();
		}
	};

	FilterBar.prototype.onAfterRendering = function() {
		this._fHandleResize();
	};

	FilterBar.prototype._destroyLazyFilterControl = function() {
		var j, oField;

		if (this._aFields && (this._aFields.length > 0)) {
			// delete eventuell not yet created filteritems
			if (this._aFields && this._aFields.length > 0) {
				for (j = 0; j < this._aFields.length; j++) {
					oField = this._aFields[j];

					if (oField.factory) {
						/* eslint-disable no-lonely-if */
						if (oField.control) {
							oField.control.destroy();
						}
						/* eslint-enable no-lonely-if */
					}
				}
			}
		}
	};

	FilterBar.prototype._destroyNonVisibleFilterControl = function() {
		var i, n, oItem;

		// delete currently not visible filteritems
		if (this._mAdvancedAreaFilter) {
			for (n in this._mAdvancedAreaFilter) {
				if (n && this._mAdvancedAreaFilter[n] && this._mAdvancedAreaFilter[n].items) {
					for (i = 0; i < this._mAdvancedAreaFilter[n].items.length; i++) {
						oItem = this._mAdvancedAreaFilter[n].items[i];
						if (oItem && oItem.container) {
							if (this._oBasicAreaLayout && (this._oBasicAreaLayout.indexOfContent(oItem.container) < 0)) {
								if (oItem.control && !oItem.bDestroyed) {
									oItem.control.destroy();
									oItem.bDestroyed = true;
								}
							}
						}
					}
				}
			}
		}

	};

	FilterBar.prototype._destroyFilterControls = function() {

		if (!this.getAdvancedMode()) {

			// delete eventuell not yet created filteritems
			this._destroyLazyFilterControl();

			// delete currently not visible filteritems
			this._destroyNonVisibleFilterControl();

		}
	};

	/**
	 * Destroys the control.
	 *
	 * @public
	 */
	FilterBar.prototype.destroy = function() {

		// unregister eventhandler for resizing
		jQuery(window).off("resize.basicsearch");

		if (this._oVariantManagement) {

			if (this._fInitialiseVariants) {
				this._oVariantManagement.detachInitialise(this._fInitialiseVariants);
				this._fInitialiseVariants = null;
			}

			if (this._fSaveVariant) {
				this._oVariantManagement.detachSave(this._fSaveVariant);
				this._fSaveVariant = null;
			}

			if (this._fAfterSaveVariant) {
				this._oVariantManagement.detachSave(this._fAfterSaveVariant);
				this._fAfterSaveVariant = null;
			}
		}

		this._destroyFilterControls();

		Grid.prototype.destroy.apply(this, arguments);

		if (this._oDialog) {
			this._oDialog.destroy();
			this._oDialog = null;
		}

		if (this._oFilterDialog) {
			this._oFilterDialog.destroy();
			this._oFilterDialog = null;
		}

		this._aFields = null;

		this._oHintText = null;

		this._aBasicAreaSelection = null;
		this._mAdvancedAreaFilter = null;
		this._oBasicAreaLayout = null;
		this._oVariantManagement = null;

		this._oCollectiveSearch = null;

		this._oVariant = null;

		this._fRegisteredFetchData = null;
		this._fRegisteredApplyData = null;
		this._fRegisterGetFiltersWithValues = null;
		this._fRegisteredFilterChangeHandlers = null;

		this._oSearchButton = null;
		this._oFiltersButton = null;
		this._oHideShowButton = null;
		this._oClearButtonOnFB = null;
		this._oRestoreButtonOnFB = null;

		this._oAddToFilterBarLabel = null;

		this._oBasicSearchField = null;
	};

	return FilterBar;

}, /* bExport= */true);

}; // end of sap/ui/comp/filterbar/FilterBar.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.filterbar.FilterGroupItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.filterbar.FilterGroupItem.
jQuery.sap.declare('sap.ui.comp.filterbar.FilterGroupItem'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.TooltipBase'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/filterbar/FilterGroupItem",['jquery.sap.global', 'sap/m/Label', './FilterItem', 'sap/ui/comp/library', 'sap/ui/core/TooltipBase'],
	function(jQuery, Label, FilterItem, library, TooltipBase) {
	"use strict";


	
	/**
	 * Constructor for a new filterbar/FilterGroupItem.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given 
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * Represents a filter belonging to a group other than basic. 
	 * @extends sap.ui.comp.filterbar.FilterItem
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.filterbar.FilterGroupItem
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var FilterGroupItem = FilterItem.extend("sap.ui.comp.filterbar.FilterGroupItem", /** @lends sap.ui.comp.filterbar.FilterGroupItem.prototype */ { metadata : {
	
		library : "sap.ui.comp",
		properties : {
	
			/**
			 * Title of the group.
			 */
			groupTitle : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * Name of the group.
			 */
			groupName : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * If set to true, this filter is visible on the filter bar by default.
			 * Mapped against the <code>visibleInFilterBar</code> property.
             * @since 1.24.0
			 * @deprecated Since version 1.26.1. Replaced by property <code>visibleInFilterBar</code> 
			 */
			visibleInAdvancedArea : {type : "boolean", group : "Misc", defaultValue : false}
		}
	}});
	
	
	FilterGroupItem.prototype.init = function() {
		this.setVisibleInAdvancedArea(false);
	};
	
	/**
	 * Setter for group title.
	 * 
	 * @public
	 * @param {string} sValue Group title 
	 */
	FilterGroupItem.prototype.setGroupTitle = function(sValue) {
		this.setProperty("groupTitle", sValue);
	
		this.fireChange({
			propertyName: "groupTitle"
		});
	};
	
	/**
	 * Setter for visibility of filters in the filter bar.
	 * 
	 * @private
	 * @param {boolean} bValue State of visibility
	 */
	FilterGroupItem.prototype.setVisibleInAdvancedArea = function(bValue) {
		this.setVisibleInFilterBar(bValue);
	};
	
	/**
	 * Getter for visibility of filters in the filter bar. 
	 * 	  
	 * @private
	 * @returns {boolean} bValue State of visibility
	 */
	FilterGroupItem.prototype.getVisibleInAdvancedArea = function() {
		return this.getVisibleInFilterBar();
	};
	
	/**
	 * Destroys this element.
	 * 
	 * @public
	 */
	FilterGroupItem.prototype.destroy = function() {
		FilterItem.prototype.destroy.apply(this, arguments);
	};
	

	return FilterGroupItem;

}, /* bExport= */ true);

}; // end of sap/ui/comp/filterbar/FilterGroupItem.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.personalization.Controller') ) {
/* eslint-disable strict */

/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides Controller
jQuery.sap.declare('sap.ui.comp.personalization.Controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/personalization/Controller",[
	'jquery.sap.global', 'sap/ui/base/ManagedObject', './ColumnsController', './FilterController', './GroupController', './SortController', './DimeasureController', './Util', 'sap/ui/comp/library', './ChartWrapper'
], function(jQuery, ManagedObject, ColumnsController, FilterController, GroupController, SortController, DimeasureController, Util, CompLibrary, ChartWrapper) {
	"use strict";

	/**
	 * Constructor for a new controller of P13nDialog.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class The personalization Controller provides capabilities in order to orchestrate the P13nDialog.
	 * @extends sap.ui.base.ManagedObject
	 * @author SAP SE
	 * @version 1.36.12
	 * @constructor
	 * @experimental This module is only for internal/experimental use!
	 * @private
	 * @since 1.26.0
	 * @alias sap.ui.comp.personalization.Controller
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var Controller = ManagedObject.extend("sap.ui.comp.personalization.Controller", /** @lends sap.ui.comp.personalization.Controller */
	{
		constructor: function(sId, mSettings) {
			ManagedObject.apply(this, arguments);
		},
		metadata: {
			publicMethods: [
				"setPersonalizationData"
			],
			properties: {

				/**
				 * For each panel type, the <code>setting</code> property can contain <code>visible</code>, <code>controller</code>,
				 * <code>payload</code> and <code>ignoreColumnKeys</code> attributes can be defined. The <code>setting</code> property is used
				 * in a black list, meaning that specific panels can be overwritten. In this example, the Group panel will not be shown, and for the
				 * Columns panel the <code>visibleItemsThreshold</code> is set to 10. The attribute <code>ignoreColumnKeys</code> provides an
				 * array of column keys which should be ignored in the Columns panel. Additionally, a new controller instance can be defined.
				 *
				 * <pre><code>
				 * {
				 * 	group: {
				 * 		visible: false,
				 * 		ignoreColumnKeys: []
				 * 	},
				 * 	columns: {
				 * 		visible: true,
				 * 		payload: {
				 * 			visibleItemsThreshold: 10
				 * 		},
				 * 		ignoreColumnKeys: [],
				 * 		controller: new sap.ui.comp.personalization.TestController(&quot;TestController&quot;)
				 * 	},
				 * 	dimeasure: {
				 * 		visible: true,
				 * 		payload: {
				 * 			availableChartTypes: [
				 * 				&quot;pie&quot;, &quot;column&quot;, &quot;line&quot;, &quot;donut&quot;
				 * 			]
				 * 		}
				 * 	}
				 * }
				 * </code></pre>
				 */
				setting: {
					type: "object",
					defaultValue: null
				},
				/**
				 * The current state can be set back either to the state of initial table (ResetFull) or to the specific state of the table
				 * (ResetPartial) which has been set via <code>setPersonalizationData</code> method
				 */
				resetToInitialTableState: {
					type: "boolean",
					defaultValue: true
				}
			},
			associations: {
				/**
				 * Table on which the personalization will be performed.
				 */
				table: {
					type: "object",
					multiple: false
				}
			},
			events: {
				/**
				 * If a table is manipulated directly, such as column move, column resize etc., this event is raised <b>before</b> the action has
				 * been finished. However, that does not mean that the table is really changed. For example, the column touched could be moved to a
				 * new position or could also be dropped at the old position.
				 */
				beforePotentialTableChange: {},
				/**
				 * If a table is manipulated directly, such as column move, column resize etc., this event is raised <b>after</b> the action has been
				 * finished. However, that does not mean that the table is really changed. For example, the column touched could be moved to a new
				 * position or could also be dropped at the old position.
				 */
				afterPotentialTableChange: {},

				/**
				 * Event is fired if the personalization model data is changed
				 */
				afterP13nModelDataChange: {
					parameters: {
						/**
						 * Reason for change
						 */
						changeReason: {
							type: "sap.ui.comp.personalization.ResetType"
						},
						/**
						 * Fragment of model data in JSON format that is relevant for persistence.
						 */
						persistentData: {
							type: "object"
						},
						/**
						 * Fragment of model data in JSON format that has been changed since last <code>afterP13nModelDataChange</code> event was
						 * raised. Consumers of the personalization dialog have to react to it in order to sort or filter the table.
						 */
						changeData: {
							type: "object"
						},
						/**
						 * Information about what has been changed since last <code>afterP13nModelDataChange</code> event was raised. Consumers of
						 * the personalization dialog have to react to it in order to sort or filter the table.
						 */
						changeType: {
							type: "sap.ui.comp.personalization.ChangeType"
						},
						/**
						 * Information about what has been changed since last variant was set. Consumers of the personalization dialog have to react
						 * to it in order to show dirty flag.
						 */
						changeTypeVariant: {
							type: "sap.ui.comp.personalization.ChangeType"
						}
					}
				}
			},
			library: "sap.ui.comp"
		}

	});

	/**
	 * Setter for <code>setting</code> property. Using <code>setting</code> you can define whether a panel needs to be taken into account. If no
	 * <code>setting</code> has been defined for a particular panel, the default panel will be used. Once a controller <code>setting</code> has
	 * been set, the personalization dialog shows the number of panels as defined.
	 *
	 * @overwrite
	 * @function
	 * @sap.ui.comp.personalization.Controller.prototype.setSetting
	 * @param {object} oSetting contains panel settings, such as visibility
	 * @returns {object} actual controller instance: this
	 */
	Controller.prototype.setSetting = function(oSetting) {
		oSetting = this.validateProperty("setting", oSetting);
		this.setProperty("setting", oSetting, true); // no rerendering
		if (!oSetting) {
			return this;
		}

		if (!this.getTable()) {
			this._bSettingPending = true;
			return this;
		}

		this._mergeSettingCurrentBy(oSetting);

		// Do some checks on updated '_oSettingCurrent'
		this._removeUnsupportedNamespaces();
		this._checkIgnoredColumnKeys();

		this._masterSync(Controller.SyncReason.NewSetting, null);
		return this;
	};

	Controller.prototype._mergeSettingCurrentBy = function(oSetting) {
		for ( var type in oSetting) {
			if (oSetting[type].visible === false) {
				delete this._oSettingCurrent[type];
				continue;
			}
			if (this._oSettingCurrent[type] && this._oSettingCurrent[type].visible === true) {
				// Take over well known panels
				this._oSettingCurrent[type].controller = oSetting[type].controller ? oSetting[type].controller : this._oSettingCurrent[type].controller;
				this._oSettingCurrent[type].payload = oSetting[type].payload ? oSetting[type].payload : undefined;
				this._oSettingCurrent[type].ignoreColumnKeys = oSetting[type].ignoreColumnKeys ? oSetting[type].ignoreColumnKeys : [];
				this._oSettingCurrent[type].triggerModelChangeOnColumnInvisible = oSetting[type].triggerModelChangeOnColumnInvisible ? oSetting[type].triggerModelChangeOnColumnInvisible : undefined;

			} else {
				// Take over custom panels
				this._oSettingCurrent[type] = {
					visible: oSetting[type].visible,
					controller: oSetting[type].controller ? oSetting[type].controller : undefined,
					payload: oSetting[type].payload ? oSetting[type].payload : undefined,
					ignoreColumnKeys: oSetting[type].ignoreColumnKeys ? oSetting[type].ignoreColumnKeys : [],
					triggerModelChangeOnColumnInvisible: oSetting[type].triggerModelChangeOnColumnInvisible ? oSetting[type].triggerModelChangeOnColumnInvisible : undefined

				};
			}
		}
	};

	Controller.prototype._mixSetting = function(oSettingGlobal, oSetting) {
		if (!oSetting) {
			return oSettingGlobal;
		}
		for ( var type in oSetting) {
			if (oSetting[type].visible && oSettingGlobal[type] && oSettingGlobal[type].visible) {
				// Enrich controller
				oSetting[type].controller = oSettingGlobal[type].controller;
				// Payload on oSetting has higher priority then payload on oSettingGlobal
				oSetting[type].payload = oSetting[type].payload ? oSetting[type].payload : oSettingGlobal[type].payload;
			}
		}
		return oSetting;
	};

	/**
	 * @overwrite
	 * @function
	 * @sap.ui.comp.personalization.Controller.prototype.setTable
	 * @param {object} oTable contains the table instance for which personalization is done
	 * @returns {object} actual controller instance: this
	 */
	Controller.prototype.setTable = function(oTable) {
		this.setAssociation("table", oTable);
		if (!oTable) {
			return this;
		}

		if (oTable instanceof ChartWrapper) {
			this._oSettingCurrent = Util.copy(this._oSettingOriginalChart);
		} else {
			this._oSettingCurrent = Util.copy(this._oSettingOriginalTable);
		}

		if (this._bSettingPending) {
			this._bSettingPending = false;
			this._mergeSettingCurrentBy(this.getSetting());
		}

		this._oInitialVisiblePanelType = this._getInitialVisiblePanelType();

		this._removeUnsupportedNamespaces();
		this._checkIgnoredColumnKeys();

		if (!Util.isConsistent(this.getTable().getColumns())) {
			throw "The table instance provided contain some columns for which a columnKey is provided, some for which a columnKey is not provided. This is not allowed ! ";
		}

		this._masterSync(Controller.SyncReason.NewTable, null);
		return this;
	};

	Controller.prototype.getTable = function() {
		var oTable = this.getAssociation("table");
		if (typeof oTable === "string") {
			oTable = sap.ui.getCore().byId(oTable);
		}
		return oTable;
	};

	Controller.prototype.getModel = function() {
		return this._oModel;
	};

	/**
	 * Initializes the personalization Controller instance after creation.
	 *
	 * @protected
	 */
	Controller.prototype.init = function() {
		var that = this;
		this._oDialog = null;
		this._oPayload = null;
		this._oPersistentDataRestore = null;
		this._oPersistentDataCurrentVariant = null;
		this._oPersistentDataAlreadyKnown = null;
		this._oPersistentDataBeforeOpen = null;
		this._oModel = null;
		this._aColumnKeysOfDateType = [];
		this._bSettingPending = false;
		this._aColumnKeysOfBooleanType = [];
		this._aColumnKeysOfTimeType = [];

		// default: all panels are set to visible

		// NOTE: instantiating the sub-Controllers only when opening the dialog is
		// too late since this data could be set before this and we expect
		// sub-Controllers to handle these data
		this._oSettingOriginalTable = {
			columns: {
				controller: new ColumnsController({
					afterColumnsModelDataChange: function(oEvent) {
						that._fireChangeEvent();
					},
					beforePotentialTableChange: function(oEvent) {
						that.fireBeforePotentialTableChange();
					},
					afterPotentialTableChange: function(oEvent) {
						that.fireAfterPotentialTableChange();
					}
				}),
				visible: true
			},
			sort: {
				controller: new SortController({
					afterSortModelDataChange: function(oEvent) {
						that._fireChangeEvent();
					},
					beforePotentialTableChange: function(oEvent) {
						that.fireBeforePotentialTableChange();
					},
					afterPotentialTableChange: function(oEvent) {
						that.fireAfterPotentialTableChange();
					}
				}),
				visible: true
			},
			filter: {
				controller: new FilterController({
					afterFilterModelDataChange: function(oEvent) {
						that._fireChangeEvent();
					},
					beforePotentialTableChange: function(oEvent) {
						that.fireBeforePotentialTableChange();
					},
					afterPotentialTableChange: function(oEvent) {
						that.fireAfterPotentialTableChange();
					}
				}),
				visible: true
			},
			group: {
				controller: new GroupController({
					afterGroupModelDataChange: function(oEvent) {
						that._fireChangeEvent();
					},
					beforePotentialTableChange: function(oEvent) {
						that.fireBeforePotentialTableChange();
					},
					afterPotentialTableChange: function(oEvent) {
						that.fireAfterPotentialTableChange();
					}
				}),
				visible: true
			}
		};
		this._oSettingOriginalChart = {
			dimeasure: {
				controller: new DimeasureController({
					afterDimeasureModelDataChange: function(oEvent) {
						that._fireChangeEvent();
					},
					beforePotentialTableChange: function(oEvent) {
						that.fireBeforePotentialTableChange();
					},
					afterPotentialTableChange: function(oEvent) {
						that.fireAfterPotentialTableChange();
					}
				}),
				visible: true
			},
			sort: {
				controller: new SortController({
					afterSortModelDataChange: function(oEvent) {
						that._fireChangeEvent();
					},
					beforePotentialTableChange: function(oEvent) {
						that.fireBeforePotentialTableChange();
					},
					afterPotentialTableChange: function(oEvent) {
						that.fireAfterPotentialTableChange();
					}
				}),
				visible: true
			},
			filter: {
				controller: new FilterController({
					afterFilterModelDataChange: function(oEvent) {
						that._fireChangeEvent();
					},
					beforePotentialTableChange: function(oEvent) {
						that.fireBeforePotentialTableChange();
					},
					afterPotentialTableChange: function(oEvent) {
						that.fireAfterPotentialTableChange();
					}
				}),
				visible: true
			}
		};
	};

	/**
	 * Opens the personalization dialog
	 *
	 * @param {object} oSettingsForOpen contains additional settings information for opening the dialog with its panels. Settings information is used
	 *        in the manner of white list, meaning that only specified panels are considered. Example for a dialog with sort and filter panels:
	 *
	 * <pre><code>
	 * {
	 * 	sort: {
	 * 		visible: true
	 * 	},
	 * 	filter: {
	 * 		visible: true
	 * 	},
	 * 	dimeasure: {
	 * 		visible: true,
	 * 		payload: {
	 * 			availableChartTypes: [
	 * 				new sap.ui.core.Item({
	 * 					key: sap.chart.ChartType.Column,
	 * 					text: 'Column'
	 * 				}), new sap.ui.core.Item({
	 * 					key: sap.chart.ChartType.Donut,
	 * 					text: 'Donut'
	 * 				})
	 * 			]
	 * 		}
	 * 	}
	 * }
	 * </code></pre>
	 */
	Controller.prototype.openDialog = function(oSettingsForOpen) {

		// we assume at this point that the binding is done !!
		this._masterSync(Controller.SyncReason.NewTableBinding, null);

		this._oDialog = new sap.m.P13nDialog({
			stretch: sap.ui.Device.system.phone,
			showReset: true,
			initialVisiblePanelType: this._oInitialVisiblePanelType,
			validationExecutor: jQuery.proxy(this._handleDialogValidate, this)
		});

		// Set compact style class if the table is compact too
		this._oDialog.toggleStyleClass("sapUiSizeCompact", !!jQuery(this.getTable().getDomRef()).closest(".sapUiSizeCompact").length);

		var oSettingForOpen = this._mixSetting(this._oSettingCurrent, oSettingsForOpen);

		var oPanels = this._callControllers(oSettingForOpen, "getPanel");
		for ( var type in oSettingForOpen) {
			if (oPanels[type]) {
				this._oDialog.addPanel(oPanels[type]);
			}
		}

		this._oPersistentDataBeforeOpen = this._getPersistentDataCopy();

		this._oDialog.attachOk(this._handleDialogOk, this);
		this._oDialog.attachCancel(this._handleDialogCancel, this);
		this._oDialog.attachReset(this._handleDialogReset, this);
		this._oDialog.attachAfterClose(this._handleDialogAfterClose, this);

		this._oDialog.open();
	};

	sap.ui.comp.personalization.Controller.prototype._getSettingOfPanels = function() {
		if (!this._oDialog || !this._oDialog.getPanels()) {
			return {};
		}
		var oSetting = {};
		this._oDialog.getPanels().forEach(function(oPanel) {
			var sType = oPanel.getType();
			oSetting[sType] = {
				controller: this._oSettingCurrent[sType].controller,
				visible: this._oSettingCurrent[sType].visible
			};
		}, this);
		return oSetting;
	};

	Controller.prototype._getPersistentDataCopy = function() {
		var oPersistentData = {};
		if (this.getModel() && this.getModel().getData().persistentData) {
			oPersistentData = Util.copy(this.getModel().getData().persistentData);
		}
		return oPersistentData;
	};

	/**
	 * Setter for personalization model. Note: for data of type Date the object instance is expected and not string representation.
	 *
	 * @param{object} oNewPersistentData contains personalization data that is taken over into the model
	 */
	Controller.prototype.setPersonalizationData = function(oNewPersistentData) {
		if (!this._sanityCheck(oNewPersistentData)) {
			return;
		}

		this._masterSync(Controller.SyncReason.NewModelDataVariant, oNewPersistentData);

		if (this.getTable() && this.getTable().setFixedColumnCount) {
			this.getTable().setFixedColumnCount(0);
		}

		this._fireChangeEvent();

		// The variable "this._oPersistentDataAlreadyKnown" is already set up-to-date in _fireChangeEvent()
	};

	/**
	 * @param {string} sChartType.
	 */
	Controller.prototype.setChartType = function(sChartType) {

	};

	/**
	 * @param {sap.ui.comp.personalization.ResetType} sResetType is optional.
	 */
	Controller.prototype.resetPersonalization = function(sResetType) {
		// TODO: compare with _handleDialogReset: make common method and parameter 'silent' 'isOpen'

		var bResetToInitialTableState = this.getResetToInitialTableState();
		if (sResetType === sap.ui.comp.personalization.ResetType.ResetFull || sResetType === sap.ui.comp.personalization.ResetType.ResetPartial) {
			bResetToInitialTableState = (sResetType === sap.ui.comp.personalization.ResetType.ResetFull);
		}

		if (bResetToInitialTableState) {
			this._masterSync(Controller.SyncReason.ResetModelData, null);
			this._fireChangeEvent(sap.ui.comp.personalization.ResetType.ResetFull);
		} else {
			this._masterSync(Controller.SyncReason.ResetModelDataVariant, null);
			this._fireChangeEvent(sap.ui.comp.personalization.ResetType.ResetPartial);

		}
		// The variable "this._oPersistentDataAlreadyKnown" is already set up-to-date in _fireChangeEvent()
	};

	/**
	 * Handle the dialog "reset" event
	 *
	 * @param {object} oEvent is of type sap.ui.base.Event and contains information about source object where event was raised
	 */
	Controller.prototype._handleDialogReset = function(oEvent) {
		if (this.getResetToInitialTableState()) {
			this._masterSync(Controller.SyncReason.ResetModelData, null);
		} else {
			this._masterSync(Controller.SyncReason.ResetModelDataVariant, null);
		}

		var relevantControllers = this._getSettingOfPanels();
		this._callControllers(relevantControllers, "onAfterReset", oEvent.getParameter("payload"));

		// Note: do not fire event since triggering reset does not mean that this reset will be actually submitted.
		// Could even consider to hold back _masterSync

	};

	/**
	 * Handle the dialog "close" event
	 *
	 * @param {object} oEvent is of type sap.ui.base.Event and contains information about source object where event was raised
	 */
	Controller.prototype._handleDialogCancel = function(oEvent) {

		this._oDialog.detachCancel(this._handleDialogCancel, this);

		this._oDialog.close();
	};

	/**
	 * Handle the dialog "ok" event
	 *
	 * @param {object} oEvent is of type sap.ui.base.Event and contains information about source object where event was raised
	 */
	Controller.prototype._handleDialogOk = function(oEvent) {

		this._oDialog.detachOk(this._handleDialogOk, this);

		// TODO: consider to improve this ! Perhaps better to transport payload as custom data on dialog though then we must potentially take more
		// care about life cycle of the dialog
		this._oPayload = {
			trigger: "ok",
			payload: oEvent.getParameter("payload")
		};

		this._oDialog.close();
	};

	/**
	 * Handles the Validate event of the dialog.
	 *
	 * @param {object} oEvent is of type sap.ui.base.Event and contains payload and callback function.
	 */
	Controller.prototype._handleDialogValidate = function(oPayload) {
		var oSetting = this._getSettingOfPanels();
		var oPersistentDataTotal = this._callControllers(oSetting, "getUnionData", Util.copy(this._oPersistentDataRestore), this._getPersistentDataCopy());
		return sap.ui.comp.personalization.Util.validate(oSetting, oPayload, this.getTable(), oPersistentDataTotal);
	};

	/**
	 * Get first property of current setting object
	 *
	 * @returns {string} that represents the panel type
	 */
	Controller.prototype._getInitialVisiblePanelType = function() {
		for ( var type in this._oSettingCurrent) {
			return type;
		}
	};

	Controller.prototype._handleDialogAfterClose = function() {
		var that = this;
		var _oPayload = this._oPayload;

		// Store the latest open panel
		this._oInitialVisiblePanelType = this._oDialog.getVisiblePanel() ? this._oDialog.getVisiblePanel().getType() : this._getInitialVisiblePanelType();

		if (_oPayload && _oPayload.trigger === "ok") {
			setTimeout(function() {
				var oSettingOfVisiblePanels = that._getSettingOfPanels();
				if (that._oDialog) {
					that._oDialog.destroy();
					that._oDialog = null;
				}

				that._callControllers(oSettingOfVisiblePanels, "onAfterSubmit", that._oPayload.payload);
				that._oPayload = null;
				that._fireChangeEvent();
				that._oPersistentDataBeforeOpen = null;
			}, 0);

		} else {
			setTimeout(function() {
				if (that._oDialog) {
					that._oDialog.destroy();
					that._oDialog = null;
				}
				// call _masterSync only after dialog has been closed and destroyed, otherwise changing the model will update the
				// dialog's bindings which causes performance issues
				that._masterSync(Controller.SyncReason.NewModelData, that._oPersistentDataBeforeOpen);
				that._oPersistentDataBeforeOpen = null;
			}, 0);

		}

	};

	/**
	 * setSetting can be called after setTable() is called. It is recommended to avoid communicating with MiniControllers in case MiniControllers are
	 * not final yet.
	 *
	 * @param {string} sUseCase for execution of masterSync
	 * @param {object} oNewPersistentData
	 */
	Controller.prototype._masterSync = function(sUseCase, oNewPersistentData) {
		var type = null, oJson = null;

		switch (sUseCase) {

			case Controller.SyncReason.NewTableBinding:

				this._callControllers(this._oSettingCurrent, "syncTable2TransientModel");
				break;

			case Controller.SyncReason.NewTable:

				this.initializeModel();
				// e.g. set up event handlers based on table instance
				this._callControllers(this._oSettingCurrent, "setTable", this.getTable());

				// Set model binding size dependent of column length in model data.
				// This is necessary as otherwise the table does show maximum 100 items.
				// We assume that filter with more than 1000 conditions is unrealistic
				this._setSizeLimit(this.getTable());

				// re-build transient data to reflect 'final' state of table (TODO: lazy optimization possible, i.e. move to
				// getPanel e.g.)
				this._callControllers(this._oSettingCurrent, "syncTable2TransientModel");

				// take snapshot of table so that we can restore this state later
				this._callControllers(this._oSettingCurrent, "createTableRestoreJson");

				// no new persistent data was provided from outside - in this case the table instance represent the correct
				// state of persistent data which is why we update the persistent data from the table. There are limitations though,
				// since we cannot ask the table for filter and sort info e.g.
				this._callControllers(this._oSettingCurrent, "syncTable2PersistentModel");

				// Copy the current table state in order to put back in case that it is needed (aka standard variant).
				oJson = this._callControllers(this._oSettingCurrent, "getTableRestoreJson");
				this._oPersistentDataRestore = Util.copy(oJson);

				// TODO: should we check if _oPersistentDataCurrentVariant is existing first?
				this._oPersistentDataCurrentVariant = {};

				this._aColumnKeysOfDateType = [];
				this._aColumnKeysOfTimeType = [];
				this._aColumnKeysOfBooleanType = [];

				// Notice that _getPersistentDataCopy() is equal to <subController>._getTable2Json
				this._oPersistentDataAlreadyKnown = Util.copy(this._oPersistentDataRestore);
				break;

			case Controller.SyncReason.NewSetting:

				this.initializeModel();
				// e.g. set up event handlers based on table instance
				if (this.getTable()) {
					this._callControllers(this._oSettingCurrent, "setTable", this.getTable());
					this._setSizeLimit(this.getTable());
				}

				this._callControllers(this._oSettingCurrent, "setIgnoreColumnKeys");
				this._callControllers(this._oSettingCurrent, "setTriggerModelChangeOnColumnInvisible");

				// re-build transient data to reflect 'final' state of table (TODO: lazy optimization possible, i.e. move to
				// getPanel e.g.)
				this._callControllers(this._oSettingCurrent, "syncTable2TransientModel");

				// take snapshot of table so that we can restore this state later
				this._callControllers(this._oSettingCurrent, "createTableRestoreJson");

				// no new persistent data was provided from outside - in this case the table instance represent the correct
				// state of persistent data which is why we update the persistent data from the table. There are limitations though,
				// since we cannot ask the table for filter and sort info e.g.
				this._callControllers(this._oSettingCurrent, "syncTable2PersistentModel");

				// Copy the current table state in order to put back in case that it is needed (aka standard variant).
				oJson = this._callControllers(this._oSettingCurrent, "getTableRestoreJson");
				this._oPersistentDataRestore = Util.copy(oJson);

				// this._oPersistentDataCurrentVariant = this._getPersistentDataCopy();

				// Notice that _getPersistentDataCopy() is equal to <subController>._getTable2Json
				this._oPersistentDataAlreadyKnown = Util.copy(this._oPersistentDataRestore);

				// Reduce data to current setting in case that setSetting() is called after setTable()
				for (type in this._oPersistentDataRestore) {
					if (!this._oSettingCurrent[type]) {
						delete this._oPersistentDataRestore[type];
					}
				}
				// Reduce data to current setting in case that setSetting() is called after setTable()
				for (type in this._oPersistentDataAlreadyKnown) {
					if (!this._oSettingCurrent[type]) {
						delete this._oPersistentDataAlreadyKnown[type];
					}
				}
				// Reduce data to current setting in case that setSetting() is called after setTable()
				for (type in this._oPersistentDataCurrentVariant) {
					if (!this._oSettingCurrent[type]) {
						delete this._oPersistentDataCurrentVariant[type];
					}
				}
				break;

			case Controller.SyncReason.NewModelDataVariant:
				if (oNewPersistentData === null) {
					oNewPersistentData = {};
				}

				var oPersistentDataTotal = this._callControllers(this._oSettingCurrent, "getUnionData", Util.copy(this._oPersistentDataRestore), Util.copy(oNewPersistentData));
				this.initializeModel(oPersistentDataTotal);
				this._callControllers(this._oSettingCurrent, "syncTable2TransientModel");
				this._callControllers(this._oSettingCurrent, "syncJsonModel2Table", oPersistentDataTotal);
				this._callControllers(this._oSettingCurrent, "reducePersistentModel");
				this._oPersistentDataCurrentVariant = Util.copy(oNewPersistentData);
				break;

			case Controller.SyncReason.NewModelData:
				if (oNewPersistentData === null) {
					oNewPersistentData = {};
				}

				var oPersistentDataTotal = this._callControllers(this._oSettingCurrent, "getUnionData", Util.copy(this._oPersistentDataRestore), Util.copy(oNewPersistentData));
				this.initializeModel(oPersistentDataTotal);
				this._callControllers(this._oSettingCurrent, "syncTable2TransientModel");
				this._callControllers(this._oSettingCurrent, "syncJsonModel2Table", oPersistentDataTotal);
				this._callControllers(this._oSettingCurrent, "reducePersistentModel");
				break;

			case Controller.SyncReason.ResetModelData:

				var oPersistentDataNew = this._projectRestoreData2PersistentModel4Panels(this._oPersistentDataRestore);
				this.initializeModel(oPersistentDataNew);

				// re-build transient data to reflect 'final' state of table (TODO: lazy optimization possible, i.e. move to
				// getPanel e.g.)
				this._callControllers(this._oSettingCurrent, "syncTable2TransientModel");

				// Note: persistentData to table is not enough since we must first revert table back to restore version - remember
				// oNewPersistentData is restore!
				this._callControllers(this._oSettingCurrent, "syncJsonModel2Table", Util.copy(oPersistentDataNew));

				this._callControllers(this._oSettingCurrent, "reducePersistentModel");

				// Note: since the consumer in this case also want the change events, we do *not* update the
				// _oPersistentDataAlreadyKnown here
				// this._oPersistentDataAlreadyKnown = this._getPersistentDataCopy();
				break;

			case Controller.SyncReason.ResetModelDataVariant:

				// Note: when calling syncJsonModel2Table we need to ensure that we enrich _oPersistentDataCurrentVariant with the
				// _oPersistentDataRestore (think of the example in which _oPersistentDataCurrentVariant is empty then the table wouldn't be
				// changed). This comment is similar to the one for "case Controller.SyncReason.ResetModelData:".
				var oPersistentDataNew = this._projectRestoreData2PersistentModel4Panels(this._oPersistentDataCurrentVariant);
				var oPersistentDataCurrentVariantTotal = this._callControllers(this._oSettingCurrent, "getUnionData", Util.copy(this._oPersistentDataRestore), Util.copy(oPersistentDataNew));
				this.initializeModel(oPersistentDataCurrentVariantTotal);

				this._callControllers(this._oSettingCurrent, "syncTable2TransientModel");

				this._callControllers(this._oSettingCurrent, "syncJsonModel2Table", oPersistentDataCurrentVariantTotal);

				this._callControllers(this._oSettingCurrent, "reducePersistentModel");

				// Note: since the consumer in this case also want the change events, we do *not* update the
				// _oPersistentDataAlreadyKnown here
				// this._oPersistentDataAlreadyKnown = this._getPersistentDataCopy();
				break;

			default:
		}
		this.getModel().refresh();
	};

	/**
	 * @param {object} oNewPersistentData for initializing the model
	 */
	Controller.prototype.initializeModel = function(oNewPersistentData) {
		if (!this.getModel()) {
			this._oModel = new sap.ui.model.json.JSONModel();
			this._oModel.setDefaultBindingMode(sap.ui.model.BindingMode.TwoWay);
		}

		var oNewPersistentDataCopy = null;
		if (oNewPersistentData) {
			oNewPersistentDataCopy = Util.copy(oNewPersistentData);
		}

		var oCurrentPersistentData = oNewPersistentDataCopy || ((this.getModel().getData() && this.getModel().getData().persistentData) ? this.getModel().getData().persistentData : {});

		// Reduce persistent data to current setting
		for ( var type in oCurrentPersistentData) {
			if (!this._oSettingCurrent[type]) {
				delete oCurrentPersistentData[type];
			}
		}

		this.getModel().setData({
			transientData: {},
			persistentData: oCurrentPersistentData
		});

		this._callControllers(this._oSettingCurrent, "initializeModel", this.getModel());
	};

	/**
	 * Fire 'afterP13nModelDataChange' event with model data and change information.
	 *
	 * @param {sap.ui.comp.personalization.ResetType} sResetType is optional. Contains the reason why it has been changed
	 */
	Controller.prototype._fireChangeEvent = function(sResetType) {
		var oChangeInformation = {};
		// relevant change for consumer, delta : (restore + persistent) - oPersistentDataAlreadyKnown

		// oPersistentDataTotal : = restore + persistent, i.e. delta = oPersistentDataTotal - oPersistentDataAlreadyKnown
		var oPersistentDataTotal = this._callControllers(this._oSettingCurrent, "getUnionData", Util.copy(this._oPersistentDataRestore), this._getPersistentDataCopy());

		var sChangeType = this._callControllers(this._oSettingCurrent, "getChangeType", oPersistentDataTotal, Util.copy(this._oPersistentDataAlreadyKnown));

		var oPersistentDataCurrentVariantTotal = this._callControllers(this._oSettingCurrent, "getUnionData", Util.copy(this._oPersistentDataRestore), Util.copy(this._oPersistentDataCurrentVariant));
		oChangeInformation.changeTypeVariant = this._callControllers(this._oSettingCurrent, "getChangeType", oPersistentDataTotal, oPersistentDataCurrentVariantTotal);

		var oPersistentDataAlreadyKnownCopy = Util.copy(this._oPersistentDataAlreadyKnown);
		oChangeInformation.changeType = this._callControllers(this._oSettingCurrent, "getChangeType", oPersistentDataTotal, oPersistentDataAlreadyKnownCopy);

		if (!Util.hasChangedType(sChangeType) && !Util.hasChangedType(oChangeInformation.changeTypeVariant)) {
			return;
		}

		if (!this._aColumnKeysOfDateType.length && (Util.isNamespaceChanged(oChangeInformation.changeType, sap.m.P13nPanelType.filter) || Util.isNamespaceChanged(oChangeInformation.changeTypeVariant, sap.m.P13nPanelType.filter))) {
			this._aColumnKeysOfDateType = Util.getColumnKeysOfDateType(this.getTable());
		}

		if (!this._aColumnKeysOfTimeType.length && (Util.isNamespaceChanged(oChangeInformation.changeType, sap.m.P13nPanelType.filter) || Util.isNamespaceChanged(oChangeInformation.changeTypeVariant, sap.m.P13nPanelType.filter))) {
			this._aColumnKeysOfTimeType = Util.getColumnKeysOfTimeType(this.getTable());
		}

		if (!this._aColumnKeysOfBooleanType.length && (Util.isNamespaceChanged(oChangeInformation.changeType, sap.m.P13nPanelType.filter) || Util.isNamespaceChanged(oChangeInformation.changeTypeVariant, sap.m.P13nPanelType.filter))) {
			this._aColumnKeysOfBooleanType = Util.getColumnKeysOfBooleanType(this.getTable());
		}

		if (sResetType === sap.ui.comp.personalization.ResetType.ResetFull || sResetType === sap.ui.comp.personalization.ResetType.ResetPartial) {
			oChangeInformation.changeReason = sResetType;
		}

		var oChangeData = this._callControllers(this._oSettingCurrent, "getChangeData", oPersistentDataTotal, oPersistentDataAlreadyKnownCopy);
		oChangeInformation.changeData = Util.removeEmptyProperty(Util.copy(oChangeData));
		Util.recoverPersonalisationData(oChangeInformation.changeData, this.getTable(), this._aColumnKeysOfDateType);
		Util.recoverPersonalisationTimeData(oChangeInformation.changeData, this.getTable(), this._aColumnKeysOfTimeType);
		Util.recoverPersonalisationBooleanData(oChangeInformation.changeData, this.getTable(), this._aColumnKeysOfBooleanType);

		var oPersistentDataRestoreCopy = Util.copy(this._oPersistentDataRestore);
		var oPersistentData = this._callControllers(this._oSettingCurrent, "getChangeData", oPersistentDataTotal, oPersistentDataRestoreCopy);
		oChangeInformation.persistentData = Util.removeEmptyProperty(oPersistentData);
		Util.recoverPersonalisationData(oChangeInformation.persistentData, this.getTable(), this._aColumnKeysOfDateType);
		Util.recoverPersonalisationTimeData(oChangeInformation.persistentData, this.getTable(), this._aColumnKeysOfTimeType);
		Util.recoverPersonalisationBooleanData(oChangeInformation.persistentData, this.getTable(), this._aColumnKeysOfBooleanType);

		this.fireAfterP13nModelDataChange(oChangeInformation);

		// calculate new version of 'AlreadyKnown' by adding above calculated 'small' delta to 'AlreadyKnown'
		this._oPersistentDataAlreadyKnown = this._callControllers(this._oSettingCurrent, "getUnionData", Util.copy(this._oPersistentDataAlreadyKnown), oChangeData);
	};

	Controller.prototype._projectRestoreData2PersistentModel4Panels = function(oPersistentData) {
		if (!this._oDialog || jQuery.isEmptyObject(oPersistentData)) {
			return oPersistentData;
		}
		var oPersistentDataCopy = this._getPersistentDataCopy();
		var aPanels = this._oDialog.getPanels();
		aPanels.forEach(function(oPanel) {
			if (oPersistentData[oPanel.getType()]) {
				oPersistentDataCopy[oPanel.getType()] = Util.copy(oPersistentData[oPanel.getType()]);
			} else {
				delete oPersistentDataCopy[oPanel.getType()];
			}
		});
		return oPersistentDataCopy;
	};

	Controller.prototype._checkIgnoredColumnKeys = function() {
		var oTable = this.getTable();
		if (!oTable) {
			return;
		}
		if (oTable instanceof ChartWrapper) {
			return;
		}
		var aIgnoredColumnKeys = Util.getUnionOfAttribute(this._oSettingCurrent, "ignoreColumnKeys");
		var aVisibleColumnKeys = Util.getVisibleColumnKeys(oTable);
		aIgnoredColumnKeys.some(function(sColumnKey) {
			if (aVisibleColumnKeys.indexOf(sColumnKey) > -1) {
				throw "The provided 'ignoreColumnKeys' are inconsistent. No columns specified as ignored is allowed to be visible.";
			}
		});

		var that = this;
		oTable.getColumns().forEach(function(oColumn) {
			var fSetVisibleOrigin = jQuery.proxy(oColumn.setVisible, oColumn);
			var fSetVisibleOverwritten = function(bVisible) {
				if (bVisible) {
					var aIgnoredColumnKeys = Util.getUnionOfAttribute(that._oSettingCurrent, "ignoreColumnKeys");
					if (aIgnoredColumnKeys.indexOf(Util.getColumnKey(this)) > -1) {
						throw "The provided 'ignoreColumnKeys' are inconsistent. No column specified as ignored is allowed to be visible. " + this;
					}
				}
				fSetVisibleOrigin(bVisible);
			};
			if (oColumn.setVisible.toString() === fSetVisibleOverwritten.toString()) {
				// Do nothing if due to recursion the method is already overwritten.
				return;
			}
			oColumn.setVisible = fSetVisibleOverwritten;
		});
	};

	/**
	 * Special case for tables of type sap.ui.table.Table (with exception of AnalyticalTable). Currently sap.ui.table.Table does not support grouping
	 * feature as expected.
	 */
	Controller.prototype._removeUnsupportedNamespaces = function() {
		var oTable = this.getTable();
		if (oTable && oTable instanceof sap.ui.table.Table && !(oTable instanceof sap.ui.table.AnalyticalTable)) {
			delete this._oSettingCurrent.group;
		}
	};

	/**
	 * Gets arguments of corresponding type.
	 *
	 * @param {array} aArgs contains all arguments in which the search for type is done
	 * @param {string} sType is the type for which the search is done
	 * @returns {array} aResult contains the identified arguments
	 */
	Controller.prototype._getArgumentsByType = function(aArgs, sType) {
		var aResult = [], oObject = null;

		if (aArgs && aArgs.length && sType) {
			aArgs.forEach(function(oArg) {
				if (oArg && oArg[sType] && typeof oArg[sType] !== "function") {
					oObject = {};
					oObject[sType] = oArg[sType];
					aResult.push(oObject);
				} else {
					aResult.push(oArg);
				}
			});
		}

		return aResult;
	};

	/**
	 * Calls a method "sMethodName" of all controllers in generic way.
	 *
	 * @param {string} oSettings contains additional setting for execution of mini-controller methods
	 * @param {string} sMethodName that is executed in the mini-controller
	 * @returns {object} oResult contains the result of the called mini-controller method packaged into mini-controller specific namespace.
	 */
	Controller.prototype._callControllers = function(oSettings, sMethodName) {
		var type = null, oSetting = null, oController = null, aArgsPartially = null;
		var oResults = {}, aArgs = Array.prototype.slice.call(arguments, 2);

		for (type in oSettings) {
			oSetting = oController = aArgsPartially = null;

			oSetting = oSettings[type];
			oController = oSetting.controller;
			if (!oController || !oSetting.visible || !oController[sMethodName]) {
				continue;
			}
			aArgsPartially = this._getArgumentsByType(aArgs, type);
			if (sMethodName === "getPanel") {
				aArgsPartially.push(oSetting.payload);
			} else if (sMethodName === "setIgnoreColumnKeys") {
				aArgsPartially.push(oSetting.ignoreColumnKeys);
			} else if (sMethodName === "setTriggerModelChangeOnColumnInvisible") {
				aArgsPartially.push(oSetting.triggerModelChangeOnColumnInvisible);
			}
			var oResult = oController[sMethodName].apply(oController, aArgsPartially);
			if (oResult !== null && oResult !== undefined && oResult[type] !== undefined) {
				oResults[type] = oResult[type];
			} else {
				oResults[type] = oResult;
			}
		}
		return oResults;
	};

	Controller.prototype._setSizeLimit = function(oTable) {
		this.getModel().setSizeLimit(this.getTable().getColumns().length + 1000);
	};

	Controller.prototype._sanityCheck = function(oNewPersistentData) {
		// TODO: sanity check
		// Only allow the right format e.g. "sort.sortItems" but not "sort".
		// {} is also allowed i.e. all personalization data are deleted.
		// null is also allowed i.e. go back to restore
		return true;
	};

	/**
	 * Cleans up before destruction.
	 */
	Controller.prototype.exit = function() {
		var type;

		// destroy dialog
		if (this._oDialog) {
			this._oDialog.destroy();
			this._oDialog = null;
		}

		// destroy controller
		this._callControllers(this._oSettingCurrent, "destroy");
		for (type in this._oSettingCurrent) {
			this._oSettingCurrent[type] = null;
		}
		this._oSettingCurrent = null;
		for (type in this._oSettingOriginalTable) {
			this._oSettingOriginalTable[type] = null;
		}
		this._oSettingOriginalTable = null;

		this._oSettingCurrent = null;
		for (type in this._oSettingOriginalChart) {
			this._oSettingOriginalChart[type] = null;
		}
		this._oSettingOriginalChart = null;

		// destroy model and its data
		if (this.getModel()) {
			this.getModel().destroy();
			this._oModel = null;
		}
		this._oPersistentDataRestore = null;
		this._oPersistentDataCurrentVariant = null;
		this._oPersistentDataAlreadyKnown = null;
		this._oPersistentDataBeforeOpen = null;
		this._oPayload = null;
	};

	Controller.SyncReason = {
		NewTable: 0,
		NewSetting: 1,
		NewModelData: 6,
		NewModelDataVariant: 2,
		ResetModelData: 3,
		ResetModelDataVariant: 4,
		NewTableBinding: 5
	};

	/* eslint-enable strict */

	return Controller;

}, /* bExport= */true);

}; // end of sap/ui/comp/personalization/Controller.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.providers.ControlProvider') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// -------------------------------------------------------------------------------
// Generates the view metadata required for a field using SAP-Annotations metadata
// -------------------------------------------------------------------------------
jQuery.sap.declare('sap.ui.comp.providers.ControlProvider'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.CheckBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.ComboBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.DatePicker'); // unlisted dependency retained
jQuery.sap.require('sap.m.TimePicker'); // unlisted dependency retained
jQuery.sap.require('sap.m.HBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.Input'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/providers/ControlProvider",[
	'jquery.sap.global', 'sap/m/CheckBox', 'sap/m/ComboBox', 'sap/m/DatePicker', 'sap/m/TimePicker', 'sap/m/HBox', 'sap/m/Input', 'sap/m/Text', 'sap/ui/comp/navpopover/SmartLink', 'sap/ui/comp/odata/MetadataAnalyser', 'sap/ui/comp/smartfield/ODataHelper', 'sap/ui/comp/smartfield/SmartField', 'sap/ui/comp/odata/ODataType', 'sap/ui/comp/util/FormatUtil'
], function(jQuery, CheckBox, ComboBox, DatePicker, TimePicker, HBox, Input, Text, SmartLink, MetadataAnalyser, ODataHelper, SmartField, ODataType, FormatUtil) {
	"use strict";

	// TODO: CleanUp!

	/**
	 * Constructs a class to generate the view/data model metadata for the controls - that can be used in table/forms etc.
	 * 
	 * @constructor
	 * @experimental This module is only for internal/experimental use!
	 * @public
	 * @param {object} mPropertyBag - PropertyBag having members model, entitySet
	 * @author Pavan Nayak
	 */
	var ControlProvider = function(mPropertyBag) {
		if (mPropertyBag) {
			this._oParentODataModel = mPropertyBag.model;
			this._oMetadataAnalyser = mPropertyBag.metadataAnalyser;
			this._aODataFieldMetadata = mPropertyBag.fieldsMetadata;
			this._oDateFormatSettings = mPropertyBag.dateFormatSettings;
			this._bEnableDescriptions = mPropertyBag.enableDescriptions;
			this._oCurrencyFormatSettings = mPropertyBag.currencyFormatSettings;
			this._oDefaultDropDownDisplayBehaviour = mPropertyBag.defaultDropDownDisplayBehaviour || "descriptionAndId";
			this.useSmartField = mPropertyBag.useSmartField === "true";
			this._sEntitySet = mPropertyBag.entitySet;
		}

		if (!this._oMetadataAnalyser && this._oParentODataModel) {
			this._oMetadataAnalyser = new MetadataAnalyser(this._oParentODataModel);
			this._intialiseMetadata();
		}

		this._mSmartField = {};
		this._oHelper = new ODataHelper(this._oMetadataAnalyser.oModel);

		this._aValueListProvider = [];
		this._aValueHelpProvider = [];
	};

	/**
	 * Initialises the necessary metadata
	 * 
	 * @private
	 */
	ControlProvider.prototype._intialiseMetadata = function() {
		if (!this._aODataFieldMetadata) {
			this._aODataFieldMetadata = this._oMetadataAnalyser.getFieldsByEntitySetName(this.sEntity);
		}
	};

	/**
	 * Get the field metadata
	 * 
	 * @param {object} oFieldODataMetadata - OData metadata for the field
	 * @param {boolean} isEditable - specifies if the control shall be editable
	 * @returns {Object} the field view metadata object
	 * @public
	 */
	ControlProvider.prototype.getFieldViewMetadata = function(oFieldODataMetadata, isEditable) {
		var oFieldViewMetadata = this._createFieldMetadata(oFieldODataMetadata);
		// Create and set the template
		this._createFieldTemplate(oFieldViewMetadata, isEditable);
		return oFieldViewMetadata;
	};

	/**
	 * Creates and extends the field view with a template for the UI content
	 * 
	 * @param {object} oViewField - the view field metadata
	 * @param {boolean} isEditable - specifies if the control shall be editable
	 * @private
	 */
	ControlProvider.prototype._createFieldTemplate = function(oViewField, isEditable) {
		if (this.useSmartField) {
			oViewField.template = new SmartField({
				value: {
					path: oViewField.name
				},
				entitySet: this._sEntitySet,
				contextEditable: {
					path: "sm4rtM0d3l>/editable",
					mode: "OneWay"
				},
				controlContext: "table",
				wrapping: false
			});

			if (ODataType.isNumeric(oViewField.type) || ODataType.isDateOrTime(oViewField.type)) {
				oViewField.template.setTextAlign("End");
				oViewField.template.setWidth("100%");
			}
			this._completeSmartField(oViewField);

			oViewField.template._setPendingEditState(isEditable);

		} else {
			oViewField.template = isEditable ? this._createEditableTemplate(oViewField) : this._createDisplayOnlyTemplate(oViewField);
		}
	};

	/**
	 * Completes the Smart Field template, adds especially meta data.
	 * 
	 * @param {object} oViewField The current meta data
	 * @private
	 */
	ControlProvider.prototype._completeSmartField = function(oViewField) {
		var oData = {
			annotations: {},
			path: oViewField.name
		};

		if (!this._mSmartField.entitySetObject) {
			this._mSmartField.entitySetObject = this._oHelper.oMeta.getODataEntitySet(this._sEntitySet);
			this._mSmartField.entityType = this._oHelper.oMeta.getODataEntityType(this._mSmartField.entitySetObject.entityType);
		}

		oData.modelObject = this._oParentODataModel;
		oData.entitySetObject = this._mSmartField.entitySetObject;
		// ODataHelper expects entitySet and not entitySetObject!
		oData.entitySet = this._mSmartField.entitySetObject;
		oData.entityType = this._mSmartField.entityType;
		this._oHelper.getProperty(oData);

		oData.annotations.uom = this._oHelper.getUnitOfMeasure2(oData);
		oData.annotations.text = this._oHelper.getTextProperty2(oData);
		oData.annotations.lineitem = this._oMetadataAnalyser.getLineItemAnnotation(oData.entitySetObject.entityType);
		oData.annotations.semantic = this._oMetadataAnalyser.getSemanticObjectAnnotationFromProperty(oData.property.property);
		this._oHelper.getUOMTextAnnotation(oData);
		if (oData.property.property["sap:value-list"] || oData.property.property["com.sap.vocabularies.Common.v1.ValueList"]) {
			oData.annotations.valuelist = this._oHelper.getValueListAnnotationPath(oData);
			if (oData.property.property["sap:value-list"]) {
				oData.annotations.valuelistType = oData.property.property["sap:value-list"];
			} else {
				oData.annotations.valuelistType = this._oMetadataAnalyser.getValueListSemantics(oData.property.property["com.sap.vocabularies.Common.v1.ValueList"]);
			}
		}
		this._oHelper.getUOMValueListAnnotationPath(oData);
		delete oData.entitySet;
		oViewField.template.data("configdata", {
			"configdata": oData
		});

		oViewField.template.data("dateFormatSettings", this._oDateFormatSettings);
		oViewField.template.data("currencyFormatSettings", this._oCurrencyFormatSettings);
		oViewField.template.data("defaultDropDownDisplayBehaviour", this._oDefaultDropDownDisplayBehaviour);

		if (oData.annotations.uom || ODataType.isNumeric(oViewField.type) || ODataType.isDateOrTime(oViewField.type)) {
			var sAlign = oViewField.template.getTextAlign();

			if (sAlign === "Initial") {
				sAlign = "End";
			}

			oViewField.align = sAlign;
			oViewField.textDirection = "LTR";
		}
	};

	/**
	 * Creates and extends the field view with a template for editable UI content
	 * 
	 * @param {object} oViewField - the view field
	 * @param {boolean} bBlockSmartLinkCreation - if true, no SmartLink is created independent of the semanitcObject notation
	 * @returns {sap.ui.core.Control} the template control
	 * @private
	 */
	ControlProvider.prototype._createEditableTemplate = function(oViewField, bBlockSmartLinkCreation) {
		var oTemplate = null, oFormatOptions, oConstraints, oType;
		if (oViewField.type === "Edm.DateTime" || oViewField.type === "Edm.DateTimeOffset") {
			// Create DatePicker for Date display fields
			if (oViewField.displayFormat === "Date") {
				oFormatOptions = this._oDateFormatSettings;
				oConstraints = {
					displayFormat: "Date"
				};
				oTemplate = new DatePicker({
					dateValue: {
						path: oViewField.name
					}
				});
			}
		} else if (oViewField.type === "Edm.Boolean") {
			oTemplate = new CheckBox({
				selected: {
					path: oViewField.name
				}
			});
		} else if (oViewField.type === "Edm.Decimal") {
			oConstraints = {
				precision: oViewField.precision,
				scale: oViewField.scale
			};
		}

		oType = ODataType.getType(oViewField.type, oFormatOptions, oConstraints);

		// semantic link
		if (oViewField.semanticObject && (!bBlockSmartLinkCreation)) {
			oTemplate = this._createSmartLinkFieldTemplate(oViewField, oType, function() {
				var oInnerControl = this._createEditableTemplate(oViewField, true);
				// This callback implementation done by SmartLink in the SmartTable - does not take into account that wrapping should be enabled.
				// There could also be other issues e.g. w.r.t alignment of the controls.
				// Set the wrapping style of SmartLink, also on the inner control.
				if (oInnerControl.setWrapping && oViewField.template && oViewField.template.getWrapping) {
					oInnerControl.setWrapping(oViewField.template.getWrapping());
				}
				return oInnerControl;
			}.bind(this));
		}

		// TODO: ComboBox handling!

		// Default ==> sap.m.Input
		if (!oTemplate) {
			if (oViewField.type === "Edm.Time") {
				oTemplate = new TimePicker({
					value: {
						path: oViewField.name,
						type: oType
					}
				});
			} else {
				oTemplate = new Input({
					value: {
						path: oViewField.name,
						type: oType
					}
				});

				if (oViewField.isMeasureField) {
					oTemplate.bindProperty("description", {
						path: oViewField.unit
					});
					oTemplate.setTextAlign("End");
					oTemplate.setTextDirection("LTR");
					oTemplate.setFieldWidth("80%");
				} else if (this._bEnableDescriptions && oViewField.description) {
					oTemplate.bindProperty("description", {
						path: oViewField.description
					});

				} else if (ODataType.isNumeric(oViewField.type) || ODataType.isDateOrTime(oViewField.type)) {
					oTemplate.setTextAlign("End");
					oTemplate.setTextDirection("LTR");
				}

				if (oViewField.hasValueListAnnotation) {
					this._associateValueHelpAndSuggest(oTemplate, oViewField);
				}
			}
		}
		return oTemplate;
	};

	/**
	 * Associates the control with a ValueHelp Dialog and suggest using the details retrieved from the metadata (annotation)
	 * 
	 * @param {object} oControl - The control
	 * @param {object} oFieldViewMetadata - The metadata merged from OData metadata and additional control configuration
	 * @private
	 */
	ControlProvider.prototype._associateValueHelpAndSuggest = function(oControl, oFieldViewMetadata) {
		// F4 Help with selection list
		oControl.setShowValueHelp(true);
		this._aValueHelpProvider.push(new sap.ui.comp.providers.ValueHelpProvider({
			loadAnnotation: true,
			fullyQualifiedFieldName: oFieldViewMetadata.fullName,
			metadataAnalyser: this._oMetadataAnalyser,
			control: oControl,
			model: this._oParentODataModel,
			preventInitialDataFetchInValueHelpDialog: true,
			dateFormatSettings: this._oDateFormatSettings,
			takeOverInputValue: false,
			fieldName: oFieldViewMetadata.fieldName,
			type: oFieldViewMetadata.type,
			maxLength: oFieldViewMetadata.maxLength,
			displayFormat: oFieldViewMetadata.displayFormat,
			displayBehaviour: oFieldViewMetadata.displayBehaviour,
			title: oFieldViewMetadata.label
		}));

		oControl.setShowSuggestion(true);
		oControl.setFilterSuggests(false);
		this._aValueListProvider.push(new sap.ui.comp.providers.ValueListProvider({
			loadAnnotation: true,
			fullyQualifiedFieldName: oFieldViewMetadata.fullName,
			metadataAnalyser: this._oMetadataAnalyser,
			control: oControl,
			model: this._oParentODataModel,
			dateFormatSettings: this._oDateFormatSettings,
			typeAheadEnabled: true,
			aggregation: "suggestionRows",
			displayFormat: oFieldViewMetadata.displayFormat,
			displayBehaviour: oFieldViewMetadata.displayBehaviour
		}));
	};

	/**
	 * Creates and extends the field view with a template for display only UI content
	 * 
	 * @param {object} oViewField - the view field
	 * @param {boolean} bBlockSmartLinkCreation - if true, no SmartLink is created independent of the semanitcObject notation
	 * @returns {sap.ui.core.Control} the template control
	 * @private
	 */
	ControlProvider.prototype._createDisplayOnlyTemplate = function(oViewField, bBlockSmartLinkCreation) {
		var oTemplate = null, oType = null, oFormatOptions, oConstraints, sAlign, sDisplayBehaviour, oBindingInfo;

		// Create Date type for Date display fields
		if (oViewField.displayFormat === "Date") {
			oFormatOptions = this._oDateFormatSettings;
			oConstraints = {
				displayFormat: "Date"
			};
		} else if (oViewField.type === "Edm.Decimal") {
			oConstraints = {
				precision: oViewField.precision,
				scale: oViewField.scale
			};
		}

		oType = ODataType.getType(oViewField.type, oFormatOptions, oConstraints);
		if (ODataType.isNumeric(oViewField.type) || ODataType.isDateOrTime(oViewField.type)) {
			sAlign = "End";
		}
		if (oViewField.isMeasureField) {
			oViewField.textDirection = "LTR";
			oTemplate = this._createMeasureFieldTemplate(oViewField, oType);
		} else if (oViewField.semanticObject && (!bBlockSmartLinkCreation)) {
			oTemplate = this._createSmartLinkFieldTemplate(oViewField, oType, function() {
				var oInnerControl = this._createDisplayOnlyTemplate(oViewField, true);
				// This callback implementation done by SmartLink in the SmartTable - does not take into account that wrapping should be enabled.
				// There could also be other issues e.g. w.r.t alignment of the controls.
				// Set the wrapping style of SmartLink, also on the inner control.
				if (oInnerControl.setWrapping && oViewField.template && oViewField.template.getWrapping) {
					oInnerControl.setWrapping(oViewField.template.getWrapping());
				}
				return oInnerControl;
			}.bind(this));
		} else {
			oBindingInfo = {
				path: oViewField.name,
				type: oType
			};
			if (this._bEnableDescriptions && oViewField.description) {
				sDisplayBehaviour = oViewField.displayBehaviour;
				oBindingInfo = {
					parts: [
						{
							path: oViewField.name,
							type: oType
						}, {
							path: oViewField.description
						}
					],
					formatter: function(sId, sDescription) {
						return FormatUtil.getFormattedExpressionFromDisplayBehaviour(sDisplayBehaviour, sId, sDescription);
					}
				};
			}

			oTemplate = new Text({
				wrapping: false,
				textAlign: sAlign,
				textDirection: sAlign === "End" ? "LTR" : undefined,
				text: oBindingInfo
			});
		}

		oViewField.align = sAlign;

		return oTemplate;
	};

	/**
	 * Creates and extends the field view with a template for currency (display only) content
	 * 
	 * @param {object} oViewField - the view field
	 * @param {object} oType - the binding data type
	 * @param {function} fCreateControl - callback function which creates the control which would have been created instead of the SmartLink
	 * @returns {Object} the template
	 * @private
	 */
	ControlProvider.prototype._createSmartLinkFieldTemplate = function(oViewField, oType, fCreateControl) {
		var oBindingInfo = {
			path: oViewField.name,
			type: oType
		};
		if (this._bEnableDescriptions && oViewField.description) {
			oBindingInfo = {
				parts: [
					{
						path: oViewField.name,
						type: oType
					}, {
						path: oViewField.description
					}
				],
				formatter: function(sId, sDescription) {
					return FormatUtil.getFormattedExpressionFromDisplayBehaviour(oViewField.displayBehaviour, sId, sDescription);
				}
			};
		}
		// semantic link
		var oTemplate = new SmartLink({
			semanticObject: oViewField.semanticObject,
			semanticObjectLabel: oViewField.label,
			fieldName: oViewField.name,
			text: oBindingInfo
		});

		oTemplate.setCreateControlCallback(fCreateControl);

		return oTemplate;
	};

	/**
	 * Creates and extends the field view with a template for currency (display only) content
	 * 
	 * @param {object} oViewField - the view field
	 * @param {object} oType - the odata binding data type
	 * @private
	 * @returns {Object} the template
	 */
	ControlProvider.prototype._createMeasureFieldTemplate = function(oViewField, oType) {
		var oTemplate, oValueText, oUnitText, bEnableCurrencySymbol = false;

		bEnableCurrencySymbol = !!(oViewField.isCurrencyField && this._oCurrencyFormatSettings && this._oCurrencyFormatSettings.showCurrencySymbol);

		oValueText = new Text({
			wrapping: false,
			textAlign: "End",
			text: {
				parts: [
					{
						path: oViewField.name,
						type: oType
					}, {
						path: oViewField.unit
					}
				],
				formatter: oViewField.isCurrencyField ? FormatUtil.getAmountCurrencyFormatter() : FormatUtil.getMeasureUnitFormatter(),
				useRawValues: oViewField.isCurrencyField
			}
		});
		oUnitText = new Text({
			wrapping: false,
			textAlign: "Begin",
			width: "2.5em",
			text: {
				path: oViewField.unit,
				formatter: bEnableCurrencySymbol ? FormatUtil.getCurrencySymbolFormatter() : undefined
			}
		});

		// Create measure format using HBox --> we need to 2 controls to properly align the value and unit part
		oTemplate = new HBox({
			justifyContent: "End",
			items: [
				oValueText, oUnitText
			]
		});

		oTemplate.addStyleClass("sapUiCompUOMInTableLTR");

		return oTemplate;
	};

	/**
	 * Calculates and sets additional flags and attributes for a field
	 * 
	 * @param {object} oFieldODataMetadata - OData metadata for the field
	 * @returns {object} the field view metadata
	 * @private
	 */
	ControlProvider.prototype._createFieldMetadata = function(oFieldODataMetadata) {
		var oFieldViewMetadata = jQuery.extend({}, oFieldODataMetadata);

		oFieldViewMetadata.label = oFieldODataMetadata.fieldLabel || oFieldODataMetadata.name;
		oFieldViewMetadata.quickInfo = oFieldODataMetadata.quickInfo || oFieldViewMetadata.label;
		oFieldViewMetadata.displayBehaviour = oFieldViewMetadata.displayBehaviour || this._oDefaultDropDownDisplayBehaviour;
		oFieldViewMetadata.filterType = this._getFilterType(oFieldODataMetadata);
		this._updateValueListMetadata(oFieldViewMetadata, oFieldODataMetadata);
		this._setAnnotationMetadata(oFieldViewMetadata);
		return oFieldViewMetadata;
	};

	/**
	 * Update the metadata for ValueList annotation
	 * 
	 * @param {Object} oFieldViewMetadata - view metadata for the filter field
	 * @param {object} oFieldODataMetadata - OData metadata for the filter field
	 * @private
	 */
	ControlProvider.prototype._updateValueListMetadata = function(oFieldViewMetadata, oFieldODataMetadata) {
		// First check for "sap:value-list" annotation
		oFieldViewMetadata.hasValueListAnnotation = oFieldODataMetadata["sap:value-list"] !== undefined;
		if (oFieldViewMetadata.hasValueListAnnotation) {
			oFieldViewMetadata.hasFixedValues = oFieldODataMetadata["sap:value-list"] === "fixed-values";
		} else if (oFieldODataMetadata["com.sap.vocabularies.Common.v1.ValueList"]) {
			// Then check for "com.sap.vocabularies.Common.v1.ValueList", and retrieve the semantics
			oFieldViewMetadata.hasValueListAnnotation = true;
			oFieldViewMetadata.hasFixedValues = this._oMetadataAnalyser.getValueListSemantics(oFieldODataMetadata["com.sap.vocabularies.Common.v1.ValueList"]) === "fixed-values";
		}
	};

	/**
	 * Set any annotation(s) metadata on the control
	 * 
	 * @param {Object} oFieldViewMetadata - the field view metadata
	 * @private
	 */
	ControlProvider.prototype._setAnnotationMetadata = function(oFieldViewMetadata) {
		var mAnnotation = null;
		if (!this.useSmartField && oFieldViewMetadata && oFieldViewMetadata.fullName) {
			// Update with SemanticObject annotation data
			mAnnotation = this._oMetadataAnalyser.getSemanticObjectAnnotation(oFieldViewMetadata.fullName);
			if (mAnnotation) {
				oFieldViewMetadata.semanticObject = mAnnotation.semanticObject;
			}
		}
	};
	/**
	 * Returns the filterType of the field based on metadata, else undefined
	 * 
	 * @param {object} oField - OData metadata for the field
	 * @returns {string} the filter type for the field
	 * @private
	 */
	ControlProvider.prototype._getFilterType = function(oField) {
		if (ODataType.isNumeric(oField.type)) {
			return "numeric";
		} else if (oField.type === "Edm.DateTime" && oField.displayFormat === "Date") {
			return "date";
		} else if (oField.type === "Edm.String") {
			return "string";
		} else if (oField.type === "Edm.Boolean") {
			return "boolean";
		} else if (oField.type === "Edm.Time") {
			return "time";
		}
		return undefined;
	};

	/**
	 * Destroys the object
	 * 
	 * @public
	 */
	ControlProvider.prototype.destroy = function() {
		var i;
		if (this._oMetadataAnalyser && this._oMetadataAnalyser.destroy) {
			this._oMetadataAnalyser.destroy();
		}
		this._oMetadataAnalyser = null;
		if (this._aValueHelpProvider) {
			i = this._aValueHelpProvider.length;
			while (i--) {
				this._aValueHelpProvider[i].destroy();
			}
		}
		this._aValueHelpProvider = null;

		if (this._aValueListProvider) {
			i = this._aValueListProvider.length;
			while (i--) {
				this._aValueListProvider[i].destroy();
			}
		}

		if (this._oHelper) {
			this._oHelper.destroy();
		}

		this._oHelper = null;
		this._mSmartField = null;
		this._aValueListProvider = null;
		this._aODataFieldMetadata = null;
		this._oCurrencyFormatter = null;
		this.bIsDestroyed = true;
	};

	return ControlProvider;

}, /* bExport= */true);

}; // end of sap/ui/comp/providers/ControlProvider.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.providers.TableProvider') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// -----------------------------------------------------------------------------
// Generates the view metadata required for SmartTable using SAP-Annotations metadata
// -----------------------------------------------------------------------------
jQuery.sap.declare('sap.ui.comp.providers.TableProvider'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/providers/TableProvider",[
	'jquery.sap.global', 'sap/ui/comp/odata/MetadataAnalyser', './ControlProvider', 'sap/ui/comp/util/FormatUtil'
], function(jQuery, MetadataAnalyser, ControlProvider, FormatUtil) {
	"use strict";

	/**
	 * Constructs a class to generate the view/data model metadata for the SmartTable from the SAP-Annotations metadata
	 * 
	 * @constructor
	 * @experimental This module is only for internal/experimental use!
	 * @public
	 * @param {object} mPropertyBag - PropertyBag having members model, entitySet
	 * @author Pavan Nayak
	 */
	var TableProvider = function(mPropertyBag) {
		if (mPropertyBag) {
			this._oParentODataModel = mPropertyBag.model;
			this.sEntitySet = mPropertyBag.entitySet;
			this._sIgnoredFields = mPropertyBag.ignoredFields;
			this._sInitiallyVisibleFields = mPropertyBag.initiallyVisibleFields;
			this.isEditableTable = mPropertyBag.isEditableTable;
			this._isAnalyticalTable = mPropertyBag.isAnalyticalTable;
			this.useSmartField = mPropertyBag.useSmartField;
			this.enableInResultForLineItem = mPropertyBag.enableInResultForLineItem === "true";
			try {
				this._oDateFormatSettings = mPropertyBag.dateFormatSettings ? JSON.parse(mPropertyBag.dateFormatSettings) : undefined;
				this._oCurrencyFormatSettings = mPropertyBag.currencyFormatSettings ? JSON.parse(mPropertyBag.currencyFormatSettings) : undefined;
				this._oDefaultDropDownDisplayBehaviour = mPropertyBag.defaultDropDownDisplayBehaviour;
			} catch (ex) {
				// Invalid dateformat provided!
			}
		}
		this._aODataFieldMetadata = [];
		this._aTableViewMetadata = [];
		this._aIgnoredFields = [];
		this._aInitiallyVisibleFields = [];
		this._oMetadataAnalyser = new MetadataAnalyser(this._oParentODataModel);
		this._intialiseMetadata();
	};

	/**
	 * Initialises the necessary table metadata
	 * 
	 * @private
	 */
	TableProvider.prototype._intialiseMetadata = function() {
		var aTableViewMetadata = [], i, iLen, oField, oTableViewField, fSorter, sSupportedFormats, sFullyQualifiedEntityTypeName;
		this._aODataFieldMetadata = this._oMetadataAnalyser.getFieldsByEntitySetName(this.sEntitySet);
		sFullyQualifiedEntityTypeName = this._oMetadataAnalyser.getEntityTypeNameFromEntitySetName(this.sEntitySet);
		this._oPresentationVariant = this._oMetadataAnalyser.getPresentationVariantAnnotation(sFullyQualifiedEntityTypeName);
		if (this._oPresentationVariant) {
			this._oLineItemAnnotation = this._oPresentationVariant.lineItemAnnotation;
		} else {
			this._oLineItemAnnotation = this._oMetadataAnalyser.getLineItemAnnotation(sFullyQualifiedEntityTypeName);
		}
		sSupportedFormats = this._oMetadataAnalyser.getEntityContainerAttribute("supported-formats");
		if (sSupportedFormats) {
			this._bSupportsExcelExport = sSupportedFormats.indexOf("xlsx") > -1;
		}
		if (!this._oDefaultDropDownDisplayBehaviour) {
			this._oDefaultDropDownDisplayBehaviour = this._oMetadataAnalyser.getTextArrangementValue(sFullyQualifiedEntityTypeName);
		}

		this._generateArrays();

		this._oControlProvider = new ControlProvider({
			metadataAnalyser: this._oMetadataAnalyser,
			model: this._oParentODataModel,
			fieldsMetadata: this._aODataFieldMetadata,
			dateFormatSettings: this._oDateFormatSettings,
			currencyFormatSettings: this._oCurrencyFormatSettings,
			defaultDropDownDisplayBehaviour: this._oDefaultDropDownDisplayBehaviour,
			useSmartField: this.useSmartField,
			enableDescriptions: !this._isAnalyticalTable,
			entitySet: this.sEntitySet
		});

		this._oFieldSemanticObjectMap = {};

		if (this._aODataFieldMetadata) {
			iLen = this._aODataFieldMetadata.length;
		}
		for (i = 0; i < iLen; i++) {
			oField = this._aODataFieldMetadata[i];
			// Ignore the fields in the ignored list -or- the one marked with visible="false" in annotation
			if (this._aIgnoredFields.indexOf(oField.name) > -1 || !oField.visible) {
				continue;
			}
			// Check if field is not a Primitive type --> only generate metadata for primitive/simple type fields
			if (oField.type.indexOf("Edm.") === 0) {
				oTableViewField = this._oControlProvider.getFieldViewMetadata(oField, this.isEditableTable);
				this._enrichWithTableViewMetadata(oField, oTableViewField);
				aTableViewMetadata.push(oTableViewField);
				if (oTableViewField.semanticObject) {
					this._oFieldSemanticObjectMap[oTableViewField.name] = oTableViewField.semanticObject;
				}
			}
		}

		// Sorter function for sorting based on index (undefined has lower prio)
		fSorter = function(field1, field2) {
			if (field1.index || field1.index === 0) {
				if (field2.index || field2.index === 0) {
					// both fields have an index --> return the difference
					return field1.index - field2.index;
				}
				// Only field1 has an index --> it should be shown before field2
				return -1;
			}
			if (field2.index || field2.index === 0) {
				// Only field2 has an index --> field1 should be shown after field2
				return 1;
			}
			// both are equal (in our case no index present) --> keep the existing order
			return 0;
		};
		// Sort the array based on LineItem annotation order
		this._aTableViewMetadata = aTableViewMetadata.sort(fSorter);
	};

	/**
	 * Get the field semantic object map.
	 * 
	 * @returns {object} the semantic object map
	 * @public
	 */
	TableProvider.prototype.getFieldSemanticObjectMap = function() {
		return this._oFieldSemanticObjectMap;
	};

	/**
	 * Get the fields that can be added as Columns
	 * 
	 * @returns {Array} the table view metadata
	 * @public
	 */
	TableProvider.prototype.getTableViewMetadata = function() {
		return this._aTableViewMetadata;
	};

	/**
	 * Returns a flag indicating whether excel export is supported by this table (OData service).
	 * 
	 * @returns {boolean} whether excel export is supported
	 * @public
	 */
	TableProvider.prototype.getSupportsExcelExport = function() {
		return this._bSupportsExcelExport;
	};

	/**
	 * Returns a flag indicating whether date handling with UTC is enabled for the table.
	 * 
	 * @returns {boolean} whether UTC date handling is enabled
	 * @public
	 */
	TableProvider.prototype.getIsUTCDateHandlingEnabled = function() {
		return this._oDateFormatSettings ? this._oDateFormatSettings.UTC : false;
	};

	/**
	 * Generate an array of fields that need to be ignored and initially made visible in the SmartTable (if any)
	 * 
	 * @private
	 */
	TableProvider.prototype._generateArrays = function() {
		if (this._sIgnoredFields) {
			this._aIgnoredFields = this._sIgnoredFields.split(",");
		}
		if (this._sInitiallyVisibleFields) {
			this._aInitiallyVisibleFields = this._sInitiallyVisibleFields.split(",");
		}
	};

	/**
	 * Calculates additional flags and attributes for a field e.g. whether TypeAhead is switched on
	 * 
	 * @param {object} oFieldODataMetadata - OData metadata for the table field
	 * @param {object} oFieldViewMetadata - the table view field
	 * @private
	 */
	TableProvider.prototype._enrichWithTableViewMetadata = function(oFieldODataMetadata, oFieldViewMetadata) {
		var sAdditionalProperty;
		// Label is already set and can be updated if present in the LineItem annotation
		this._updateLabel(oFieldViewMetadata);
		oFieldViewMetadata.isInitiallyVisible = this._isInitiallyVisible(oFieldODataMetadata);
		oFieldViewMetadata.index = this._getIndex(oFieldODataMetadata);
		oFieldViewMetadata.width = FormatUtil.getWidth(oFieldODataMetadata);

		// additional property handling for table
		if (oFieldViewMetadata.isMeasureField && oFieldViewMetadata.unit) {
			sAdditionalProperty = oFieldViewMetadata.unit;
		} else if (oFieldViewMetadata.description) {
			sAdditionalProperty = oFieldViewMetadata.description;
		}
		oFieldViewMetadata.additionalProperty = sAdditionalProperty;

		// aggregation-role= "measure" --> columns shall be summed on the UI (analytical table)
		oFieldViewMetadata.summed = oFieldODataMetadata.aggregationRole === "measure";
		// set the inResult from metadata
		this._setInResult(oFieldViewMetadata);
		// set the sortOrder from metadata
		this._setSortOrder(oFieldViewMetadata);
	};

	/**
	 * Returns a flag indicating whether the field should be initially visible on the UI *
	 * 
	 * @param {object} oField - OData metadata for the table field
	 * @returns {boolean} if the field should be initially visible
	 * @private
	 */
	TableProvider.prototype._isInitiallyVisible = function(oField) {
		var bInitiallyVisible = false;
		// Check if field exists in LineItem annotation (based on prio)
		if (this._oLineItemAnnotation && this._oLineItemAnnotation.fields) {
			bInitiallyVisible = this._oLineItemAnnotation.fields.indexOf(oField.name) > -1;

			if (bInitiallyVisible && !sap.ui.Device.system.desktop) {
				var sImportance = this._getFieldImportance(oField);
				if (sImportance) {
					if (sap.ui.Device.system.tablet) {
						bInitiallyVisible = sImportance === "High" || sImportance === "Medium"; // on tablets only show initially importance
						// high/medium columns
					} else if (sap.ui.Device.system.phone) {
						bInitiallyVisible = sImportance === "High"; // on phones only show initially importance high columns
					}
				}
			}
		}
		// Also check if field is part of SmartTable configuration
		if (!bInitiallyVisible && this._aInitiallyVisibleFields) {
			bInitiallyVisible = this._aInitiallyVisibleFields.indexOf(oField.name) > -1;
		}
		return bInitiallyVisible;
	};

	/**
	 * Sets inResult on the field metadata if the field exists in the RequestAtLeast of PresentationVariant annotation (or when
	 * enableInResultForLineItem is set, from LineItem annotation)
	 * 
	 * @param {object} oField - OData metadata for the table field
	 * @private
	 */
	TableProvider.prototype._setInResult = function(oField) {
		// first check if field is part of PresentationVariant-->RequestAtLeastFields
		if (this._oPresentationVariant) {
			if (this._oPresentationVariant.requestAtLeastFields && this._oPresentationVariant.requestAtLeastFields.indexOf(oField.name) > -1) {
				oField.inResult = true;
			}
		} else if (this.enableInResultForLineItem) {
			// else set inResult based on LineItem (mainly relevant for AnalyticalTable) only in non PresentationVariant use case
			if (this._oLineItemAnnotation && this._oLineItemAnnotation.fields && this._oLineItemAnnotation.fields.indexOf(oField.name) > -1) {
				oField.inResult = true;
			}
		}
	};

	/**
	 * Sets sorting realted info (sorted and sortOrder) on the field metadata if the field exists in the SortOrder of PresentationVariant annotation
	 * 
	 * @param {object} oField - OData metadata for the table field
	 * @private
	 */
	TableProvider.prototype._setSortOrder = function(oField) {
		var iLen;
		// first check if field is part of PresentationVariant-->SortOrder
		if (this._oPresentationVariant && this._oPresentationVariant.sortOrderFields) {
			iLen = this._oPresentationVariant.sortOrderFields.length;
			for (var i = 0; i < iLen; i++) {
				if (this._oPresentationVariant.sortOrderFields[i].name === oField.name) {
					oField.sorted = true;
					oField.sortOrder = this._oPresentationVariant.sortOrderFields[i].descending ? "Descending" : "Ascending";
					break;
				}
			}
		}
	};

	/**
	 * Returns the important annotation for the given field or null
	 * 
	 * @param {object} oField - OData metadata for the table field
	 * @returns {string} the important annotation
	 * @private
	 */
	TableProvider.prototype._getFieldImportance = function(oField) {
		var sReturnValue = null;

		if (this._oLineItemAnnotation && this._oLineItemAnnotation.importance) {
			sReturnValue = this._oLineItemAnnotation.importance[oField.name];
		}

		return sReturnValue;
	};

	/**
	 * Returns the index if the field from LineItem annotation, if it was found
	 * 
	 * @param {object} oField - OData metadata for the table field
	 * @returns {string} the index of the field (or undefined)
	 * @private
	 */
	TableProvider.prototype._getIndex = function(oField) {
		var iIndex = -1, iLength = 0;
		// Get the field order from LineItem annotation
		if (this._oLineItemAnnotation && this._oLineItemAnnotation.fields) {
			iLength = this._oLineItemAnnotation.fields.length;
			iIndex = this._oLineItemAnnotation.fields.indexOf(oField.name);
		}
		// If LineItem exists try to make configuration fields appear at the end
		if (iIndex < 0 && this._aInitiallyVisibleFields) {
			iIndex = this._aInitiallyVisibleFields.indexOf(oField.name) + iLength;
		}
		if (iIndex > -1) {
			return iIndex;
		}
		return undefined;
	};

	/**
	 * Updated the label from LineItem annotation metadata (if it exists)
	 * 
	 * @param {object} oField - OData view metadata of the field
	 * @private
	 */
	TableProvider.prototype._updateLabel = function(oField) {
		var sLabel;
		if (this._oLineItemAnnotation && this._oLineItemAnnotation.labels) {
			sLabel = this._oLineItemAnnotation.labels[oField.name];
		}
		if (sLabel) {
			oField.label = sLabel;

			if (oField.template && oField.template.setSemanticObjectLabel) { // SmartLink needs to know the overwritten name, as it is displayed in
				// the
				// navigation popover
				oField.template.setSemanticObjectLabel(oField.label);
			}
		}
	};

	/**
	 * Destroys the object
	 * 
	 * @public
	 */
	TableProvider.prototype.destroy = function() {
		if (this._oMetadataAnalyser && this._oMetadataAnalyser.destroy) {
			this._oMetadataAnalyser.destroy();
		}
		this._oMetadataAnalyser = null;
		this._aODataFieldMetadata = null;
		this._aTableViewMetadata = null;
		this._aIgnoredFields = null;
		this._aInitiallyVisibleFields = null;
		this._sIgnoredFields = null;
		this._sInitiallyVisibleFields = null;
		this.bIsDestroyed = true;
	};

	return TableProvider;

}, /* bExport= */true);

}; // end of sap/ui/comp/providers/TableProvider.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfilterbar.SmartFilterBar') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartfilterbar.SmartFilterBar.
jQuery.sap.declare('sap.ui.comp.smartfilterbar.SmartFilterBar'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfilterbar/SmartFilterBar",[
	'jquery.sap.global', 'sap/m/MessageBox', 'sap/ui/comp/filterbar/FilterBar', 'sap/ui/comp/filterbar/FilterGroupItem', 'sap/ui/comp/filterbar/FilterItem', 'sap/ui/comp/library', './AdditionalConfigurationHelper', './ControlConfiguration', './FilterProvider', './GroupConfiguration', 'sap/ui/comp/smartvariants/PersonalizableInfo', 'sap/ui/comp/smartvariants/SmartVariantManagement', 'sap/ui/comp/odata/ODataModelUtil'
], function(jQuery, MessageBox, FilterBar, FilterGroupItem, FilterItem, library, AdditionalConfigurationHelper, ControlConfiguration, FilterProvider, GroupConfiguration, PersonalizableInfo, SmartVariantManagement, ODataModelUtil) {
	"use strict";

	/**
	 * Constructor for a new smartfilterbar/SmartFilterBar.
	 * 
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class The SmartFilterBar control uses the OData metadata of an entity in order to create a filter bar.<br>
	 *        Whether a field is visible on the filter bar, supports type-ahead and value help, for example, is automatically determined. When you use
	 *        control configurations and group configurations it is possible to configure the filter bar and adapt it according to your needs.<br>
	 *        <b><i>Note:</i></b><br>
	 *        Most of the attributes/properties are not dynamic and cannot be changed once the control has been initialized.
	 * @extends sap.ui.comp.filterbar.FilterBar
	 * @author Pavan Nayak, Thomas Biesemann
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartfilterbar.SmartFilterBar
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var SmartFilterBar = FilterBar.extend("sap.ui.comp.smartfilterbar.SmartFilterBar", /** @lends sap.ui.comp.smartfilterbar.SmartFilterBar.prototype */
	{
		metadata: {

			library: "sap.ui.comp",
			properties: {

				/**
				 * The OData entity type whose metadata is used to create the SmartFilterBar. Note: Changing this value after the SmartFilterBar is
				 * initialized (initialise event was fired) has no effect.
				 */
				entityType: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Optional. The OData service URL. If it is not specified, the service URL from the OData model (this.getModel()) will be used. Note:
				 * Changing this value after the SmartFilterBar is initialized (initialise event was fired) has no effect.
				 * 
				 * @deprecated Since 1.29. Set an ODataModel as the main model on your control/view instead
				 */
				resourceUri: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Name of the field that has to be the focus of basic search. This is only relevant for SmartFilterBar in combination with
				 * ValueHelpDialog.
				 */
				basicSearchFieldName: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Enables basic search field in the SmartFilterBar control. This must only be enabled for entities that support such search behavior.
				 */
				enableBasicSearch: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				}
			},
			aggregations: {

				/**
				 * Using control configurations you can add additional configuration to filter fields, for example set custom labels, change the order
				 * of fields, or change the filter field control type. Note: Changing the values here after the SmartFilter is initialized (initialise
				 * event was fired) has no effect.
				 */
				controlConfiguration: {
					type: "sap.ui.comp.smartfilterbar.ControlConfiguration",
					multiple: true,
					singularName: "controlConfiguration"
				},

				/**
				 * Provides the possibility to add additional configuration to groups. Groups are used to show fields in the advanced area of the
				 * SmartFilterBar. With additional configuration, you can for example set custom labels or change the order of groups. Note: Changing
				 * the values here after the SmartFilter is initialized (initialise event was fired) has no effect.
				 */
				groupConfiguration: {
					type: "sap.ui.comp.smartfilterbar.GroupConfiguration",
					multiple: true,
					singularName: "groupConfiguration"
				}
			},

			events: {

				/**
				 * This event is fired after the pending state of the FilterBar control changes.
				 * 
				 * @since 1.36
				 */
				pendingChange: {
					/**
					 * The current pending value.
					 */
					pendingValue: {
						type: "boolean"
					}
				}
			}
		},

		renderer: function(oRm, oControl) {
			FilterBar.getMetadata().getRenderer().render(oRm, oControl);
		}

	});

	/**
	 * Retrieves the currently visible filters and the values for storing them as variants. The result will be passed on as a JSON object to the
	 * callee smart variant control.
	 * 
	 * @name sap.ui.comp.smartfilterbar.SmartFilterBar#fetchVariant
	 * @function
	 * @type object
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */

	/**
	 * Applies the current variant as opposed to fetchVariant. The variant is retrieved via the flex layer.
	 * 
	 * @name sap.ui.comp.smartfilterbar.SmartFilterBar#applyVariant
	 * @function
	 * @param {object} oVariant The variant that must be applied. oVariant must contain a valid JSON object.
	 * @type void
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */

	/**
	 * Init
	 * 
	 * @private
	 */
	SmartFilterBar.prototype.init = function() {
		this._aFilterBarViewMetadata = null;
		this.isRunningInValueHelpDialog = false;
		FilterBar.prototype.init.apply(this); // Call base class

		sap.ui.getCore().getMessageManager().registerObject(this, true);
	};

	/**
	 * Initialises the OData metadata necessary to create the filter bar
	 * 
	 * @private
	 */
	SmartFilterBar.prototype._initializeMetadata = function() {
		if (!this.isInitialised) {
			ODataModelUtil.handleModelInit(this, this._onMetadataInitialised);
		}
	};

	/**
	 * Called once the necessary Model metadata is available
	 * 
	 * @private
	 */
	SmartFilterBar.prototype._onMetadataInitialised = function() {
		this._bMetaModelLoadAttached = false;
		if (!this.isInitialised) {
			this._createFilterProvider();
			if (this._oFilterProvider) {
				this._aFilterBarViewMetadata = this._oFilterProvider.getFilterBarViewMetadata();
				if (this._aFilterBarViewMetadata) {
					this._attachAdditionalConfigurationChanged();
					// Indicates the control is initialised and can be used in the initialise event/otherwise!
					this.isInitialised = true;
					this.setModel(this._oFilterProvider.oModel, this._oFilterProvider.sFilterModelName);

					// required for the new UI-Design
					this.registerGetFiltersWithValues(jQuery.proxy(this.getFiltersWithValues, this));

					// Variant Handling - Registrations
					this.registerFetchData(jQuery.proxy(this.getFilterDataAsString, this, true));
					this.registerApplyData(jQuery.proxy(function(sJson) {
						this.setFilterDataAsString(sJson, true);
					}, this));

					this._initializeVariantManagement();
				}
			}
		}
	};

	/**
	 * Get the filterable fields.
	 * 
	 * @returns {Array} array of filter view metadata containing filter fields
	 * @internal
	 */
	SmartFilterBar.prototype.getFilterBarViewMetadata = function() {
		return this._aFilterBarViewMetadata;
	};

	/**
	 * Creates an instance of the filter provider
	 * 
	 * @private
	 */
	SmartFilterBar.prototype._createFilterProvider = function() {
		var sResourceUri, oModel, sEntityTypeName;
		oModel = this.getModel();
		sResourceUri = this.getResourceUri();
		sEntityTypeName = this.getEntityType();

		if ((oModel || sResourceUri) && sEntityTypeName) {
			this._oFilterProvider = new sap.ui.comp.smartfilterbar.FilterProvider({ // FIXME workaround for failing tests after AMD migration
				basicSearchFieldName: this.getBasicSearchFieldName(),
				enableBasicSearch: this.getEnableBasicSearch(),
				entityType: sEntityTypeName,
				serviceUrl: sResourceUri,
				isRunningInValueHelpDialog: this.isRunningInValueHelpDialog,
				model: oModel,
				additionalConfiguration: this.getAdditionalConfiguration(),
				defaultDropDownDisplayBehaviour: this.data("defaultDropDownDisplayBehaviour"),
				defaultTokenDisplayBehaviour: this.data("defaultTokenDisplayBehaviour"),
				dateFormatSettings: this.data("dateFormatSettings"),
				useContainsAsDefaultFilter: this.data("useContainsAsDefaultFilter"),
				smartFilter: this
			});

			this._oFilterProvider.attachPendingChange(function(bValue) {
				this.firePendingChange({
					pendingValue: bValue
				});
			}.bind(this));
		}
	};

	/**
	 * Attaches to events from the control configuration. For example the visiblity of a filter field can be changed dynamically
	 * 
	 * @private
	 */
	SmartFilterBar.prototype._attachAdditionalConfigurationChanged = function() {
		var aControlConfiguration, aGroupConfiguration, i, length;

		// Group Configuration
		aGroupConfiguration = this.getGroupConfiguration();
		length = aGroupConfiguration.length;
		for (i = 0; i < length; i++) {
			aGroupConfiguration[i].attachChange(this._handleGroupConfigurationChanged.bind(this));
		}

		// Control Configuration
		aControlConfiguration = this.getControlConfiguration();
		length = aControlConfiguration.length;
		for (i = 0; i < length; i++) {
			aControlConfiguration[i].attachChange(this._handleControlConfigurationChanged.bind(this));
		}
	};

	/**
	 * Event Handler for changed events from control configuration
	 * 
	 * @private
	 * @param {Object} oEvent - then event object
	 */
	SmartFilterBar.prototype._handleControlConfigurationChanged = function(oEvent) {
		var sPropertyName, oControlConfiguration, oFilterItem, sKey, sValue;

		sPropertyName = oEvent.getParameter("propertyName");
		oControlConfiguration = oEvent.oSource;

		if (!oControlConfiguration) {
			return;
		}

		sKey = oControlConfiguration.getKey();
		oFilterItem = this._getFilterItemByName(sKey);
		if (!oFilterItem) {
			return;
		}

		if (sPropertyName === "visible") {
			sValue = oControlConfiguration.getVisible();
			oFilterItem.setVisible(sValue);
		} else if (sPropertyName === "label") {
			sValue = oControlConfiguration.getLabel();
			oFilterItem.setLabel(sValue);
		} else if (sPropertyName === "visibleInAdvancedArea") {
			sValue = oControlConfiguration.getVisibleInAdvancedArea();
			if (oFilterItem.setVisibleInAdvancedArea) {
				oFilterItem.setVisibleInAdvancedArea(sValue);
			}
		}
	};

	/**
	 * Event Handler for changed events from control configuration
	 * 
	 * @private
	 * @param {Object} oEvent - then event object
	 */
	SmartFilterBar.prototype._handleGroupConfigurationChanged = function(oEvent) {
		var sPropertyName, oGroupConfiguration;

		sPropertyName = oEvent.getParameter("propertyName");
		oGroupConfiguration = oEvent.oSource;
		if (sPropertyName === "label") {
			this._handleGroupConfigurationLabelChanged(oGroupConfiguration);
		}
	};

	/**
	 * Handle the event of a changed label of a group configuration. Find the corresponding FilterGroupItem and sets its label accordingly.
	 * 
	 * @private
	 * @param {object} oGroupConfiguration - GroupConfiguration where the label as changed
	 */
	SmartFilterBar.prototype._handleGroupConfigurationLabelChanged = function(oGroupConfiguration) {
		var oFilterGroupItem, sKey, sLabel;

		if (!oGroupConfiguration) {
			return;
		}

		sLabel = oGroupConfiguration.getLabel();
		sKey = oGroupConfiguration.getKey();
		oFilterGroupItem = this._getFilterGroupItemByGroupName(sKey);
		if (oFilterGroupItem) {
			oFilterGroupItem.setGroupTitle(sLabel);
		}
	};

	/**
	 * Returns a filter item or filter group item having the specified name. Returns undefined if there are no filter items or filter group items
	 * having the specified name.
	 * 
	 * @private
	 * @param {string} sName of the filter
	 * @returns {object} the found filter item
	 */
	SmartFilterBar.prototype._getFilterItemByName = function(sName) {
		var aFilterItem, length, i;
		aFilterItem = this.getFilterItems();
		aFilterItem.push.apply(aFilterItem, this.getFilterGroupItems());

		length = aFilterItem.length;
		for (i = 0; i < length; i++) {
			if (aFilterItem[i].getName() === sName) {
				return aFilterItem[i];
			}
		}
	};

	/**
	 * Returns a filter group item having the specified group name. Returns undefined if there is no filter group items having the specified name.
	 * 
	 * @private
	 * @param {string} sName filter group name
	 * @returns {object} the found group item
	 */
	SmartFilterBar.prototype._getFilterGroupItemByGroupName = function(sName) {
		var aFilterItem, length, i;
		aFilterItem = this.getFilterGroupItems();

		length = aFilterItem.length;
		for (i = 0; i < length; i++) {
			if (aFilterItem[i].getGroupName() === sName) {
				return aFilterItem[i];
			}
		}
	};

	/**
	 * Returns an Object containing all information from the additional configuration (controlConfiguration, groupConfiguration).
	 * 
	 * @returns {object} the additional configuration
	 * @internal
	 */
	SmartFilterBar.prototype.getAdditionalConfiguration = function() {
		return new AdditionalConfigurationHelper(this.getControlConfiguration(), this.getGroupConfiguration());
	};

	/**
	 * The entity type name from OData metadata, for which the filter bar is created.
	 * 
	 * @param {string} sEntityTypeName type name
	 * @public
	 */
	SmartFilterBar.prototype.setEntityType = function(sEntityTypeName) {
		this.setProperty("entityType", sEntityTypeName);
		this._initializeMetadata();
	};

	/**
	 * Uses the provided resource URI to fetch the OData metadata instead of using the default ODataModel (getModel()). You should only set this if
	 * you intend to get the metadata for the filter bar from elsewhere!
	 * 
	 * @param {string} sResourceUri - The URI of the oData service from which the metadata would be read
	 * @deprecated Since 1.29. Set an ODataModel as the main model on your control/view instead
	 * @public
	 */
	SmartFilterBar.prototype.setResourceUri = function(sResourceUri) {
		this.setProperty("resourceUri", sResourceUri);
		this._initializeMetadata();
	};

	/**
	 * It could happen that the entity type information is set already in the view, but there is no model attached yet. This method is called once the
	 * model is set on the parent and can be used to initialise the metadata, from the model, and finally create the filter controls.
	 * 
	 * @private
	 */
	SmartFilterBar.prototype.propagateProperties = function() {
		FilterBar.prototype.propagateProperties.apply(this, arguments);
		this._initializeMetadata();
	};

	/**
	 * Provides filter information for lazy instantiation (Overridden from FilterBar)
	 * 
	 * @private
	 * @returns {array} of filter information
	 */
	SmartFilterBar.prototype._getFilterInformation = function() {
		var oFilterGroup, i, j, iLen = 0, iFieldLen = 0, aFilterFields, aFields = [], oField;
		if (this._aFilterBarViewMetadata) {
			iLen = this._aFilterBarViewMetadata.length;
			for (i = 0; i < iLen; i++) {
				oFilterGroup = this._aFilterBarViewMetadata[i];
				aFilterFields = oFilterGroup.fields;
				iFieldLen = aFilterFields.length;
				for (j = 0; j < iFieldLen; j++) {
					oField = aFilterFields[j];
					if (oField.name === FilterProvider.BASIC_SEARCH_FIELD_ID) {
						this.setBasicSearch(oField.control);
						this._attachToBasicSearch(oField.control);
						continue;
					} else {
						if (oFilterGroup.groupName === FilterProvider.BASIC_FILTER_AREA_ID) {
							this._createFieldInBasicArea(oField);
						} else {
							this._createFieldInAdvancedArea(oFilterGroup.groupName, oFilterGroup.groupLabel, oField);
						}
					}
					aFields.push(oField);
				}
			}
		}
		return aFields;
	};

	/**
	 * Check if any controls are in error state or if search has to be prevented and return a flag, if search can continue
	 * 
	 * @private
	 * @returns {Boolean} true when there are no errors or when search is not pending
	 */
	SmartFilterBar.prototype._validateState = function() {
		var aFilterItems = null, iLen, oControl, bInError = false;
		aFilterItems = this.getAllFilterItems(true);
		if (aFilterItems) {
			iLen = aFilterItems.length;
			while (iLen--) {
				oControl = this.determineControlByFilterItem(aFilterItems[iLen]);
				if (oControl) {
					if (oControl.getValueState && oControl.getValueState() === sap.ui.core.ValueState.Error && !oControl.data("__mandatoryEmpty")) {
						bInError = true;
						break;
					} else if (oControl.__bValidatingToken) {
						// If a token validation is pending hold back the search until validation is through
						this.bIsSearchPending = true;
						// Set dummy error flag to prevent search
						bInError = true;
						break;
					}
				}
			}
		}
		if (this._oFilterProvider) {
			return !bInError && !this._oFilterProvider._validateConditionTypeFields();
		} else {
			return !bInError;
		}
	};

	/**
	 * Handling of change and search for Basic Search field (used in value helps)
	 * 
	 * @private
	 * @param {Object} oBasicSearchControl the basic search control
	 */
	SmartFilterBar.prototype._attachToBasicSearch = function(oBasicSearchControl) {
		if (oBasicSearchControl) {
			oBasicSearchControl.attachSearch(jQuery.proxy(this.search, this));
			// Basic search doesn't have a change event, so we attach to live change instead!
			oBasicSearchControl.attachLiveChange(jQuery.proxy(this._onChange, this));
		}
	};

	/**
	 * Called when change need to be triggered on the Smart Filter
	 * 
	 * @private
	 * @param {Object} oEvent - then event object
	 */
	SmartFilterBar.prototype._onChange = function(oEvent) {
		var oControl = oEvent.getSource();
		// Clear mandatory empty error state and flag, when control value changes
		if (oControl.data("__mandatoryEmpty")) {
			oControl.data("__mandatoryEmpty", null);
			oControl.setValueState(sap.ui.core.ValueState.None);
		}
		// Clear validation error when no value is in the input
		if (oControl.data("__validationError") && !oControl.getValue()) {
			oControl.data("__validationError", null);
			oControl.setValueState(sap.ui.core.ValueState.None);
		}
		// Don't fire change event while the filter data is being created/updated!
		if (this._oFilterProvider._bUpdatingFilterData || this._oFilterProvider._bCreatingInitialModel) {
			return;
		}
		// If the token is being validated do not trigger the change event!
		if (!oControl || (oControl && !oControl.__bValidatingToken)) {
			this.fireFilterChange(oEvent);
			this._oFilterProvider._updateConditionTypeFields(oEvent.getParameter("filterChangeReason"));
		}
	};

	/**
	 * Listen to the change event to set the search button state and raise an event
	 * 
	 * @param {object} oControl - the control on which change would be triggered
	 * @private
	 */
	SmartFilterBar.prototype._handleChange = function(oControl) {
		if (oControl) {
			if (oControl.attachChange) {
				oControl.attachChange(jQuery.proxy(this._onChange, this));
			}
		}
	};

	/**
	 * Handles the enter event on the control to trigger Search
	 * 
	 * @param {object} oControl - the control on which enter has to be handled
	 * @private
	 */
	SmartFilterBar.prototype._handleEnter = function(oControl) {
		/*
		 * @Hack: Search should not be triggered while a suggest is in progress (i.e. user presses enter key on the SuggestionList popup). Since the
		 * SuggestionPopup is always closed before the keyup event is raised and we cannot use the keydown event alone, we now listen to both key up
		 * and keydown events and set flags on the control to overcome the issue. Perhaps if sapUI5 provides a new event/does not propagate the keyUp
		 * event/sets a flag we can remove this hack TODO: Clarify this with sapUI5 colleagues.
		 */
		oControl.attachBrowserEvent("keydown", function(e) {
			if (e.which === 13) {
				oControl.__bSuggestInProgress = (oControl._oSuggestionPopup && oControl._oSuggestionPopup.isOpen());
			}
		});
		oControl.attachBrowserEvent("keyup", jQuery.proxy(function(e) {
			if (e.which === 13 && !oControl.__bSuggestInProgress) {
				this.search();
			}
		}, this));
	};

	/**
	 * Creates the control used in the filter item lazily
	 * 
	 * @private
	 * @param {object} oField filter metadata
	 */
	SmartFilterBar.prototype._createFilterFieldControl = function(oField) {
		if (oField.conditionType) {
			this._createConditionTypeItem(oField);
		} else if (!oField.control && oField.fCreateControl) {
			oField.fCreateControl(oField);
			delete oField.fCreateControl;
		}
		// The control might already be present e.g. for custom field - so also register for enter & change events!
		this._handleEnter(oField.control);
		this._handleChange(oField.control);
	};

	/**
	 * Creates a new control based on the Custom implementation given in oField.conditionType
	 * 
	 * @private
	 * @param {object} oField filter metadata
	 */
	SmartFilterBar.prototype._createConditionTypeItem = function(oField) {
		if (!oField.conditionType) {
			return;
		}
		jQuery.sap.require("sap.m.HBox");
		var oLayout = new sap.m.HBox(), iSpan = 1;
		oField.conditionType.initializeFilterItem(this.getFilterContainerWidth(), oLayout);
		oField._iSpan = iSpan + 1;
		oField.control = oLayout;
	};

	/**
	 * Creates a new field and adds it to the filter bar Basic Area, based on the metadata provided by the FilterProvider
	 * 
	 * @private
	 * @param {object} oField filter metadata
	 */
	SmartFilterBar.prototype._createFieldInBasicArea = function(oField) {
		oField.factory = function() {
			this._createFilterFieldControl(oField);
			if (!oField.control) {
				return;
			}
			var oFilterItem = new FilterItem({
				labelTooltip: oField.quickInfo,
				label: oField.label,
				name: oField.fieldName,
				mandatory: oField.isMandatory,
				visible: oField.isVisible,
				control: oField.control
			});

			if (oField._iSpan) {
				oFilterItem._iSpan = oField._iSpan;
			}

			if (oField.isCustomFilterField) {
				oFilterItem.data("isCustomField", true);
			}
			this.addFilterItem(oFilterItem);
		}.bind(this);

		// FilterBar needs this information
		oField.groupName = FilterBar.INTERNAL_GROUP;

		return oField;
	};

	/**
	 * Creates a new field and adds it to the filter bar into the AdvancedSearchArea, based on the metadata provided by the FilterProvider
	 * 
	 * @private
	 * @param {string} sGroupName of the filter
	 * @param {string} sGroupLabel of the filter
	 * @param {object} oField filter metadata
	 */
	SmartFilterBar.prototype._createFieldInAdvancedArea = function(sGroupName, sGroupLabel, oField) {
		oField.factory = function() {
			this._createFilterFieldControl(oField);
			var oFilterGroupItem = new FilterGroupItem({
				labelTooltip: oField.quickInfo,
				label: oField.label,
				name: oField.fieldName,
				groupName: sGroupName,
				groupTitle: sGroupLabel,
				mandatory: oField.isMandatory,
				visible: oField.isVisible,
				visibleInAdvancedArea: oField.visibleInAdvancedArea,
				control: oField.control
			});
			if (oField._iSpan) {
				oFilterGroupItem._iSpan = oField._iSpan;
			}
			if (oField.isCustomFilterField) {
				oFilterGroupItem.data("isCustomField", true);
			}
			this.addFilterGroupItem(oFilterGroupItem);
		}.bind(this);

		// FilterBar needs this information
		oField.groupName = sGroupName;
		oField.groupTitle = sGroupLabel;

		return oField;
	};

	/**
	 * Returns an array of filters (sap.ui.model.Filter instances), for visible fields, that can be used to restrict the query result from OData.<br>
	 * The result of this method can directly be used during aggregation binding or OData read.
	 * 
	 * @param {string[]} [aFieldNames] optional array of field names that filters should be returned, if not given all visible filters are returned
	 * @public
	 */
	SmartFilterBar.prototype.getFilters = function(aFieldNames) {
		if (!aFieldNames || !aFieldNames.length) {
			aFieldNames = this._getVisibleFieldNames();
		}
		return this._oFilterProvider ? this._oFilterProvider.getFilters(aFieldNames) : [];
	};

	/**
	 * Returns a parameter object that can be used to restrict the query result from OData in case of basic search.
	 * 
	 * @returns {object} A parameter object containing OData query parameters
	 * @public
	 */
	SmartFilterBar.prototype.getParameters = function() {
		return this._oFilterProvider ? this._oFilterProvider.getParameters() : {};
	};

	/**
	 * Returns the control (if any) with the specified key (Property name in OData entity). Use just the property name as the key when getting a
	 * control from the basic area. Example: "CompanyCode" & Use "EntityName/GroupName.FieldName" format to get controls from groups.
	 * Example:"Account.CompanyCode"
	 * 
	 * @param {string} sKey The key as present in the OData property name/control configuration
	 * @returns {object|sap.ui.Control} The control in the filter bar, if any
	 * @public
	 */
	SmartFilterBar.prototype.getControlByKey = function(sKey) {
		var oFilterItem;
		oFilterItem = this._getFilterItemByName(sKey);
		if (oFilterItem) {
			return this.determineControlByFilterItem(oFilterItem);
		}
	};

	/**
	 * Returns an array of visible field names
	 * 
	 * @private
	 * @returns {Array} aFieldNames - array of field names
	 */
	SmartFilterBar.prototype._getVisibleFieldNames = function() {
		var aFieldNames = [], aVisibleFilterItems = this.getAllFilterItems(true), iLen = aVisibleFilterItems.length, oItem;
		iLen = aVisibleFilterItems.length;
		// loop through all the visible filter items and get their names
		while (iLen--) {
			oItem = aVisibleFilterItems[iLen];
			if (oItem) {
				aFieldNames.push(oItem.getName());
			}
		}
		return aFieldNames;
	};

	/**
	 * Returns the data currently set in the filter data model.
	 * 
	 * @param {boolean} bAllFilterData Also include empty/invisible fields filter data
	 * @returns {object} The JSON data in the filter bar
	 * @public
	 */
	SmartFilterBar.prototype.getFilterData = function(bAllFilterData) {
		var oData = null;
		if (this._oFilterProvider) {
			if (bAllFilterData) {
				oData = this._oFilterProvider.getFilterData();
			} else {
				oData = this._oFilterProvider.getFilledFilterData(this._getVisibleFieldNames());
			}
		}
		return oData;
	};

	/**
	 * checks the value of the custom data
	 * 
	 * @private
	 * @param {Object} oCustomData custom data
	 * @returns {boolean} has value/or not
	 */
	SmartFilterBar.prototype._checkHasValueData = function(oCustomData) {
		if (oCustomData) {
			if (typeof oCustomData === "boolean") {
				return oCustomData;
			} else if (typeof oCustomData === "string") {
				if (oCustomData.toLowerCase() === "true") {
					return true;
				}
			}
		}

		return false;
	};

	/**
	 * checks if the current filter has a value
	 * 
	 * @param {Object} oData data as returned by the oData-service
	 * @param {sap.ui.comp.filterbar.FilterItem} oFilterItem representing the filter
	 * @param {sap.ui.core.Control} oControl the control as described by the oFilterItem
	 * @returns {boolean} true if the filter item has a value
	 * @private
	 */
	SmartFilterBar.prototype._checkForValues = function(oData, oFilterItem, oControl) {
		var sValue = null;
		if (oData && oFilterItem && oControl) {
			if (!oFilterItem.data("isCustomField")) {
				// Check if Data exists in the filter model for internal fields
				sValue = oData[oFilterItem.getName()];
			} else {

				var oCustomData = oControl.data("hasValue");
				if ((oCustomData !== undefined) && (oCustomData != null)) {
					return this._checkHasValueData(oCustomData);
				} else {
					/* eslint-disable no-lonely-if */
					if (oControl.getValue) {
						// Check if getValue is present and filled
						sValue = oControl.getValue();
					} else if (oControl.getSelectedKey) { // new mechanism with 1.25. Has to be provided by the custom field
						// Check if getSelectedKey is set
						sValue = oControl.getSelectedKey();
					}
					/* eslint-enable no-lonely-if */
				}
			}
		}

		return sValue ? true : false;
	};

	/**
	 * Returns all filter items containing a value
	 * 
	 * @returns {array} filter items containing a value
	 * @private
	 */
	SmartFilterBar.prototype.getFiltersWithValues = function() {
		var aFilterItemsWithValue = [];

		// logic from check _validateMandatoryFields
		var aFilterItems = this.getAllFilterItems(true), oFilterItem, oData = this.getFilterData(), iLen = 0, oControl;
		if (aFilterItems && oData) {
			iLen = aFilterItems.length;
			// Loop through the mandatory field names
			while (iLen--) {
				oFilterItem = aFilterItems[iLen];
				// Get the control from filter item name
				oControl = this.determineControlByFilterItem(oFilterItem);
				if (this._checkForValues(oData, oFilterItem, oControl)) {
					aFilterItemsWithValue.push(oFilterItem);
				}
			}
		}

		return aFilterItemsWithValue;
	};

	/**
	 * Returns the data currently set in the filter data model as string.
	 * 
	 * @param {boolean} bAllFilterData Also include empty/invisible fields filter data
	 * @returns {string} The JSON data string
	 * @public
	 */
	SmartFilterBar.prototype.getFilterDataAsString = function(bAllFilterData) {
		var oData = null;
		if (this._oFilterProvider) {
			if (bAllFilterData) {
				oData = this._oFilterProvider.getFilterDataAsString();
			} else {
				oData = this._oFilterProvider.getFilledFilterDataAsString(this._getVisibleFieldNames());
			}
		}
		return oData;
	};

	/**
	 * Sets the data in the filter data model. The follow-on filterChange event is only triggered when none _CUSTOM data is set.
	 * 
	 * @param {object} oJson The JSON data in the filter bar
	 * @param {boolean} bReplace Replace existing filter data
	 * @public
	 */
	SmartFilterBar.prototype.setFilterData = function(oJson, bReplace) {
		if (this._oFilterProvider) {
			this._oFilterProvider.setFilterData(oJson, bReplace);
		}

		if (oJson && (Object.keys(oJson).length === 1) && oJson._CUSTOM) {
			// in case only _CUSTOM information is available do not trigger filterChange-event
			return;
		}

		// The internal controls do not fire change event in this scenario
		// So, we fire it manually once here
		this.fireFilterChange({
			afterFilterDataUpdate: true
		});
	};

	/**
	 * Sets the data in the filter data model as string.
	 * 
	 * @param {string} sJson The JSON data in the filter bar
	 * @param {boolean} bReplace Replace existing filter data
	 * @public
	 */
	SmartFilterBar.prototype.setFilterDataAsString = function(sJson, bReplace) {
		if (sJson) {
			this.setFilterData(JSON.parse(sJson), bReplace);
		}
	};

	/**
	 * Overwrites method from base class. Called when user clicks the reset button of the FilterBar. Clears all filter fields and fires reset event.
	 * 
	 * @private
	 */
	SmartFilterBar.prototype.fireClear = function() {
		this._clearFilterFields();
		this.fireEvent("clear", arguments);
	};

	/**
	 * Clears the values of all filter fields. Applies default values if applicable.
	 * 
	 * @private
	 */
	SmartFilterBar.prototype._clearFilterFields = function() {
		if (this._oFilterProvider) {
			this._oFilterProvider.clear();
		}
		// The internal controls do not fire change event in this scenario
		// So, we fire it manually once here
		this.fireFilterChange({
			afterFilterDataUpdate: true
		});
	};

	/**
	 * Overwrites method from base class. Called when user clicks the reset button of the FilterBar. Clears all filter fields and fires reset event.
	 * 
	 * @private
	 */
	SmartFilterBar.prototype.fireReset = function() {
		this._resetFilterFields();
		this.fireEvent("reset", arguments);
	};

	/**
	 * Clears the values of all filter fields. Applies default values if applicable.
	 * 
	 * @private
	 */
	SmartFilterBar.prototype._resetFilterFields = function() {
		if (this._oFilterProvider) {
			this._oFilterProvider.reset();
		}
		// The internal controls do not fire change event in this scenario
		// So, we fire it manually once here
		this.fireFilterChange({
			afterFilterDataUpdate: true
		});
	};

	/**
	 * Overwrites method from base class. Called when user clicks the search button of the FilterBar. Does a mandatory check before triggering Search
	 * 
	 * @private
	 * @returns {boolean} true indicated, that there are no validation problems
	 */
	SmartFilterBar.prototype.search = function() {
		var parameter = [], oObj = {}, bContinue, bInValidationError = false, sErrorMessage;
		delete this.bIsSearchPending;
		// First check for validation errors or if search should be prevented
		bContinue = this._validateState();

		if (!bContinue) {
			if (this.bIsSearchPending) {
				// if Search is pending.. do nothing
				return;
			} else {
				// validation errors exist
				bInValidationError = true;
			}
		} else {
			// Then check if any mandatory control is empty
			bContinue = this._validateMandatoryFields();
		}

		if (this.isPending() && !this._bIsPendingChangeAttached) {
			var fnHandler = function(oEvent) {
				if (oEvent.getParameter("pendingValue") === false) {
					this.detachPendingChange(fnHandler);
					this._bIsPendingChangeAttached = false;
					this.search();
				}
			}.bind(this);
			this._bIsPendingChangeAttached = true;
			this.attachPendingChange(fnHandler);
			return;
		}

		if (bContinue) {
			oObj.selectionSet = this._retrieveCurrentSelectionSet();
			parameter.push(oObj);
			this.fireSearch(parameter);
		} else {
			if (!this._oResourceBundle) {
				this._oResourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp");
			}

			if (!bInValidationError) {
				if (!this._sMandatoryErrorMessage) {
					this._sMandatoryErrorMessage = this._oResourceBundle.getText("EMPTY_MANDATORY_MESSAGE");
				}
				sErrorMessage = this._sMandatoryErrorMessage;
			} else {
				if (!this._sValidationErrorMessage) {
					this._sValidationErrorMessage = this._oResourceBundle.getText("VALIDATION_ERROR_MESSAGE");
				}
				sErrorMessage = this._sValidationErrorMessage;
			}
			try {
				MessageBox.error(sErrorMessage, {
					styleClass: (this.$() && this.$().closest(".sapUiSizeCompact").length) ? "sapUiSizeCompact" : ""
				});
			} catch (x) {
				return;
			}
			// Opens the more area if error message is shown and if empty mandatory fields are present in the advanced filter area!
			if (this._bExpandAdvancedFilterArea && this.rerenderFilters) {
				this.rerenderFilters(true);
			}

		}
		return bContinue;
	};

	/**
	 * Checks the pending state of the FilterBar control
	 * 
	 * @public
	 * @returns {boolean} true if at least one FilterItem element of the FilterBar control is pending
	 */
	SmartFilterBar.prototype.isPending = function() {
		if (!this._oFilterProvider) {
			return false;
		}
		return this._oFilterProvider.isPending();
	};

	/**
	 * Checks if the values of all mandatory filter fields are filled and returns true if they are; else returns false. If no fields and data exist
	 * true is returned! ErrorMessage/ErrorState is set on the fields accordingly.
	 * 
	 * @private
	 * @returns {boolean} true when no errors exist
	 */
	SmartFilterBar.prototype._validateMandatoryFields = function() {
		var bFilled = true, aFilterItems = this.determineMandatoryFilterItems(), oFilterItem, oData = this.getFilterData(), iLen = 0, oControl;
		this._bExpandAdvancedFilterArea = false;
		if (aFilterItems && oData) {
			iLen = aFilterItems.length;
			// Loop through the mandatory field names
			while (iLen--) {
				oFilterItem = aFilterItems[iLen];

				// sField = oFilterItem.getName();
				// Get the control from filter item name
				oControl = this.determineControlByFilterItem(oFilterItem);
				if (oControl && oControl.setValueState) {

					if (this._checkForValues(oData, oFilterItem, oControl)) {
						// Clear error state only if it was set due to mandatory check
						if (oControl.data("__mandatoryEmpty")) {
							oControl.data("__mandatoryEmpty", null);
							oControl.setValueState(sap.ui.core.ValueState.None);
						}
					} else {
						bFilled = false;
						// If field has a value property and it is empty --> show error
						oControl.setValueState(sap.ui.core.ValueState.Error);
						// set flag if error state was set due to mandatory check
						oControl.data("__mandatoryEmpty", true);
						// GroupName method exists only on FilterGroupItem --> part of advanced filter area
						if (oFilterItem.getGroupName) {
							this._bExpandAdvancedFilterArea = true; // !!!! TODO: expand the filter area
						}
					}
				}
			}
		}
		return bFilled;
	};

	SmartFilterBar.prototype._setSmartVariant = function(sSmartVariant) {
		if (sSmartVariant) {
			var oSmartVariantControl = sap.ui.getCore().byId(sSmartVariant);
			if (oSmartVariantControl) {
				if (oSmartVariantControl instanceof SmartVariantManagement) {

					if (this._oVariantManagement && !this._oVariantManagement.isPageVariant()) {
						this._replaceVariantManagement(oSmartVariantControl);
						this._oSmartVariantManagement = oSmartVariantControl;
					}

				} else {
					jQuery.sap.log.error("Control with the id=" + sSmartVariant + " not of expected type");
				}
			} else {
				jQuery.sap.log.error("Control with the id=" + sSmartVariant + " not found");
			}
		}
	};

	SmartFilterBar.prototype.setSmartVariant = function(sSmartVariant) {

		if (this.getAdvancedMode()) {
			jQuery.sap.log.error("not supported for the advanced mode");
			return;
		}

		this.setAssociation("smartVariant", sSmartVariant);
		this._setSmartVariant(sSmartVariant);
	};

	/**
	 * creates the smart variant-management control
	 * 
	 * @private
	 * @returns {SmartVariantManagement} the newly created variant control
	 */
	SmartFilterBar.prototype._createVariantManagement = function() {

		this._oSmartVariantManagement = null;

		if (this.getAdvancedMode()) {
			return FilterBar.prototype._createVariantManagement.apply(this);
		}

		this._oSmartVariantManagement = new SmartVariantManagement(this.getId() + "-variant", {
			showExecuteOnSelection: true,
			showShare: true
		});

		return this._oSmartVariantManagement;
	};

	/**
	 * initializes the variant management, when the prerequisites are full filled. In this case the initialise-event will be triggered lated, after
	 * the variant management initialization. Triggers the initialise-event immediately, in case the pre-requisits are not full filled
	 * 
	 * @private
	 */
	SmartFilterBar.prototype._initializeVariantManagement = function() {
		// initialise SmartVariant stuff only if it is necessary! (Ex: has a persistencyKey)
		if (!this.isRunningInValueHelpDialog && this._oSmartVariantManagement && this.getPersistencyKey()) {
			var oPersInfo = new PersonalizableInfo({
				type: "filterBar",
				keyName: "persistencyKey",
				dataSource: this.getEntityType()
			});
			oPersInfo.setControl(this);

			this._oSmartVariantManagement.addPersonalizableControl(oPersInfo);

			var bValue = this._checkHasValueData(this.data("executeStandardVariantOnSelect"));
			if (bValue) {
				this._oSmartVariantManagement._executeOnSelectForStandardVariant(bValue);
			}

			FilterBar.prototype._initializeVariantManagement.apply(this, arguments);

		} else {

			this.fireInitialise();
		}
	};

	/**
	 * Returns an instance of the control for the basic search.
	 * 
	 * @returns {object} Basic search control
	 * @public
	 */
	SmartFilterBar.prototype.getBasicSearchControl = function() {
		return sap.ui.getCore().byId(this.getBasicSearch());
	};

	/**
	 * Searches for the filter field having the specified OData key and adds this filter field to the advanced area. If there is no corresponding
	 * field in the OData metadata, this method has no effect.
	 * 
	 * @param {string} sKey The key like specified in the OData metadata
	 * @public
	 */
	SmartFilterBar.prototype.addFieldToAdvancedArea = function(sKey) {
		var oFilterItem;
		oFilterItem = this._getFilterItemByName(sKey);
		if (oFilterItem && oFilterItem.setVisibleInAdvancedArea) {
			oFilterItem.setVisibleInAdvancedArea(true);
		}
	};

	SmartFilterBar.prototype.getConditionTypeByKey = function(sKey) {
		if (this._oFilterProvider._mConditionTypeFields[sKey]) {
			return this._oFilterProvider._mConditionTypeFields[sKey].conditionType;
		}
	};
	/**
	 * Destroys the control.
	 * 
	 * @public
	 */
	SmartFilterBar.prototype.destroy = function() {
		FilterBar.prototype.destroy.apply(this, arguments);

		sap.ui.getCore().getMessageManager().unregisterObject(this);

		if (this._oFilterProvider && this._oFilterProvider.destroy) {
			this._oFilterProvider.destroy();
		}
		this._oFilterProvider = null;
		this._aFilterBarViewMetadata = null;
		this._bExpandAdvancedFilterArea = null;
		this._oResourceBundle = null;
		this._sMandatoryErrorMessage = null;
		this._sValidationErrorMessage = null;

		this._oSmartVariantManagement = null;
	};

	return SmartFilterBar;

}, /* bExport= */true);

}; // end of sap/ui/comp/smartfilterbar/SmartFilterBar.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.Group') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartform.Group.
jQuery.sap.declare('sap.ui.comp.smartform.Group'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.ResponsiveFlowLayoutData'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.form.FormContainer'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/Group",[
	'jquery.sap.global', 'sap/ui/comp/library', 'sap/ui/core/Element', 'sap/ui/layout/ResponsiveFlowLayoutData', 'sap/ui/layout/form/FormContainer', './GroupElement'
], function(jQuery, library, Element, ResponsiveFlowLayoutData, FormContainer, GroupElement) {
	"use strict";

	/**
	 * Constructor for a new smartform/Group.
	 * 
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class Groups are used to group group elements.
	 * @extends sap.ui.core.Control
	 * @author Alexander Fürbach
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartform.Group
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var Group = FormContainer.extend("sap.ui.comp.smartform.Group", /** @lends sap.ui.comp.smartform.Group.prototype */
	{
		metadata: {

			library: "sap.ui.comp",
			designTime: true,
			properties: {
				/**
				 * Specifies whether the groups shall be rendered in a ResponsiveLayout with label on top of the group element. Each group will be
				 * rendered in a new line.
				 */
				useHorizontalLayout: {
					type: "boolean",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Specifies the minimal size in pixels of all group elements of the form if horizontal Layout is used.
				 */
				horizontalLayoutGroupElementMinWidth: {
					type: "int",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Label for the group.
				 */
				label: {
					type: "string",
					group: "Misc",
					defaultValue: null
				}

			},
			defaultAggregation: "groupElements",
			aggregations: {

				/**
				 * A GroupElement is a combination of one label and different controls associated to this label.
				 */
				groupElements: {
					type: "sap.ui.comp.smartform.GroupElement",
					multiple: true,
					singularName: "groupElement"
				},

				/**
				 * Layout to specify how the group shall be rendered (e.g. span and line-break)
				 */
				layout: {
					type: "sap.ui.layout.GridData",
					multiple: false
				}
			},
			_visibilityDerived: false
		}
	});

	/**
	 * Initialize the control.
	 * 
	 * @private
	 */
	Group.prototype.init = function() {
		FormContainer.prototype.init.apply(this, arguments);

		var oResponsiveLayout = new ResponsiveFlowLayoutData({
			"linebreak": true,
			"linebreakable": true
		});

		this.setLayoutData(oResponsiveLayout);

		this._updateFormContainerLabel();

	};

	Group.prototype.setUseHorizontalLayout = function(bValue) {
		this.setProperty("useHorizontalLayout", bValue);

		var aGroupElement = this.getGroupElements();
		if (aGroupElement) {
			aGroupElement.forEach(function(oGroupElement) {
				oGroupElement.setUseHorizontalLayout(bValue);
			});
		}
	};
	Group.prototype.setHorizontalLayoutGroupElementMinWidth = function(nValue) {
		this.setProperty("horizontalLayoutGroupElementMinWidth", nValue);

		var aGroupElement = this.getGroupElements();
		if (aGroupElement) {
			aGroupElement.forEach(function(oGroupElement) {
				oGroupElement.setHorizontalLayoutGroupElementMinWidth(nValue);
			});
		}
	};

	/**
	 * Setter for property editable of all smart fields in children hierarchy.
	 * 
	 * @param {boolean} bEditMode new value for editable property of smart fields.
	 * @return {sap.ui.comp.smartform.Group} <code>this</code> to allow method chaining.
	 * @public
	 */
	Group.prototype.setEditMode = function(bEditMode) {

		var aGroupElement = this.getGroupElements();
		if (aGroupElement) {
			aGroupElement.forEach(function(oGroupElement) {
				oGroupElement.setEditMode(bEditMode);
			});
		}
		return this;
	};

	/**
	 * Updates title of form container
	 * 
	 * @private
	 */
	Group.prototype._updateFormContainerLabel = function() {
		var oTitle = this.getTitle();

		if (!oTitle && this.getLabel()) {
			oTitle = new sap.ui.core.Title(this.getId() + "--Title");
			this.setTitle(oTitle);
		}

		if (oTitle) {
			oTitle.setText(this.getLabel());
		}
	};

	/**
	 * Delegates edit mode from parent( like SmartForm ) to the given group element
	 * 
	 * @private
	 * @param {object} oGroupElement on which the edit mode shall be set
	 */
	Group.prototype._delegateEditModeFromParent = function(oGroupElement) {
		var oParent = null;
		var bEditable = false;

		if (oGroupElement) {
			oParent = this.getParent();
			if (oParent && oParent.getEditable) {
				bEditable = oParent.getEditable();
				oGroupElement.setEditMode(bEditable);
			}
		}
	};

	/**
	 * Updates line breaks of group elements
	 * 
	 * @private
	 */
	Group.prototype._updateLineBreaks = function() {

		if (!this.getUseHorizontalLayout()) {
			return;
		}

		var oSmartForm = this.getParent();

		while (!oSmartForm._getCurrentSpan && oSmartForm.getParent) {
			oSmartForm = oSmartForm.getParent();
		}

		if (!oSmartForm._getCurrentSpan) {
			return;
		}

		var iCurrentSpan = oSmartForm._getCurrentSpan();

		if (!iCurrentSpan) {
			return;
		}

		var aElements = this.getGroupElements();

		aElements = aElements.filter(function(oElement) {
			return oElement.getVisible();
		});

		var iCount = 0;

		aElements.forEach(function(oElement) {

			iCount = iCount + 1;
			var oLayout = oElement.getFields()[0].getLayoutData();

			if (oLayout) {
				if (iCurrentSpan * iCount > 12) {
					oLayout.setLinebreak(true);
					iCount = 1;
				} else {
					oLayout.setLinebreak(false);
				}
			}
		});

	};

	Group.prototype._updateFormContainerVisibility = function() {
		var bActualVisible = this.getVisible();

		if (bActualVisible === false && this._visibilityDerived === false) {
			return;
		}

		var aGroupElements = this.getGroupElements();

		var bVisible = false;
		bVisible = aGroupElements.some(function(oGroupElement) {
			return oGroupElement.getVisible();
		});

		if (bActualVisible !== bVisible) {
			this._visibilityDerived = true;
			FormContainer.prototype.setProperty.apply(this, [
				"visible", bVisible
			]);
		}
	};

	/**
	 * Sets the given value for the given property
	 * 
	 * @param {string} sPropertyName name of the property to set
	 * @param {any} oValue value to set the property to
	 * @public
	 */
	Group.prototype.setProperty = function(sPropertyName, oValue) {

		FormContainer.prototype.setProperty.apply(this, arguments);

		if (sPropertyName === 'label') {
			this._updateFormContainerLabel();
		}
		if (sPropertyName === 'visible') {
			this._visibilityDerived = false;
		}
	};

	/**
	 * Sets a new value for property visible. Whether the control should be visible on the screen. If set to false, a placeholder is rendered instead
	 * of the real control When called with a value of null or undefined, the default value of the property will be restored. Default value is true.
	 * 
	 * @param {boolean} bVisible New value for property visible
	 * @return {sap.ui.comp.smartform.Group} <code>this</code> to allow method chaining.
	 * @public
	 */
	Group.prototype.setVisible = function(bVisible) {
		this._visibilityDerived = false;
		FormContainer.prototype.setProperty.apply(this, [
			'visible', bVisible
		]);
	};

	/**
	 * Adds some entity to the given aggregation.
	 * 
	 * @param {string} sAggregationName the strung identifying the aggregation that oObject should be added to.
	 * @param {sap.ui.base.ManagedObject} oObject the object to add.
	 * @return {sap.ui.comp.smartform.Group} <code>this</code> to allow method chaining.
	 * @public
	 */

	// TODO AF: do we need the handling for other aggregation, besides 'groupElements' ?? Wie passt diese Mezthode zu addGroupElemets ?? Löschen ?
	Group.prototype.addAggregation = function(sAggregationName, oObject) {
		var sInnerAggregationName = sAggregationName;
		var that = this;

		if (sAggregationName === "groupElements") {
			sInnerAggregationName = "formElements";
			this._delegateEditModeFromParent(oObject);
			oObject.setHorizontalLayoutGroupElementMinWidth(this.getHorizontalLayoutGroupElementMinWidth());
			oObject.setUseHorizontalLayout(this.getUseHorizontalLayout());
			oObject.attachVisibleChanged(function(oEvent) {
				that._updateFormContainerVisibility(oEvent);
			});
		}

		FormContainer.prototype.addAggregation.apply(this, [
			sInnerAggregationName, oObject
		]);
	};

	/**
	 * Adds some GroupElement into the aggregation <code>groupElements</code>
	 * 
	 * @param {sap.ui.comp.smartform.GroupElement} oGroupElement group element to add to aggregation named groupElements.
	 * @return {sap.ui.comp.smartform.Group} <code>this</code> to allow method chaining.
	 * @public
	 */
	Group.prototype.addGroupElement = function(oGroupElement) {
		this.addAggregation("groupElements", oGroupElement);
	};

	Group.prototype.getGroupElements = function() {
		return this.getFormElements();
	};

	/**
	 * Sets a new object in the named 0..1 aggregation.
	 * 
	 * @param {string} sAggregationName name of an 0..1 aggregation.
	 * @param {sap.ui.base.ManagedObject} oObject the managed object that is set as aggregated object.
	 * @return {sap.ui.comp.smartform.Group} <code>this</code> to allow method chaining.
	 * @public
	 */
	Group.prototype.setAggregation = function(sAggregationName, oObject) {
		var sInnerAggregationName = sAggregationName;
		if (sAggregationName === "layout") {
			sInnerAggregationName = "layoutData";
		}

		FormContainer.prototype.setAggregation.apply(this, [
			sInnerAggregationName, oObject
		]);
	};

	/*
	 * Group.prototype.setLayout = function(oLayout) { this.setLayoutData(oLayout); }; Group.prototype.getLayout = function() { return
	 * this.getLayoutData(); };
	 */

	/**
	 * Adds some CustomeData into the aggregation <code>customData</code>. Additionally the customData is also added to the SmartFields in the
	 * children hierarchy
	 * 
	 * @param {sap.ui.core.CustomData} oCustomData the customData to add.
	 * @return {sap.ui.comp.smartform.Group} <code>this</code> to allow method chaining.
	 * @public
	 */
	Group.prototype.addCustomData = function(oCustomData) {
		FormContainer.prototype.addCustomData.apply(this, arguments);

		var aGroupElement = this.getGroupElements();
		if (aGroupElement) {
			aGroupElement.forEach(function(oGroupElement) {
				oGroupElement.addCustomData(oCustomData.clone());
			});
		}
		return this;
	};

	/**
	 * Inserts a GroupElement into the aggregation <code>groupElements</code>
	 * 
	 * @param {sap.ui.comp.smartform.GroupElement} oGroupElement group element to insert into aggregation named groupElements.
	 * @param {int} iIndex the 0-based index the GroupElement should be inserted at.
	 * @return {sap.ui.comp.smartform.Group} <code>this</code> to allow method chaining.
	 * @public
	 */
	Group.prototype.insertGroupElement = function(oGroupElement, iIndex) {
		// set edit mode (contextEditable of SmartField)
		var oForm = this.getParent();
		if (oForm && oForm.getEditable) {
			oGroupElement.setEditMode(oForm.getEditable());
		}

		return this.insertFormElement(oGroupElement, iIndex);
	};

	/**
	 * Removes a GroupElement from the aggregation <code>groupElements</code>
	 * 
	 * @param {int|string|sap.ui.comp.smartform.GroupElement} vGroupElement the GroupElement to remove or its index or id.
	 * @return {sap.ui.comp.smartform.GroupElement} the removed GroupElement or null.
	 * @public
	 */
	Group.prototype.removeGroupElement = function(vGroupElement) {
		var oGroupElement = null;
		var aGroupElement = [];
		var i = 0;

		if (vGroupElement instanceof GroupElement) {
			oGroupElement = vGroupElement;
		} else {
			aGroupElement = this.getGroupElements();
			if (aGroupElement) {
				if (typeof vGroupElement === "number") {
					oGroupElement = aGroupElement[vGroupElement];
				} else if (typeof vGroupElement === "string") {
					for (i; i < aGroupElement.length; i++) {
						if (aGroupElement[i].sId === vGroupElement) {
							oGroupElement = aGroupElement[i];
							break;
						}
					}
				}
			}
		}

		if (oGroupElement) {
			return this.removeFormElement(oGroupElement);
		} else {
			return null;
		}
	};

	/**
	 * Removes all group elements from the aggregation <code>groupElements</code>
	 * 
	 * @param {int|string|sap.ui.comp.smartform.GroupElement} the GroupElement to remove or its index or id.
	 * @return {sap.ui.comp.smartform.GroupElement[]} an array of the removed elements.
	 * @public
	 */
	Group.prototype.removeAllGroupElements = function() {
		return this.removeAllFormElements();
	};

	Group.prototype.removeAggregation = function(sAggregationName, oObject) {
		if (sAggregationName === "groupElements") {
			return this.removeGroupElement(oObject);
		} else {
			return Element.prototype.removeAggregation.apply(this, arguments);
		}
	};

	Group.prototype.removeAllAggregation = function(sAggregationName) {
		if (sAggregationName === "groupElements") {
			return this.removeAllGroupElements();
		} else {
			return Element.prototype.removeAllAggregation.apply(this, arguments);
		}
	};

	/**
	 * Destroys all the group elements in the aggregation <code>groupElements</code>
	 * 
	 * @return {sap.ui.comp.smartform.Group} <code>this</code> to allow method chaining.
	 * @public
	 */
	Group.prototype.destroyGroupElements = function() {
		return this.destroyFormElements();
	};

	return Group;

}, /* bExport= */true);

}; // end of sap/ui/comp/smartform/Group.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.flexibility.FormP13nHandler') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
/*global Promise */

jQuery.sap.declare('sap.ui.comp.smartform.flexibility.FormP13nHandler'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexItemData'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.DialogType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.mvc.XMLView'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.FlexControllerFactory'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Transports'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.registry.Settings'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/flexibility/FormP13nHandler",[
	"jquery.sap.global", "sap/m/Dialog", "sap/m/FlexBox", "sap/m/FlexItemData", "sap/m/Text", "sap/m/Button", "sap/m/DialogType", "sap/ui/core/mvc/XMLView", "sap/ui/comp/smartform/SmartForm", "sap/ui/comp/smartform/Group", "sap/ui/comp/smartform/GroupElement", "sap/ui/comp/odata/FieldSelector", "sap/ui/fl/Utils", "sap/ui/model/json/JSONModel", "sap/ui/fl/FlexControllerFactory", "sap/m/MessageBox", "sap/ui/comp/transport/TransportSelection", "sap/ui/fl/Transports", "sap/ui/fl/registry/Settings"
], function(jQuery, Dialog, FlexBox, FlexItemData, Text, Button, DialogType, XMLView, SmartForm, SmartGroup, SmartField, FieldSelector, FlexUtils, JSONModel, FlexControllerFactory, MessageBox, TransportSelection, Transports, FlexSettings) {
	"use strict";

	/**
	 * @constructor
	 * @alias sap.ui.comp.smartform.flexibility.FormP13nHandler
	 * @author SAP SE
	 * @version 1.36.12
	 * @experimental Since 1.27.0
	 * @private
	 */
	var FormP13nHandler = function() {

		this._oOriginalDataModelForDialog = null;
	};

	/**
	 * Initialize the form personalization handler
	 *
	 * @param {sap.ui.comp.smartform.SmartForm} oSmartForm - smart form instance.
	 * @private
	 */
	FormP13nHandler.prototype.init = function(oSmartForm) {
		var mPropertyBag;
		
		this._oSmartForm = oSmartForm;
		this._oDialogContent = null;
		this._textResources = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp");
		this._oDialog = this._createDialog();
		var that = this;
		this._mergeErrorOccured = false;

		var oFlexController = this._getFlexController();
		if (this._oSmartForm) {
			mPropertyBag = {
			                appDescriptor: FlexUtils.getAppDescriptor(this._oSmartForm),
			                siteId: FlexUtils.getSiteId(this._oSmartForm)
			};
		}
		
		return FlexSettings.getInstance(oFlexController.getComponentName(), mPropertyBag).then(function(oSettings) {
			if (!oSettings.hasMergeErrorOccured()) {
				that._oDialog.setContentHeight("60%");
				that._oDialog.setTitle(that._textResources.getText("FORM_PERS_DIALOG_TITLE"));
				that._oDialogContent = that._createDialogContent();
				that._oDialog.addContent(that._oDialogContent);

			} else {
				that._mergeErrorOccured = true;
				that._oDialog.setType(DialogType.Message);
				that._oDialog.setTitle(that._textResources.getText("FORM_PERS_DIALOG_ERR_TITLE"));
				that._showMergeErrorMessageInDialog();
			}
			that._createButtons(oSettings);
		});
	};

	/**
	 * Creates an empty dialog
	 *
	 * @returns {sap.m.Dialog} Dialog
	 * @private
	 */
	FormP13nHandler.prototype._createDialog = function() {
		var oDialog;
		oDialog = new Dialog("smartFormPersDialog", {
			contentWidth: "60%",
			verticalScrolling: false,
			horizontalScrolling: false,
			afterClose: [this._destroyDialog, this]
		});
		return oDialog;
	};

	/**
	 * Create the buttons for saving, canceling and reset
	 * @parm {sap.ui.fl.registry.Settings} oSettings Settings for the current component
	 * @private
	 */
	FormP13nHandler.prototype._createButtons = function(oSettings) {
		// OK
		var oOkButton = new Button(this._oDialog.getId() + '-OkButton');
		oOkButton.setText(this._textResources.getText("FORM_PERS_DIALOG_OK"));
		oOkButton.attachPress(this._dialogOkClicked.bind(this));
		this._oDialog.addButton(oOkButton);

		// Cancel
		var oCancelButton = new Button(this._oDialog.getId() + '-CancelButton');
		oCancelButton.setText(this._textResources.getText("FORM_PERS_DIALOG_CANCEL"));
		oCancelButton.attachPress({
			sAction: "cancel"
		}, this._closeDialog, this);
		this._oDialog.addButton(oCancelButton);

		// Discard
		var oDiscardButton = new Button(this._oDialog.getId() + '-RestoreButton');
		oDiscardButton.setText(this._textResources.getText("FORM_PERS_DIALOG_RESET"));
		oDiscardButton.attachPress({
			sAction: "discard"
		}, this._confirmDiscardAllChanges, this);
		this._oDialog.addButton(oDiscardButton);

		if (!oSettings.isProductiveSystem() && !oSettings.hasMergeErrorOccured()) {
			// Transport
			var oTransportButton = new Button(this._oDialog.getId() + '-TransportButton');
			oTransportButton.setText(this._textResources.getText("FORM_PERS_DIALOG_TRANSPORT"));
			oTransportButton.attachPress({
				sAction: "transport"
			}, this._confirmTransportAllChanges, this);
			if (this._oDialog) {
				this._oDialog.addButton(oTransportButton);
			}
		}
	};

	/**
	 * Shows a transport selection error message.
	 *
	 * @param {object} oError - error object.
	 * @returns {Promise} promise that resolves with no parameters when the error message box is closed.
	 * @private
	 */
	FormP13nHandler.prototype._showTransportErrorMessage = function(oError) {
		return this._showMessage(MessageBox.Icon.ERROR, "FORM_PERS_TRANSPORT_ERROR_TITLE", "FORM_PERS_TRANSPORT_ERROR_MESSAGE", oError);
	};

	/**
	 * Opens the transport selection dialog
	 *
	 * @param {sap.ui.fl.Change} [oChange] - the change for which the transport information should be retrieved
	 * @returns {Promise} promise that resolves
	 * @private
	 */
	FormP13nHandler.prototype._openTransportSelection = function(oChange, bSuccessOnCancel) {
		var that = this;

		return new Promise(function(resolve, reject) {
			var fOkay = function(oResult) {
				if (oResult && oResult.getParameters) {
					var sTransport = oResult.getParameters().selectedTransport;
					var sPackage = oResult.getParameters().selectedPackage;
					var bFromDialog = oResult.getParameters().dialog;
					var oTransportInfo = {
						transport: sTransport,
						packageName: sPackage,
						fromDialog: bFromDialog
					};
					resolve(oTransportInfo);
				} else {
					resolve({});
				}
			};
			var fError = function(oError) {
				if (bSuccessOnCancel && (oError.sId === '' || oError.sId === 'cancel')) {
					resolve();
				}

				that._showTransportErrorMessage(oError).then(function() {
					reject(oError);
				});
			};
			var oObject = {}; // no restriction on package, name or name space
			if (oChange) {
				oObject["package"] = oChange.getPackage();
				oObject.namespace = oChange.getNamespace();
				oObject.name = oChange.getId();
				oObject.type = oChange.getDefinition().fileType;
			}
			var oTransports = new sap.ui.comp.transport.TransportSelection();
			oTransports.selectTransport(oObject, fOkay, fError, false, that._oSmartForm);
		});
	};

	/**
	 * Event handler - called when user has clicked the OK button in the personalization dialog. Creates change files and saves them to the backend.
	 *
	 * @private
	 * @returns {Promise} promise that resolves with no parameters
	 */
	FormP13nHandler.prototype._dialogOkClicked = function() {
		var aChangeSpecificData = [];
		if (!this._mergeErrorOccured) {
			aChangeSpecificData = this._getChangeDataFromDialog();
		}

		if (aChangeSpecificData.length === 0) {
			this._closeDialog();
			return new Promise(function(resolve, reject) {
				resolve({});
			});
		}

		var that = this;
		// Pass empty transport info object to save as LOCAL
		return that._createAndApplyChanges(aChangeSpecificData).then(function() {
			that._closeDialog();
		});
	};

	/**
	 * Create and apply changes.
	 *
	 * @param {array} aChangeSpecificData array of objects with change specific data
	 * @returns {Promise} promise that resolves with no parameters
	 * @private
	 */
	FormP13nHandler.prototype._createAndApplyChanges = function(aChangeSpecificData) {
		var that = this;

		return Promise.resolve().then(function() {

			var oFlexController;

			oFlexController = that._getFlexController();
			function fnValidChanges(oChangeSpecificData) {
				return oChangeSpecificData && oChangeSpecificData.selector && oChangeSpecificData.selector.id;
			}

			aChangeSpecificData.filter(fnValidChanges).forEach(function(oChangeSpecificData) {
				var oControl = that._getControlById(oChangeSpecificData.selector.id);
				oFlexController.createAndApplyChange(oChangeSpecificData, oControl);
			});

		})['catch'](function(oError) {
			FlexUtils.log.error("Create and apply error: " + oError);
			return oError;
		}).then(function(oError) {
			return that._getFlexController().saveAll().then(function() {
				if (oError) {
					throw oError;
				}
			});
		})['catch'](function(oError) {
			FlexUtils.log.error("Create and apply and/or save error: " + oError);
			return that._showApplySaveChangesErrorMessage(oError);
		});
	};

	/**
	 * Gets the control for the control ID.
	 *
	 * @param {string} sControlId control ID
	 * @returns {sap.ui.core.Control} control
	 * @private
	 */
	FormP13nHandler.prototype._getControlById = function(sControlId) {
		return sap.ui.getCore().byId(sControlId);
	};

	/**
	 * Returns an instance of the flex controller
	 *
	 * @private
	 * @returns {sap.ui.fl.FlexController} flex controller instance
	 */
	FormP13nHandler.prototype._getFlexController = function() {
		return FlexControllerFactory.createForControl(this._oSmartForm);
	};

	/**
	 * Load the view which is required for form personalization and add it to the content
	 *
	 * @private
	 * @returns {sap.ui.xmlview} view instance
	 */
	FormP13nHandler.prototype._createDialogContent = function() {
		var formView, oJSONData, sComponentName;

		if (!this._oSmartForm) {
			return undefined;
		}
		oJSONData = this._createModelFromSmartForm(this._oSmartForm);
		oJSONData.isMoveDownButtonEnabled = false;
		oJSONData.isMoveUpButtonEnabled = false;
		oJSONData.isMoveBottomButtonEnabled = false;
		oJSONData.isMoveTopButtonEnabled = false;

		this._oOriginalDataModelForDialog = JSON.parse(JSON.stringify(oJSONData)); // Clone data model and compare with modified data model later on,
		// to figure
		// out which changes have been performed

		this._oModel = new JSONModel();
		this._oModel.setData(oJSONData);

		formView = new sap.ui.comp.smartform.flexibility.DialogContent(this._oDialog.getId() + '-Content');
		// formView = sap.ui.xmlview("sap.ui.comp.smartform.flexibility.DialogContent");
		formView.setModel(this._oModel);
		var oView = FlexUtils.getViewForControl(this._oSmartForm);
		formView.setViewId(oView.createId(""));
		
		// Initialise Field Selector for OData $metadata
		var aIgnoredFields = this._getIgnoredFields(this._oSmartForm);
		sComponentName = FlexUtils.getComponentClassName(this._oSmartForm);
		var mPropertyBag = {
		                    appDescriptor: FlexUtils.getAppDescriptor(this._oSmartForm),
		                    siteId: FlexUtils.getSiteId(this._oSmartForm)
		};
		
		formView.initialiseODataFieldSelector(this._oSmartForm.getModel(), this._oSmartForm.getEntityType(), sComponentName, aIgnoredFields, this._mBindingPathToFieldListElement, this._mIdToFieldListElement, mPropertyBag);

		return formView;
	};

	/**
	 * Read ignored fields from smart form and parse CSV into array
	 *
	 * @param {sap.ui.comp.smartform.SmartForm} oSmartForm smart form instance
	 * @private
	 * @returns {Array} Returns a list of ignored fields or empty.
	 */
	FormP13nHandler.prototype._getIgnoredFields = function(oSmartForm) {
		if (oSmartForm) {
			var sCsvIgnoredFields = oSmartForm.getIgnoredFields();
			if (sCsvIgnoredFields) {
				var aIgnoredFields = sCsvIgnoredFields.split(",");
				return aIgnoredFields;
			}
		}
		return [];
	};

	/**
	 * Takes the smart forms before- and after the changes as arrays of JSON nodes and deduces the changes from their delta.
	 *
	 * @param {array} aJsonBefore - array of JSON nodes representing the smart forms before the changes.
	 * @param {array} aJsonAfter - array of JSON nodes representing the smart forms after the changes.
	 * @returns {array} list of change property bags (see sap.ui.fl.Change#createInitialFileContent oPropertyBag).
	 * @public
	 */
	FormP13nHandler.prototype._createChangeSpecificDataFromDialogModel = function(aJsonBefore, aJsonAfter) {

		/*
		 * node= { id:"abc", label:"zuzu", isVisible: true, type: "form", //form|group|field children: [node] }
		 */

		var aChanges = [], oChange;

		// map of Json nodes before the changes
		var oMapBefore = {};
		this._createNodeMap(aJsonBefore, oMapBefore);

		// map of Json nodes after the changes
		var oMapAfter = {};
		this._createNodeMap(aJsonAfter, oMapAfter);

		// determine label- and visibility changes
		var i, sId, oNodeBefore, oNodeAfter, bIsVisible;
		var aBefore = Object.keys(oMapBefore);
		for (i = 0; i < aBefore.length; i++) {
			sId = aBefore[i];
			if (oMapAfter[sId] && oMapAfter[sId].node) {
				oNodeBefore = oMapBefore[sId].node;
				oNodeAfter = oMapAfter[sId].node;
				// label change
				if (oNodeBefore.label && oNodeAfter.label && oNodeBefore.label !== oNodeAfter.label) {
					oChange = this._createLabelChange(sId, oNodeAfter.label, oNodeAfter.type);
					if (oChange && oChange.selector && oChange.selector.id) {
						aChanges.push(oChange);
					}
				}
				// visibility change
				if ((oNodeBefore.isVisible && !oNodeAfter.isVisible) || (!oNodeBefore.isVisible && oNodeAfter.isVisible)) {
					if (oNodeAfter.isVisible) {
						bIsVisible = true;
					} else {
						bIsVisible = false;
					}
					aChanges.push(this._createVisibilityChange(sId, bIsVisible));
				}
			}
		}

		// this map will hold the location of the children for node which has children
		// its purpose is to memorize all effects adding of fields/groups or moving of
		// fields between groups has on the locations of the children nodes
		// within method _check4AddChanges it is initialized on basis of oMapBefore
		// afterwards in method _check4AddChanges and _check4Inter/IntraMoveChanges
		// this map is updated for each add/move change
		var oParentChildIndex = {};

		// check for added fields/groups and add corresponding changes to the list
		// memorize effect of these changes on positions of children in oParentChildIndex
		for (i = 0; i < aJsonAfter.length; i++) {
			this._check4AddChanges(aJsonAfter[i], oMapBefore, aChanges, oParentChildIndex);
		}

		// check for moved groups/fields and add corresponding changes to the list
		// memorize effect of these changes on positions of children in oParentChildIndex
		for (i = 0; i < aJsonAfter.length; i++) {
			this._check4InterMoveChanges(aJsonAfter[i], oMapAfter, oMapBefore, aChanges, oParentChildIndex);
			this._check4IntraMoveChanges(aJsonAfter[i], oMapAfter, oMapBefore, aChanges, oParentChildIndex);
		}

		return aChanges;

	};

	/**
	 * Checks for added fields- and groups and adds corresponding changes to list
	 *
	 * @param {object} oParent - parent JSON node after the changes.
	 * @param {object} oMapBefore - map of JSON nodes before the changes.
	 * @param {array} aChanges - list of change property bags (see sap.ui.fl.Change#createInitialFileContent oPropertyBag).
	 * @param {object} oParentChildIndex - map which holds an index of the parents children - key is the parent id
	 * @private
	 */
	FormP13nHandler.prototype._check4AddChanges = function(oParent, oMapBefore, aChanges, oParentChildIndex) {

		if (oParent && oParent.id && oParent.children) {

			var i, iShift = 0, sId, sParentId, oChild;
			sParentId = oParent.id;

			// initialize map which holds an index of the parents children - key is the parent id
			// this map will be used to memorize the effect of add/move between parents changes on the positions of the children
			if (oMapBefore[sParentId] && oMapBefore[sParentId].node) {
				var oParentOld = oMapBefore[sParentId].node;
				if (!oParentChildIndex) {
					oParentChildIndex = {};
				}
				oParentChildIndex[sParentId] = {};
				oParentChildIndex[sParentId].index = {};
				for (i = 0; i < oParentOld.children.length; i++) {
					oChild = oParentOld.children[i];
					sId = oChild.id;
					// memorize child position as it was before all changes
					oParentChildIndex[sParentId].index[sId] = i;
				}
			}

			for (i = 0; i < oParent.children.length; i++) {
				oChild = oParent.children[i];
				if (oChild.id) {
					sId = oChild.id;
					// does the child node exist in the JSON before the changes ?
					// if not it is an added field/group
					if (!oMapBefore[sId]) {
						var oChange = this._createAddChange(sParentId, oChild, i);
						if (oChange && oChange.selector && oChange.selector.id) {
							aChanges.push(oChange);
							// each add change shifts the position of children located at higher index by one
							iShift++;
							// if the added field/group is invisible we have to create a hide change in addition
							if (!oChild.isVisible) {
								aChanges.push(this._createVisibilityChange(sId, false));
							}
						}
					} else if (iShift > 0 && oParentChildIndex[sParentId] && oParentChildIndex[sParentId].index[sId] !== undefined) {
						oParentChildIndex[sParentId].index[sId] = oParentChildIndex[sParentId].index[sId] + iShift;
					}
					// recursive call - child is new parent node
					this._check4AddChanges(oChild, oMapBefore, aChanges, oParentChildIndex);
				}
			}
		}

	};

	/**
	 * Checks for fields- and groups moved between parents and adds corresponding changes to list
	 *
	 * @param {object} oParent - parent JSON node after the changes.
	 * @param {object} oMapAfter - map of JSON nodes after the changes.
	 * @param {object} oMapBefore - map of JSON nodes before the changes.
	 * @param {array} aChanges - list of change property bags (see sap.ui.fl.Change#createInitialFileContent oPropertyBag).
	 * @param {object} oParentChildIndex - map which holds an index of the parents children - key is the parent id
	 * @private
	 */
	FormP13nHandler.prototype._check4InterMoveChanges = function(oParent, oMapAfter, oMapBefore, aChanges, oParentChildIndex) {

		if (oParent && oParent.id && oParent.children) {

			var i, sId, sParentId, sSourceParentId, aIndex = [], oIndex = {}, oChild, oChange = {};

			// id of parent node after the changes
			// in case of a move to a new parent this is the target parent Id
			sParentId = oParent.id;

			var iLength = oParent.children.length;

			// step 1 - search for moves between parents
			for (i = 0; i < iLength; i++) {
				oChild = oParent.children[i];
				if (oChild.id) {
					sId = oChild.id;
					// child existed before the changes - it is no added field
					if (oMapBefore[sId] && oMapBefore[sId].index !== undefined) {
						// check if the parent node of a field/group has changed
						// if yes this child has been moved between two parents
						if (!oMapBefore[sId].index[sParentId] && oMapBefore[sId].index[sParentId] !== 0) {
							// determine parent(s) before the move
							var j, aSourceParentId = [];
							aSourceParentId = Object.keys(oMapBefore[sId].index);
							for (j = 0; j < aSourceParentId.length; j++) {
								sSourceParentId = aSourceParentId[j];
								// memorize id of moved child and its new index - key is the id of the old parent
								// as the change will be created for the source parent of the move
								if (!oIndex[sSourceParentId]) {
									oIndex[sSourceParentId] = [];
								}
								oIndex[sSourceParentId].push({
									"id": sId,
									"index": oMapAfter[sId].index[sParentId]
								});
								// a move between two parents is handled by the change handler as removal of the child
								// from the source parent and insertion at the target parent
								// this means that for the effects of this operation on the positions of the children
								// at the source- and target parent no additional move changes are needed
								// to prevent that they are created we have to memorize the effect of this move on the
								// location of the children at the source- and target parent
								// like for the case of field adding we use map oParentChildIndex for this purpose
								// source parent of move - effect of child removal
								var sChildId, aChildIndex = [], iChildPosition, k;
								if (oParentChildIndex[sSourceParentId] && oParentChildIndex[sSourceParentId].index[sId] !== undefined) {
									// position of moved child at source parent before the move
									iChildPosition = oParentChildIndex[sSourceParentId].index[sId];
									delete oParentChildIndex[sSourceParentId].index[sId];
									aChildIndex = Object.keys(oParentChildIndex[sSourceParentId].index);
									for (k = 0; k < aChildIndex.length; k++) {
										sChildId = aChildIndex[k];
										// this child is located after the moved child
										// hence we have to lower its index by one to account for the removal
										if (oParentChildIndex[sSourceParentId].index[sChildId] > iChildPosition) {
											oParentChildIndex[sSourceParentId].index[sChildId]--;
										}
									}
								}
								// target parent - effect of child insertion
								if (oParentChildIndex[sParentId]) {
									// position of moved child at target parent after the move
									iChildPosition = oMapAfter[sId].index[sParentId];
									aChildIndex = Object.keys(oParentChildIndex[sParentId].index);
									for (k = 0; k < aChildIndex.length; k++) {
										sChildId = aChildIndex[k];
										// all children of target parent located at the same or higher index than the inserted child
										// have to have their index increased by one
										if (oParentChildIndex[sParentId].index[sChildId] >= iChildPosition) {
											oParentChildIndex[sParentId].index[sChildId]++;
										}
									}
									oParentChildIndex[sParentId].index[sId] = iChildPosition;
								}
							}
						}
					}
					// recursive call - child is new parent node
					this._check4InterMoveChanges(oChild, oMapAfter, oMapBefore, aChanges, oParentChildIndex);
				}
			}

			// step 2 - create moves with new parent control as target
			if (oIndex) {
				aIndex = Object.keys(oIndex);
				for (i = 0; i < aIndex.length; i++) {
					sSourceParentId = aIndex[i];
					oChange = this._createMoveChange(sSourceParentId, oParent.type, oIndex[sSourceParentId], oParent.id);
					if (oChange && oChange.selector && oChange.selector.id) {
						aChanges.push(oChange);
					}
				}
			}

		}

	};

	/**
	 * Checks for moved fields- and groups within the same parent and adds corresponding changes to list
	 *
	 * @param {object} oParent - parent JSON node after the changes.
	 * @param {object} oMapAfter - map of JSON nodes after the changes.
	 * @param {object} oMapBefore - map of JSON nodes before the changes.
	 * @param {array} aChanges - list of change property bags (see sap.ui.fl.Change#createInitialFileContent oPropertyBag).
	 * @param {object} oParentChildIndex - map which holds an index of the parents children - key is the parent id
	 * @private
	 */
	FormP13nHandler.prototype._check4IntraMoveChanges = function(oParent, oMapAfter, oMapBefore, aChanges, oParentChildIndex) {

		if (oParent && oParent.id && oParent.children) {

			var i, sId, sParentId, aIndex = [], oChild, oChange = {};

			// id of parent node after the changes
			// in case of a move to a new parent this is the target parent Id
			sParentId = oParent.id;

			var iLength = oParent.children.length;

			// step 1 - search for moves within the same parent
			for (i = 0; i < iLength; i++) {
				oChild = oParent.children[i];
				if (oChild.id) {
					sId = oChild.id;
					// child existed before the changes - not an added field
					if (oMapBefore[sId] && oMapBefore[sId].index !== undefined) {
						// check that the parent node of the child has not changed
						// if yes - check if child was moved within the same parent
						// get the index of the child node in the parent node children array after the changes and
						// compare it with its index before the changes
						// if there is a difference this child node was moved within the same parent
						if (oMapBefore[sId].index[sParentId] !== undefined && oMapBefore[sId].index[sParentId] !== i) {
							// child position has changed - but was this due to a move within this parent
							// or just the effect of an add/move to a new parent ?
							// in the latter case the change handlers will take care of the position handling
							// and no move change is needed
							// to find out check the position of the child after application of all add/move to new parent changes
							// which have been memorized in oParentChildIndex
							// only when the child position memorized in oParentChildIndex also differs from
							// its current position a move change has to be created
							if (oParentChildIndex[sParentId] && oParentChildIndex[sParentId].index[sId] !== undefined && oParentChildIndex[sParentId].index[sId] !== i) {
								// memorize id of moved field/group and new index
								aIndex.push({
									"id": sId,
									"index": oMapAfter[sId].index[sParentId]
								});
							}
						}
					}
					// recursive call - child is new parent node
					this._check4IntraMoveChanges(oChild, oMapAfter, oMapBefore, aChanges, oParentChildIndex);
				}
			}

			// step 2 - create changes for moves within the same parent control
			if (aIndex.length > 0) {
				// create move change for the parent node as child node(s) was/were moved
				// aIndex contains objects holding the id's of the moved child nodes and their new index
				oChange = this._createMoveChange(sParentId, oParent.type, aIndex, "");
				if (oChange && oChange.selector && oChange.selector.id) {
					aChanges.push(oChange);
				}
			}

		}

	};

	/**
	 * Creates a property bag for an add change
	 *
	 * @param {string} sId - id of parent.
	 * @param {object} oNode - JSON node of field/group to add.
	 * @param {number} iIndex - position at which field/group has to be added
	 * @returns{object} change property bag (see sap.ui.fl.Change#createInitialFileContent oPropertyBag).
	 * @private
	 */
	FormP13nHandler.prototype._createAddChange = function(sId, oNode, iIndex) {

		var oAddChange = {};

		oAddChange.selector = {};
		oAddChange.selector.id = sId;

		// index at which new control has to be inserted
		oAddChange.index = iIndex;

		// new Id of group/field
		oAddChange.newControlId = oNode.id; // oView.createId(jQuery.sap.uid());

		switch (oNode.type) {
			case "form":
				oAddChange = {};
				break;
			case "group":
				oAddChange.changeType = "addGroup";
				if (!oNode.label) {
					oAddChange.groupLabel = "";
				} else {
					oAddChange.groupLabel = oNode.label;
				}
				break;
			case "field":
				oAddChange.changeType = "addField";
				if (!oNode.label) {
					oAddChange.fieldLabel = "";
				} else {
					oAddChange.fieldLabel = oNode.label;
				}
				if (!oNode.fieldValue) {
					oAddChange.fieldValue = "";
				} else {
					oAddChange.fieldValue = oNode.fieldValue;
				}
				if (!oNode.valueProperty) {
					oAddChange.valueProperty = "";
				} else {
					oAddChange.valueProperty = oNode.valueProperty;
				}
				if (!oNode.jsType) {
					oAddChange.jsType = "";
				} else {
					oAddChange.jsType = oNode.jsType;
				}

				break;
			default:
				oAddChange = {};
				break;
		}

		return oAddChange;

	};

	/**
	 * Creates a property bag for a label change
	 *
	 * @param {string} sId - control id.
	 * @param {string} sLabel - new label.
	 * @param {string} sType - node type (form|group|field).
	 * @returns{object} change property bag (see sap.ui.fl.Change#createInitialFileContent oPropertyBag).
	 * @private
	 */
	FormP13nHandler.prototype._createLabelChange = function(sId, sLabel, sType) {

		var oLabelChange = {};

		oLabelChange.selector = {};
		oLabelChange.selector.id = sId;

		switch (sType) {
			case "form":
				oLabelChange = {};
				break;
			case "group":
				oLabelChange.changeType = "renameGroup";
				oLabelChange.groupLabel = sLabel;
				break;
			case "field":
				oLabelChange.changeType = "renameField";
				oLabelChange.fieldLabel = sLabel;
				break;
			default:
				oLabelChange = {};
				break;
		}

		return oLabelChange;

	};

	/**
	 * Creates a property bag for a move change
	 *
	 * @param {string} sId - id of parent of fields/groups.
	 * @param {string} sType - type of parent of fields/groups.
	 * @param {array} aIndex - array with index of fields/groups after move.
	 * @param {string} sTargetId - target id of new parent (optional)
	 * @returns{object} change property bag (see sap.ui.fl.Change#createInitialFileContent oPropertyBag).
	 * @private
	 */
	FormP13nHandler.prototype._createMoveChange = function(sId, sType, aIndex, sTargetId) {

		var oMoveChange = {};

		oMoveChange.selector = {};
		oMoveChange.selector.id = sId;

		switch (sType) {
			case "form":
				oMoveChange.changeType = "moveGroups";
				oMoveChange.moveGroups = aIndex;
				break;
			case "group":
				oMoveChange.changeType = "moveFields";
				oMoveChange.moveFields = aIndex;
				break;
			default:
				oMoveChange = {};
				break;
		}

		if (sTargetId) {
			oMoveChange.targetId = sTargetId;
		}

		return oMoveChange;

	};

	/**
	 * Creates a property bag for a visibility change
	 *
	 * @param {string} sId - control id.
	 * @param {boolean} bIsVisible - control visibility.
	 * @returns{object} change property bag (see sap.ui.fl.Change#createInitialFileContent oPropertyBag).
	 * @private
	 */
	FormP13nHandler.prototype._createVisibilityChange = function(sId, bIsVisible) {

		var oVisibilityChange = {};

		oVisibilityChange.selector = {};
		oVisibilityChange.selector.id = sId;

		if (bIsVisible === true) {
			oVisibilityChange.changeType = "unhideControl";
		} else {
			oVisibilityChange.changeType = "hideControl";
		}

		return oVisibilityChange;

	};

	/**
	 * Creates a map of JSON nodes - key is the node's id Each entry has attributes 'node' and 'index' 'node' stores the node instance 'index' stores
	 * a map which has the id of the parent node as key and the index of the node within the parent node's children array as value
	 *
	 * @param {array} aJsonNodes - array of JSON nodes representing the smart forms.
	 * @param {object} oNodeMap - map of nodes.
	 * @param {object} oParent - parent JSON node.
	 * @private
	 */
	FormP13nHandler.prototype._createNodeMap = function(aJsonNodes, oNodeMap, oParent) {

		/*
		 * node= { id:"abc", label:"zuzu", isVisible: true, type: "form", //form|group|field children: [node] }
		 */

		if (!oNodeMap) {
			throw new Error("Node map instance must be provided");
		}

		if (!aJsonNodes || !aJsonNodes.length) {
			return;
		}

		var oNode, sId;

		var i, iLength = aJsonNodes.length;
		for (i = 0; i < iLength; i++) {

			oNode = aJsonNodes[i];

			if (oNode && oNode.id) {

				sId = oNode.id;

				if (!oNodeMap[sId]) {
					oNodeMap[sId] = {};
					oNodeMap[sId].node = oNode;
				}

				if (oParent && oParent.id) {
					if (!oNodeMap[sId].index) {
						oNodeMap[sId].index = {};
					}
					oNodeMap[sId].index[oParent.id] = i;
				}

				if (oNode.children) {
					this._createNodeMap(oNode.children, oNodeMap, oNode);
				}

			}

		}

	};

	/**
	 * Open the dialog and it's content
	 *
	 * @public
	 */
	FormP13nHandler.prototype.show = function() {
		this._oDialog.open();
	};

	/**
	 * Create and show error message in dialog when merge failed
	 *
	 * @private
	 */
	FormP13nHandler.prototype._showMergeErrorMessageInDialog = function() {
		var oFlexBoxLayout = new FlexBox();
		oFlexBoxLayout.setDirection("Column");
		oFlexBoxLayout.setAlignItems("Start");

		var messageDescriptionText = new Text();
		messageDescriptionText.setText(this._textResources.getText("FORM_PERS_DIALOG_ERR_DESC"));
		messageDescriptionText.setLayoutData(new FlexItemData({
			order: 1,
			growFactor: 1
		}));

		var messageResolveText = new Text();
		messageResolveText.setText(this._textResources.getText("FORM_PERS_DIALOG_ERR_HINT"));
		messageResolveText.setLayoutData(new FlexItemData({
			order: 1,
			growFactor: 1
		}));

		oFlexBoxLayout.addItem(messageDescriptionText);
		oFlexBoxLayout.addItem(messageResolveText);

		this._oDialog.addContent(oFlexBoxLayout);
	};

	FormP13nHandler.prototype._closeDialog = function() {
		if (this._oDialog) {
			this._oDialog.close();
		}
		this._destroyDialog();
	};

	FormP13nHandler.prototype._destroyDialog = function() {
		if (this._oDialogContent) {
			this._oDialogContent.destroy();
			this._oDialogContent = null;
		}
		if (this._oDialog) {
			this._oDialog.destroy();
			this._oDialog = null;
		}
	};

	/**
	 * Extracts the form-, group- and group element controls of a smart form creates a map of control IDs and controls out of it.
	 *
	 * @param {sap.ui.comp.smartform.SmartForm} oSmartForm The smart form which should be analyzed
	 * @returns {object} Returns an object of the control IDs and their form-, group- and group element controls of the current smart form
	 * @private
	 */
	FormP13nHandler.prototype._createSmartFormControlMap = function(oSmartForm) {
		var mControlMap = [];
		var sControlId;
		if (oSmartForm) {
			sControlId = oSmartForm.getId();
			mControlMap[sControlId] = oSmartForm;
			var aGroups = oSmartForm.getGroups();
			if (aGroups) {
				for (var i = 0; i < aGroups.length; i++) {
					var oGroup = aGroups[i];
					if (oGroup) {
						sControlId = oGroup.getId();
						mControlMap[sControlId] = oGroup;
						var aGroupElements = oGroup.getGroupElements();
						if (aGroupElements) {
							for (var j = 0; j < aGroupElements.length; j++) {
								var oGroupElement = aGroupElements[j];
								if (oGroupElement) {
									sControlId = oGroupElement.getId();
									mControlMap[sControlId] = oGroupElement;
								}
							}
						}
					}
				}
			}
		}
		return mControlMap;
	};

	/**
	 * Shows a discard all form changes success message.
	 *
	 * @private
	 */
	FormP13nHandler.prototype._showDiscardSuccessMessage = function() {
		return this._showMessage(MessageBox.Icon.SUCCESS, "FORM_PERS_DISCARD_SUCCESS_TITLE", "FORM_PERS_DISCARD_SUCCESS_MESSAGE");
	};

	/**
	 * Shows a transport success message saying that all form changes could be made transportable
	 *
	 * @private
	 */
	FormP13nHandler.prototype._showTransportSuccessMessage = function() {
		return this._showMessage(MessageBox.Icon.SUCCESS, "FORM_PERS_TRANSPORT_SUCCESS_TITLE", "FORM_PERS_TRANSPORT_SUCCESS_MESSAGE");
	};

	/**
	 * Shows a transport inapplicable message, in case all form changes were already made transportable
	 *
	 * @private
	 */
	FormP13nHandler.prototype._showTransportInapplicableMessage = function() {
		return this._showMessage(MessageBox.Icon.INFORMATION, "FORM_PERS_TRANSPORT_INAPPLICABLE_TITLE", "FORM_PERS_TRANSPORT_INAPPLICABLE_MESSAGE");
	};

	/**
	 * Shows a discard all form changes error message.
	 *
	 * @param {object} oError - error object.
	 * @private
	 */
	FormP13nHandler.prototype._showDiscardErrorMessage = function(oError) {
		return this._showMessage(MessageBox.Icon.ERROR, "FORM_PERS_DISCARD_ERROR_TITLE", "FORM_PERS_DISCARD_ERROR_MESSAGE", oError);
	};

	/**
	 * Shows a transport selection error message.
	 *
	 * @param {object} oError - error object.
	 * @returns {Promise} promise that resolves with no parameters when the error message box is closed.
	 * @private
	 */
	FormP13nHandler.prototype._showApplySaveChangesErrorMessage = function(oError) {
		return this._showMessage(MessageBox.Icon.ERROR, "FORM_PERS_APPLYSAVE_ERROR_TITLE", "FORM_PERS_APPLYSAVE_ERROR_MESSAGE", oError);
	};

	/**
	 * Shows a form changes message.
	 *
	 * @param {sap.m.MessageBox.Icon} oMessageType - message type.
	 * @param {string} sTitleKey - title key
	 * @param {string} sMessageKey - message key
	 * @param {object} [oError] - error object
	 * @returns {Promise} - promise
	 * @private
	 */
	FormP13nHandler.prototype._showMessage = function(oMessageType, sTitleKey, sMessageKey, oError) {
		return new Promise(function(resolve) {
			if (oError && (oError.sId === '' || oError.sId === 'cancel')) {
				// ignore: cancel button was pressed
				resolve();
			} else {
				var sMessage, aMessageArgs;
				if (oError) {
					aMessageArgs = [
						oError.message || oError
					];
					sMessage = this._textResources.getText(sMessageKey, aMessageArgs);
				}
				sMessage = this._textResources.getText(sMessageKey);
				var sTitle = this._textResources.getText(sTitleKey);
				MessageBox.show(sMessage, {
					icon: oMessageType,
					title: sTitle,
					onClose: resolve
				});
			}
		}.bind(this));
	};

	/**
	 * Returns only the changes that are relevant within the smart form.
	 *
	 * @param {array} aChanges - array of {sap.ui.fl.Change} instances
	 * @param {sap.ui.comp.smartform.SmartForm} oSmartForm - smart form instance.
	 * @returns {array} - filtered array of {sap.ui.fl.Change} instances
	 * @private
	 */
	FormP13nHandler.prototype._filterChangesForSmartForm = function(aChanges, oSmartForm) {
		var aResultChanges = [];
		var mFormControls = this._createSmartFormControlMap(oSmartForm);
		for (var i = 0; i < aChanges.length; i++) {
			var oChange = aChanges[i];
			var sSelectorId = oChange.getSelector().id;
			if (mFormControls[sSelectorId]) {
				aResultChanges.push(oChange);
			}
		}
		return aResultChanges;
	};

	/**
	 * Sets the transports for all changes.
	 *
	 * @param {array} aChanges array of {sap.ui.fl.Change}
	 * @param {integer} iChangeIdx array index of the change
	 * @param {string} sTransport optional: transport to set at the change if bFromDialog is true
	 * @param {boolean} bFromDialog optional: true if the transport has been set from the transport dialog
	 * @returns {Promise} promise that resolves without parameters
	 * @private
	 */
	FormP13nHandler.prototype._setTransports = function(aChanges, iChangeIdx, sTransport, bFromDialog) {
		// do a synchronous loop over all changes to fetch transport information per change each after the other
		// this is needed because only one transport popup should be shown to the user and not one per change
		var that = this;
		if (iChangeIdx >= 0) {
			var oCurrentChange = aChanges[iChangeIdx];

			if (bFromDialog === true) {
				// if the request has been set by the transport dialog already,
				// do not bring up the transport dialog a second time, but use this transport instead
				// if the change is locked on another transport, this will be resolved in the backend when the delete request is send

				if (oCurrentChange.getDefinition().packageName !== "$TMP") {
					oCurrentChange.setRequest(sTransport);
				}
				iChangeIdx--;
				// set the transport for the next request
				return that._setTransports(aChanges, iChangeIdx, sTransport, bFromDialog);
			} else {
				// bring up the transport dialog to get the transport information for a change

				if (oCurrentChange.getDefinition().packageName !== "$TMP") {
					return that._openTransportSelection(oCurrentChange).then(function(oTransportInfo) {

						oCurrentChange.setRequest(oTransportInfo.transport);

						if (oTransportInfo.fromDialog === true) {
							sTransport = oTransportInfo.transport;
							bFromDialog = true;
						}

						iChangeIdx--;
						// set the transport for the next request
						return that._setTransports(aChanges, iChangeIdx, sTransport, bFromDialog);
					});
				} else {
					iChangeIdx--;
					// set the transport for the next request
					return that._setTransports(aChanges, iChangeIdx, sTransport, bFromDialog);
				}
			}
		} else {
			return Promise.resolve(); // last change has been processed, continue with discarding the changes
		}
	};

	/**
	 * Returns only the changes that are relevant within the smart form.
	 *
	 * @param {array} aChanges array {sap.ui.fl.Change} instances
	 * @param {sap.ui.comp.smartform.SmartForm} oSmartForm smart form instance
	 * @returns {Promise} promise that resolves with no parameters
	 * @private
	 */
	FormP13nHandler.prototype._deleteChanges = function(aChanges, oSmartForm) {
		var that = this;
		var aSmartFormChanges = this._filterChangesForSmartForm(aChanges, oSmartForm);
		var oFlexController = that._getFlexController();

		var iChangeIdx = aSmartFormChanges.length - 1;
		return this._setTransports(aSmartFormChanges, iChangeIdx).then(function() {
			return oFlexController.discardChanges(aSmartFormChanges);
		}).then(function() {
			return that._showDiscardSuccessMessage();
		})["catch"](function(oError) {
			return that._showDiscardErrorMessage(oError);
		});
	};

	/**
	 * Show confirmation dialog about discarding all form changes.
	 *
	 * @private
	 */
	FormP13nHandler.prototype._confirmDiscardAllChanges = function() {
		var that = this;
		var mPropertyBag = {
		                    appDescriptor: FlexUtils.getAppDescriptor(that._oSmartForm),
		                    siteId: FlexUtils.getSiteId(that._oSmartForm)
		};
		
		var fConfirmDiscardAllChangesOk = function(sAction) {
		if (sAction === "OK") {
				var oFlexController = that._getFlexController();
				oFlexController.getComponentChanges(mPropertyBag).then(function(oChanges) {
					var aChanges = that._convertToChangeArray(oChanges);
					return that._deleteChanges(aChanges, that._oSmartForm);
				})["catch"](function(oError) {
					return that._showDiscardErrorMessage();
				}).then(function() {
					that._closeDialog();
				});
			}
		};
		var sMessage = this._textResources.getText("FORM_PERS_RESET_MESSAGE");
		var sTitle = this._textResources.getText("FORM_PERS_RESET_TITLE");
		MessageBox.confirm(sMessage, {
			title: sTitle,
			onClose: fConfirmDiscardAllChangesOk
		});
	};

	/**
	 * Show transport dialog to transport all changes.
	 *
	 * @private
	 */
	FormP13nHandler.prototype._confirmTransportAllChanges = function() {

		var that = this;

		return Promise.resolve()
			.then(getCreateAndApplyChanges)['catch'](handleCreateAndApplyChangesErrors)
			.then(getAllLocalChanges)
			.then(checkIfChangesHaveToBeMadeTransportable)
			.then(openTransportSelection)
			.then(transportAllLocalChanges)['catch'](handleAllErrors)
			.then(closeDialog);

		/*------------------------------------------------------------------------------*/

		function getCreateAndApplyChanges() {
			var aChangeSpecificData = that._getChangeDataFromDialog();
			if (aChangeSpecificData.length > 0) {
				return that._createAndApplyChanges(aChangeSpecificData);
			}
		}

		function handleCreateAndApplyChangesErrors(oError) {
			FlexUtils.log.error("SmartForm changes could not be applied or saved: " + oError);
			return that._showApplySaveChangesErrorMessage(oError).then(function() {
				throw new Error('createAndApply failed');
			});
		}

		function getAllLocalChanges() {
			return that._getAllLocalChanges();
		}

		function checkIfChangesHaveToBeMadeTransportable(aAllLocalChanges) {
			return !!aAllLocalChanges.length;
		}

		function openTransportSelection(bShouldTransport) {
			if (bShouldTransport) {
				return that._openTransportSelection(null, true);
			} else {
				return that._showTransportInapplicableMessage();
			}
		}

		function transportAllLocalChanges(oTransportInfo) {
			if (oTransportInfo && oTransportInfo.transport && oTransportInfo.packageName !== "$TMP") {
				return that._transportAllLocalChanges(oTransportInfo);
			}
		}

		function handleAllErrors(oError) {
			if (oError.message === 'createAndApply failed') {
				return;
			}
			FlexUtils.log.error("transport error" + oError);
			return that._showTransportErrorMessage(oError);
		}

		function closeDialog() {
			that._closeDialog();
		}
	};

	/**
	 * Get data for changes done via the dialog
	 *
	 * @returns {array} Returns a list of changes done via the dialog.
	 */
	FormP13nHandler.prototype._getChangeDataFromDialog = function() {
		var oDataModelForDialog, aChangeSpecificData;
		oDataModelForDialog = this._oModel.getData();

		aChangeSpecificData = this._createChangeSpecificDataFromDialogModel([
			this._oOriginalDataModelForDialog
		], [
			oDataModelForDialog
		]);
		return aChangeSpecificData;
	};

	/**
	 * Get all local changes of the smart form
	 *
	 * @returns {Promise} Promise which returns an array of all local changes of the smart form
	 */
	FormP13nHandler.prototype._getAllLocalChanges = function() {
		var that = this;
		var mPropertyBag = {
		                    appDescriptor: FlexUtils.getAppDescriptor(that._oSmartForm),
		                    siteId: FlexUtils.getSiteId(that._oSmartForm)
		};		
		
		return that._getFlexController().getComponentChanges(mPropertyBag).then(function(oChanges) {
			var aAllChanges = that._convertToChangeArray(oChanges);
			return that._filterChangesForSmartForm(aAllChanges, that._oSmartForm);
		});
	};

	/**
	 * Prepare all changes and assign them to an existing transport
	 *
	 * @param {object} oTransportInfo Information about the selected transport
	 * @returns {Promise} Promise which resolves without parameters
	 */
	FormP13nHandler.prototype._transportAllLocalChanges = function(oTransportInfo) {
		var that = this;
		return that._getAllLocalChanges().then(function(aAllLocalChanges) {
			var aTransportData = that._convertToChangeTransportData(aAllLocalChanges);

			// Pass list of changes to be transported with transport request to backend
			var oTransports = new Transports();
			var oTransportParams = {};
			oTransportParams.transportId = oTransportInfo.transport;
			oTransportParams.changeIds = aTransportData;
			return oTransports.makeChangesTransportable(oTransportParams).then(function() {
				// remove the $TMP package from all changes; has been done on the server as well,
				// but is not reflected in the client cache until the application is reloaded
				aAllLocalChanges.forEach(function(oChange) {
					if (oChange.getPackage() === '$TMP') {
						var oDefinition = oChange.getDefinition();
						oDefinition.packageName = '';
						oChange.setResponse(oDefinition);
					}
				});
			}).then(function() {
				return that._showTransportSuccessMessage();
			});
		});
	};

	/**
	 * Get list of changes which should be added to a transport
	 *
	 * @param {Array} aLocalChanges List of changes which data have to be extracted
	 * @returns {Array} Returns an array of object containing all required data to transport the existing local changes
	 */
	FormP13nHandler.prototype._convertToChangeTransportData = function(aLocalChanges) {
		var aTransportData = [];
		var len = aLocalChanges.length;
		for (var i = 0; i < len; i++) {
			var oCurrentChange = aLocalChanges[i];
			var oData = {};
			oData.namespace = oCurrentChange.getNamespace();
			oData.fileName = oCurrentChange.getId();
			oData.fileType = oCurrentChange.getDefinition().fileType;
			aTransportData.push(oData);
		}
		return aTransportData;
	};

	/**
	 * Convert map with changes to array with changes
	 *
	 * @param {Object} oChanges Map of changes
	 * @returns {Array} Returns an array of changes generated from an object of changes
	 */
	FormP13nHandler.prototype._convertToChangeArray = function(oChanges) {
		// convert change map to change array
		// workaround until getComponentChanges returns always an array
		var aChanges = oChanges;
		if (!jQuery.isArray(oChanges)) {
			aChanges = [];
			var aKeys = Object.keys(oChanges);
			for (var i = 0; i < aKeys.length; i++) {
				aChanges.push(oChanges[aKeys[i]]);
			}
		}
		return aChanges;
	};

	/**
	 * Extract the groups and fields of a smartform and convert it to the schema required by the personalization dialog
	 *
	 * @param {sap.ui.comp.smartform.SmartForm} oSmartForm The smartform which should be analyzed
	 * @returns {Array} Returns an array containing the form(s), groups and fields metadata, which will be used as JSON model for the dialog
	 * @private
	 */
	FormP13nHandler.prototype._createModelFromSmartForm = function(oSmartForm) {
		var formDocument, groups, i, currentGroup, groupData, currentGroupItems, k, fieldListElement;

		var that = this;

		// Introduce member _mBindingPathToFieldListElement for mapping the absolute binding paths to the field list elements,
		// which is used for updating labels contained in the field selector during initialization of the field selector
		// (field list = left part of the smartForm personalization dialog; field selector = right part of the smartForm personalization dialog)
		this._mBindingPathToFieldListElement = {};

		// Introduce member _mIdToFieldListElement for mapping the field list element ids (= group element ids) to the field list elements,
		// which is used for identifying fields not bound to the odata service during initialization of the field selector
		this._mIdToFieldListElement = {};

		if (oSmartForm) {
			formDocument = this._getModelNodeForSmartForm(oSmartForm);
			groups = oSmartForm.getGroups();
			if (groups) {
				for (i = 0; i < groups.length; i++) {
					currentGroup = groups[i];
					if (!FlexUtils.checkControlId(currentGroup)) {
						continue;
					}
					groupData = this._getModelNodeForSmartGroup(currentGroup);
					formDocument.children.push(groupData);

					if (currentGroup) {
						currentGroupItems = currentGroup.getGroupElements();
						if (currentGroupItems) {
							for (k = 0; k < currentGroupItems.length; k++) {
								if (!FlexUtils.checkControlId(currentGroupItems[k])) {
									continue;
								}
								var oGroupElement = currentGroupItems[k];
								fieldListElement = this._getModelNodeForSmartGroupElement(oGroupElement);
								// label is available, if label is not null, not undefined, and not ""
								var isLabelAvailable = !!(fieldListElement.label);
								if (isLabelAvailable) {
									groupData.children.push(fieldListElement);
									/* eslint-disable no-loop-func */
									jQuery.each(fieldListElement.bindingPaths, function(nIndex, oBindingPath) {
										that._mBindingPathToFieldListElement[oBindingPath.path] = fieldListElement;
									});
									/* eslint-enable no-loop-func */
									this._mIdToFieldListElement[fieldListElement.id] = fieldListElement;
								}
							}
						}
					}
				}
			}

		}

		return formDocument;
	};

	/**
	 * Get the metadata from the SmartForm itself
	 *
	 * @param {sap.ui.comp.smartform.SmartForm} oSmartForm The smartform which should be analyzed
	 * @returns {Object} Object containing the metadata of the smartform
	 * @private
	 */
	FormP13nHandler.prototype._getModelNodeForSmartForm = function(oSmartForm) {
		var result = {};
		result.id = oSmartForm.getId();
		result.label = oSmartForm.getTitle();
		result.isVisible = oSmartForm.getVisible();
		result.type = "form";
		result.children = [];

		return result;
	};

	/**
	 * Get the metadata from the Group itself
	 *
	 * @param {sap.ui.comp.smartform.Group} oSmartGroup The group which should be analyzed
	 * @returns {Object} Object containing the metadata of the group
	 * @private
	 */
	FormP13nHandler.prototype._getModelNodeForSmartGroup = function(oSmartGroup) {
		var result = {};
		result.id = oSmartGroup.getId();
		result.label = oSmartGroup.getLabel();
		result.isVisible = oSmartGroup.getVisible();
		result.type = "group";
		result.children = [];

		return result;
	};

	/**
	 * Gets the binding information including child controls
	 *
	 * @param {sap.ui.core.Control} oControl
	 * @param {array} aBinding
	 * @private
	 */
	FormP13nHandler.prototype._determineRelevantBindingPathsOf = function(oControl, aBinding) {
		var that = this;

		if (!aBinding) {
			aBinding = [];
		}
		if ((!oControl) || (!oControl.getMetadata)) {
			return;
		}

		var oMetaData = oControl.getMetadata();
		if (oMetaData) {
			// get binding info
			var mProps = oMetaData.getAllProperties();
			jQuery.each(mProps, function(propName, propObj) {
				// relevant properties are properties which can be used to map entries from the field list to entries of the field selector
				// (field list = left part of the smartForm personalization dialog; field selector = right part of the smartForm personalization dialog)
				var bRelevantProperty = propName === 'text' || propName === 'value' ||  propName === 'selected' || propName === 'selectedKey';
				if (bRelevantProperty) {				
					var oBinding = oControl.getBinding(propName);
					if (oBinding) {
						var sBindingPath = oBinding.getPath();
						if (sBindingPath) {
							var sAbsoluteBindingPath = that._getAbsoluteBindingPath(oControl, sBindingPath);
							var fIsAbsoluteBindingPathAlreadyContained = function(element) {
								return (element.path === sAbsoluteBindingPath);
							};
							if (!aBinding.some(fIsAbsoluteBindingPathAlreadyContained)) {
								aBinding.push({
									path: sAbsoluteBindingPath
								});
							}
						}
					}
				}
			});

			// traverse down
			var mAggrs = oMetaData.getAllAggregations();
			jQuery.each(mAggrs, function(aggrName, aggrObj) {
				var vControls = oControl.getAggregation(aggrName);
				if (!jQuery.isArray(vControls)) {
					var aControls = [];
					aControls.push(vControls);
					vControls = aControls;
				}
				if (vControls) {
					for (var c = 0; c < vControls.length; c++) {
						that._determineRelevantBindingPathsOf(vControls[c], aBinding);
					}
				}
			});
		}

		return aBinding;
	};

	FormP13nHandler.prototype._getAbsoluteBindingPath = function(oControl, sBindingPath) {
		var sPrefix = '';
		var oModel = oControl.getModel();
		if (oModel) {
			var oMetaModel = oModel.getMetaModel();
			if (oMetaModel) {
				var oBindingContext = oControl.getBindingContext();
				if (oBindingContext) {
					var sBindingContextPath = oBindingContext.getPath(); // e.g. /Headers(AccountingDocument='100015012',CompanyCode='0001',FiscalYear='2015')
					if (sBindingContextPath) {
						var oMetaContext = oMetaModel.getMetaContext(sBindingContextPath);
						if (oMetaContext) {
							var sMetaContextPath = oMetaContext.sPath; // e.g. /dataServices/schema/0/entityType/0
							if (sMetaContextPath) {
								var sEntityName = oMetaModel.getObject(sMetaContextPath).name;
								if (sEntityName) {
									sPrefix = sPrefix + sEntityName + '/'; // e.g. Header/
								}
							}
						}
					}
				}
			}
		}
		return sPrefix + sBindingPath;
	};

	/**
	 * Builds a JSON object for a smart group element, which will be used for the JSON model for the dialog.
	 *
	 * @param {sap.ui.comp.smartform.GroupElement} oGroupElement The field which should be analyzed
	 * @returns {Object} Object containing the metadata of the field
	 * @private
	 */
	FormP13nHandler.prototype._getModelNodeForSmartGroupElement = function(oGroupElement) {
		var result = {};
		result.id = oGroupElement.getId();
		result.label = oGroupElement.getLabelText();
		result.isVisible = oGroupElement.getVisible();
		if (result.isVisible) {
			// if the group is visible check if a child is visible as well
			result.isVisible = oGroupElement.getVisibleBasedOnElements();
		}
		result.type = "field";

		result.bindingPaths = this._determineRelevantBindingPathsOf(oGroupElement);

		return result;
	};

	return FormP13nHandler;
}, true);

}; // end of sap/ui/comp/smartform/flexibility/FormP13nHandler.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smarttable.SmartTable') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smarttable.SmartTable.
jQuery.sap.declare('sap.ui.comp.smarttable.SmartTable'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.VBoxRenderer'); // unlisted dependency retained
jQuery.sap.require('sap.m.Column'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.Table'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.m.Title'); // unlisted dependency retained
jQuery.sap.require('sap.m.OverflowToolbar'); // unlisted dependency retained
jQuery.sap.require('sap.m.OverflowToolbarButton'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarSeparator'); // unlisted dependency retained
jQuery.sap.require('sap.m.VBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.AnalyticalColumn'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.AnalyticalTable'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.Column'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.Table'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.TreeTable'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smarttable/SmartTable",[
	'jquery.sap.global', 'sap/m/VBoxRenderer', 'sap/m/Column', 'sap/m/Label', 'sap/m/MessageBox', 'sap/m/Table', 'sap/m/Text', 'sap/m/Title', 'sap/m/OverflowToolbar', 'sap/m/OverflowToolbarButton', 'sap/m/ToolbarSeparator', 'sap/m/VBox', 'sap/ui/comp/library', 'sap/ui/comp/providers/TableProvider', 'sap/ui/comp/smartfilterbar/FilterProvider', 'sap/ui/comp/smartvariants/SmartVariantManagement', 'sap/ui/model/FilterOperator', 'sap/ui/model/json/JSONModel', 'sap/ui/table/AnalyticalColumn', 'sap/ui/table/AnalyticalTable', 'sap/ui/table/Column', 'sap/ui/table/Table', 'sap/ui/table/TreeTable', 'sap/ui/comp/personalization/Util', 'sap/ui/comp/util/FormatUtil', 'sap/ui/comp/odata/ODataModelUtil'
], function(jQuery, VBoxRenderer, Column1, Label, MessageBox, ResponsiveTable, Text, Title, OverflowToolbar, OverflowToolbarButton, ToolbarSeparator, VBox, library, TableProvider, FilterProvider, SmartVariantManagement, FilterOperator, JSONModel, AnalyticalColumn, AnalyticalTable, Column, Table, TreeTable, PersonalizationUtil, FormatUtil, ODataModelUtil) {
	"use strict";

	/**
	 * Constructor for a new smarttable/SmartTable.
	 * 
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class The SmartTable control creates a table based on OData metadata and the configuration specified. The entitySet attribute must be
	 *        specified to use the control. This attribute is used to fetch fields from OData metadata, from which columns will be generated; it can
	 *        also be used to fetch the actual table data.<br>
	 *        Based on the tableType property, this control will render a standard, analytical, or responsive table.<br>
	 *        <b><i>Note:</i></b><br>
	 *        Most of the attributes/properties are not dynamic and cannot be changed once the control has been initialized.
	 * @extends sap.m.VBox
	 * @author Pavan Nayak, Benjamin Spieler
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smarttable.SmartTable
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var SmartTable = VBox.extend("sap.ui.comp.smarttable.SmartTable", /** @lends sap.ui.comp.smarttable.SmartTable.prototype */
	{
		metadata: {

			library: "sap.ui.comp",

			designTime: true,

			properties: {

				/**
				 * The entity set name from which to fetch data and generate the columns. Note that this is not a dynamic UI5 property
				 * 
				 * @since 1.26.0
				 */
				entitySet: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * ID of the corresponding SmartFilter control; When specified, the SmartTable searches for the SmartFilter (also in the closest
				 * parent View) and attaches to the relevant events of the SmartFilter; to fetch data, show overlay etc.
				 * 
				 * @since 1.26.0
				 */
				smartFilterId: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * CSV of fields that must be ignored in the OData metadata by the SmartTable control.<br>
				 * <i>Note:</i><br>
				 * No validation is done. Please ensure that you do not add spaces or special characters.
				 * 
				 * @since 1.26.0
				 */
				ignoredFields: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * CSV of fields that must be shown initially in the SmartTable as visible columns and in the order specified.<br>
				 * This property is mainly meant to be used when no LineItem annotation exists.<br>
				 * If you have fields in the XMLView they are always shown first; then, the columns are added based on the LineItem annotation and
				 * finally based on this property.<br>
				 * <i>Note:</i><br>
				 * If both this property and the LineItem annotation exist, the order of fields cannot be guaranteed to be as mentioned here.<br>
				 * No validation is done. Please ensure that you do not add spaces or special characters.
				 * 
				 * @since 1.32.0
				 */
				initiallyVisibleFields: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * CSV of fields that must be always requested from the backend<br>
				 * This property is mainly meant to be used when there is no PresentationVariant annotation.<br>
				 * If both this property and the PresentationVariant annotation exist, the select request sent to the backend would be a combination
				 * of both.<br>
				 * <i>Note:</i><br>
				 * This property has no effect when AnalyticalTable is used.<br>
				 * No validation is done. Please ensure that you do not add spaces or special characters.
				 * 
				 * @since 1.32.0
				 */
				requestAtLeastFields: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * CSV of fields that is not shown in the personalization dialog.<br>
				 * <i>Note:</i><br>
				 * No validation is done. Please ensure that you do not add spaces or special characters.
				 * 
				 * @since 1.32.0
				 */
				ignoreFromPersonalisation: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Specifies the type of table to be created in the SmartTable control.<br>
				 * <i>Note:</i><br>
				 * If you add a table to the content of the SmartTable in the view, this property has no effect.
				 * 
				 * @since 1.26.0
				 */
				tableType: {
					type: "sap.ui.comp.smarttable.TableType",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * The useVariantManagement attribute can be set to true or false depending on whether you want to use variants. As a prerequisite you
				 * need to specify the persistencyKey property.
				 * 
				 * @since 1.26.0
				 */
				useVariantManagement: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Can be set to true or false depending on whether you want to export data to MS Excel®.
				 * 
				 * @since 1.26.0
				 */
				useExportToExcel: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * The useTablePersonalisation attribute can be set to true or false depending on whether you want to define personalized table
				 * settings. If you want to persist the table personalization, you need to specify the persistencyKey property.
				 * 
				 * @since 1.26.0
				 */
				useTablePersonalisation: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * If the showRowCount attribute is set to true number of rows is shown along with the header text.
				 * 
				 * @since 1.26.0
				 */
				showRowCount: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Specifies header text that is shown in table
				 * 
				 * @since 1.26.0
				 */
				header: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * A style class which is defined for the toolbar of the table.
				 * 
				 * @since 1.26.0
				 */
				toolbarStyleClass: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Can be used to override the filter behavior. If set to true (default), instead of the filter input box a button is rendered. When
				 * pressing this button, the SmartTable control opens the filter panel directly in the table personalization dialog.
				 * 
				 * @since 1.26.0
				 */
				enableCustomFilter: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Key used to access personalization data.
				 * 
				 * @since 1.26.0
				 */
				persistencyKey: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * If set to true, the standard toolbar and custom toolbar will be merged into one toolbar. The combined toolbar will have a solid
				 * style.
				 * 
				 * @since 1.26.0
				 * @deprecated Since 1.29. This property has no effect
				 */
				useOnlyOneSolidToolbar: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * Retrieves or sets the current variant.
				 * 
				 * @since 1.28.0
				 */
				currentVariantId: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * This attribute can be used to specify if the controls created by the SmartTable control are editable.
				 * 
				 * @since 1.28.0
				 */
				editable: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * When set to true, this enables automatic binding of the table using the tableBindingPath (if it exists) or entitySet property. This
				 * happens just after the <code>initialise</code> event has been fired.
				 * 
				 * @since 1.28.0
				 */
				enableAutoBinding: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * This attribute can be used to specify the path that is used during the binding of the table. If not specified, the entitySet
				 * attribute is used instead. (used only if binding is established internally/automatically - See enableAutoBinding)
				 * 
				 * @since 1.28.0
				 */
				tableBindingPath: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Specifies whether the editable property can be toggled via a button on the toolbar. (The automatic toggle of controls works only
				 * for the SmartField scenario)
				 * 
				 * @since 1.28.0
				 */
				editTogglable: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * The demandPopin attribute can be set to true or false depending on whether you want to display columns as popins on the responsive
				 * table
				 * 
				 * @since 1.30.0
				 */
				demandPopin: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				}
			},
			aggregations: {

				/**
				 * A toolbar that can be added by the user to define their own custom buttons, icons, etc. If this is specified, the SmartTable
				 * control does not create an additional toolbar, but makes use of this one.
				 * 
				 * @since 1.26.0
				 */
				customToolbar: {
					type: "sap.m.Toolbar",
					multiple: false
				},

				/**
				 * The Semantic Object Controller allows the user to specify and overwrite functionality for semantic object navigation.
				 * 
				 * @since 1.28.0
				 */
				semanticObjectController: {
					type: "sap.ui.comp.navpopover.SemanticObjectController",
					multiple: false
				},

				/**
				 * The value for the noData aggregation can be either a string value or a control instance.<br>
				 * The control is shown, in case there is no data for the Table available. In case of a string value this will simply replace the no
				 * data text.<br>
				 * Currently the Responsive Table only supports string values.
				 * 
				 * @since 1.32.0
				 */
				noData: {
					type: "sap.ui.core.Control",
					altTypes: [
						"string"
					],
					multiple: false
				}
			},
			events: {

				/**
				 * Event fired once the control has been initialized.
				 * 
				 * @since 1.26.0
				 */
				initialise: {},

				/**
				 * Event fired just before the binding is being done.
				 * 
				 * @param {object} [bindingParams] the bindingParams object contains filters, sorters and other binding related information for the
				 *        table.
				 * @param {boolean} [bindingParams.preventTableBind] can be set to true by the listener to prevent binding from being done
				 * @param {object} [bindingParams.filters] the combined filter array containing a set of sap.ui.model.Filter instances from SmartTable
				 *        and SmartFilter - can be modified by users to influence filtering
				 * @param {object} [bindingParams.sorter] an array containing a set of sap.ui.model.Sorter instances from SmartTable (personalisation) -
				 *        can be modified by users to influence sorting
				 * @since 1.26.0
				 */
				beforeRebindTable: {},

				/**
				 * Event fired when display/edit button is clicked.
				 * 
				 * @since 1.28.0
				 */
				editToggled: {},

				/**
				 * Event fired when data is received after binding. The event is fired if the binding for the table is done by the SmartTable itself.
				 * 
				 * @since 1.28.0
				 */
				dataReceived: {},

				/**
				 * Event fired after variant management in the SmartTable has been initialized.
				 * 
				 * @since 1.28.0
				 */
				afterVariantInitialise: {},

				/**
				 * Event fired after a variant has been saved. This event can be used to retrieve the ID of the saved variant.
				 * 
				 * @param {string} [currentVariantId] id of the currently selected variant
				 * @since 1.28.0
				 */
				afterVariantSave: {},

				/**
				 * Event fired after a variant has been applied.
				 * 
				 * @param {string} [currentVariantId] id of the currently selected variant
				 * @since 1.28.0
				 */
				afterVariantApply: {},

				/**
				 * Event fired just before the overlay is being shown.
				 * 
				 * @param {object} [overlay] the overlay object contains information related to the table's overlay.
				 * @param {boolean} [overlay.show] can be set to false by the listener to prevent the overlay being shown.
				 * @since 1.32.0
				 */
				showOverlay: {},

				/**
				 * Event fired when an editable field, created internally by the SmartTable control, is changed.
				 * 
				 * @since 1.34.0
				 */
				fieldChange: {}
			}
		},
		renderer: VBoxRenderer.render
	});

	// **
	// * This file defines behaviour for the control,
	// */
	SmartTable.prototype.init = function() {
		sap.m.FlexBox.prototype.init.call(this);
		this.addStyleClass("sapUiCompSmartTable");
		this.setFitContainer(true);
		this.setHeight("100%");
	};

	/**
	 * instantiates the SmartVariantManagementControl
	 * 
	 * @private
	 */
	SmartTable.prototype._createVariantManagementControl = function() {
		// Do not create variant management when it is not needed!
		if (this._oVariantManagement || (!this.getUseVariantManagement() && !this.getUseTablePersonalisation()) || !this.getPersistencyKey()) {
			return;
		}

		// always create VariantManagementControl, in case it is not used, it will take care of persisting the personalisation
		// without visualization

		var oPersInfo = new sap.ui.comp.smartvariants.PersonalizableInfo({
			type: "table",
			keyName: "persistencyKey",
			dataSource: "TODO"
		});

		oPersInfo.setControl(this);

		this._oVariantManagement = new sap.ui.comp.smartvariants.SmartVariantManagement(this.getId() + "-variant", { // FIXME workaround to make
			// sinon
			// stubs work with AMD
			personalizableControls: oPersInfo,
			initialise: function(oEvent) {
				// Current variant could have been set already (before initialise) by the SmartVariant, in case of GLO/Industry specific variant
				// handling
				if (!this._oCurrentVariant) {
					this._oCurrentVariant = "STANDARD";
				}
				this.fireAfterVariantInitialise();
			}.bind(this),
			afterSave: function() {
				this.fireAfterVariantSave({
					currentVariantId: this.getCurrentVariantId()
				});
			}.bind(this),
			showShare: true
		});

		this._oVariantManagement.initialise();
	};

	SmartTable.prototype.setUseExportToExcel = function(bUseExportToExcel) {
		if (bUseExportToExcel === this.getUseExportToExcel()) {
			return;
		}
		this.setProperty("useExportToExcel", bUseExportToExcel, true);
		if (this._oToolbar) {
			this._createToolbarContent();
		}
	};

	SmartTable.prototype.setUseTablePersonalisation = function(bUseTablePersonalisation) {
		this.setProperty("useTablePersonalisation", bUseTablePersonalisation, true);
	};

	SmartTable.prototype.setUseVariantManagement = function(bUseVariantManagement) {
		this.setProperty("useVariantManagement", bUseVariantManagement, true);
		if (this._oPersController) {
			this._oPersController.setResetToInitialTableState(!bUseVariantManagement);
		}
	};

	SmartTable.prototype.setToolbarStyleClass = function(sStyleClass) {
		this.setProperty("toolbarStyleClass", sStyleClass, true);
	};

	SmartTable.prototype.setCustomToolbar = function(oCustomToolbar) {
		if (this._oCustomToolbar) {
			this.removeItem(this._oCustomToolbar);
		}

		this._oCustomToolbar = oCustomToolbar;
	};

	SmartTable.prototype.getCustomToolbar = function() {
		return this._oCustomToolbar;
	};

	SmartTable.prototype.setHeader = function(sText) {
		this.setProperty("header", sText, true);
		this._refreshHeaderText();
	};

	SmartTable.prototype.setShowRowCount = function(bShow) {
		this.setProperty("showRowCount", bShow, true);
		this._refreshHeaderText();
	};

	SmartTable.prototype.setEditTogglable = function(bToggle) {
		this.setProperty("editTogglable", bToggle, true);
	};

	SmartTable.prototype.setEditable = function(bEdit) {
		this.setProperty("editable", bEdit, true);
	};

	SmartTable.prototype.setDemandPopin = function(bDemandPopin) {
		var bOldValue = this.getDemandPopin();
		if (bOldValue === bDemandPopin) {
			return;
		}

		this.setProperty("demandPopin", bDemandPopin, true);

		if (this.bIsInitialised) {
			if (bDemandPopin) {
				this._updateColumnsPopinFeature();
			} else {
				this._deactivateColumnsPopinFeature();
			}
		}
	};

	/**
	 * sets the header text
	 * 
	 * @private
	 */
	SmartTable.prototype._refreshHeaderText = function() {
		if (!this._headerText) {
			return;
		}

		var sText = this.getHeader();
		if (this.getShowRowCount()) {
			var iRowCount = parseInt(this._getRowCount(), 10);
			jQuery.sap.require("sap.ui.core.format.NumberFormat");
			var sValue = sap.ui.core.format.NumberFormat.getFloatInstance().format(iRowCount);

			sText += " (" + sValue + ")";
		}

		this._headerText.setText(sText);
	};

	/**
	 * creates the toolbar
	 * 
	 * @private
	 */
	SmartTable.prototype._createToolbar = function() {
		var oCustomToolbar = null;
		if (!this._oToolbar) {
			oCustomToolbar = this.getCustomToolbar();
			if (oCustomToolbar) {
				this._oToolbar = oCustomToolbar;
			} else {
				this._oToolbar = new OverflowToolbar({
					design: sap.m.ToolbarDesign.Transparent
				});
				this._oToolbar.addStyleClass("sapUiCompSmartTableToolbar");
				if (this.getToolbarStyleClass()) {
					this._oToolbar.addStyleClass(this.getToolbarStyleClass());
				}
			}
			this._oToolbar.setLayoutData(new sap.m.FlexItemData({
				shrinkFactor: 0
			}));
			this.insertItem(this._oToolbar, 0);
		}
	};

	/**
	 * creates the toolbar content
	 * 
	 * @private
	 */
	SmartTable.prototype._createToolbarContent = function() {
		if (!this._oToolbar) {
			this._createToolbar();
		}
		// insert the items in the custom toolbar in reverse order => insert always at position 0
		this._addVariantManagementToToolbar();
		this._addSeparatorToToolbar();
		this._addHeaderToToolbar();

		// add spacer to toolbar
		this._addSpacerToToolbar();

		// First show Display/Edit icon, then Personalisation and finally Excel Export
		this._addEditTogglableToToolbar();
		this._addTablePersonalisationToToolbar();
		this._addExportToExcelToToolbar();

		// seems like toolbar only contains spacer and is actually not needed - remove it
		if (this._oToolbar && (this._oToolbar.getContent().length === 0 || (this._oToolbar.getContent().length === 1 && this._oToolbar.getContent()[0] instanceof sap.m.ToolbarSpacer))) {
			this.removeItem(this._oToolbar);
			this._oToolbar.destroy();
			this._oToolbar = null;
		}
	};

	/**
	 * Adds the button to change between edit and read only mode
	 * 
	 * @private
	 */
	SmartTable.prototype._addEditTogglableToToolbar = function() {
		var sButtonLabel;
		if (this.getEditTogglable()) {
			if (!this._oEditButton) {
				sButtonLabel = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("TABLE_EDITTOGGLE_TOOLTIP");
				this._oEditButton = new sap.m.OverflowToolbarButton(this.getId() + "-btnEditToggle", {
					icon: this.getEditable() ? "sap-icon://display" : "sap-icon://edit",
					text: sButtonLabel,
					tooltip: sButtonLabel,
					press: function() {
						var bEditable = this.getEditable();
						// toggle property editable and set it on the smart table
						bEditable = !bEditable;
						this.setEditable(bEditable, true);
						this._oEditButton.setIcon(bEditable ? "sap-icon://display" : "sap-icon://edit");
						// notify any listeners
						this.fireEditToggled({
							editable: bEditable
						});
					}.bind(this)
				});
			}
			this._oToolbar.addContent(this._oEditButton);
		} else if (this._oEditButton) {
			this._oToolbar.removeContent(this._oEditButton);
		}
	};

	/**
	 * adds the header line to the toolbar
	 * 
	 * @private
	 */
	SmartTable.prototype._addHeaderToToolbar = function() {
		if (this.getHeader()) {
			if (!this._headerText) {
				this._headerText = new Title(this.getId() + "-header");
				this._headerText.addStyleClass("sapMH4Style");
				this._headerText.addStyleClass("sapUiCompSmartTableHeader");
			}
			this._refreshHeaderText();
			this._oToolbar.insertContent(this._headerText, 0);
		} else if (this._headerText) {
			this._oToolbar.removeContent(this._headerText);
		}
	};

	/**
	 * adds a separator between header and variantmanagement to the toolbar
	 * 
	 * @private
	 */
	SmartTable.prototype._addSeparatorToToolbar = function() {
		if (this.getHeader() && this.getUseVariantManagement()) {
			if (!this._oSeparator) {
				this._oSeparator = new ToolbarSeparator(this.getId() + "-toolbarSeperator");
			}
			this._oToolbar.insertContent(this._oSeparator, 0);
			// Also set the height to 3rem (via css) when no height is explicitly specified
			if (!this._oToolbar.getHeight()) {
				this._oToolbar.addStyleClass("sapUiCompSmartTableToolbarHeight");
			}
		} else if (this._oSeparator) {
			this._oToolbar.removeContent(this._oSeparator);
		}
	};

	/**
	 * adds the VarientManagement to the toolbar
	 * 
	 * @private
	 */
	SmartTable.prototype._addVariantManagementToToolbar = function() {
		if (this.getUseVariantManagement()) {
			this._oToolbar.insertContent(this._oVariantManagement, 0);
		} else if (this._oVariantManagement) {
			this._oToolbar.removeContent(this._oVariantManagement);
		}
	};

	/**
	 * adds a spacer to the toolbar
	 * 
	 * @private
	 */
	SmartTable.prototype._addSpacerToToolbar = function() {
		var bFoundSpacer = false, aItems = this._oToolbar.getContent(), i, iLength;
		if (aItems) {
			iLength = aItems.length;
			i = 0;
			for (i; i < iLength; i++) {
				if (aItems[i] instanceof sap.m.ToolbarSpacer) {
					bFoundSpacer = true;
					break;
				}
			}
		}

		if (!bFoundSpacer) {
			this._oToolbar.addContent(new sap.m.ToolbarSpacer(this.getId() + "-toolbarSpacer"));
		}
	};

	/**
	 * adds the Table Personalisation button to the toolbar
	 * 
	 * @private
	 */
	SmartTable.prototype._addTablePersonalisationToToolbar = function() {
		var sButtonLabel;
		if (this.getUseTablePersonalisation()) {
			if (!this._oTablePersonalisationButton) {
				sButtonLabel = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("TABLE_PERSOBTN_TOOLTIP");
				this._oTablePersonalisationButton = new sap.m.OverflowToolbarButton(this.getId() + "-btnPersonalisation", {
					icon: "sap-icon://action-settings",
					text: sButtonLabel,
					tooltip: sButtonLabel,
					press: function(oEvent) {
						this._oPersController.openDialog();
					}.bind(this)
				});
			}
			this._oToolbar.addContent(this._oTablePersonalisationButton);
		} else if (this._oTablePersonalisationButton) {
			this._oToolbar.removeContent(this._oTablePersonalisationButton);
		}
	};

	/**
	 * adds the Export to Excel button to the toolbar
	 * 
	 * @private
	 */
	SmartTable.prototype._addExportToExcelToToolbar = function() {
		if (this.getUseExportToExcel() && this._bTableSupportsExcelExport) {
			var that = this, sButtonLabel;
			if (!this._oUseExportToExcel) {
				sButtonLabel = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("TABLE_EXPORT_TEXT");
				this._oUseExportToExcel = new sap.m.OverflowToolbarButton(this.getId() + "-btnExcelExport", {
					icon: "sap-icon://excel-attachment",
					text: sButtonLabel,
					tooltip: sButtonLabel,
					press: function(oEvent) {

						var fDownloadXls = function() {
							var oRowBinding = that._getRowBinding();
							var sUrl = oRowBinding.getDownloadUrl("xlsx");
							// sUrl = that._adjustUrlToVisibleColumns(sUrl);
							sUrl = that._removeExpandParameter(sUrl);
							window.open(sUrl);
						};

						var iRowCount = that._getRowCount();

						if (iRowCount > 10000) {
							MessageBox.confirm(sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("DOWNLOAD_CONFIRMATION_TEXT", iRowCount), {
								actions: [
									MessageBox.Action.YES, MessageBox.Action.NO
								],
								onClose: function(oAction) {
									if (oAction === MessageBox.Action.YES) {
										fDownloadXls();
									}
								}
							});
						} else {
							fDownloadXls();
						}
					}
				});
				this._setExcelExportEnableState();
			}
			this._oToolbar.addContent(this._oUseExportToExcel);
		} else if (this._oUseExportToExcel) {
			this._oToolbar.removeContent(this._oUseExportToExcel);
		}
	};

	/**
	 * replaces the given Url's select parameter with a select parameter adjusted to the visible columns
	 * 
	 * @param {string} sUrl the original url
	 * @private
	 * @returns {string} the resolved url string
	 */
	SmartTable.prototype._adjustUrlToVisibleColumns = function(sUrl) {
		var aVisibleColumns = this._getVisibleColumnPaths();
		var sFinalUrl = sUrl.replace(new RegExp("([\\?&]\\$select=)[^&]+"), function(result, match) {
			if (aVisibleColumns && aVisibleColumns.length) {
				return match + jQuery.sap.encodeURL(aVisibleColumns.join(","));
			} else {
				return "";
			}
		});
		return sFinalUrl;
	};

	/**
	 * removes the given Url's expand parameter
	 * 
	 * @param {string} sUrl the original url
	 * @private
	 * @returns {string} the resolved url string
	 */
	SmartTable.prototype._removeExpandParameter = function(sUrl) {
		var sFinalUrl = sUrl.replace(new RegExp("([\\?&]\\$expand=[^&]+)(&?)"), function(result, match1, match2) {
			return match2 ? match1.substring(0, 1) : "";
		});
		return sFinalUrl;
	};

	/**
	 * gets table's row count
	 * 
	 * @private
	 * @returns {integer} the row count
	 */
	SmartTable.prototype._getRowCount = function() {
		var oRowBinding = this._getRowBinding();

		if (!oRowBinding) {
			return 0;
		}

		var iRowCount = 0;
		if (oRowBinding.getTotalSize) {
			iRowCount = oRowBinding.getTotalSize();
		} else {
			iRowCount = oRowBinding.getLength();
		}

		if (iRowCount < 0 || iRowCount === "0") {
			iRowCount = 0;
		}

		return iRowCount;
	};

	/**
	 * disables the export to excel button if no data is present, otherwise enables it
	 * 
	 * @private
	 */
	SmartTable.prototype._setExcelExportEnableState = function() {
		if (this._oUseExportToExcel) {
			var iRowCount = this._getRowCount();
			if (iRowCount > 0) {
				this._oUseExportToExcel.setEnabled(true);
			} else {
				// check if first row contains data (getRowCount relies on binding which reports 0 if backend does not support line count)
				var aRows;
				if (this._isMobileTable) {
					aRows = this._oTable.getItems();
				} else {
					aRows = this._oTable.getRows();
				}

				var bEnable = aRows != null && aRows.length > 0 && aRows[0].getBindingContext() != null;
				this._oUseExportToExcel.setEnabled(bEnable);
			}
		}
	};

	/**
	 * creates the personalization controller if not yet done
	 * 
	 * @private
	 */
	SmartTable.prototype._createPersonalizationController = function() {
		if (this._oPersController || !this.getUseTablePersonalisation()) {
			return;
		}

		var oSettings = this.data("p13nDialogSettings");
		if (typeof oSettings === "string") {
			try {
				oSettings = JSON.parse(oSettings);
			} catch (e) {
				oSettings = null;
				// Invalid JSON!
			}
		}

		oSettings = this._setIgnoreFromPersonalisationToSettings(oSettings);

		jQuery.sap.require("sap.ui.comp.personalization.Controller");
		this._oPersController = new sap.ui.comp.personalization.Controller({
			table: this._oTable,
			setting: oSettings,
			resetToInitialTableState: !this.getUseVariantManagement(),
			beforePotentialTableChange: this._beforePersonalisationModelDataChange.bind(this),
			afterPotentialTableChange: this._afterPersonalisationModelDataChange.bind(this),
			afterP13nModelDataChange: this._personalisationModelDataChange.bind(this)
		});
	};

	/**
	 * adds the ignoreFromPersonalisation fields to the given setting
	 * 
	 * @param {object} oSettings the former settings object
	 * @private
	 * @returns {object} the changed settings object
	 */
	SmartTable.prototype._setIgnoreFromPersonalisationToSettings = function(oSettings) {
		var aIgnoreFields = PersonalizationUtil.createArrayFromString(this.getIgnoreFromPersonalisation());
		if (aIgnoreFields.length) {
			if (!oSettings) {
				oSettings = {};
			}

			var fSetArray = function(sSubName) {
				if (!oSettings[sSubName]) {
					oSettings[sSubName] = {};
				}
				oSettings[sSubName].ignoreColumnKeys = aIgnoreFields;
			};

			fSetArray("filter");
			fSetArray("sort");
			fSetArray("group");
			fSetArray("columns");
		}
		return oSettings;
	};

	/**
	 * returns the row/items binding of the currently used internal table
	 * 
	 * @private
	 * @returns {sap.ui.model.Binding} the row/items binding
	 */
	SmartTable.prototype._getRowBinding = function() {
		if (this._oTable) {
			return this._oTable.getBinding(this._sAggregation);
		}
	};

	/**
	 * The entity set name from OData metadata, with which the table should be bound to
	 * 
	 * @param {string} sEntitySetName The entity set
	 * @public
	 */
	SmartTable.prototype.setEntitySet = function(sEntitySetName) {
		this.setProperty("entitySet", sEntitySetName);
		this._initialiseMetadata();
	};

	/**
	 * It could happen that the entity type information is set already in the view, but there is no model attached yet. This method is called once the
	 * model is set on the parent and can be used to initialise the metadata, from the model, and finally create the table controls.
	 * 
	 * @private
	 */
	SmartTable.prototype.propagateProperties = function() {
		VBox.prototype.propagateProperties.apply(this, arguments);
		this._initialiseMetadata();
	};

	/**
	 * Initialises the OData metadata necessary to create the table
	 * 
	 * @private
	 */
	SmartTable.prototype._initialiseMetadata = function() {
		if (!this.bIsInitialised) {
			ODataModelUtil.handleModelInit(this, this._onMetadataInitialised);
		}
	};

	/**
	 * Called once the necessary Model metadata is available
	 * 
	 * @private
	 */
	SmartTable.prototype._onMetadataInitialised = function() {
		this._bMetaModelLoadAttached = false;
		if (!this.bIsInitialised) {
			this._createTableProvider();
			if (this._oTableProvider) {
				this._aTableViewMetadata = this._oTableProvider.getTableViewMetadata();
				if (this._aTableViewMetadata) {
					if (!this._isMobileTable && this.getDemandPopin()) {
						this.setDemandPopin(false);
						jQuery.sap.log.error("use SmartTable property 'demandPopin' only  with responsive table, property has been set to false");
					}

					// Indicates the control is initialised and can be used in the initialise event/otherwise!
					this.bIsInitialised = true;
					this._bTableSupportsExcelExport = this._oTableProvider.getSupportsExcelExport();
					this._listenToSmartFilter();
					this._createVariantManagementControl(); // creates VariantMngmntCtrl if useVariantManagement OR useTablePersonalisation is true.
					// Control is only added to toolbar if useVariantManagement is set otherwise it acts as
					// hidden persistance helper
					this._createToolbarContent();
					this._createContent();
					this._createPersonalizationController();
					// Create a local JSONModel to handle editable switch
					this._oEditModel = new JSONModel({
						editable: this.getEditable()
					});
					this.bindProperty("editable", {
						path: "sm4rtM0d3l>/editable"
					});
					// Set the local model on the SmartTable
					this.setModel(this._oEditModel, "sm4rtM0d3l");

					this.fireInitialise();
					if (this.getEnableAutoBinding()) {
						if (this._oSmartFilter && this._oSmartFilter.isPending()) {
							this._oSmartFilter.search();
						} else {
							this._reBindTable();
						}
					}
				}
			}
		}
	};

	/**
	 * Creates an instance of the table provider
	 * 
	 * @private
	 */
	SmartTable.prototype._createTableProvider = function() {
		var oModel, sEntitySetName, sIgnoredFields;
		sEntitySetName = this.getEntitySet();
		sIgnoredFields = this.getIgnoredFields();
		oModel = this.getModel();

		// The SmartTable apparently also needs to work for non ODataModel models; hence we now create the table independent
		// of ODataModel.
		if (oModel && !this._bTableCreated) {
			this._aExistingColumns = [];
			this._aAlwaysSelect = [];
			this._oTemplate = null;
			this._createToolbar();
			this._createTable();
			this._bTableCreated = true;
		}

		if (oModel && sEntitySetName) {
			if (this._aExistingColumns.length) {
				if (sIgnoredFields) {
					sIgnoredFields += "," + this._aExistingColumns.toString();
				} else {
					sIgnoredFields = this._aExistingColumns.toString();
				}
			}
			this._oTableProvider = new sap.ui.comp.providers.TableProvider({ // FIXME workaround to make sinon stubs work with AMD
				entitySet: sEntitySetName,
				ignoredFields: sIgnoredFields,
				initiallyVisibleFields: this.getInitiallyVisibleFields(),
				isEditableTable: this.getEditable(),
				isAnalyticalTable: this._isAnalyticalTable,
				dateFormatSettings: this.data("dateFormatSettings"),
				currencyFormatSettings: this.data("currencyFormatSettings"),
				defaultDropDownDisplayBehaviour: this.data("defaultDropDownDisplayBehaviour"),
				useSmartField: this.data("useSmartField"),
				enableInResultForLineItem: this.data("enableInResultForLineItem"),
				model: oModel
			});
		}
	};

	/**
	 * Listen to changes on the corresponding SmartFilter (if any)
	 * 
	 * @private
	 */
	SmartTable.prototype._listenToSmartFilter = function() {
		var sSmartFilterId = null;
		// Register for SmartFilter Search
		sSmartFilterId = this.getSmartFilterId();

		this._oSmartFilter = this._findControl(sSmartFilterId);

		if (this._oSmartFilter) {
			this._oSmartFilter.attachSearch(this._reBindTable, this);
			this._oSmartFilter.attachFilterChange(this._showOverlay, this, true);
			this._oSmartFilter.attachCancel(this._showOverlay, this, false);

			// Set initial empty text only if a valid SmartFilter is found
			this._setNoDataText(sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("SMARTTABLE_NO_DATA"));
		}
	};

	/**
	 * sets the ShowOverlay property on the inner table, fires the ShowOverlay event
	 * 
	 * @param {boolean} bShow true to display the overlay, otherwise false
	 * @private
	 */
	SmartTable.prototype._showOverlay = function(bShow) {
		if (bShow) {
			var oOverlay = {
				show: true
			};
			this.fireShowOverlay({
				overlay: oOverlay
			});
			bShow = oOverlay.show;
		}

		this._oTable.setShowOverlay(bShow);
	};

	/**
	 * searches for a certain control by its ID
	 * 
	 * @param {string} sId the control's ID
	 * @returns {sap.ui.core.Control} The control found by the given Id
	 * @private
	 */
	SmartTable.prototype._findControl = function(sId) {
		var oResultControl, oView;
		if (sId) {
			// Try to get SmartFilter from Id
			oResultControl = sap.ui.getCore().byId(sId);

			// Try to get SmartFilter from parent View!
			if (!oResultControl) {
				oView = this._getView();

				if (oView) {
					oResultControl = oView.byId(sId);
				}
			}
		}

		return oResultControl;
	};

	/**
	 * searches for the controls view
	 * 
	 * @returns {sap.ui.core.mvc.View} The found parental View
	 * @private
	 */
	SmartTable.prototype._getView = function() {
		if (!this._oView) {
			var oObj = this.getParent();
			while (oObj) {
				if (oObj instanceof sap.ui.core.mvc.View) {
					this._oView = oObj;
					break;
				}
				oObj = oObj.getParent();
			}
		}
		return this._oView;
	};

	/**
	 * This can be used to trigger binding on the table used in the SmartTable
	 * 
	 * @param {boolean} bForceRebind - force bind call to be triggered on the inner table
	 * @protected
	 */
	SmartTable.prototype.rebindTable = function(bForceRebind) {
		this._reBindTable(null, bForceRebind);
	};

	/**
	 * Re-binds the table
	 * 
	 * @param {Object} mEventParams - the event parameters
	 * @param {boolean} bForceRebind - force bind call to be triggered on the table
	 * @private
	 */
	SmartTable.prototype._reBindTable = function(mEventParams, bForceRebind) {
		var oTableBinding, sTableBindingPath, mTablePersonalisationData, i, iLen, aSmartFilters, aProcessedFilters = [], aFilters, oExcludeFilters, sRequestAtLeastFields, aAlwaysSelect, aSelect, aSorters, mParameters = {}, mBindingParams = {
			preventTableBind: false
		};

		mTablePersonalisationData = this._getTablePersonalisationData() || {};
		aFilters = mTablePersonalisationData.filters;
		oExcludeFilters = mTablePersonalisationData.excludeFilters;
		aSorters = mTablePersonalisationData.sorters;

		// Get Filters and parameters from SmartFilter
		if (this._oSmartFilter) {
			aSmartFilters = this._oSmartFilter.getFilters();
			mParameters = this._oSmartFilter.getParameters() || {};
		}

		// If filters from SmartFilter exist --> process them first with SmartTable exclude filters
		// since we need to manually AND multiple multi filters!
		if (aSmartFilters && aSmartFilters.length) {
			if (oExcludeFilters) {
				aProcessedFilters = [
					new sap.ui.model.Filter([
						aSmartFilters[0], oExcludeFilters
					], true)
				];
			} else {
				aProcessedFilters = aSmartFilters;
			}
		} else if (oExcludeFilters) {
			aProcessedFilters = [
				oExcludeFilters
			];
		}
		// Combine the resulting processed filters with SmartTable include filters
		if (aFilters) {
			aFilters = aProcessedFilters.concat(aFilters);
		} else {
			aFilters = aProcessedFilters;
		}

		sRequestAtLeastFields = this.getRequestAtLeastFields();
		if (sRequestAtLeastFields) {
			aAlwaysSelect = sRequestAtLeastFields.split(",");
		} else {
			aAlwaysSelect = [];
		}
		aAlwaysSelect = aAlwaysSelect.concat(this._aAlwaysSelect);
		aSelect = this._getVisibleColumnPaths();
		// handle fields that shall always be selected
		if (!aSelect || !aSelect.length) {
			aSelect = aAlwaysSelect;
		} else {
			iLen = aAlwaysSelect.length;
			for (i = 0; i < iLen; i++) {
				if (aSelect.indexOf(aAlwaysSelect[i]) < 0) {
					aSelect.push(aAlwaysSelect[i]);
				}
			}
		}
		if (this._sSelectForGroup && aSelect.indexOf(this._sSelectForGroup) < 0) {
			aSelect.push(this._sSelectForGroup);
		}
		if (aSelect.length) {
			mParameters["select"] = aSelect.toString();
		}

		// Enable batch requests (used by AnalyticalTable)
		mParameters["useBatchRequests"] = true;

		if (!aSorters) {
			aSorters = [];
		}

		mBindingParams.filters = aFilters;
		mBindingParams.sorter = aSorters;
		mBindingParams.parameters = mParameters;
		mBindingParams.length = undefined;
		mBindingParams.startIndex = undefined;
		// fire event to enable user modification of certain binding options (Ex: Filters)
		this.fireBeforeRebindTable({
			bindingParams: mBindingParams
		});

		if (!mBindingParams.preventTableBind) {
			aSorters = mBindingParams.sorter;
			aFilters = mBindingParams.filters;
			mParameters = mBindingParams.parameters;
			aSelect = mBindingParams.parameters["select"];
			if (!aSelect || !aSelect.length) {
				MessageBox.error(sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("SMARTTABLE_NO_COLS"), {
					styleClass: (this.$() && this.$().closest(".sapUiSizeCompact").length) ? "sapUiSizeCompact" : ""
				});
				return;
			}
			sTableBindingPath = this.getTableBindingPath() || ("/" + this.getEntitySet());
			this._oTable.setEnableBusyIndicator(false);
			this._oTable.setBusy(true);

			// Reset Suppress refresh
			if (this._oTable._setSuppressRefresh) {
				this._oTable._setSuppressRefresh(false);
			}
			this._bDataLoadPending = true;
			oTableBinding = this._oTable.getBinding(this._sAggregation);
			if (oTableBinding && oTableBinding.mParameters && !bForceRebind) {
				// Check if binding needs to be redone!
				// Evaluate to true if:
				// binding parameters change -or- custom binding parameters change -or- if length, startIndex or tableBindingPath change!
				bForceRebind = !(jQuery.sap.equal(mParameters, oTableBinding.mParameters, true) && jQuery.sap.equal(mParameters.custom, oTableBinding.mParameters.custom) && !mBindingParams.length && !mBindingParams.startIndex && sTableBindingPath === oTableBinding.getPath());
			}

			// do the binding if no binding is already present or if it is being forced!
			if (!oTableBinding || !this._bIsTableBound || bForceRebind) {
				this._oTable.bindRows({
					path: sTableBindingPath,
					filters: aFilters,
					sorter: aSorters,
					parameters: mParameters,
					length: mBindingParams.length,
					startIndex: mBindingParams.startIndex,
					template: this._oTemplate,
					events: {
						dataRequested: function() {
							this._bIgnoreChange = true;
						}.bind(this),
						dataReceived: function(mEventParams) {
							// Ignore events without data parameter
							if (mEventParams && mEventParams.getParameter && !mEventParams.getParameter("data")) {
								return;
							}
							this._bIgnoreChange = false;
							this._onDataLoadComplete(mEventParams, true);
							// notify any listeners about dataReceived
							this.fireDataReceived(mEventParams);
						}.bind(this),
						change: function(mEventParams) {
							if (this._bIgnoreChange) {
								return;
							}
							var sReason, bForceUpdate = false;
							sReason = (mEventParams && mEventParams.getParameter) ? mEventParams.getParameter("reason") : undefined;
							// Force update state if reason for binding change is "filter" -or- not defined
							if (!sReason || sReason === "filter") {
								bForceUpdate = true;
							}
							if (sReason === "change" || bForceUpdate) {
								this._onDataLoadComplete(mEventParams, bForceUpdate);
							}
						}.bind(this)
					}
				});
				// Flag to indicate if table was bound (data fetch triggered) at least once
				this._bIsTableBound = true;
			} else {
				// checking if an empty object {} is passed from the application code
				// this empty object {} has to converted to an array for handling the correct filter binding to the table
				if (Object.keys(aFilters).length === 0) {
					aFilters = [];
				}
				oTableBinding.sort(aSorters);
				oTableBinding.filter(aFilters, "Application");
			}
			this._showOverlay(false);
		}
	};

	/**
	 * Called once data is loaded in the binding (i.e. either backend fetch or once change event is fired)
	 * 
	 * @param {Object} mEventParams - the event parameters
	 * @param {boolean} bForceUpdate - force update
	 * @private
	 */
	SmartTable.prototype._onDataLoadComplete = function(mEventParams, bForceUpdate) {
		if (this._bDataLoadPending || bForceUpdate) {
			if (this._bDataLoadPending) {
				this._oTable.setBusy(false);
				this._oTable.setEnableBusyIndicator(true);
			}
			this._bDataLoadPending = false;
			// Update No data text (once) only if table has no results!
			if (!this._bNoDataUpdated && !this._getRowCount()) {
				this._bNoDataUpdated = true;
				this._setNoDataText();
			}
			this.updateTableHeaderState();
			this._disableSumRows();
		}
	};

	SmartTable.prototype.setNoData = function(oNoData) {
		// overwrite the original aggregation setter, otherwise parent relationship will be destroyed when a control is set to the inner table's
		// noData aggregation
		this._oNoData = oNoData;
	};

	SmartTable.prototype.getNoData = function() {
		return this._oNoData;
	};

	/**
	 * Sets the no data text to the internal table
	 * 
	 * @param {string} sOverwriteText - optional text to set on the table
	 * @private
	 */
	SmartTable.prototype._setNoDataText = function(sOverwriteText) {
		var fSetFunction = this._oTable.setNoData;
		if (!fSetFunction) {
			fSetFunction = this._oTable.setNoDataText;
		}

		if (!fSetFunction) {
			return;
		}

		var oNoData = sOverwriteText;
		if (!oNoData) {
			oNoData = this.getNoData();
		}

		if (!oNoData) {
			oNoData = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("SMARTTABLE_NO_RESULTS");
		}

		fSetFunction.call(this._oTable, oNoData, true);
	};

	/**
	 * This can be called once data is received to update table header (count) and toolbar buttons(e.g. Excel Export) enabled state
	 * 
	 * @public
	 */
	SmartTable.prototype.updateTableHeaderState = function() {
		this._refreshHeaderText();
		this._setExcelExportEnableState();
	};

	/**
	 * Creates the content based on the metadata/configuration
	 * 
	 * @private
	 */
	SmartTable.prototype._createContent = function() {
		var i, iLen = 0, oField, oColumn, sId, aIndexedColumns;

		aIndexedColumns = this._parseIndexedColumns();

		iLen = this._aTableViewMetadata.length;
		for (i = 0; i < iLen; i++) {
			oField = this._aTableViewMetadata[i];
			if (oField.inResult) {
				this._aAlwaysSelect.push(oField.name);
			}
			this._registerContentTemplateEvents(oField.template);
			// Replace invalid chars in name (e.g: "/") with "_"
			sId = this.getId() + "-" + oField.name.replace(/[^A-Za-z0-9_.:-]+/g, "_");
			oColumn = this._createColumn(oField, sId);
			// Set the persoData - relevant for personalisation
			oColumn.data("p13nData", {
				columnKey: oField.name,
				leadingProperty: oField.name, // used to fetch data, by adding this to $select param of OData request
				additionalProperty: oField.additionalProperty, // additional data to fetch in $select
				sortProperty: oField.sortable ? oField.name : undefined,
				filterProperty: oField.filterable ? oField.name : undefined,
				type: oField.filterType,
				maxLength: oField.maxLength,
				precision: oField.precision,
				scale: oField.scale,
				aggregationRole: oField.aggregationRole
			});

			if (oField.filterable && oColumn.setFilterProperty) {
				oColumn.setFilterProperty(oField.name);
			}

			if (oField.sortable && oColumn.setSortProperty) {
				oColumn.setSortProperty(oField.name);
			}

			// Add the column to the table
			this._oTable.addColumn(oColumn);
		}

		this._insertIndexedColumns(aIndexedColumns);

		this._updateColumnsPopinFeature();

		this._storeInitialColumnSettings();
	};

	/**
	 * searches for columns which contains a columnIndex custom data property. Removes those columns from the table and returns them
	 * 
	 * @returns {array} the found columns together with their index
	 * @private
	 */
	SmartTable.prototype._parseIndexedColumns = function() {
		var i, iLength, oColumn, aIndexedColumns, oCustomData, sIndex, iIndex, oTemplateCell;
		var aColumns = this._oTable.getColumns();
		var aCells = null;
		if (this._oTemplate && this._oTemplate.getCells) {
			aCells = this._oTemplate.getCells();
		}

		if (!aColumns) {
			return null;
		}

		aIndexedColumns = [];
		iLength = aColumns.length;

		for (i = 0; i < iLength; i++) {
			oColumn = aColumns[i];
			oCustomData = oColumn.data("p13nData");
			sIndex = null;
			if (oCustomData) {
				sIndex = oCustomData.columnIndex;
			}
			iIndex = -1;
			if (sIndex !== null && sIndex !== undefined) {
				iIndex = parseInt(sIndex, 10);
			}
			if (!isNaN(iIndex) && iIndex > -1) {
				if (aCells) {
					oTemplateCell = aCells[i];
					this._oTemplate.removeCell(oTemplateCell);
				} else {
					oTemplateCell = null;
				}

				aIndexedColumns.push({
					index: iIndex,
					column: oColumn,
					template: oTemplateCell
				});
				this._oTable.removeColumn(oColumn);
			}
		}

		aIndexedColumns.sort(function(col1, col2) {
			return col1.index - col2.index;
		});

		return aIndexedColumns;
	};

	/**
	 * inserts columns containing an index back to the table
	 * 
	 * @param {Array} aIndexedColumns - an array containing objects with index and columns
	 * @private
	 */
	SmartTable.prototype._insertIndexedColumns = function(aIndexedColumns) {
		var i, iLength, oColumn;

		if (!aIndexedColumns) {
			return;
		}

		iLength = aIndexedColumns.length;
		for (i = 0; i < iLength; i++) {
			oColumn = aIndexedColumns[i];
			this._oTable.insertColumn(oColumn.column, oColumn.index);
			if (oColumn.column.setInitialOrder) {
				oColumn.column.setInitialOrder(oColumn.index);
			}
			if (oColumn.template) {
				this._oTemplate.insertCell(oColumn.template, oColumn.index);
			}
		}
	};

	/**
	 * on sap.m.Table, this function activates the popin feature for the visible columns
	 * 
	 * @private
	 */
	SmartTable.prototype._updateColumnsPopinFeature = function() {
		if (!this._isMobileTable || !this.getDemandPopin()) { // popin only available on mobile table
			return;
		}

		var aColumns = this._oTable.getColumns();
		if (!aColumns) {
			return;
		}

		// get only visible columns
		aColumns = aColumns.filter(function(col) {
			return col.getVisible();
		});

		// sort columns according to their order property
		aColumns.sort(function(col1, col2) {
			return col1.getOrder() - col2.getOrder();
		});

		var oColumn, iLength = aColumns.length;

		for (var i = 0; i < iLength; i++) {
			oColumn = aColumns[i];
			if (i < 2) { // ensure always two columns
				oColumn.setDemandPopin(false);
				oColumn.setMinScreenWidth("1px");
			} else {
				oColumn.setDemandPopin(true);
				oColumn.setPopinDisplay(sap.m.PopinDisplay.Inline);
				oColumn.setMinScreenWidth((i + 1) * 10 + "rem");
			}
		}
	};

	/**
	 * stores the initial column settings
	 * 
	 * @private
	 */
	SmartTable.prototype._storeInitialColumnSettings = function() {
		this._aInitialSorters = [];
		PersonalizationUtil.createSort2Json(this._oTable, this._aInitialSorters, PersonalizationUtil.createArrayFromString(this.getIgnoreFromPersonalisation()));
	};

	/**
	 * on sap.m.Table, this function deactivates the popin feature for all columns
	 * 
	 * @private
	 */
	SmartTable.prototype._deactivateColumnsPopinFeature = function() {
		if (!this._isMobileTable) { // popin only available on mobile table
			return;
		}

		var aColumns = this._oTable.getColumns();
		if (!aColumns) {
			return;
		}

		var oColumn, iLength = aColumns.length;

		for (var i = 0; i < iLength; i++) {
			oColumn = aColumns[i];
			oColumn.setDemandPopin(false);
			oColumn.setMinScreenWidth("1px");
		}
	};

	/**
	 * registers events on the template controls which are exposed by the SmartTable
	 * 
	 * @param {sap.ui.core.Control} oTemplateControl - the control on which to register the events
	 * @private
	 */
	SmartTable.prototype._registerContentTemplateEvents = function(oTemplateControl) {
		if (oTemplateControl instanceof sap.ui.comp.navpopover.SmartLink) {
			var oSemanticObjectController = this.getSemanticObjectController();
			oTemplateControl.setSemanticObjectController(oSemanticObjectController);
		}
		if (oTemplateControl && oTemplateControl.attachChange) {
			oTemplateControl.attachChange(function(oEventParams) {
				this.fireFieldChange({
					changeEvent: oEventParams
				});
			}.bind(this));
		}
	};

	/**
	 * stores a list of initially created columns (if any)
	 * 
	 * @private
	 */
	SmartTable.prototype._updateInitialColumns = function() {
		var aColumns = this._oTable.getColumns(), iLen = aColumns ? aColumns.length : 0, oColumn, oColumnData, sColumnKey;
		while (iLen--) {
			sColumnKey = null;
			oColumn = aColumns[iLen];
			// Retrieve path from the property
			if (oColumn) {
				oColumnData = oColumn.data("p13nData");
				if (typeof oColumnData === "string") {
					try {
						oColumnData = JSON.parse(oColumnData);
					} catch (e) {
						// Invalid JSON
					}
					// Set back the object for faster access later
					if (oColumnData) {
						oColumn.data("p13nData", oColumnData);
					}
				}
				if (oColumnData) {
					sColumnKey = oColumnData["columnKey"];
				}
				if (sColumnKey) {
					this._aExistingColumns.push(sColumnKey);
				}
			}
		}
	};

	/**
	 * gets the array of visible column path that is used to create the select query
	 * 
	 * @private
	 * @returns {Array|[]} array of column paths
	 */
	SmartTable.prototype._getVisibleColumnPaths = function() {
		var aSelect = [], aColumns = this._oTable.getColumns(), i, iLen = aColumns ? aColumns.length : 0, oColumn, oColumnData, sPath, sAdditionalPath;

		for (i = 0; i < iLen; i++) {
			oColumn = aColumns[i];
			sPath = null;
			if (oColumn.getVisible()) {
				if (oColumn.getLeadingProperty) {
					sPath = oColumn.getLeadingProperty();
				}

				oColumnData = oColumn.data("p13nData");
				if (oColumnData) {
					if (!sPath) {
						sPath = oColumnData["leadingProperty"];
					}
					sAdditionalPath = oColumnData["additionalProperty"];
				}

				if (sPath && aSelect.indexOf(sPath) < 0) {
					aSelect.push(sPath);
				}
				if (sAdditionalPath && aSelect.indexOf(sAdditionalPath) < 0) {
					aSelect.push(sAdditionalPath);
				}
			}
		}
		return aSelect;
	};

	/**
	 * Creates a table based on the configuration, if necessary. This also prepares the methods to be used based on the table type.
	 * 
	 * @private
	 */
	SmartTable.prototype._createTable = function() {
		var aContent = this.getItems(), iLen = aContent ? aContent.length : 0, oTable;
		this._sAggregation = "rows";
		// Check if a Table already exists in the content (Ex: from view.xml)
		while (iLen--) {
			oTable = aContent[iLen];
			if (oTable instanceof Table || oTable instanceof ResponsiveTable) {
				break;
			}
			oTable = null;
		}

		// If a Table exists determine its type else create one based on the tableType property!
		if (oTable) {
			this._oTable = oTable;
			if (oTable instanceof AnalyticalTable) {
				this._isAnalyticalTable = true;
			} else if (oTable instanceof ResponsiveTable) {
				this._isMobileTable = true;
				// get the item template from the view
				this._oTemplate = (oTable.getItems() && oTable.getItems().length > 0) ? oTable.getItems()[0] : new sap.m.ColumnListItem();
				oTable.removeAllItems();
			} else if (oTable instanceof TreeTable) {
				this._isTreeTable = true;
			}
			// If a table already exists --> get the list of columns to ignore
			this._updateInitialColumns();
		} else {
			// Create table based on tableType
			if (this.getTableType() === "AnalyticalTable") {
				this._isAnalyticalTable = true;
				this._oTable = new AnalyticalTable({
					enableCustomFilter: true
				});
			} else if (this.getTableType() === "ResponsiveTable") {
				this._isMobileTable = true;
				this._oTable = new ResponsiveTable({
					growing: true
				});
				this._oTemplate = new sap.m.ColumnListItem();
			} else if (this.getTableType() === "TreeTable") {
				this._isTreeTable = true;
				this._oTable = new TreeTable({
					selectionMode: sap.ui.table.SelectionMode.MultiToggle
				});
			} else {
				this._oTable = new Table({
					selectionMode: sap.ui.table.SelectionMode.MultiToggle
				});
			}

			if (this._oTable.setVisibleRowCountMode) {
				this._oTable.setVisibleRowCountMode(sap.ui.table.VisibleRowCountMode.Auto);
			}

			this.insertItem(this._oTable, 2);
		}
		if (!this._oTable.getLayoutData()) {
			// Checking if Table is of type sap.m.Table and visibleRowCountMode is not set to Auto
			// Then baseSize is set to auto. This check is to ensure corrent rendering of SmartTable in IE and Safari
			if (this._oTable instanceof sap.m.Table || (this._oTable.getVisibleRowCountMode && this._oTable.getVisibleRowCountMode() !== sap.ui.table.VisibleRowCountMode.Auto)) {
				this._oTable.setLayoutData(new sap.m.FlexItemData({
					growFactor: 1,
					baseSize: "auto"
				}));
			} else {
				// baseSize="0%" for tables that are not of type sap.m.Table
				this._oTable.setLayoutData(new sap.m.FlexItemData({
					growFactor: 1,
					baseSize: "0%"
				}));
			}
		}
		// Set ariaLabelledBy on the inner UI5 table
		if (this._oTable.addAriaLabelledBy) {
			this._oTable.addAriaLabelledBy(this.getId() + "-header");
		}
		this._oTable.addStyleClass("sapUiCompSmartTableInnerTable");

		this._oTable.setEnableBusyIndicator(true);
		this._oTable.setBusyIndicatorDelay(100);

		if (this._oTable.setEnableCustomFilter) {
			this._oTable.setEnableCustomFilter(this.getEnableCustomFilter());
		}

		// Always disable Column Visiblilty menu item
		if (this._oTable.setShowColumnVisibilityMenu) {
			this._oTable.setShowColumnVisibilityMenu(false);
		}

		if (this._oTable.getEnableCustomFilter && this._oTable.getEnableCustomFilter()) {
			// disable the cell filter if custom filter is enabled
			if (this._oTable.setEnableCellFilter) {
				this._oTable.setEnableCellFilter(false);
			}
			if (this._oTable.attachCustomFilter) {
				this._oTable.attachCustomFilter(this._showTableFilterDialog.bind(this));
			}
		}

		// Replace the prototype methods to suit the table being used!
		if (this._isAnalyticalTable) {
			this._createColumn = this._createAnalyticalColumn;
		} else if (this._isMobileTable) {
			this._sAggregation = "items";
			this._createColumn = this._createMobileColumn;
			// map bindItems to bindRows for Mobile Table to enable reuse of rebind mechanism
			this._oTable.bindRows = this._oTable.bindItems;
		}

		if (!this._isMobileTable) {
			this._oTable.attachEvent("_rowsUpdated", function() {
				this._setExcelExportEnableState();
			}, this);
		}
		// Always enable the better scroll behaviour - so that scroll/data request only happens once scrollbar is released
		if (this._oTable._setLargeDataScrolling) {
			this._oTable._setLargeDataScrolling(true);
		}
	};

	/**
	 * returns the internally used table object
	 * 
	 * @public
	 * @returns {object} the table
	 */
	SmartTable.prototype.getTable = function() {
		return this._oTable;
	};

	/**
	 * Shows the filter dialog via the Personalisation controller
	 * 
	 * @param {object} oEvent The event parameters
	 * @private
	 */
	SmartTable.prototype._showTableFilterDialog = function(oEvent) {
		if (this._oPersController) {
			this._oPersController.openDialog({
				filter: {
					visible: true,
					payload: {
						column: oEvent.getParameter("column")
					}
				}
			});
		}
	};

	/**
	 * sets the disable property on the DOM's input elements on existing sum rows
	 * 
	 * @private
	 */
	SmartTable.prototype._disableSumRows = function() {
		if (sap.ui.Device.browser.msie && sap.ui.Device.browser.version < 11) { // other browser work via pointer-events: none in CSS
			jQuery.sap.delayedCall(60, this, function() { // CSS classes are set in sap.ui.table.AnalyticalTable._updateTableContent ONLY if data is
				// available. Data gets set via sap.ui.table.Table.updateRows with a setDelay50 call, so
				// ensure this call is triggerd afterwards
				if (this.getEditable()) {
					this._oTable.$().find(".sapUiAnalyticalTableSum input").prop("disabled", true); // set the input elements on the sum line to
					// disabled
					this._oTable.$().find(".sapUiTableGroupHeader input").prop("disabled", true); // set the input elements on the group headers sum
					// line to disabled
				}
			});
		}
	};

	/**
	 * Creates and returns a Column that can be added to the table, based on the metadata provided by the TableProvider
	 * 
	 * @param {object} oField The column's metadata
	 * @param {string} sId The id to be set on the column
	 * @private
	 * @returns {Object} the column that is created
	 */
	SmartTable.prototype._createColumn = function(oField, sId) {
		var oColumn;
		oColumn = new Column(sId, {
			autoResizable: true,
			hAlign: oField.align,
			width: oField.width,
			visible: oField.isInitiallyVisible,
			label: new Label(sId + "-header", {
				textAlign: oField.align,
				text: oField.label,
				textDirection: oField.textDirection
			}),
			sorted: oField.sorted,
			sortOrder: oField.sortOrder,
			tooltip: oField.quickInfo,
			showSortMenuEntry: oField.sortable,
			showFilterMenuEntry: oField.filterable,
			name: oField.fieldName,
			template: oField.template
		});
		return oColumn;
	};

	/**
	 * Creates and returns an AnalyticalColumn that can be added to the AnalyticalTable, based on the metadata provided by the TableProvider
	 * 
	 * @param {object} oField The column's metadata
	 * @param {string} sId The id to be set on the column
	 * @private
	 * @returns {Object} the column that is created
	 */
	SmartTable.prototype._createAnalyticalColumn = function(oField, sId) {
		var oColumn;
		// Add a special style class to make currency fields bold in sum/total row
		if (oField.isCurrencyField && oField.template.addStyleClass) {
			oField.template.addStyleClass("sapUiUfdCurrency");
		}
		oColumn = new AnalyticalColumn(sId, {
			autoResizable: true,
			hAlign: oField.align,
			width: oField.width,
			visible: oField.isInitiallyVisible,
			inResult: oField.inResult,
			label: new Label(sId + "-header", {
				textAlign: oField.align,
				text: oField.label,
				textDirection: oField.textDirection
			}),
			tooltip: oField.quickInfo,
			sorted: oField.sorted,
			sortOrder: oField.sortOrder,
			showSortMenuEntry: oField.sortable,
			showFilterMenuEntry: oField.filterable,
			summed: oField.summed,
			leadingProperty: oField.name,
			template: oField.template
		});
		return oColumn;
	};

	/**
	 * Creates and returns a MobileColumn that can be added to the mobile table, based on the metadata provided by the TableProvider
	 * 
	 * @param {object} oField The column's metadata
	 * @param {string} sId The id to be set on the column
	 * @private
	 * @returns {Object} the column that is created
	 */
	SmartTable.prototype._createMobileColumn = function(oField, sId) {
		var oColumn;
		oColumn = (new Column1(sId, {
			hAlign: oField.align,
			visible: oField.isInitiallyVisible,
			header: new Text(sId + "-header", {
				text: oField.label
			}),
			tooltip: oField.quickInfo
		}));
		// Mobile table needs the content control to be passed as a template with the items aggregation
		if (oField.template && oField.template.setWrapping) {
			oField.template.setWrapping(true);
		}
		if (this._oTemplate) {
			this._oTemplate.addCell(oField.template);
		}
		return oColumn;
	};

	/**
	 * Interface function for SmartVariantManagment control, returns the current used variant data
	 * 
	 * @public
	 * @returns {json} The currently set variant
	 */
	SmartTable.prototype.fetchVariant = function() {
		if (this._oCurrentVariant === "STANDARD" || this._oCurrentVariant === null) {
			return {};
		}

		return this._oCurrentVariant;
	};

	/**
	 * Interface function for SmartVariantManagment control, sets the current variant
	 * 
	 * @param {Object} oVariantJSON - the variants json
	 * @param {string} sContext - describes the context in which the apply was executed
	 * @public
	 */
	SmartTable.prototype.applyVariant = function(oVariantJSON, sContext) {
		this._oCurrentVariant = oVariantJSON;
		if (this._oCurrentVariant === "STANDARD") {
			this._oCurrentVariant = null;
		}

		PersonalizationUtil.recoverPersonalisationData(this._oCurrentVariant, this._oTable);

		// Context STANDARD here specifies that this is a custom application variant for Globalisation/Industry!
		// This would be called just once in the beginning!
		if (sContext === "STANDARD") {
			this._oApplicationDefaultVariant = this._oCurrentVariant;
		}
		// if an application default variant exists --> extend all the other variants based on this!
		// Changes to the industry should be taken over --> but first we only take over non conflicting changes
		// if the user already has some changes --> just use those
		if (this._oApplicationDefaultVariant && !sContext) {
			this._oCurrentVariant = jQuery.extend(true, {}, this._oApplicationDefaultVariant, oVariantJSON);
		}

		// Set instance flag to indicate that we are currently in the process of applying the changes
		this._bApplyingVariant = true;
		// Suppress refresh to prevent backend roundtrips
		if (this._oTable._setSuppressRefresh) {
			this._oTable._setSuppressRefresh(true);
		}

		if (this._oPersController) {
			if (this._oCurrentVariant === null || jQuery.isEmptyObject(this._oCurrentVariant)) {
				this._oPersController.resetPersonalization(sap.ui.comp.personalization.ResetType.ResetFull);
			} else {
				this._oPersController.setPersonalizationData(this._oCurrentVariant);
			}
		}

		// Rebind Table only if data was set on it once or no smartFilter is attached!
		if (this._bIsTableBound || !this._oSmartFilter) {
			this._reBindTable(null, true);
		} else {
			this._showOverlay(true);
		}

		// Clear apply variant flag!
		this._bApplyingVariant = false;

		this.fireAfterVariantApply({
			currentVariantId: this.getCurrentVariantId()
		});
	};

	/**
	 * eventhandler fired before personalisation changes are applied to the table
	 * 
	 * @param {object} oEvent The event arguments
	 * @private
	 */
	SmartTable.prototype._beforePersonalisationModelDataChange = function(oEvent) {

		// we set busy indicator since operation on the table (like setting visible to true) can take longer and the table provides no visual feedback
		this._oTable.setEnableBusyIndicator(false);
		this._oTable.setBusy(true);

		// Suppress refresh to prevent backend roundtrips
		if (this._oTable._setSuppressRefresh) {
			this._oTable._setSuppressRefresh(true);
		}
	};

	/**
	 * eventhandler fired after personalisation changes are potentially applied to the table. Event will be fired before the event
	 * "afterP13nModelDataChange"
	 * 
	 * @param {object} oEvent The event arguments
	 * @private
	 */
	SmartTable.prototype._afterPersonalisationModelDataChange = function(oEvent) {
		this._updateColumnsPopinFeature();

		// we remove the temporary busy indicator - see sap.ui.comp.smarttable.SmartTable.prototype._beforePersonalisationModelDataChange
		this._oTable.setBusy(false);
		this._oTable.setEnableBusyIndicator(true);

	};

	/**
	 * eventhandler for personalisation changed
	 * 
	 * @param {object} oEvent The event arguments
	 * @private
	 */
	SmartTable.prototype._personalisationModelDataChange = function(oEvent) {
		this._oCurrentVariant = oEvent.getParameter("persistentData");
		if (this._bApplyingVariant) {
			return;
		}
		var oChangeInfo = oEvent.getParameter("changeType");
		var changeStatus = this._getChangeStatus(oChangeInfo);

		if (changeStatus === sap.ui.comp.personalization.ChangeType.Unchanged) {
			return;
		}

		if (!this.getUseVariantManagement()) {
			this._persistPersonalisation();
		} else if (this._oVariantManagement) {
			this._oVariantManagement.currentVariantSetModified(true);
		}

		if (changeStatus === sap.ui.comp.personalization.ChangeType.ModelChanged) {
			// Rebind Table only if data was set on it once or no smartFilter is attached!
			if (this._bIsTableBound || !this._oSmartFilter) {
				this._reBindTable(null, oChangeInfo.columns === sap.ui.comp.personalization.ChangeType.ModelChanged);
			} else {
				this._showOverlay(true);
			}
		}
	};

	/**
	 * returns the current filter and sorting options from the table personalisation/variants
	 * 
	 * @private
	 * @param {object} oChangeInfo The change info given by the personalization controller
	 * @returns {sap.ui.comp.personalization.ChangeType} the merged change status
	 */
	SmartTable.prototype._getChangeStatus = function(oChangeInfo) {
		if (!oChangeInfo) {
			// change info not provided return ModelChanged to indicate that we need to update everything internally
			return sap.ui.comp.personalization.ChangeType.ModelChanged;
		}

		if (oChangeInfo.sort === sap.ui.comp.personalization.ChangeType.ModelChanged || oChangeInfo.filter === sap.ui.comp.personalization.ChangeType.ModelChanged || oChangeInfo.columns === sap.ui.comp.personalization.ChangeType.ModelChanged || oChangeInfo.group === sap.ui.comp.personalization.ChangeType.ModelChanged) {
			// model has changed and was not applied to table
			return sap.ui.comp.personalization.ChangeType.ModelChanged;
		}

		if (oChangeInfo.sort === sap.ui.comp.personalization.ChangeType.TableChanged || oChangeInfo.filter === sap.ui.comp.personalization.ChangeType.TableChanged || oChangeInfo.columns === sap.ui.comp.personalization.ChangeType.TableChanged || oChangeInfo.group === sap.ui.comp.personalization.ChangeType.TableChanged) {
			// change was already applied to table
			return sap.ui.comp.personalization.ChangeType.TableChanged;
		}

		return sap.ui.comp.personalization.ChangeType.Unchanged;
	};

	/**
	 * returns the current filter and sorting options from the table personalisation/variants
	 * 
	 * @private
	 * @returns {object} current variant's filter and sorting options
	 */
	SmartTable.prototype._getTablePersonalisationData = function() {
		if (!this._oCurrentVariant) {
			return null;
		}

		var aSorters = [], aFilters = [], aExcludeFilters = [], oExcludeFilters, oGroupItem, oGroupSorter, aSortData, oColumn, oColumnData, sGroupPath, sPath, sColumnsText = "", bIsTimeField;
		// Clear the fields that are part of $select due to grouping (sap.m.Table)
		this._sSelectForGroup = null;
		// group handling
		if (this._isMobileTable && this._oCurrentVariant.group && this._oCurrentVariant.group.groupItems) {
			oGroupItem = this._oCurrentVariant.group.groupItems[0];
			oColumn = this._getColumnByKey(oGroupItem.columnKey);
			if (oColumn) {
				sColumnsText = oColumn.getHeader().getText();
			}
			sPath = this._getPathFromColumnKeyAndProperty(oGroupItem.columnKey, "sortProperty");
			// Initialise the GroupPath to a new variable as it is being used in the formatter function
			sGroupPath = sPath;
			oGroupSorter = new sap.ui.model.Sorter(sGroupPath, oGroupItem.operation === "GroupDescending", function(oContext) {
				var sKey = oContext.getProperty(sGroupPath);
				return {
					key: sKey,
					text: sColumnsText ? sColumnsText + " : " + sKey : sKey
				};
			});
			// Set the group field to select path so that it can be added to $select
			this._sSelectForGroup = sGroupPath;
			aSorters.push(oGroupSorter);
		}

		// sort handling
		if (this._oCurrentVariant.sort) {
			aSortData = this._oCurrentVariant.sort.sortItems;
		} else {
			aSortData = this._aInitialSorters;
		}

		if (aSortData) {
			aSortData.forEach(function(oModelItem) {
				var bDescending = oModelItem.operation === "Descending";
				sPath = this._getPathFromColumnKeyAndProperty(oModelItem.columnKey, "sortProperty");
				if (oGroupSorter && oGroupSorter.sPath === sPath) {
					oGroupSorter.bDescending = bDescending;
				} else {
					aSorters.push(new sap.ui.model.Sorter(sPath, bDescending));
				}
			}, this);
		}

		// Filter Handling
		if (this._oCurrentVariant.filter) {
			this._oCurrentVariant.filter.filterItems.forEach(function(oModelItem) {
				var oValue1 = oModelItem.value1, oValue2 = oModelItem.value2;
				// Filter path has be re-calculated below
				sPath = null;
				bIsTimeField = false;
				oColumn = this._getColumnByKey(oModelItem.columnKey);
				if (oColumn) {
					if (oColumn.getFilterProperty) {
						sPath = oColumn.getFilterProperty();
					}
					oColumnData = oColumn.data("p13nData");
					if (oColumnData) {
						bIsTimeField = oColumnData.type === "time";
						if (!sPath) {
							sPath = oColumnData["filterProperty"];
						}
					}
				}
				if (bIsTimeField) {
					if (oValue1 instanceof Date) {
						oValue1 = FormatUtil.getEdmTimeFromDate(oValue1);
					}
					if (oValue2 instanceof Date) {
						oValue2 = FormatUtil.getEdmTimeFromDate(oValue2);
					}
				} else if (oValue1 instanceof Date && this._oTableProvider && this._oTableProvider.getIsUTCDateHandlingEnabled()) {
					oValue1 = FilterProvider.getDateInUTCOffset(oValue1);
					oValue2 = oValue2 ? FilterProvider.getDateInUTCOffset(oValue2) : oValue2;
				}
				if (oModelItem.exclude) {
					aExcludeFilters.push(new sap.ui.model.Filter(sPath, FilterOperator.NE, oValue1));
				} else {
					aFilters.push(new sap.ui.model.Filter(sPath, oModelItem.operation, oValue1, oValue2));
				}
			}, this);

			if (aExcludeFilters.length) {
				oExcludeFilters = new sap.ui.model.Filter(aExcludeFilters, true);
			}
		}

		return {
			filters: aFilters,
			excludeFilters: oExcludeFilters,
			sorters: aSorters
		};
	};

	/**
	 * Returns the column for the given column key
	 * 
	 * @param {string} sColumnKey - the column key for the required column
	 * @returns {object} The found column or null
	 * @private
	 */
	SmartTable.prototype._getColumnByKey = function(sColumnKey) {
		var aColumns, oColumn, iLength, i, oCustomData;
		if (this._oTable) {
			aColumns = this._oTable.getColumns();
			iLength = aColumns.length;
			for (i = 0; i < iLength; i++) {
				oColumn = aColumns[i];
				oCustomData = oColumn.data("p13nData");
				if (oCustomData && oCustomData.columnKey === sColumnKey) {
					return oColumn;
				}
			}
		}

		return null;
	};

	/**
	 * Retrieves the path for the specified property and column key from the array of table columns
	 * 
	 * @param {string} sColumnKey - the column key specified on the table
	 * @param {string} sProperty - the property path that needs to be retrieved from the column
	 * @returns {string} The path that can be used by sorters, filters etc.
	 * @private
	 */
	SmartTable.prototype._getPathFromColumnKeyAndProperty = function(sColumnKey, sProperty) {
		var sPath = null, oColumn, oColumnData;
		oColumn = this._getColumnByKey(sColumnKey);

		// Retrieve path from the property
		if (oColumn) {
			if (sProperty == "sortProperty" && oColumn.getSortProperty) {
				sPath = oColumn.getSortProperty();
			} else if (sProperty == "filterProperty" && oColumn.getFilterProperty) {
				sPath = oColumn.getFilterProperty();
			} else if (sProperty == "leadingProperty" && oColumn.getLeadingProperty) {
				sPath = oColumn.getLeadingProperty();
			}

			if (!sPath) {
				oColumnData = oColumn.data("p13nData");
				if (oColumnData) {
					sPath = oColumnData[sProperty];
				}
			}
		}

		return sPath;
	};

	/**
	 * triggers (hidden) VariantManagementControl to persist personalisation this function is called in case no VariantManagementControl is used
	 * 
	 * @private
	 */
	SmartTable.prototype._persistPersonalisation = function() {
		var that = this;
		if (this._oVariantManagement) {
			this._oVariantManagement.getVariantsInfo(function(aVariants) {
				var sPersonalisationVariantKey = null;
				if (aVariants && aVariants.length > 0) {
					sPersonalisationVariantKey = aVariants[0].key;
				}

				var bOverwrite = sPersonalisationVariantKey !== null;

				var oParams = {
					name: "Personalisation",
					global: false,
					overwrite: bOverwrite,
					key: sPersonalisationVariantKey,
					def: true
				};
				that._oVariantManagement.fireSave(oParams);
			});
		}
	};

	/**
	 * returns the id of the currently selected variant.
	 * 
	 * @public
	 * @returns {string} id of the currently selected variant
	 */
	SmartTable.prototype.getCurrentVariantId = function() {
		var sKey = "";

		if (this._oVariantManagement) {
			sKey = this._oVariantManagement.getCurrentVariantId();
		}

		return sKey;
	};

	/**
	 * Set the current variant according to the sVariantId. In case an empty string or null or undefined was passed the STANDARD will be set. STANDARD
	 * will also be set, in case the passed sVariantId could not be found. In case neither a flexibility variant, nor the content for the standard
	 * variant could not be obtained, nor the personalisable control obtained nothing will be executed/changed
	 * 
	 * @public
	 * @param {string} sVariantId id of the currently selected variant
	 */
	SmartTable.prototype.setCurrentVariantId = function(sVariantId) {
		if (this._oVariantManagement) {
			this._oVariantManagement.setCurrentVariantId(sVariantId);
		} else {
			jQuery.sap.log.error("sap.ui.comp.smarttable.SmartTable.prototype.setCurrentVariantId: VariantManagement does not exist");
		}
	};

	/**
	 * Cleans up the control
	 * 
	 * @public
	 */
	SmartTable.prototype.exit = function() {
		// Cleanup smartFilter events as it can be used again stand-alone without being destroyed!
		if (this._oSmartFilter) {
			this._oSmartFilter.detachSearch(this._reBindTable, this);
			this._oSmartFilter.detachFilterChange(this._showOverlay, this);
			this._oSmartFilter.detachCancel(this._showOverlay, this);
			this._oSmartFilter = null;
		}
		if (this._oTableProvider && this._oTableProvider.destroy) {
			this._oTableProvider.destroy();
		}
		this._oTableProvider = null;
		if (this._oPersController && this._oPersController.destroy) {
			this._oPersController.destroy();
		}
		this._oPersController = null;
		if (this._oVariantManagement && this._oVariantManagement.destroy) {
			this._oVariantManagement.destroy();
		}
		if (this._oEditModel) {
			this._oEditModel.destroy();
		}

		if (this._oNoData && this._oNoData.destroy) {
			this._oNoData.destroy();
		}
		this.oNoData = null;
		this._oEditModel = null;
		this._oVariantManagement = null;
		this._oCurrentVariant = null;
		this._oApplicationDefaultVariant = null;
		this._aTableViewMetadata = null;
		this._aExistingColumns = null;
		this._aAlwaysSelect = null;
		this._oCustomToolbar = null;
		this._oToolbar = null;
		if (this._oUseExportToExcel && !this.getUseExportToExcel()) {
			this._oUseExportToExcel.destroy();
		}
		this._oUseExportToExcel = null;
		this._oTablePersonalisationButton = null;
		// Destroy the template as it is not part of the UI5 table as long as it is not bound!
		if (!this._bIsTableBound && this._oTemplate) {
			this._oTemplate.destroy();
		}
		this._oTemplate = null;
		this._oView = null;
		this._oTable = null;
	};

	return SmartTable;

}, /* bExport= */true);

}; // end of sap/ui/comp/smarttable/SmartTable.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.providers.ChartProvider') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// -----------------------------------------------------------------------------
// Generates the view metadata required for SmartTable using SAP-Annotations metadata
// -----------------------------------------------------------------------------
jQuery.sap.declare('sap.ui.comp.providers.ChartProvider'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/providers/ChartProvider",[
	'jquery.sap.global', 'sap/ui/comp/odata/MetadataAnalyser', 'sap/ui/comp/odata/ChartMetadata', 'sap/ui/comp/odata/ODataType', './ControlProvider'
], function(jQuery, MetadataAnalyser, ChartMetadata, ODataType, ControlProvider) {
	"use strict";

	/**
	 * Constructs a class to generate the view/data model metadata for the SmartChart from the SAP-Annotations metadata
	 * 
	 * @constructor
	 * @experimental This module is only for internal/experimental use!
	 * @public
	 * @param {object} mPropertyBag - PropertyBag having members model, entitySet
	 */
	var ChartProvider = function(mPropertyBag) {
		if (mPropertyBag) {
			this._oParentODataModel = mPropertyBag.model;
			this.sEntitySet = mPropertyBag.entitySet;
			this._sIgnoredFields = mPropertyBag.ignoredFields;
			this.useSmartField = mPropertyBag.useSmartField;
			this.enableInResultForLineItem = mPropertyBag.enableInResultForLineItem === "true";
			this._oDefaultDropDownDisplayBehaviour = mPropertyBag.defaultDropDownDisplayBehaviour;
			try {
				this._oDateFormatSettings = mPropertyBag.dateFormatSettings ? JSON.parse(mPropertyBag.dateFormatSettings) : undefined;
				this._oCurrencyFormatSettings = mPropertyBag.currencyFormatSettings ? JSON.parse(mPropertyBag.currencyFormatSettings) : undefined;
			} catch (ex) {
				// Invalid JSON provided!
			}
		}

		this._aODataFieldMetadata = [];
		this._oChartViewMetadata = null;
		this._aIgnoredFields = [];
		this._oMetadataAnalyser = new MetadataAnalyser(this._oParentODataModel);
		this._intialiseMetadata();
	};

	/**
	 * Initialises the necessary table metadata
	 * 
	 * @private
	 */
	ChartProvider.prototype._intialiseMetadata = function() {
		var oChartViewField, aChartViewMetadata = [], sFullyQualifiedEntityTypeName, oField, i, iLen = 0;
		this._aODataFieldMetadata = this._oMetadataAnalyser.getFieldsByEntitySetName(this.sEntitySet);
		sFullyQualifiedEntityTypeName = this._oMetadataAnalyser.getEntityTypeNameFromEntitySetName(this.sEntitySet);

		// Performance??
		this._oPresentationVariant = this._oMetadataAnalyser.getPresentationVariantAnnotation(sFullyQualifiedEntityTypeName);
		if (this._oPresentationVariant && this._oPresentationVariant.chartAnnotation) {
			this._oChartAnnotation = this._oPresentationVariant.chartAnnotation;
		} else {
			this._oChartAnnotation = this._oMetadataAnalyser.getChartAnnotation(sFullyQualifiedEntityTypeName);
		}

		if (!this._oDefaultDropDownDisplayBehaviour) {
			this._oDefaultDropDownDisplayBehaviour = this._oMetadataAnalyser.getTextArrangementValue(sFullyQualifiedEntityTypeName);
		}

		this._generateIgnoredFieldsArray();

		this._oControlProvider = new ControlProvider({
			metadataAnalyser: this._oMetadataAnalyser,
			model: this._oParentODataModel,
			fieldsMetadata: this._aODataFieldMetadata,
			dateFormatSettings: this._oDateFormatSettings,
			currencyFormatSettings: this._oCurrencyFormatSettings,
			defaultDropDownDisplayBehaviour: this._oDefaultDropDownDisplayBehaviour,
			useSmartField: this.useSmartField,
			enableDescriptions: false,
			entitySet: this.sEntitySet
		});

		if (this._aODataFieldMetadata) {
			iLen = this._aODataFieldMetadata.length;
		}

		for (i = 0; i < iLen; i++) {
			oField = this._aODataFieldMetadata[i];
			// Ignore the fields in the ignored list -or- the one marked with visible="false" in annotation
			if (this._aIgnoredFields.indexOf(oField.name) > -1 || !oField.visible) {
				continue;
			}

			// Check if field is not a Primitive type --> only generate metadata for primitive/simple type fields
			if (oField.type.indexOf("Edm.") === 0) {
				oChartViewField = this._getFieldViewMetadata(oField);
				this._enrichWithChartViewMetadata(oField, oChartViewField);
				aChartViewMetadata.push(oField);
			}
		}

		if (this._oChartAnnotation) {
			this._oChartViewMetadata = jQuery.extend({}, this._oChartAnnotation);
			// Convert chart type to UI5 format
			this._oChartViewMetadata.chartType = ChartMetadata.getChartType(this._oChartViewMetadata.chartType);
			this._oChartViewMetadata.fields = aChartViewMetadata;
		}
	};

	ChartProvider.prototype._setAnnotationMetadata = function(oFieldViewMetadata) {
		var mAnnotation = null;
		if (oFieldViewMetadata && oFieldViewMetadata.fullName) {
			// Update with SemanticObject annotation data
			mAnnotation = this._oMetadataAnalyser.getSemanticObjectAnnotation(oFieldViewMetadata.fullName);
			if (mAnnotation) {
				oFieldViewMetadata.semanticObject = mAnnotation.semanticObject;
			}
		}
	};

	ChartProvider.prototype._getFieldViewMetadata = function(oField) {
		var oChartViewField = this._oControlProvider.getFieldViewMetadata(oField, false);
		this._setAnnotationMetadata(oChartViewField);

		return oChartViewField;
	};

	/**
	 * Generate an array of fields that need to be ignored in the SmartChart (if any)
	 * 
	 * @private
	 */
	ChartProvider.prototype._generateIgnoredFieldsArray = function() {
		if (this._sIgnoredFields) {
			this._aIgnoredFields = this._sIgnoredFields.split(",");
		}
	};

	/**
	 * Calculates additional attributes for a field
	 * 
	 * @param {object} oField - OData metadata for the chart field
	 * @private
	 */
	ChartProvider.prototype._enrichWithChartViewMetadata = function(oField, oViewField) {

		oField.isMeasure = oField.aggregationRole && oField.aggregationRole === "measure";
		oField.isDimension = oField.aggregationRole && oField.aggregationRole === "dimension";

		oField.role = this._getRole(oField);

		oField.filterType = oViewField.filterType;
		if (oViewField.template) {
			oField.template = oViewField.template;
		}

		if (oField.isDimension) {
			oField.displayBehaviour = oViewField.displayBehaviour;
		}

		oField.isSemanticObject = (oViewField.semanticObject) ? true : false;

		// set the inResult from metadata
		this._setInResult(oField);
		// set the sortOrder from metadata
		this._setSortOrder(oField);
	};

	/**
	 * Sets inResult on the field metadata if the field exists in the RequestAtLeast of PresentationVariant annotation (or when
	 * enableInResultForLineItem is set, from LineItem annotation)
	 * 
	 * @param {object} oField - OData metadata for the table field
	 * @private
	 */
	ChartProvider.prototype._setInResult = function(oField) {
		// first check if field is part of PresentationVariant-->RequestAtLeastFields
		if (this._oPresentationVariant) {
			if (this._oPresentationVariant.requestAtLeastFields && this._oPresentationVariant.requestAtLeastFields.indexOf(oField.name) > -1) {
				oField.inResult = true;
			}
		} else if (this.enableInResultForLineItem) {
			// else set inResult based on LineItem (mainly relevant for AnalyticalTable) only in non PresentationVariant use case
			if (this._oLineItemAnnotation && this._oLineItemAnnotation.fields && this._oLineItemAnnotation.fields.indexOf(oField.name) > -1) {
				oField.inResult = true;
			}
		}
	};

	/**
	 * Sets sorting realted info (sorted and sortOrder) on the field metadata if the field exists in the SortOrder of PresentationVariant annotation
	 * 
	 * @param {object} oField - OData metadata for the table field
	 * @private
	 */
	ChartProvider.prototype._setSortOrder = function(oField) {
		var iLen;
		// first check if field is part of PresentationVariant-->SortOrder
		if (this._oPresentationVariant && this._oPresentationVariant.sortOrderFields) {
			iLen = this._oPresentationVariant.sortOrderFields.length;
			for (var i = 0; i < iLen; i++) {
				if (this._oPresentationVariant.sortOrderFields[i].name === oField.name) {
					oField.sorted = true;
					oField.sortOrder = this._oPresentationVariant.sortOrderFields[i].descending ? "Descending" : "Ascending";
					break;
				}
			}
		}
	};

	ChartProvider.prototype._unmarkTextDimensions = function(aFields, aTextDimensionNames) {
		var i, oField;

		for (i = 0; i < aFields.length; i++) {
			oField = aFields[i];

			if (oField.isDimension) {
				if (aTextDimensionNames.indexOf(oField.name) > -1) {
					oField.isDimension = false;
				}
			}
		}
	};

	/**
	 * @param {object} oField - OData metadata for the chart field
	 * @returns {string} the role
	 */
	ChartProvider.prototype._getRole = function(oField) {
		if (this._oChartAnnotation) {
			if (oField.isDimension && this._oChartAnnotation.dimensionAttributes) {
				return ChartMetadata.getDimensionRole(this._oChartAnnotation.dimensionAttributes[oField.name]);
			} else if (oField.isMeasure && this._oChartAnnotation.measureAttributes) {
				return ChartMetadata.getMeasureRole(this._oChartAnnotation.measureAttributes[oField.name]);
			}
		}
	};

	/**
	 * Get the fields that can be added as Columns
	 * 
	 * @returns {Array} the table view metadata
	 * @public
	 */
	ChartProvider.prototype.getChartViewMetadata = function() {
		return this._oChartViewMetadata;
	};

	/**
	 * Returns a flag indicating whether date handling with UTC is enabled for the table.
	 * 
	 * @returns {boolean} whether UTC date handling is enabled
	 * @public
	 */
	ChartProvider.prototype.getIsUTCDateHandlingEnabled = function() {
		return this._oDateFormatSettings ? this._oDateFormatSettings.UTC : false;
	};

	/**
	 * Destroys the object
	 * 
	 * @public
	 */
	ChartProvider.prototype.destroy = function() {
		if (this._oMetadataAnalyser && this._oMetadataAnalyser.destroy) {
			this._oMetadataAnalyser.destroy();
		}
		this._oMetadataAnalyser = null;
		this._aODataFieldMetadata = null;
		this._oChartViewMetadata = null;
		this._sIgnoredFields = null;
		this.bIsDestroyed = true;
	};

	return ChartProvider;
}, /* bExport= */true);

}; // end of sap/ui/comp/providers/ChartProvider.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartchart.SmartChart') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartchart.SmartChart.
jQuery.sap.declare('sap.ui.comp.smartchart.SmartChart'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.chart.Chart'); // unlisted dependency retained
jQuery.sap.require('sap.chart.library'); // unlisted dependency retained
jQuery.sap.require('sap.chart.data.Dimension'); // unlisted dependency retained
jQuery.sap.require('sap.chart.data.Measure'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToggleButton'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.m.ComboBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.ComboBoxRenderer'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexItemData'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Item'); // unlisted dependency retained
jQuery.sap.require('sap.m.OverflowToolbar'); // unlisted dependency retained
jQuery.sap.require('sap.m.OverflowToolbarButton'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarSeparator'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarDesign'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarSpacer'); // unlisted dependency retained
jQuery.sap.require('sap.m.VBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.VBoxRenderer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartchart/SmartChart",[
	'jquery.sap.global', 'sap/ui/comp/library', 'sap/chart/Chart', 'sap/chart/library', 'sap/chart/data/Dimension', 'sap/chart/data/Measure', 'sap/m/ToggleButton', 'sap/m/Button', 'sap/m/Text', 'sap/m/ComboBox', 'sap/m/ComboBoxRenderer', 'sap/m/FlexItemData', 'sap/ui/core/Item', 'sap/m/OverflowToolbar', 'sap/m/OverflowToolbarButton', 'sap/m/ToolbarSeparator', 'sap/m/ToolbarDesign', 'sap/m/ToolbarSpacer', 'sap/m/VBox', 'sap/m/VBoxRenderer', 'sap/ui/comp/providers/ChartProvider', 'sap/ui/comp/smartfilterbar/FilterProvider', 'sap/ui/comp/smartvariants/SmartVariantManagement', 'sap/ui/model/Filter', 'sap/ui/model/FilterOperator', 'sap/ui/comp/personalization/Util', 'sap/ui/Device', 'sap/ui/comp/odata/ODataModelUtil'
], function(jQuery, library, Chart, ChartLibrary, Dimension, Measure, ToggleButton, Button, Text, ComboBox, ComboBoxRenderer, FlexItemData, Item, OverflowToolbar, OverflowToolbarButton, ToolbarSeparator, ToolbarDesign, ToolbarSpacer, VBox, VBoxRenderer, ChartProvider, FilterProvider, SmartVariantManagement, Filter, FilterOperator, PersoUtil, Device, ODataModelUtil) {
	"use strict";

	/**
	 * Constructor for a new smartchart/SmartChart.
	 * 
	 * @param {string} [sId] ID for the new control that is generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * @class The SmartChart control creates a chart based on OData metadata and the configuration specified. The entitySet property must be specified
	 *        to use the control. This property is used to fetch fields from OData metadata, from which the chart UI will be generated. It can also be
	 *        used to fetch the actual chart data.<br>
	 *        Based on the chartType property, this control will render the corresponding chart.<br>
	 *        <b>Note:</b> Most of the attributes are not dynamic and cannot be changed once the control has been initialized.
	 * @extends sap.m.VBox
	 * @author Franz Mueller, Pavan Nayak
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartchart.SmartChart
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var SmartChart = VBox.extend("sap.ui.comp.smartchart.SmartChart", /** @lends sap.ui.comp.smartchart.SmartChart.prototype */
	{
		metadata: {

			library: "sap.ui.comp",
			properties: {

				/**
				 * The entity set name from which to fetch data and generate the columns.<br>
				 * <b>Note</b> This is not a dynamic property.
				 */
				entitySet: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * ID of the corresponding SmartFilter control. If specified, the SmartChart control searches for the SmartFilter control (also in the
				 * closest parent view) and attaches to the relevant events of the SmartFilter control to fetch data, show overlay etc.
				 */
				smartFilterId: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * CSV of fields that must be ignored in the OData metadata by the SmartChart control.<br>
				 * <b>Note:</b> No validation is done. Please ensure that you do not add spaces or special characters.
				 */
				ignoredFields: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * CSV of fields that must be always requested by the backend system.<br>
				 * This property is mainly meant to be used if there is no PresentationVariant annotation.<br>
				 * If both this property and the PresentationVariant annotation exist, the select request sent to the backend would be a combination
				 * of both.<br>
				 * <b>Note:</b> No validation is done. Please ensure that you do not add spaces or special characters.
				 */
				requestAtLeastFields: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * CSV of fields that is not shown in the personalization dialog.<br>
				 * <b>Note:</b> No validation is done. Please ensure that you do not add spaces or special characters.
				 */
				ignoreFromPersonalisation: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Specifies the type of chart to be created by the SmartChart control.
				 */
				chartType: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * CSV of fields that is not shown in the list of available chart types.<br>
				 * <b>Note:</b> No validation is done. Please ensure that you do not add spaces or special characters.
				 */
				ignoredChartTypes: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * If set to <code>true</code>, variants are used. As a prerequisite, you need to specify the persistencyKey property.
				 */
				useVariantManagement: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * If set to <code>true</code>, personalized chart settings are defined. If you want to persist the chart personalization, you need
				 * to specify the persistencyKey property.
				 */
				useChartPersonalisation: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Specifies header text that is shown in the chart.
				 */
				header: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Key used to access personalization data.
				 */
				persistencyKey: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Retrieves or applies the current variant.
				 */
				currentVariantId: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * If set to <code>true</code>, this enables automatic binding of the chart using the chartBindingPath (if it exists) or entitySet
				 * property. This happens right after the <code>initialise</code> event has been fired.
				 */
				enableAutoBinding: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * Specifies the path that is used during the binding of the chart. If not specified, the entitySet property is used instead. (used
				 * only if binding is established internally/automatically - See enableAutoBinding)
				 */
				chartBindingPath: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Controls the visibility of the Drill Up and Drill Down buttons.
				 */
				showDrillButtons: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Controls the visibility of the Zoom In and Zoom Out buttons.
				 * 
				 * @since 1.36
				 */
				showZoomButtons: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Controls the visibility of the Navigation button
				 * 
				 * @since 1.36
				 */
				showSemanticNavigationButton: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Controls the visibility of the Navigation button
				 * 
				 * @since 1.36
				 */
				showLegendButton: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Set chart's legend properties.
				 * 
				 * @since 1.36
				 */
				legendVisible: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Chart selection mode. Supported values are {@link sap.chart.SelectionMode.Single} or {@link sap.chart.SelectionMode.Multi}, case
				 * insensitive, always return in upper case. Unsupported values will be ignored.
				 * 
				 * @since 1.36
				 */
				selectionMode: {
					type: "sap.chart.SelectionMode",
					group: "Misc",
					defaultValue: sap.chart.SelectionMode.Single
				},

				/**
				 * Controls the visibility of the FullScreen button.
				 * 
				 * @since 1.36
				 */
				showFullScreenButton: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Controls the usage either of the tooltip or the popover. If set to <code>true</code>, a tooltip will be displayed.
				 * 
				 * @since 1.36
				 */
				useTooltip: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				}
			},
			aggregations: {

				/**
				 * A toolbar that can be added by the user to define their own custom buttons, icons, etc. If this is specified, the SmartChart
				 * control does not create an additional toolbar, but uses this one.
				 */
				toolbar: {
					type: "sap.m.Toolbar",
					multiple: false
				},

				/**
				 * The Semantic Object Controller allows the user to specify and overwrite functionality for semantic object navigation.
				 * 
				 * @since 1.36
				 */
				semanticObjectController: {
					type: "sap.ui.comp.navpopover.SemanticObjectController",
					multiple: false
				}
			},
			events: {

				/**
				 * This event is fired once the control has been initialized.
				 */
				initialise: {},

				/**
				 * This event is fired right before the binding is done.
				 * 
				 * @param {object} [bindingParams] The bindingParams object contains filters, sorters, and other binding-related information for the
				 *        chart
				 * @param {boolean} [bindingParams.preventChartBind] If set to <code>true</code> by the listener, binding is prevented
				 * @param {object} [bindingParams.filters] The combined filter array containing a set of sap.ui.model.Filter instances of the
				 *        SmartChart and SmartFilter controls; can be modified by users to influence filtering
				 * @param {object} [bindingParams.sorter] An array containing a set of sap.ui.model.Sorter instances of the SmartChart control
				 *        (personalization); can be modified by users to influence sorting
				 */
				beforeRebindChart: {},

				/**
				 * This event is fired when data is received after binding. This event is fired if the binding for the chart is done by the SmartChart
				 * control itself.
				 */
				dataReceived: {},

				/**
				 * This event is fired after the variant management in the SmartChart control has been initialized.
				 */
				afterVariantInitialise: {},

				/**
				 * This event is fired after a variant has been saved. This event can be used to retrieve the ID of the saved variant.
				 * 
				 * @param {string} [currentVariantId] ID of the currently selected variant
				 */
				afterVariantSave: {},

				/**
				 * This event is fired after a variant has been applied.
				 * 
				 * @param {string} [currentVariantId] ID of the currently selected variant
				 */
				afterVariantApply: {},

				/**
				 * This event is fired right before the overlay is shown.
				 * 
				 * @param {object} [overlay] Overlay object that contains information related to the overlay of the chart
				 * @param {boolean} [overlay.show] If set to code>false</code> by the listener, overlay is not shown
				 */
				showOverlay: {}
			}
		},

		renderer: VBoxRenderer.render
	});

	SmartChart.prototype.init = function() {
		sap.m.FlexBox.prototype.init.call(this);
		this.addStyleClass("sapUiCompSmartChart");
		this.setFitContainer(true);
		this._bUpdateToolbar = true;
		this._oChartTypeModel = null;

		this.setHeight("100%");

		var oModel = new sap.ui.model.json.JSONModel({
			items: []
		});
		this.setModel(oModel, "$smartChartTypes");

		this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp");

		this.sResizeListenerId = null;
		if (Device.system.desktop) {
			this.sResizeListenerId = sap.ui.core.ResizeHandler.register(this, jQuery.proxy(this._adjustHeight, this));
		} else {
			Device.orientation.attachHandler(this._adjustHeight, this);
			Device.resize.attachHandler(this._adjustHeight, this);
		}

	};

	/**
	 * instantiates the SmartVariantManagementControl
	 * 
	 * @private
	 */
	SmartChart.prototype._createVariantManagementControl = function() {

		// Do not create variant management when it is not needed!
		if (this._oVariantManagement || (!this.getUseVariantManagement() && !this.getUseChartPersonalisation()) || !this.getPersistencyKey()) {
			return;
		}

		// always create VariantManagementControl, in case it is not used, it will take care of persisting the personalisation
		// without visualization

		var oPersInfo = new sap.ui.comp.smartvariants.PersonalizableInfo({
			type: "chart",
			keyName: "persistencyKey",
			dataSource: "TODO"
		});

		oPersInfo.setControl(this);

		this._oVariantManagement = new SmartVariantManagement({
			personalizableControls: oPersInfo,
			initialise: function(oEvent) {
				// Current variant could have been set already (before initialise) by the SmartVariant, in case of GLO/Industry specific variant
				// handling
				if (!this._oCurrentVariant) {
					this._oCurrentVariant = "STANDARD";
				}
				this.fireAfterVariantInitialise();
			}.bind(this),
			save: function(oEvent) {
				this._variantSaved();
			}.bind(this),
			afterSave: function() {
				this.fireAfterVariantSave({
					currentVariantId: this.getCurrentVariantId()
				});
			}.bind(this),
			showShare: false
		});
		this._oVariantManagement.initialise();
	};

	/**
	 * event handler for variantmanagement save event
	 * 
	 * @private
	 */
	SmartChart.prototype._variantSaved = function() {
		if (this._oPersController) {
			this._oPersController.setPersonalizationData(this._oCurrentVariant);
		}
	};

	SmartChart.prototype.setUseChartPersonalisation = function(bUseChartPersonalisation) {
		this.setProperty("useChartPersonalisation", bUseChartPersonalisation, true);
		this._bUpdateToolbar = true;
	};

	SmartChart.prototype._createPopover = function() {
		if (!this._oPopover && this._oChart) {
			// assign Popover to chart
			jQuery.sap.require("sap.viz.ui5.controls.Popover");
			this._oPopover = new sap.viz.ui5.controls.Popover({});
			this._oPopover.connect(this._oChart.getVizUid());
		}
	};

	SmartChart.prototype._createTooltip = function() {
		if (this._oChart) {
			this._oChart.setVizProperties({
				"interaction": {
					"behaviorType": null
				},
				"tooltip": {
					"visible": true
				}
			});
		}
	};

	SmartChart.prototype._createTooltipOrPopover = function() {
		if (this.getUseTooltip()) {
			this._createTooltip();
		} else {
			this._createPopover();
		}
	};

	SmartChart.prototype._destroyPopover = function() {
		if (this._oPopover) {
			this._oPopover.destroy();
			this._oPopover = null;
		}
	};

	SmartChart.prototype.setUseVariantManagement = function(bUseVariantManagement) {
		this.setProperty("useVariantManagement", bUseVariantManagement, true);
		if (this._oPersController) {
			this._oPersController.setResetToInitialTableState(!bUseVariantManagement);
		}
		this._bUpdateToolbar = true;
	};

	SmartChart.prototype.setToolbar = function(oToolbar) {
		if (this._oToolbar) {
			this.removeItem(this._oToolbar);
		}
		this._oToolbar = oToolbar;
		this._bUpdateToolbar = true;
	};

	SmartChart.prototype.getToolbar = function() {
		return this._oToolbar;
	};

	SmartChart.prototype.setHeader = function(sText) {
		this.setProperty("header", sText, true);
		this._refreshHeaderText();
	};

	/**
	 * sets the header text
	 * 
	 * @private
	 */
	SmartChart.prototype._refreshHeaderText = function() {
		if (!this._headerText) {
			this._bUpdateToolbar = true;
			return;
		}
		var sText = this.getHeader();
		this._headerText.setText(sText);
	};

	/**
	 * creates the toolbar
	 * 
	 * @private
	 */
	SmartChart.prototype._createToolbar = function() {
		// If no toolbar exists --> create one
		if (!this._oToolbar) {
			this._oToolbar = new OverflowToolbar({
				design: ToolbarDesign.Transparent
			});
			this._oToolbar.addStyleClass("sapUiCompSmartChartToolbar");
		}
		this._oToolbar.setLayoutData(new sap.m.FlexItemData({
			shrinkFactor: 0
		}));
		this.insertItem(this._oToolbar, 0);
	};

	/**
	 * creates the toolbar content
	 * 
	 * @private
	 */
	SmartChart.prototype._createToolbarContent = function() {
		// insert the items in the custom toolbar in reverse order => insert always at position 0
		this._addVariantManagementToToolbar();
		this._addSeparatorToToolbar();
		this._addHeaderToToolbar();

		// add spacer to toolbar
		this._addSpacerToToolbar();

		this._addSemanticNavigationButton();

		// Add chart type selection
		this._addChartTypeToToolbar();

		// Add Drill buttons
		this._addDrillUpDownButtons();

		// Add Legend button
		this._addLegendButton();

		// Add Zoom buttons
		this._addZoomInOutButtons();

		// Add Personalisation Icon
		this._addPersonalisationToToolbar();

		// Add Fullscreen Button
		this._addFullScrrenButton();

		// seems like toolbar only contains spacer and is actually not needed - remove it
		if (this._oToolbar && (this._oToolbar.getContent().length === 0 || (this._oToolbar.getContent().length === 1 && this._oToolbar.getContent()[0] instanceof ToolbarSpacer))) {
			this.removeItem(this._oToolbar);
			this._oToolbar.destroy();
			this._oToolbar = null;
		}
	};

	SmartChart.prototype._addFullScrrenButton = function() {
		var oFullScreenButton, that = this;
		if (this.getShowFullScreenButton()) {
			oFullScreenButton = new OverflowToolbarButton(this.getId() + "-btnFullScreen", {
				press: function() {
					that.setFullScreen(!that.bFullScreen);
				}
			});
			this.oFullScreenButton = oFullScreenButton;
			this.setFullScreen(this.bFullScreen, true);
			this._oToolbar.addContent(oFullScreenButton);
		}
	};

	SmartChart.prototype._addZoomInOutButtons = function() {

		var that = this;
		this._oZoomInButton = new OverflowToolbarButton(this.getId() + "-btnZoomIn", {
			tooltip: this._oRb.getText("CHART_ZOOMINBTN_TOOLTIP"),
			icon: "sap-icon://zoom-in",
			press: function() {
				if (that._oChart) {
					that._oChart.zoom({
						direction: "in"
					});
				}
			},
			visible: this.getShowZoomButtons()
		});

		this._oZoomOutButton = new OverflowToolbarButton(this.getId() + "-btnZoomOut", {
			tooltip: this._oRb.getText("CHART_ZOOMOUTBTN_TOOLTIP"),
			icon: "sap-icon://zoom-out",
			press: function() {
				if (that._oChart) {
					that._oChart.zoom({
						direction: "out"
					});
				}
			},
			visible: this.getShowZoomButtons()
		});

		this._oToolbar.addContent(this._oZoomInButton);
		this._oToolbar.addContent(this._oZoomOutButton);
	};

	SmartChart.prototype.setShowZoomButtons = function(bFlag) {

		this.setProperty("showZoomButtons", bFlag);

		if (this._oZoomInButton) {
			this._oZoomInButton.setVisible(bFlag);
		}
		if (this._oZoomOutButton) {
			this._oZoomOutButton.setVisible(bFlag);
		}
	};

	SmartChart.prototype.setLegendVisible = function(bFlag) {

		this.setProperty("legendVisible", bFlag);

		this._setLegendVisible(bFlag);
	};

	SmartChart.prototype._setLegendVisible = function(bFlag) {

		var oVizFrame = this._getVizFrame();
		if (oVizFrame) {
			oVizFrame.setLegendVisible(bFlag);
		}

	};

	SmartChart.prototype._getVizFrame = function() {

		var oVizFrame = null;
		if (this._oChart) {
			oVizFrame = this._oChart.getAggregation("_vizFrame");
		}

		return oVizFrame;
	};

	SmartChart.prototype._addLegendButton = function() {

		var that = this;
		this._oLegendButton = new OverflowToolbarButton(this.getId() + "-btnLegend", {
			tooltip: this._oRb.getText("CHART_LEGENDBTN_TOOLTIP"),
			icon: "sap-icon://legend",
			press: function() {
				that.setLegendVisible(!that.getLegendVisible());
			},
			visible: this.getShowLegendButton()
		});

		this._oToolbar.addContent(this._oLegendButton);
	};

	SmartChart.prototype.setShowLegendButton = function(bFlag) {

		this.setProperty("showLegendButton", bFlag);

		if (this._oLegendButton) {
			this._oLegendButton.setVisible(bFlag);
		}
	};

	SmartChart.prototype.setShowSemanticNavigationButton = function(bFlag) {

		this.setProperty("showSemanticNavigationButton", bFlag);

		if (this._oSemanticalNavButton) {
			this._oSemanticalNavButton.setVisible(bFlag);
		} else {
			/* eslint-disable no-lonely-if */
			if (bFlag) {
				this._addSemanticNavigationButton();
			}
			/* eslint-enable no-lonely-if */
		}
	};

	SmartChart.prototype._addSemanticNavigationButton = function() {
		var that = this, aSemanticObjects;

		if (!this._oSemanticalNavButton && this.getShowSemanticNavigationButton()) {
			this._oSemanticalNavButton = new Button(this.getId() + "-btnNavigation", {
				text: this._oRb.getText("CHART_SEMNAVBTN"),
				tooltip: this._oRb.getText("CHART_SEMNAVBTN_TOOLTIP"),
				visible: this.getShowSemanticNavigationButton(),
				enabled: false
			});

			jQuery.sap.require("sap.ui.comp.navpopover.NavigationPopoverHandler");

			var oNavHandler = new sap.ui.comp.navpopover.NavigationPopoverHandler({
				control: this._oSemanticalNavButton
			});

			var oSemanticObjectController = this.getSemanticObjectController();
			if (oSemanticObjectController) {
				oNavHandler.setSemanticObjectController(oSemanticObjectController);
			}

			this._oSemanticalNavButton.attachPress(function(oEvent) {

				if (aSemanticObjects && (aSemanticObjects.length > 0)) {

					if (aSemanticObjects.length === 1) {
						oNavHandler.setSemanticObject(aSemanticObjects[0].name);
						oNavHandler.setSemanticObjectLabel(aSemanticObjects[0].fieldLabel);

						oNavHandler._handlePressed(oEvent);
					} else {
						that._semanticObjectList(aSemanticObjects, oNavHandler);
					}
				}
			});

			if (this._oChart) {

				this._oChart.attachDeselectData(function(oEvent) {
					aSemanticObjects = that._setSelectionDataPointHandling(oNavHandler);
				});

				this._oChart.attachSelectData(function(oEvent) {
					aSemanticObjects = that._setSelectionDataPointHandling(oNavHandler);
				});
			}

			var iSpacerIdx = this._indexOfSpacerOnToolbar();
			this._oToolbar.insertContent(this._oSemanticalNavButton, iSpacerIdx + 1);
		}
	};

	SmartChart.prototype._setSelectionDataPointHandling = function(oNavHandler) {
		var aSemanticObjects = this._setSelectionDataPoint(oNavHandler);
		if (aSemanticObjects && aSemanticObjects.length > 0) {
			this._oSemanticalNavButton.setEnabled(true);
		} else {
			this._oSemanticalNavButton.setEnabled(false);
		}

		return aSemanticObjects;
	};

	SmartChart.prototype._setSelectionDataPoint = function(oNavHandler) {
		var oDataContext, oData, aSemanticObjects = null, aDataContext;

		var aSelectedDataPoints = this._oChart.getSelectedDataPoints();

		if (!aSelectedDataPoints || !aSelectedDataPoints.dataPoints || (aSelectedDataPoints.dataPoints.length === 0)) {
			return aSemanticObjects;
		}

		if (aSelectedDataPoints.dataPoints.length === 1) {
			oDataContext = aSelectedDataPoints.dataPoints[0].context;
			if (oDataContext) {
				oData = oDataContext.getObject();

				if (oData) {
					aSemanticObjects = this._determineSemanticObjects(oData, oDataContext);
					if (aSemanticObjects && (aSemanticObjects.length > 0)) {
						oNavHandler.setBindingContext(oDataContext);
					}
				}
			}

			return aSemanticObjects;
		}

		aDataContext = [];
		for (var i = 0; i < aSelectedDataPoints.dataPoints.length; i++) {
			oDataContext = aSelectedDataPoints.dataPoints[i].context;
			if (oDataContext) {
				oData = oDataContext.getObject();

				if (oData) {
					aDataContext.push(oData);
				}
			}
		}

		if (aDataContext && aDataContext.length > 0) {
			aSemanticObjects = this._condensBasedOnSameValue(aDataContext);
			if (aSemanticObjects && aSemanticObjects.length > 0) {
				oNavHandler.setBindingContext(aSelectedDataPoints.dataPoints[aSelectedDataPoints.dataPoints.length - 1].context);
			}
		}

		return aSemanticObjects;
	};

	SmartChart.prototype._condensBasedOnSameValue = function(aData) {

		var aSemObj = null, aResultSemObj, oSemObj, sName;

		// expectation: all datapoint have the same semantical objects
		aSemObj = this._determineSemanticObjects(aData[0]);

		if (aSemObj && aSemObj.length > 0) {
			for (var i = 0; i < aSemObj.length; i++) {
				oSemObj = aSemObj[i];
				sName = oSemObj.name;

				if (this._bAllValuesAreEqual(aData, sName)) {
					if (!aResultSemObj) {
						aResultSemObj = [];
					}

					aResultSemObj.push(oSemObj);
				}
			}

			aSemObj = aResultSemObj;
		}

		return aSemObj;
	};

	SmartChart.prototype._bAllValuesAreEqual = function(aData, sFieldName) {
		var oData, sValue;
		for (var i = 0; i < aData.length; i++) {
			oData = aData[i];

			if (i === 0) {
				sValue = oData[sFieldName];
				continue;
			}

			if (sValue != oData[sFieldName]) {
				return false;
			}
		}

		return true;
	};

	SmartChart.prototype._semanticObjectList = function(aSemanticObjects, oNavHandler) {
		jQuery.sap.require("sap.m.List");
		jQuery.sap.require("sap.m.ListType");
		jQuery.sap.require("sap.m.PlacementType");
		jQuery.sap.require("sap.m.StandardListItem");
		jQuery.sap.require("sap.m.ResponsivePopover");

		var oPopover, oList, oListItem, oSemanticObject;

		if (this._oChart) {

			oList = new sap.m.List({
				mode: sap.m.ListMode.SingleSelectMaster,
				selectionChange: function(oEvent) {
					if (oEvent && oEvent.mParameters && oEvent.mParameters.listItem) {
						oSemanticObject = oEvent.mParameters.listItem.data("semObj");
						if (oSemanticObject) {
							oNavHandler.setSemanticObject(oSemanticObject.name);
							oNavHandler.setSemanticObjectLabel(oSemanticObject.fieldLabel);

							oNavHandler._handlePressed(oEvent);
						}
					}

					oPopover.close();
				}
			});

			for (var i = 0; i < aSemanticObjects.length; i++) {
				oSemanticObject = aSemanticObjects[i];
				oListItem = new sap.m.StandardListItem({
					title: oSemanticObject.fieldLabel,
					type: sap.m.ListType.Active
				});

				oListItem.data("semObj", oSemanticObject);
				oList.addItem(oListItem);
			}

			oPopover = new sap.m.ResponsivePopover({
				title: this._oRb.getText("CHART_SEMNAVBTN"),
				showHeader: false,
				contentWidth: "12rem",
				placement: sap.m.PlacementType.Left
			});

			oPopover.addContent(oList);

			oPopover.openBy(this._oSemanticalNavButton);
		}
	};

	SmartChart.prototype._determineSemanticObjects = function(mData, oDataContext) {
		var n, oField, aSematicObjects = [];
		if (mData) {
			for (n in mData) {
				if (n) {
					oField = this._getField(n);
					if (oField && oField.isDimension && oField.isSemanticObject) {
						aSematicObjects.push(oField);
					}
				}
			}
		}

		if (aSematicObjects) {
			aSematicObjects.sort(function(a, b) {
				return a.fieldLabel.localeCompare(b.fieldLabel);
			});
		}

		return aSematicObjects;
	};

	SmartChart.prototype._checkSemanticNavigationButton = function(bFlag) {

		if (this._oSemanticalNavButton) {
			this._oSemanticalNavButton.setEnabled(bFlag);
		}
	};

	SmartChart.prototype._addDrillUpDownButtons = function() {

		var that = this;

		this._oDrillUpButton = new OverflowToolbarButton(this.getId() + "-btnDrillUp", {
			tooltip: this._oRb.getText("CHART_DRILLUPBTN_TOOLTIP"),
			icon: "sap-icon://drill-up",
			press: function() {
				if (that._oChart) {
					that._oChart.drillUp();
				}
			},
			visible: this.getShowDrillButtons()
		});

		this._oDrillDownButton = new OverflowToolbarButton(this.getId() + "-btnDrillDown", {
			tooltip: this._oRb.getText("CHART_DRILLDOWNBTN_TOOLTIP"),
			icon: "sap-icon://drill-down",
			press: function(oEvent) {
				that._drillDown(oEvent);
			},
			visible: this.getShowDrillButtons()
		});

		this._oToolbar.addContent(this._oDrillUpButton);
		this._oToolbar.addContent(this._oDrillDownButton);
	};

	SmartChart.prototype.setShowDrillButtons = function(bFlag) {

		this.setProperty("showDrillButtons", bFlag);

		if (this._oDrillUpButton) {
			this._oDrillUpButton.setVisible(bFlag);
		}
		if (this._oDrillDownButton) {
			this._oDrillDownButton.setVisible(bFlag);
		}
	};

	SmartChart.prototype._triggerSearchInPopover = function(oEvent, oList) {

		var parameters, i, sTitle, sTooltip, sValue, aItems;

		if (!oEvent || !oList) {
			return;
		}

		parameters = oEvent.getParameters();
		if (!parameters) {
			return;
		}

		sValue = parameters.newValue ? parameters.newValue.toLowerCase() : "";

		if (this._oChart) {
			aItems = oList.getItems();
			for (i = 0; i < aItems.length; i++) {

				sTooltip = aItems[i].getTooltip();
				sTitle = aItems[i].getTitle();

				if ((sTitle && (sTitle.toLowerCase().indexOf(sValue) > -1)) || (sTooltip && (sTooltip.toLowerCase().indexOf(sValue) > -1))) {
					aItems[i].setVisible(true);
				} else {
					aItems[i].setVisible(false);
				}
			}
		}
	};

	SmartChart.prototype._drillDown = function(oEvent) {
		jQuery.sap.require("sap.m.Bar");
		jQuery.sap.require("sap.m.List");
		jQuery.sap.require("sap.m.ListType");
		jQuery.sap.require("sap.m.SearchField");
		jQuery.sap.require("sap.m.PlacementType");
		jQuery.sap.require("sap.m.StandardListItem");
		jQuery.sap.require("sap.m.ResponsivePopover");

		var that = this, oPopover, aIgnoreDimensions, aDimensions, oDimension, oListItem, oList, oSubHeader, oSearchField, i, sTooltip;

		if (this._oChart) {

			oList = new sap.m.List({
				mode: sap.m.ListMode.SingleSelectMaster,
				selectionChange: function(oEvent) {
					if (oEvent && oEvent.mParameters && oEvent.mParameters.listItem) {

						if (oEvent.mParameters.listItem.getType() === sap.m.ListType.Inactive) {
							return;
						}

						var oDimension = oEvent.mParameters.listItem.data("dim");
						if (oDimension) {
							that._oChart.drillDown(oDimension);
						}
					}

					oPopover.close();
				}
			});

			oSubHeader = new sap.m.Bar();
			oSearchField = new sap.m.SearchField({
				placeholder: this._oRb.getText("CHART_DRILLDOWN_SEARCH")
			});
			oSearchField.attachLiveChange(function(oEvent) {
				that._triggerSearchInPopover(oEvent, oList);
			});
			oSubHeader.addContentRight(oSearchField);

			oPopover = new sap.m.ResponsivePopover({
				title: this._oRb.getText("CHART_DRILLDOWN_TITLE"),
				contentWidth: "25rem",
				contentHeight: "20rem",
				placement: sap.m.PlacementType.Bottom,
				subHeader: oSubHeader
			});

			oPopover.addContent(oList);

			aIgnoreDimensions = this._oChart.getVisibleDimensions();
			aDimensions = this._getSortedDimensions();

			if (aDimensions.length < 7) {
				oSubHeader.setVisible(false);
			}

			for (i = 0; i < aDimensions.length; i++) {

				if (aIgnoreDimensions.indexOf(aDimensions[i].getName()) > -1) {
					continue;
				}

				oDimension = aDimensions[i];
				oListItem = new sap.m.StandardListItem({
					title: oDimension.getLabel(),
					type: sap.m.ListType.Active
				});

				oListItem.data("dim", oDimension);

				sTooltip = this._getFieldTooltip(oDimension.name);
				if (sTooltip) {
					oListItem.setTooltip(sTooltip);
				}

				if (aIgnoreDimensions.indexOf(aDimensions[i].getName()) > -1) {
					oListItem.setType(sap.m.ListType.Inactive);
				}

				oList.addItem(oListItem);
			}

			oPopover.openBy(oEvent.getSource());
		}
	};

	/**
	 * adds the header line to the toolbar
	 * 
	 * @private
	 */
	SmartChart.prototype._addHeaderToToolbar = function() {
		if (this.getHeader()) {
			if (!this._headerText) {
				this._headerText = new Text();
				this._headerText.addStyleClass("sapMH4Style");
				this._headerText.addStyleClass("sapUiCompSmartChartHeader");
			}
			this._refreshHeaderText();
			this._oToolbar.insertContent(this._headerText, 0);
		} else if (this._headerText) {
			this._oToolbar.removeContent(this._headerText);
		}
	};

	/**
	 * adds a separator between header and variantmanagement to the toolbar
	 * 
	 * @private
	 */
	SmartChart.prototype._addSeparatorToToolbar = function() {
		if (this.getHeader() && this.getUseVariantManagement()) {
			this._oSeparator = new ToolbarSeparator();
			this._oToolbar.insertContent(this._oSeparator, 0);
			// Also set the height to 3rem when no height is explicitly specified
			if (!this._oToolbar.getHeight()) {
				this._oToolbar.setHeight("3rem");
			}
		} else if (this._oSeparator) {
			this._oToolbar.removeContent(this._oSeparator);
		}
	};

	/**
	 * adds the VarientManagement to the toolbar
	 * 
	 * @private
	 */
	SmartChart.prototype._addVariantManagementToToolbar = function() {
		if (this.getUseVariantManagement()) {
			this._oToolbar.insertContent(this._oVariantManagement, 0);
		} else if (this._oVariantManagement) {
			this._oToolbar.removeContent(this._oVariantManagement);
		}
	};

	/**
	 * adds a spacer to the toolbar
	 * 
	 * @private
	 */
	SmartChart.prototype._addSpacerToToolbar = function() {
		if (this._indexOfSpacerOnToolbar() === -1) {
			this._oToolbar.addContent(new ToolbarSpacer());
		}
	};

	SmartChart.prototype._indexOfSpacerOnToolbar = function() {
		var aItems = this._oToolbar.getContent(), i, iLength;
		if (aItems) {
			iLength = aItems.length;
			i = 0;
			for (i; i < iLength; i++) {
				if (aItems[i] instanceof ToolbarSpacer) {
					return i;
				}
			}
		}

		return -1;
	};

	/**
	 * adds the Personalisation button to the toolbar
	 * 
	 * @private
	 */
	SmartChart.prototype._addPersonalisationToToolbar = function() {
		if (this.getUseChartPersonalisation()) {
			if (!this._oChartPersonalisationButton) {
				this._oChartPersonalisationButton = new OverflowToolbarButton(this.getId() + "-btnPersonalisation", {
					// type: sap.m.ButtonType.Default,
					icon: "sap-icon://action-settings",
					tooltip: this._oRb.getText("CHART_PERSOBTN_TOOLTIP"),
					press: jQuery.proxy(function(oEvent) {
						this._oPersController.openDialog({
							dimeasure: {
								visible: true,
								payload: {
									availableChartTypes: this._getAllChartTypes()
								}
							},
							sort: {
								visible: true
							},
							filter: {
								visible: true
							}
						});
					}, this)
				});
			}
			this._oToolbar.addContent(this._oChartPersonalisationButton);
		} else if (this._oChartPersonalisationButton) {
			this._oToolbar.removeContent(this._oChartPersonalisationButton);
		}
	};

	SmartChart.prototype._addChartTypeToToolbar = function() {

// preparation for the new requirements
		this._oChartTypeButton = this._createChartTypeButton();
		this._oToolbar.addContent(this._oChartTypeButton);
	};

	SmartChart.prototype._createChartTypeComboBox = function() {
		var that = this;

		var oItemTemplate = new Item({
			key: "{$smartChartTypes>key}",
			text: "{$smartChartTypes>text}"
		});

		var oComboBox = new ComboBox({
			enabled: false,
			items: {
				path: "$smartChartTypes>/items",
				template: oItemTemplate
			}
		});

		oComboBox.attachSelectionChange(null, function() {
			that._setChartType(oComboBox.getSelectedItem().getKey());
		});

		return oComboBox;
	};

	SmartChart.prototype._createChartTypeButton = function() {
		var that = this;

		var oButton = new ToggleButton({
			enabled: false,
			press: function(oEvent) {
				this.setPressed(true);
				that._displayChartTypes(oEvent);
			}
		});

		this._enreachButton(this._oChart.getChartType());

		return oButton;
	};

	SmartChart.prototype._displayChartTypes = function(oEvent) {
		jQuery.sap.require("sap.m.Bar");
		jQuery.sap.require("sap.m.List");
		jQuery.sap.require("sap.m.ListType");
		jQuery.sap.require("sap.ui.core.ListItem");
		jQuery.sap.require("sap.m.SearchField");
		jQuery.sap.require("sap.m.PlacementType");
		jQuery.sap.require("sap.m.StandardListItem");
		jQuery.sap.require("sap.m.ResponsivePopover");

		var that = this, oPopover, oList, oSubHeader, oSearchField;

		if (this._oChart && oEvent) {

			var oButton = oEvent.getSource();

			var oItemTemplate = new sap.m.StandardListItem({
				title: "{$smartChartTypes>text}",
				icon: "{$smartChartTypes>icon}",
				selected: "{$smartChartTypes>selected}"
			});

			oList = new sap.m.List({
				mode: sap.m.ListMode.SingleSelectMaster,
				items: {
					path: "$smartChartTypes>/items",
					template: oItemTemplate
				},
				selectionChange: function(oEvent) {
					if (oEvent && oEvent.mParameters && oEvent.mParameters.listItem) {
						var oBinding = oEvent.mParameters.listItem.getBinding("title");
						if (oBinding) {
							var oCtx = oBinding.getContext();
							if (oCtx) {
								var oObj = oCtx.getObject();
								if (oObj && oObj.key) {
									that._setChartType(oObj.key);
									that._enreachButton(oObj.key, oObj.text);
								}
							}
						}
					}

					oButton.setPressed(false);
					oPopover.close();
				}
			});

			oSubHeader = new sap.m.Bar();
			oSearchField = new sap.m.SearchField({
				placeholder: this._oRb.getText("CHART_TYPE_SEARCH")
			});
			oSearchField.attachLiveChange(function(oEvent) {
				that._triggerSearchInPopover(oEvent, oList);
			});
			oSubHeader.addContentRight(oSearchField);

			oPopover = new sap.m.ResponsivePopover({
				title: this._oRb.getText("CHART_TYPE_TITLE"),
				contentWidth: "25rem",
				contentHeight: "20rem",
				placement: sap.m.PlacementType.Bottom,
				subHeader: oSubHeader
			});
			oPopover.setModel(this.getModel("$smartChartTypes"), "$smartChartTypes");

			oPopover.addContent(oList);

			if (oList.getItems().length < 7) {
				oSubHeader.setVisible(false);
			}

			oPopover.openBy(oButton);
		}
	};

	SmartChart.prototype._selectCurrentChartType = function(oList) {

		var sSelectedChartTypeKey = this._oChart.getChartType();

		var oItem, aItems = oList.getItems();
		for (var i = 0; i < aItems.length; i++) {

			oItem = aItems[i];
			if (oItem) {
				var oBinding = oItem.getBinding("title");
				if (oBinding) {
					var oCtx = oBinding.getContext();
					if (oCtx) {
						var oObj = oCtx.getObject();
						if (oObj && oObj.key && (oObj.key === sSelectedChartTypeKey)) {
							oList.setSelectedItem(oItem);
							return;
						}
					}
				}
			}
		}
	};

	var mMatchingIcon = {
		"bar": "sap-icon://horizontal-bar-chart",
		"bullet": "sap-icon://horizontal-bullet-chart",
		"bubble": "sap-icon://bubble-chart",
		"column": "sap-icon://vertical-bar-chart",
		"combination": "sap-icon://business-objects-experience",
		"dual_bar": "sap-icon://horizontal-bar-chart",
		"dual_column": "sap-icon://vertical-bar-chart",
		"dual_combination": "sap-icon://business-objects-experience",
		"dual_line": "sap-icon://line-chart",
		"dual_stacked_bar": "sap-icon://full-stacked-chart",
		"dual_stacked_column": "sap-icon://vertical-stacked-chart",
		"dual_stacked_combination": "sap-icon://business-objects-experience",
		"donut": "sap-icon://donut-chart",
		"heatmap": "sap-icon://heatmap-chart",
		"horizontal_stacked_combination": "sap-icon://business-objects-experience",
		"line": "sap-icon://line-chart",
		"pie": "sap-icon://pie-chart",
		"scatter": "sap-icon://scatter-chart",
		"stacked_bar": "sap-icon://full-stacked-chart",
		"stacked_column": "sap-icon://vertical-stacked-chart",
		"stacked_combination": "sap-icon://business-objects-experience",
		"treemap": "sap-icon://Chart-Tree-Map", // probably has to change
		"vertical_bullet": "sap-icon://vertical-bullet-chart",
		"100_dual_stacked_bar": "sap-icon://full-stacked-chart",
		"100_dual_stacked_column": "sap-icon://vertical-stacked-chart",
		"100_stacked_bar": "sap-icon://full-stacked-chart",
		"100_stacked_column": "sap-icon://full-stacked-column-chart"
	};

	SmartChart.prototype._getMatchingIcon = function(sCharType) {
		var sIcon = mMatchingIcon[sCharType];
		if (!sIcon) {
			sIcon = "";
		}

		return sIcon;
	};

	SmartChart.prototype._enreachButton = function(sKey, sText) {

		if (!this._oChartTypeButton) {
			return;
		}

		if (sText === undefined) {

			sText = sKey;
			var oKey = this._retrieveChartTypeDescription(sKey);
			if (oKey && oKey.text) {
				sText = oKey.text;
			}
		}

		var sSelectedChartTypeIcon = this._getMatchingIcon(sKey);
		this._oChartTypeButton.setIcon(sSelectedChartTypeIcon ? sSelectedChartTypeIcon : "sap-icon://vertical-bar-chart");
		this._oChartTypeButton.setTooltip(this._oRb.getText("CHART_TYPE_TOOLTIP", [
			sText
		]));
	};

	SmartChart.prototype._updateAvailableChartType = function() {
		var that = this, oModel, mData, aItems = [];

		oModel = this.getModel("$smartChartTypes");
		if (!oModel) {
			return;
		}

		mData = {
			items: aItems
		};

		var sSelectedChartType = this._oChart.getChartType();
		var sSelectedChartTypeDescription = "";
		this._getAvailableChartTypes().forEach(function(chartType) {

			var oItem = {
				key: chartType.key,
				text: chartType.text,
				icon: that._getMatchingIcon(chartType.key),
				selected: sSelectedChartType === chartType.key
			};

			aItems.push(oItem);

			if (oItem.selected) {
				sSelectedChartTypeDescription = oItem.text;
			}
		});

		oModel.setData(mData);

		if (this._oChartTypeButton) {
			if (!this._oChartTypeButton.getEnabled()) {
				this._oChartTypeButton.setEnabled(true);
			}

			this._enreachButton(sSelectedChartType, sSelectedChartTypeDescription);
		}
	};

	/**
	 * creates the personalization controller if not yet done
	 * 
	 * @private
	 */
	SmartChart.prototype._createPersonalizationController = function() {
		if (this._oPersController || !this.getUseChartPersonalisation()) {
			return;
		}

		var oSettings = this.data("p13nDialogSettings");
		if (typeof oSettings === "string") {
			try {
				oSettings = JSON.parse(oSettings);
			} catch (e) {
				oSettings = null;
				// Invalid JSON!
			}
		}

		oSettings = this._setIgnoreFromPersonalisationToSettings(oSettings);

		oSettings = oSettings || {};

		jQuery.sap.require("sap.ui.comp.personalization.Controller");
		var oChartWrapper = PersoUtil.createChartWrapper(this._oChart, this._oChart.data("p13nData"));
		if (this.$() && this.$().closest(".sapUiSizeCompact").length > 0) {
			this._oChart.addStyleClass("sapUiSizeCompact");
		}

		this._oPersController = new sap.ui.comp.personalization.Controller({
			table: oChartWrapper,
			setting: oSettings,
			resetToInitialTableState: !this.getUseVariantManagement(),
			afterP13nModelDataChange: jQuery.proxy(this._personalisationModelDataChange, this)
		});
	};

	/**
	 * adds the ignoreFromPersonalisation fields to the given setting
	 * 
	 * @param {object} oSettings the former settings object
	 * @private
	 * @returns {object} the changed settings object
	 */
	SmartChart.prototype._setIgnoreFromPersonalisationToSettings = function(oSettings) {
		var aIgnoreFields = PersoUtil.createArrayFromString(this.getIgnoreFromPersonalisation());
		if (aIgnoreFields.length) {
			if (!oSettings) {
				oSettings = {};
			}

			var fSetArray = function(sSubName) {
				if (!oSettings[sSubName]) {
					oSettings[sSubName] = {};
				}
				oSettings[sSubName].ignoreColumnKeys = aIgnoreFields;
			};

			fSetArray("dimeasure");
			fSetArray("filter");
			fSetArray("sort");
		}
		return oSettings;
	};

	/**
	 * eventhandler for personalisation changed
	 * 
	 * @param {object} oEvent The event arguments
	 * @private
	 */
	SmartChart.prototype._personalisationModelDataChange = function(oEvent) {
		this._oCurrentVariant = oEvent.getParameter("persistentData");
		if (this._bApplyingVariant) {
			return;
		}
		var oChangeInfo = oEvent.getParameter("changeType");
		var changeStatus = this._getChangeStatus(oChangeInfo);

		if (changeStatus === sap.ui.comp.personalization.ChangeType.Unchanged) {
			return;
		}

		if (!this.getUseVariantManagement()) {
			this._persistPersonalisation();
		} else if (this._oVariantManagement) {
			this._oVariantManagement.currentVariantSetModified(true);
		}

		if (changeStatus === sap.ui.comp.personalization.ChangeType.TableChanged) {

			if (this._oCurrentVariant.dimeasure && this._oCurrentVariant.dimeasure.chartTypeKey) {

				this._updateAvailableChartType();

			}

			if (this._oSemanticalNavButton) {
				this._oSemanticalNavButton.setEnabled(false);
			}
		} else if (changeStatus === sap.ui.comp.personalization.ChangeType.ModelChanged) {
			// Rebind Chart only if data was set on it once or no smartFilter is attached!
			if (this._bIsChartBound || !this._oSmartFilter) {
				this._reBindChart();
			} else {
				this._showOverlay(true);
			}
		}
	};

	/**
	 * returns the current filter and sorting options from the table personalisation/variants
	 * 
	 * @private
	 * @param {object} oChangeInfo The change info given by the personalization controller
	 * @returns {sap.ui.comp.personalization.ChangeType} the merged change status
	 */
	SmartChart.prototype._getChangeStatus = function(oChangeInfo) {
		if (!oChangeInfo) {
			// change info not provided return ModelChanged to indicate that we need to update everything internally
			return sap.ui.comp.personalization.ChangeType.ModelChanged;
		}

		if (oChangeInfo.sort === sap.ui.comp.personalization.ChangeType.ModelChanged || oChangeInfo.filter === sap.ui.comp.personalization.ChangeType.ModelChanged || oChangeInfo.dimeasure === sap.ui.comp.personalization.ChangeType.ModelChanged || oChangeInfo.group === sap.ui.comp.personalization.ChangeType.ModelChanged) {
			// model has changed and was not applied to table
			return sap.ui.comp.personalization.ChangeType.ModelChanged;
		}

		if (oChangeInfo.sort === sap.ui.comp.personalization.ChangeType.TableChanged || oChangeInfo.filter === sap.ui.comp.personalization.ChangeType.TableChanged || oChangeInfo.dimeasure === sap.ui.comp.personalization.ChangeType.TableChanged || oChangeInfo.group === sap.ui.comp.personalization.ChangeType.TableChanged) {
			// change was already applied to table
			return sap.ui.comp.personalization.ChangeType.TableChanged;
		}

		return sap.ui.comp.personalization.ChangeType.Unchanged;
	};

	/**
	 * The entity set name in the OData metadata against which the chart must be bound.
	 * 
	 * @param {string} sEntitySetName The entity set
	 * @public
	 */
	SmartChart.prototype.setEntitySet = function(sEntitySetName) {
		this.setProperty("entitySet", sEntitySetName);
		this._initialiseMetadata();
	};

	/**
	 * It could happen that the entity type information is set already in the view, but there is no model attached yet. This method is called once the
	 * model is set on the parent and can be used to initialise the metadata, from the model, and finally create the chart controls.
	 * 
	 * @private
	 */
	SmartChart.prototype.propagateProperties = function() {
		VBox.prototype.propagateProperties.apply(this, arguments);
		this._initialiseMetadata();
	};

	/**
	 * Initialises the OData metadata necessary to create the chart
	 * 
	 * @private
	 */
	SmartChart.prototype._initialiseMetadata = function() {
		if (!this.bIsInitialised) {
			ODataModelUtil.handleModelInit(this, this._onMetadataInitialised);
		}
	};

	/**
	 * Called once the necessary Model metadata is available
	 * 
	 * @private
	 */
	SmartChart.prototype._onMetadataInitialised = function() {
		this._bMetaModelLoadAttached = false;
		if (!this.bIsInitialised) {
			this._createChartProvider();
			if (this._oChartProvider) {
				this._oChartViewMetadata = this._oChartProvider.getChartViewMetadata();
				if (this._oChartViewMetadata) {

					// Indicates the control is initialised and can be used in the initialise event/otherwise!
					this.bIsInitialised = true;
					this._listenToSmartFilter();
					this._createVariantManagementControl(); // creates VariantMngmntCtrl if useVariantManagement OR useChartPersonalisation is true.
					// Control is only added to toolbar if useVariantManagement is set otherwise it acts as
					// hidden persistance helper
					this._assignData();

					this._createContent();

					this._createToolbarContent();

					this._createPersonalizationController();

					this.fireInitialise();
					if (this.getEnableAutoBinding()) {
						if (this._oSmartFilter && this._oSmartFilter.isPending()) {
							this._oSmartFilter.search();
						} else {
							this._reBindChart();
						}
					}
				}
			}
		}
	};

	/**
	 * Creates an instance of the chart provider
	 * 
	 * @private
	 */
	SmartChart.prototype._createChartProvider = function() {
		var oModel, sEntitySetName;
		sEntitySetName = this.getEntitySet();
		oModel = this.getModel();

		// The SmartChart might also needs to work for non ODataModel models; hence we now create the chart independent
		// of ODataModel.
		if (oModel && !this._bChartCreated) {
			this._aAlwaysSelect = [];
			this._createToolbar();
			this._createChart();
			this._bChartCreated = true;
		}
		if (oModel && sEntitySetName) {
			this._oChartProvider = new ChartProvider({
				entitySet: sEntitySetName,
				ignoredFields: this.getIgnoredFields(),
				dateFormatSettings: this.data("dateFormatSettings"),
				currencyFormatSettings: this.data("currencyFormatSettings"),
				defaultDropDownDisplayBehaviour: this.data("defaultDimensionDisplayBehaviour"),
				useSmartField: this.data("useSmartField"),
				enableInResultForLineItem: this.data("enableInResultForLineItem"),
				model: oModel
			});
		}
	};

	/**
	 * Listen to changes on the corresponding SmartFilter (if any)
	 * 
	 * @private
	 */
	SmartChart.prototype._listenToSmartFilter = function() {
		var sSmartFilterId = null;
		// Register for SmartFilter Search
		sSmartFilterId = this.getSmartFilterId();

		this._oSmartFilter = this._findControl(sSmartFilterId);

		if (this._oSmartFilter) {
			this._oSmartFilter.attachSearch(this._reBindChart, this);
			this._oSmartFilter.attachFilterChange(this._showOverlay, this, true);
			this._oSmartFilter.attachCancel(this._showOverlay, this, false);
		}
	};

	SmartChart.prototype._renderOverlay = function(bShow) {

		if (this._oChart) {

			var $this = this._oChart.$(), $overlay = $this.find(".sapUiCompSmartChartOverlay");
			if (bShow && $overlay.length === 0) {
				$overlay = jQuery("<div>").addClass("sapUiOverlay sapUiCompSmartChartOverlay").css("z-index", "1");
				$this.append($overlay);
			} else if (!bShow) {
				$overlay.remove();
			}
		}
	};

	/**
	 * sets the ShowOverlay property on the inner chart, fires the ShowOverlay event
	 * 
	 * @param {boolean} bShow true to display the overlay, otherwise false
	 * @private
	 */
	SmartChart.prototype._showOverlay = function(bShow) {
		if (bShow) {
			var oOverlay = {
				show: true
			};
			this.fireShowOverlay({
				overlay: oOverlay
			});
			bShow = oOverlay.show;
		}

		this._renderOverlay(bShow);
	};

	/**
	 * searches for a certain control by its ID
	 * 
	 * @param {string} sId the control's ID
	 * @returns {sap.ui.core.Control} The control found by the given Id
	 * @private
	 */
	SmartChart.prototype._findControl = function(sId) {
		var oResultControl, oView;
		if (sId) {
			// Try to get SmartFilter from Id
			oResultControl = sap.ui.getCore().byId(sId);

			// Try to get SmartFilter from parent View!
			if (!oResultControl) {
				oView = this._getView();

				if (oView) {
					oResultControl = oView.byId(sId);
				}
			}
		}

		return oResultControl;
	};

	/**
	 * searches for the controls view
	 * 
	 * @returns {sap.ui.core.mvc.View} The found parental View
	 * @private
	 */
	SmartChart.prototype._getView = function() {
		if (!this._oView) {
			var oObj = this.getParent();
			while (oObj) {
				if (oObj instanceof sap.ui.core.mvc.View) {
					this._oView = oObj;
					break;
				}
				oObj = oObj.getParent();
			}
		}
		return this._oView;
	};

	/**
	 * This can be used to trigger binding on the chart used in the SmartChart
	 * 
	 * @protected
	 */
	SmartChart.prototype.rebindChart = function() {
		this._reBindChart();
	};

	/**
	 * Re-binds the chart
	 * 
	 * @private
	 */
	SmartChart.prototype._reBindChart = function() {
		var sRequestAtLeastFields, aAlwaysSelect, aSelect, mChartPersonalisationData, aSmartFilters, aProcessedFilters = [], aFilters, oExcludeFilters, aSorters, mParameters = {}, mBindingParams = {
			preventChartBind: false
		};

		mChartPersonalisationData = this._getChartPersonalisationData() || {};

		aFilters = mChartPersonalisationData.filters;
		oExcludeFilters = mChartPersonalisationData.excludeFilters;
		aSorters = mChartPersonalisationData.sorters;

		// Get Filters and parameters from SmartFilter
		if (this._oSmartFilter) {
			aSmartFilters = this._oSmartFilter.getFilters();
			mParameters = this._oSmartFilter.getParameters() || {};
		}

		// If filters from SmartFilter exist --> process them first with SmartChart exclude filters
		// since we need to manually AND multiple multi filters!
		if (aSmartFilters && aSmartFilters.length) {
			if (oExcludeFilters) {
				aProcessedFilters = [
					new sap.ui.model.Filter([
						aSmartFilters[0], oExcludeFilters
					], true)
				];
			} else {
				aProcessedFilters = aSmartFilters;
			}
		} else if (oExcludeFilters) {
			aProcessedFilters = [
				oExcludeFilters
			];
		}
		// Combine the resulting processed filters with SmartChart include filters
		if (aFilters) {
			aFilters = aProcessedFilters.concat(aFilters);
		} else {
			aFilters = aProcessedFilters;
		}

		sRequestAtLeastFields = this.getRequestAtLeastFields();
		if (sRequestAtLeastFields) {
			aAlwaysSelect = sRequestAtLeastFields.split(",");
		} else {
			aAlwaysSelect = [];
		}
		aAlwaysSelect.concat(this._aAlwaysSelect);
		// aSelect = this._oChart.getVisibleDimensions().concat(this._oChart.getVisibleMeasures());
		// handle fields that shall always be selected
		if (!aSelect || !aSelect.length) {
			aSelect = aAlwaysSelect;
		} else {
			for (var i = 0; i < aAlwaysSelect.length; i++) {
				if (aSelect.indexOf(aAlwaysSelect[i]) < 0) {
					aSelect.push(aAlwaysSelect[i]);
				}
			}
		}
		if (aSelect && aSelect.length) {
			mParameters["select"] = aSelect.toString();
		}

		// Enable some default parameters
		mParameters["entitySet"] = this.getEntitySet();
		if (!aSorters) {
			aSorters = [];
		}

		mBindingParams.filters = aFilters;
		mBindingParams.sorter = aSorters;
		mBindingParams.parameters = mParameters;

		// fire event to enable user modification of certain binding options (Ex: Filters)
		this.fireBeforeRebindChart({
			bindingParams: mBindingParams
		});

		if (!mBindingParams.preventChartBind) {
			aSorters = mBindingParams.sorter;
			aFilters = mBindingParams.filters;

			this._oChart.setBusy(true);

			this._bDataLoadPending = true;
			this._oChart.bindData({
				path: this.getChartBindingPath() || ("/" + this.getEntitySet()),
				parameters: mParameters,
				filters: aFilters,
				sorter: aSorters,
				events: {
					dataReceived: function(mEventParams) {

						// AnalyticalBinding fires dataReceived too early
						if (mEventParams && mEventParams.getParameter && mEventParams.getParameter("__simulateAsyncAnalyticalBinding")) {
							return;
						}

						this._onDataLoadComplete(mEventParams, true);
						// notify any listeners
						this.fireDataReceived();
					}.bind(this),
					change: this._onDataLoadComplete.bind(this)
				}
			});

			this._showOverlay(false);

			// Flag to indicate if Chart was bound (data fetch triggered) at least once
			this._bIsChartBound = true;
		}
	};

	SmartChart.prototype._onDataLoadComplete = function(mEventParams, bForceUpdate) {

		if (this._oSemanticalNavButton) {
			this._oSemanticalNavButton.setEnabled(false);
		}

		if (this._bDataLoadPending || bForceUpdate) {
			this._bDataLoadPending = false;

			this._updateAvailableChartType();
			this._oChart.setBusy(false);
		}
	};

	SmartChart.prototype._assignData = function() {
		if (this._oChartViewMetadata && this._oChart) {
			if (this._oChartViewMetadata.measureFields && (this._oChartViewMetadata.measureFields.length > 0)) {
				this._oChart.setVisibleMeasures(this._oChartViewMetadata.measureFields);
			}

			if (this._oChartViewMetadata.dimensionFields && (this._oChartViewMetadata.dimensionFields.length > 0)) {
				this._oChart.setVisibleDimensions(this._oChartViewMetadata.dimensionFields);
			}

			if (!this.getChartType() && this._oChartViewMetadata.chartType) {
				this._setChartType(this._oChartViewMetadata.chartType);
			}

			if (this._oChartViewMetadata.semantics === "aggregate") {
				this._oChart.setIsAnalytical(true);
			}
		}
	};

	SmartChart.prototype._createP13nObject = function(oField) {

		return {
			columnKey: oField.name,
			leadingProperty: oField.name, // used to fetch data, by adding this to $select param of OData request
			additionalProperty: oField.additionalProperty, // additional data to fetch in $select
			sortProperty: oField.sortable ? oField.name : undefined,
			filterProperty: oField.filterable ? oField.name : undefined,
			type: oField.filterType,
			maxLength: oField.maxLength,
			precision: oField.precision,
			scale: oField.scale,
			isMeasure: oField.isMeasure,
			isDimension: oField.isDimension,
			aggregationRole: oField.aggregationRole,
			label: oField.fieldLabel,
			tooltip: oField.quickInfo
		};

	};

	/**
	 * Creates the content based on the metadata/configuration
	 * 
	 * @private
	 */
	SmartChart.prototype._createContent = function() {

		jQuery.sap.require("sap.ui.comp.util.FormatUtil");

		var i, iLen = 0, oField, oChartObject, mProperties, aSortFilterableItems = [], oP13nDataObj, that = this;

		iLen = this._oChartViewMetadata.fields.length;
		for (i = 0; i < iLen; i++) {

			oChartObject = null;

			oField = this._oChartViewMetadata.fields[i];

			oP13nDataObj = this._createP13nObject(oField);

			mProperties = {
				name: oField.name,
				label: oField.fieldLabel
			};
			if (oField.inResult) {
				this._aAlwaysSelect.push(oField.name);
			}

			if (oField.isDimension) {
				oChartObject = new Dimension(mProperties);
				this._oChart.addDimension(oChartObject);

				if (oField.description) {
					oChartObject.setTextProperty(oField.description);

					/* eslint-disable no-loop-func */
					oChartObject.setTextFormatter(function(sKey, sText) {
						var sName = this.getIdentity();
						var sDisplayBehaviour = that._getDisplayBehaviour(sName);
						return sap.ui.comp.util.FormatUtil.getFormattedExpressionFromDisplayBehaviour(sDisplayBehaviour, sKey, sText);
					});
					/* eslint-enable no-loop-func */
				}

			} else if (oField.isMeasure) {
				oChartObject = new Measure(mProperties);
				this._oChart.addMeasure(oChartObject);

				if (oField.unit) {
					oChartObject.setUnitBinding(oField.unit);
				}
			} else if (oField.sortable || oField.filterable) {
				aSortFilterableItems.push(oP13nDataObj);
			}

			if (oChartObject) {
				if (oField.role) {
					oChartObject.setRole(oField.role);
				}
				oChartObject.data("p13nData", oP13nDataObj);
			}
		}

		if (this._oChart) {
			this._oChart.data("p13nData", aSortFilterableItems);
		}
	};

	SmartChart.prototype._getDisplayBehaviour = function(sName) {

		var oField = this._getField(sName);
		if (oField) {
			return oField.displayBehaviour;
		}

		return "";
	};

	SmartChart.prototype._getField = function(sName) {
		var oField, i, iLen;

		if (sName && this._oChartViewMetadata && this._oChartViewMetadata.fields) {
			iLen = this._oChartViewMetadata.fields.length;
			for (i = 0; i < iLen; i++) {
				oField = this._oChartViewMetadata.fields[i];
				if (oField.name === sName) {
					return oField;
				}
			}
		}

		return null;
	};
	/**
	 * Creates a Chart based on the configuration, if necessary. This also prepares the methods to be used based on the chart type.
	 * 
	 * @private
	 */
	SmartChart.prototype._createChart = function() {
		var aContent = this.getItems(), iLen = aContent ? aContent.length : 0, oChart;
		// Check if a Chart already exists in the content (Ex: from view.xml)
		while (iLen--) {
			oChart = aContent[iLen];
			if (oChart instanceof Chart) {
				break;
			}
			oChart = null;
		}
		// If a Chart exists use it, else create one!
		if (oChart) {
			this._oChart = oChart;
		} else {
			this._oChart = new Chart({
				uiConfig: {
					applicationSet: 'fiori'
				},
				vizProperties: {
					title: {
						text: ''
					}
				},
				selectionMode: this.getSelectionMode(),
				width: "100%"
			});

			this.insertItem(this._oChart, 2);
		}

		if (!this._oChart.getLayoutData()) {
			this._oChart.setLayoutData(new sap.m.FlexItemData({
				growFactor: 1,
				baseSize: "0%"
			}));
		}

		this._setChartType(this.getChartType());

		this._createTooltipOrPopover();
	};

	/**
	 * Returns the chart object used internally.
	 * 
	 * @public
	 * @returns {object} The chart
	 */
	SmartChart.prototype.getChart = function() {
		return this._oChart;
	};

	SmartChart.prototype._getChartTypes = function() {
		var mChartTypes;
		try {
			mChartTypes = sap.chart.api.getChartTypes(); // Chart.getChartTypes();
		} catch (ex) {
			mChartTypes = {};
			jQuery.sap.log.error("sap.chart.api..getChartTypes throws an exception.\n" + ex.toString());
		}

		return mChartTypes;
	};

	SmartChart.prototype._getAvailableChartTypes = function() {
		var i, sKey, aAvailableChartTypes = [], aChartTypes, mChartTypes = {}, aIgnoredChartTypes;

		if (this._oChart) {

			aIgnoredChartTypes = PersoUtil.createArrayFromString(this.getIgnoredChartTypes());

			mChartTypes = this._getChartTypes();
			aChartTypes = this._oChart.getAvailableChartTypes().available;
			if (aChartTypes) {
				for (i = 0; i < aChartTypes.length; i++) {
					sKey = aChartTypes[i].chart;
					if (aIgnoredChartTypes.indexOf(sKey) < 0) {
						aAvailableChartTypes.push({
							key: sKey,
							text: mChartTypes[sKey]
						});
					}
				}
			}
		}

		return aAvailableChartTypes;
	};

	SmartChart.prototype._getAllChartTypes = function() {
		var sKey, aAllChartTypes = [], mChartTypes, aIgnoredChartTypes;

		aIgnoredChartTypes = PersoUtil.createArrayFromString(this.getIgnoredChartTypes());

		mChartTypes = this._getChartTypes();

		for (sKey in mChartTypes) {
			if (sKey) {
				if (aIgnoredChartTypes.indexOf(sKey) < 0) {
					aAllChartTypes.push({
						key: sKey,
						text: mChartTypes[sKey]
					});
				}
			}
		}

		return aAllChartTypes;
	};

	SmartChart.prototype._retrieveChartTypeDescription = function(sCharType) {
		var mChartTypes = this._getChartTypes();
		return ({
			key: sCharType,
			text: mChartTypes[sCharType]
		});
	};

	SmartChart.prototype._setChartType = function(sChartType) {

		if (this._oChart) {
			this._oChart.setChartType(sChartType);
		}
	};

	SmartChart.prototype._getDimensions = function() {
		var aDimensions = [];

		if (this._oChart) {
			aDimensions = this._oChart.getDimensions();
		}

		return aDimensions;
	};

	SmartChart.prototype._getVisibleDimensions = function() {
		var aVisibleDimensions = [];

		if (this._oChart) {
			aVisibleDimensions = this._oChart.getVisibleDimensions();
		}

		return aVisibleDimensions;
	};

	SmartChart.prototype._getMeasures = function() {
		var aMeasures = [];

		if (this._oChart) {
			aMeasures = this._oChart.getMeasures();
		}

		return aMeasures;
	};

	SmartChart.prototype._getVisibleMeasures = function() {
		var aVisibleMeasures = [];

		if (this._oChart) {
			aVisibleMeasures = this._oChart.getVisibleMeasures();
		}

		return aVisibleMeasures;
	};

	SmartChart.prototype._getSortedDimensions = function() {
		var aDimensions = [];
		if (this._oChart) {
			aDimensions = this._oChart.getDimensions();
			if (aDimensions) {
				aDimensions.sort(function(a, b) {
					return a.getLabel().localeCompare(b.getLabel());
				});
			}
		}

		return aDimensions;
	};

	/**
	 * Interface function for the SmartVariantManagement control that returns the currently used variant data.
	 * 
	 * @public
	 * @returns {json} The currently used variant
	 */
	SmartChart.prototype.fetchVariant = function() {
		if (this._oCurrentVariant === "STANDARD" || this._oCurrentVariant === null) {
			return {};
		}

		return this._oCurrentVariant;
	};

	/**
	 * Interface function for SmartVariantManagement control that applies the current variant.
	 * 
	 * @param {Object} oVariantJSON The variant JSON
	 * @param {string} sContext Describes the context in which the variant has been applied
	 * @public
	 */
	SmartChart.prototype.applyVariant = function(oVariantJSON, sContext) {
		this._oCurrentVariant = oVariantJSON;
		if (this._oCurrentVariant === "STANDARD") {
			this._oCurrentVariant = null;
		}

		// Context STANDARD here specifies that this is a custom application variant for Globalisation/Industry!
		// This would be called just once in the beginning!
		if (sContext === "STANDARD") {
			this._oApplicationDefaultVariant = this._oCurrentVariant;
		}
		// if an application default variant exists --> extend all the other variants based on this!
		// Changes to the industry should be taken over --> but first we only take over non conflicting changes
		// if the user already has some changes --> just use those
		if (this._oApplicationDefaultVariant && !sContext) {
			this._oCurrentVariant = jQuery.extend(true, {}, this._oApplicationDefaultVariant, oVariantJSON);
		}

		// Set instance flag to indicate that we are currently in the process of applying the changes
		this._bApplyingVariant = true;

		if (this._oPersController) {
			if (this._oCurrentVariant === null || jQuery.isEmptyObject(this._oCurrentVariant)) {
				this._oPersController.resetPersonalization(sap.ui.comp.personalization.ResetType.ResetFull);
			} else {
				this._oPersController.setPersonalizationData(this._oCurrentVariant);
			}
		}

		// Rebind Chart only if data was set on it once or no smartFilter is attached!
		if (this._bIsChartBound || !this._oSmartFilter) {
			this._reBindChart();
		} else {
			this._showOverlay(true);
		}

		// Clear apply variant flag!
		this._bApplyingVariant = false;

		this.fireAfterVariantApply({
			currentVariantId: this.getCurrentVariantId()
		});
	};

	SmartChart.prototype._getFieldTooltip = function(sKey) {
		var oField = this._getFieldByKey(sKey);
		if (oField) {
			return oField.quickInfo;
		}

		return "";
	};
	SmartChart.prototype._getFieldByKey = function(sKey) {

		var i, oField = null;

		if (this._oChartViewMetadata && this._oChartViewMetadata.fields) {
			for (i = 0; i < this._oChartViewMetadata.fields.length; i++) {

				oField = this._oChartViewMetadata.fields[i];
				if (sKey === oField.name) {
					return oField;
				}
			}

			return null;
		}
	};

	/**
	 * Returns the column for the given column key
	 * 
	 * @param {array} aArray list of chart objects
	 * @param {string} sKey - the column key for the required column
	 * @returns {object} The found column or null
	 * @private
	 */
	SmartChart.prototype._getByKey = function(aArray, sKey) {
		var i, iLength, oCharObj, oCustomData;

		if (aArray) {
			iLength = aArray.length;
			for (i = 0; i < iLength; i++) {
				oCharObj = aArray[i];
				oCustomData = oCharObj.data("p13nData");
				if (oCustomData && oCustomData.columnKey === sKey) {
					return oCharObj;
				}
			}
		}

		return null;
	};

	SmartChart.prototype._getDimensionByKey = function(sKey) {
		if (this._oChart) {
			return this._getByKey(this._oChart.getDimensions(), sKey);
		}

		return null;
	};

	SmartChart.prototype._getMeasureByKey = function(sKey) {
		if (this._oChart) {
			return this._getByKey(this._oChart.getMeasures(), sKey);
		}

		return null;
	};

	SmartChart.prototype._getChartObjByKey = function(sKey) {
		var oChartObj = this._getDimensionByKey(sKey);
		if (!oChartObj) {
			oChartObj = this._getMeasureByKey(sKey);
		}

		return oChartObj;
	};

	/**
	 * Retrieves the path for the specified property and column key from the array of table columns
	 * 
	 * @param {string} sColumnKey - the column key specified on the table
	 * @param {string} sProperty - the property path that needs to be retrieved from the column
	 * @returns {string} The path that can be used by sorters, filters etc.
	 * @private
	 */
	SmartChart.prototype._getPathFromColumnKeyAndProperty = function(sColumnKey, sProperty) {
		var sPath = null, oChartObj, oCustomData;
		oChartObj = this._getChartObjByKey(sColumnKey);

		// Retrieve path from the property
		if (oChartObj) {
			oCustomData = oChartObj.data("p13nData");
			if (oCustomData) {
				sPath = oCustomData[sProperty];
			}
		}

		return sPath;
	};

	/**
	 * returns the current filter and sorting options from the table personalisation/variants
	 * 
	 * @private
	 * @returns {object} current variant's filter and sorting options
	 */
	/**
	 * returns the current filter and sorting options from the table personalisation/variants
	 * 
	 * @private
	 * @returns {object} current variant's filter and sorting options
	 */
	SmartChart.prototype._getChartPersonalisationData = function() {
		if (!this._oCurrentVariant) {
			return null;
		}
		var aSorters = [], aFilters = [], aExcludeFilters = [], oExcludeFilters, aSortData, sPath;

		// Sort handling
		if (this._oCurrentVariant.sort) {
			aSortData = this._oCurrentVariant.sort.sortItems;
		} else {
			aSortData = this._aInitialSorters;
		}

		if (aSortData) {
			aSortData.forEach(function(oModelItem) {
				var bDescending = oModelItem.operation === "Descending"; // sap.m.P13nConditionOperation.Descending;
				sPath = oModelItem.columnKey; // this._getPathFromColumnKeyAndProperty(oModelItem.columnKey, "sortProperty");
				aSorters.push(new sap.ui.model.Sorter(sPath, bDescending));

			}, this);
		}

		// Filter Handling
		if (this._oCurrentVariant.filter) {
			this._oCurrentVariant.filter.filterItems.forEach(function(oModelItem) {
				var oValue1 = oModelItem.value1, oValue2 = oModelItem.value2;
				// Filter path has be re-calculated below
				sPath = oModelItem.columnKey; // this._getPathFromColumnKeyAndProperty(oModelItem.columnKey, "filterProperty");

				if (oValue1 instanceof Date && this._oChartProvider && this._oChartProvider.getIsUTCDateHandlingEnabled()) {
					oValue1 = FilterProvider.getDateInUTCOffset(oValue1);
					oValue2 = oValue2 ? FilterProvider.getDateInUTCOffset(oValue2) : oValue2;
				}
				if (oModelItem.exclude) {
					aExcludeFilters.push(new Filter(sPath, FilterOperator.NE, oValue1));
				} else {
					aFilters.push(new Filter(sPath, oModelItem.operation, oValue1, oValue2));
				}
			}, this);

			if (aExcludeFilters.length) {
				oExcludeFilters = new Filter(aExcludeFilters, true);
			}
		}

		return {
			filters: aFilters,
			excludeFilters: oExcludeFilters,
			sorters: aSorters
		};
	};

	/**
	 * triggers (hidden) VariantManagementControl to persist personalisation this function is called in case no VariantManagementControl is used
	 * 
	 * @private
	 */
	SmartChart.prototype._persistPersonalisation = function() {
		var that = this;
		if (this._oVariantManagement) {
			this._oVariantManagement.getVariantsInfo(function(aVariants) {
				var sPersonalisationVariantKey = null;
				if (aVariants && aVariants.length > 0) {
					sPersonalisationVariantKey = aVariants[0].key;
				}

				var bOverwrite = sPersonalisationVariantKey !== null;

				var oParams = {
					name: "Personalisation",
					global: false,
					overwrite: bOverwrite,
					key: sPersonalisationVariantKey,
					def: true
				};
				that._oVariantManagement.fireSave(oParams);
			});
		}
	};

	/**
	 * Returns the ID of the currently selected variant.
	 * 
	 * @public
	 * @returns {string} ID of the currently selected variant
	 */
	SmartChart.prototype.getCurrentVariantId = function() {
		var sKey = "";

		if (this._oVariantManagement) {
			sKey = this._oVariantManagement.getCurrentVariantId();
		}

		return sKey;
	};

	/**
	 * Applies the current variant based on the sVariantId parameter. If an empty string or null or undefined have been passed, the standard variant
	 * will be used. The standard variant will also be used if the passed sVariantId cannot be found. If the flexibility variant, the content for the
	 * standard variant, or the personalizable control cannot be obtained, no changes will be made.
	 * 
	 * @public
	 * @param {string} sVariantId ID of the currently selected variant
	 */
	SmartChart.prototype.setCurrentVariantId = function(sVariantId) {
		if (this._oVariantManagement) {
			this._oVariantManagement.setCurrentVariantId(sVariantId);
		} else {
			jQuery.sap.log.error("sap.ui.comp.smartchart.SmartChart.prototype.setCurrentVariantId: VariantManagement does not exist");
		}
	};

	SmartChart.prototype._adjustHeight = function() {

		if (this._oChart) {
			var iToolbarHeight = 0, iHeight = this.getDomRef().offsetHeight;
			if (iHeight === 0) {
				return;
			}

			if (this._oToolbar && this._oToolbar.getDomRef()) {
				iToolbarHeight = this._oToolbar.getDomRef().offsetHeight;
			}

			// CORRECTION VALUE FOR CHART
			var iCorrection = 0;
// if (Device.system.desktop) {
// iCorrection = this.bFullScreen ? 0 : 30;
// }
			this._oChart.setHeight((iHeight - iToolbarHeight - iCorrection) + "px");
		}
	};

	SmartChart.prototype.setFullScreen = function(bValue, bForced) {
		if (!this.oFullScreenButton || (bValue === this.bFullScreen && !bForced)) {
			return;
		}
		this.bFullScreen = bValue;
		if (this.bFullScreen) {
			this.oFullScreenButton.setTooltip(this._oRb.getText("CHART_MINIMIZEBTN_TOOLTIP"));
			this.oFullScreenButton.setIcon("sap-icon://exit-full-screen");
			this._enterFullScreen();
		} else {
			this.oFullScreenButton.setTooltip(this._oRb.getText("CHART_MAXIMIZEBTN_TOOLTIP"));
			this.oFullScreenButton.setIcon("sap-icon://full-screen");
			this._exitFullScreen();
		}
	};

	SmartChart.prototype._enterFullScreen = function() {
		jQuery.sap.require("sap.ui.core.delegate.ScrollEnablement");
		this._oScrollEnablement = new sap.ui.core.delegate.ScrollEnablement(this, this.getId() + '-wrapper', {
			horizontal: true,
			vertical: true
		});
		if (!this._oPopup) {
			this._oPopup = new sap.ui.core.Popup({
				modal: true,
				shadow: false,
				autoClose: false
			});
		}
		this.$content = this.$();
		if (this.$content) {
			this.$tempNode = jQuery('<div></div>');
			this.$content.before(this.$tempNode);
			this._$overlay = jQuery("<div id='" + jQuery.sap.uid() + "'></div>");

			this._$overlay.css("top", "0px");
			this._$overlay.css("left", "0px");
			this._$overlay.css("width", "100%");
			this._$overlay.css("height", "100%");
			this._$overlay.append(this.$content);
			this._oPopup.setContent(this._$overlay);
		} else {
			jQuery.sap.log.warn('Overlay: content does not exist or contains more than one child');
		}
		this._oToolbar.setDesign(ToolbarDesign.Solid);
		this._oPopup.open(200, null, jQuery('body'));
	};

	SmartChart.prototype._exitFullScreen = function() {
		if (!this.$tempNode) {
			return;
		}
		if (this._oScrollEnablement) {
			this._oScrollEnablement.destroy();
			this._oScrollEnablement = null;
		}
		this.$tempNode.replaceWith(this.$content);
		this._oToolbar.setDesign(ToolbarDesign.Auto);
		this._oPopup.close();
		this._$overlay.remove();
	};

	/**
	 * Cleans up the control.
	 * 
	 * @public
	 */
	SmartChart.prototype.exit = function() {

		this._oRb = null;

		if (this._oSmartFilter) {
			this._oSmartFilter.detachSearch(this._reBindChart, this);
			this._oSmartFilter.detachFilterChange(this._showOverlay, this);
			this._oSmartFilter.detachCancel(this._showOverlay, this);
		}

		if (this._oChartProvider && this._oChartProvider.destroy) {
			this._oChartProvider.destroy();
		}
		this._oChartProvider = null;

		if (this._oPersController && this._oPersController.destroy) {
			this._oPersController.destroy();
		}

		this._oPersController = null;
		if (this._oVariantManagement && this._oVariantManagement.destroy) {
			this._oVariantManagement.destroy();
		}
		this._oVariantManagement = null;

		this._destroyPopover();

		if (this._oPopup) {
			this._oPopup.destroy();
			this._oPopup = null;
		}

		if (Device.system.desktop && this.sResizeListenerId) {
			sap.ui.core.ResizeHandler.deregister(this.sResizeListenerId);
			this.sResizeListenerId = null;
		} else {
			Device.orientation.detachHandler(this._adjustHeight, this);
			Device.resize.detachHandler(this._adjustHeight, this);
		}

		this._oCurrentVariant = null;
		this._oApplicationDefaultVariant = null;
		this._oChartViewMetadata = null;
		this._aAlwaysSelect = null;
		this._oSmartFilter = null;
		this._oToolbar = null;
		this._oChartPersonalisationButton = null;
		this._oView = null;
		this._oChart = null;
	};

	return SmartChart;

}, /* bExport= */true);

}; // end of sap/ui/comp/smartchart/SmartChart.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartmicrochart.SmartAreaMicroChart') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartmicrochart.SmartAreaMicroChart.
jQuery.sap.declare('sap.ui.comp.smartmicrochart.SmartAreaMicroChart'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.suite.ui.microchart.library'); // unlisted dependency retained
jQuery.sap.require('sap.suite.ui.microchart.AreaMicroChart'); // unlisted dependency retained
jQuery.sap.require('sap.suite.ui.microchart.AreaMicroChartPoint'); // unlisted dependency retained
jQuery.sap.require('sap.suite.ui.microchart.AreaMicroChartItem'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartmicrochart/SmartAreaMicroChart",['jquery.sap.global', 'sap/ui/comp/library', 'sap/suite/ui/microchart/library', 'sap/ui/comp/providers/ChartProvider', 'sap/suite/ui/microchart/AreaMicroChart', 'sap/suite/ui/microchart/AreaMicroChartPoint', 'sap/suite/ui/microchart/AreaMicroChartItem'],
	function(jQuery, library, MicroChartLibrary, ChartProvider, AreaMicroChart, AreaMicroChartPoint, AreaMicroChartItem) {
	"use strict";

	/**
	 * Constructor for a new sap.ui.comp.smartmicrochart/SmartAreaMicroChart.
	 *
	 * @param {string}
	 *          [sId] id for the new control, generated automatically if no id is given
	 * @param {object}
	 *          [mSettings] initial settings for the new control
	 * @class The SmartAreaMicroChart control creates a AreaMicroChart based on OData metadata and the configuration
	 *        specified. The entitySet attribute must be specified to use the control. This attribute is used to fetch
	 *        fields from OData metadata, from which Micro Area Chart UI will be generated; it can also be used to fetch
	 *        the actual chart data.<br>
	 *        <b><i>Note:</i></b><br>
	 *        Most of the attributes/properties are not dynamic and cannot be changed once the control has been
	 *        initialised.
	 * @extends sap.suite.ui.microchart.AreaMicroChart
	 * @version 1.36.12
	 * @experimental Since 1.34.0 This is currently under development. The API could be changed at any point in time.
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartmicrochart.SmartAreaMicroChart
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var SmartAreaMicroChart = AreaMicroChart.extend("sap.ui.comp.smartmicrochart.SmartAreaMicroChart", /** @lends sap.ui.comp.smartmicrochart.SmartAreaMicroChart.prototype */
	{
		metadata : {

			library : "sap.ui.comp",
			properties : {

				/**
				 * The entity set name from which to fetch data and generate the columns. Note that this is not a dynamic UI5
				 * property
				 */
				entitySet : {
					type : "string",
					group : "Misc",
					defaultValue : null
				},

				/**
				 * ID of the corresponding SmartFilter control; When specified, the SmartAreaMicroChart searches for the
				 * SmartFilter (also in the closest parent View) and attaches to the relevant events of the SmartFilter; to
				 * fetch data, show overlay etc.
				 */
				smartFilterId : {
					type : "string",
					group : "Misc",
					defaultValue : null
				},

				/**
				 * CSV of fields that must be ignored in the OData metadata by the SmartAreaMicroChart control.<br>
				 * <i>Note:</i><br>
				 * No validation is done. Please ensure that you do not add spaces or special characters.
				 */
				ignoredFields : {
					type : "string",
					group : "Misc",
					defaultValue : null
				},

				/**
				 * CSV of fields that is not shown in the personalization dialog.<br>
				 * <i>Note:</i><br>
				 * No validation is done. Please ensure that you do not add spaces or special characters.
				 */
				ignoreFromPersonalisation : {
					type : "string",
					group : "Misc",
					defaultValue : null
				},

				/**
				 * Specifies the type of Chart to be created in the SmartAreaMicroChart control.
				 */
				chartType : {
					type : "string",
					group : "Misc",
					defaultValue : null
				},

				/**
				 * The useVariantManagement attribute can be set to true or false depending on whether you want to use variants.
				 * As a prerequisite you need to specify the persistencyKey property.
				 */
				useVariantManagement : {
					type : "boolean",
					group : "Misc",
					defaultValue : true
				},

				/**
				 * The useChartPersonalisation attribute can be set to true or false depending on whether you want to define
				 * personalized chart settings. If you want to persist the chart personalization, you need to specify the
				 * persistencyKey property.
				 */
				useChartPersonalisation : {
					type : "boolean",
					group : "Misc",
					defaultValue : true
				},

				/**
				 * Key used to access personalization data.
				 */
				persistencyKey : {
					type : "string",
					group : "Misc",
					defaultValue : null
				},

				/**
				 * Retrieves or sets the current variant.
				 */
				currentVariantId : {
					type : "string",
					group : "Misc",
					defaultValue : null
				},

				/**
				 * When set to true, this enables automatic binding of the chart using the chartBindingPath (if it exists) or
				 * entitySet property. This happens just after the <code>initialise</code> event has been fired.
				 */
				enableAutoBinding : {
					type : "boolean",
					group : "Misc",
					defaultValue : false
				},

				/**
				 * This attribute can be used to specify the path that is used during the binding of the chart. If not
				 * specified, the entitySet attribute is used instead. (used only if binding is established
				 * internally/automatically - See enableAutoBinding)
				 */
				chartBindingPath : {
					type : "string",
					group : "Misc",
					defaultValue : null
				}
			},
			/*
			 * aggregations: { },
			 */
			events : {

				/**
				 * Event fired once the control has been initialised.
				 */
				initialise : {},

				/**
				 * Event fired just before the binding is being done.
				 *
				 * @param {object}
				 *          [bindingParams] the bindingParams object contains filters, sorters and other binding related
				 *          information for the chart.
				 * @param {boolean}
				 *          [bindingParams.preventChartBind] can be set to true by the listener to prevent binding from being
				 *          done
				 * @param {object}
				 *          [bindingParams.filters] the combined filter array containing a set of sap.ui.model.Filter instances
				 *          from SmartAreaMicroChart and SmartFilter - can be modified by users to influence filtering
				 * @param {object}
				 *          [bindingParams.sorter] an array containing a set of sap.ui.model.Sorter instances from
				 *          SmartAreaMicroChart (personalisation) - can be modified by users to influence sorting
				 */
				beforeRebindChart : {},

				/**
				 * Event fired after variant management in the SmartAreaMicroChart has been initialised.
				 */
				afterVariantInitialise : {},

				/**
				 * Event fired after a variant has been saved. This event can be used to retrieve the ID of the saved variant.
				 *
				 * @param {string}
				 *          [currentVariantId] id of the currently selected variant
				 */
				afterVariantSave : {},

				/**
				 * Event fired after a variant has been applied.
				 *
				 * @param {string}
				 *          [currentVariantId] id of the currently selected variant
				 */
				afterVariantApply : {},

				/**
				 * Event fired just before the overlay is being shown.
				 *
				 * @param {object}
				 *          [overlay] the overlay object contains information related to the chart's overlay.
				 * @param {boolean}
				 *          [overlay.show] can be set to false by the listener to prevent the overlay being shown.
				 */
				showOverlay : {}
			}
		}
	});

	/**
	 * The entity set name from OData metadata, with which the chart should be bound to
	 *
	 * @param {string}
	 *          sEntitySetName The entity set
	 * @public
	 */
	SmartAreaMicroChart.prototype.setEntitySet = function(sEntitySetName) {
		this.setProperty("entitySet", sEntitySetName);
		this._initialiseMetadata();
	};

	/**
	 * It could happen that the entity type information is set already in the view, but there is no model attached yet.
	 * This method is called once the model is set on the parent and can be used to initialise the metadata, from the
	 * model, and finally create the chart controls.
	 *
	 * @private
	 */
	SmartAreaMicroChart.prototype.propagateProperties = function() {
		AreaMicroChart.prototype.propagateProperties.apply(this, arguments);
		this._initialiseMetadata();
	};

	/**
	 * initialises the OData metadata necessary to create the chart
	 *
	 * @private
	 */
	SmartAreaMicroChart.prototype._initialiseMetadata = function() {
		if (!this._bIsInitialised) {
			var oModel = this.getModel();
			if (oModel) {
				// Check if ODataMetaModel was loaded
				// If not, delay the creation of chart content/helpers until ODataMetaModel is loaded!
				// Do this only for async ODataModel
				if (oModel.bLoadMetadataAsync && oModel.getMetaModel() && oModel.getMetaModel().loaded) {
					if (!this._bMetaModelLoadAttached) {
						// wait for the ODataMetaModel loaded promise to be resolved
						oModel.getMetaModel().loaded().then(this._onMetadataInitialised.bind(this));
						this._bMetaModelLoadAttached = true;
					}
				} else {
					// Could be a non ODataModel or a synchronous ODataModel --> just create the necessary helpers
					this._onMetadataInitialised();
				}
			}
		}
	};

	/**
	 * Creates an instance of the chart provider
	 *
	 * @private
	 */
	SmartAreaMicroChart.prototype._createChartProvider = function() {
		var oModel, sEntitySetName;
		sEntitySetName = this.getEntitySet();
		oModel = this.getModel();
		// The SmartAreaMicroChart might also needs to work for non ODataModel models; hence we now create the chart
		// independent
		// of ODataModel.
		if (oModel && !this._bChartCreated) {
			// this._aAlwaysSelect = [];
			// this._createToolbar();
			// this._createChart();
			this._bChartCreated = true;
		}
		if (oModel && sEntitySetName) {
			this._oChartProvider = new ChartProvider({
				entitySet : sEntitySetName,
				ignoredFields : this.getIgnoredFields(),
				dateFormatSettings : this.data("dateFormatSettings"),
				currencyFormatSettings : this.data("currencyFormatSettings"),
				defaultDropDownDisplayBehaviour : this.data("defaultDropDownDisplayBehaviour"),
				useSmartField : this.data("useSmartField"),
				enableInResultForLineItem : this.data("enableInResultForLineItem"),
				model : oModel
			});
		}
	};

	/**
	 * Called once the necessary Model metadata is available
	 *
	 * @private
	 */
	SmartAreaMicroChart.prototype._onMetadataInitialised = function() {
		this._bMetaModelLoadAttached = false;
		if (!this._bIsInitialised) {
			this._createChartProvider();
			if (this._oChartProvider) {
				this._oChartViewMetadata = this._oChartProvider.getChartViewMetadata();
				if (this._oChartViewMetadata) {
					// Indicates the control is initialised and can be used in the initialise event/otherwise!
					this._bIsInitialised = true;
					this._assignData();
					this.fireInitialise();
				}
			}
		}
	};

	SmartAreaMicroChart.prototype._assignData = function() {
		if (this._oChartViewMetadata) {
			if (this._oChartViewMetadata.fields && (this._oChartViewMetadata.fields.length > 0)) {
				this._aMeasures = jQuery.grep(this._oChartViewMetadata.fields, function(value, i) {
					return value.isMeasure;
				});

				this._aDimensions = jQuery.grep(this._oChartViewMetadata.fields, function(value, i) {
					return value.isDimension;
				});
				var that = this;
				this._aChartPoints = [];
				jQuery(this._aMeasures[0].dataPoint).map(function() {
					return this.value;
				}).each(function() {
					that._aChartPoints.push(new AreaMicroChartPoint({
						x : this.x,
						y : this.y
					}));
				});

				this.setChart(new AreaMicroChartItem({
					points : this._aChartPoints
				}));

				this._aTargetPoints = [];
				jQuery(this._aMeasures[1].dataPoint).map(function() {
					return this.value;
				}).each(function() {
					that._aTargetPoints.push(new AreaMicroChartPoint({
						x : this.x,
						y : this.y
					}));
				});

				this.setTarget(new AreaMicroChartItem({
					points : this._aTargetPoints
				}));

				this._aInnerMinThresholdPoints = [];
				jQuery(this._aMeasures[2].dataPoint).map(function() {
					return this.value;
				}).each(function() {
					that._aInnerMinThresholdPoints.push(new AreaMicroChartPoint({
						x : this.x,
						y : this.y
					}));
				});

				this.setTarget(new AreaMicroChartItem({
					points : this._aInnerMinThresholdPoints
				}));

				this._aInnerMaxThresholdPoints = [];
				jQuery(this._aMeasures[3].dataPoint).map(function() {
					return this.value;
				}).each(function() {
					that._aInnerMaxThresholdPoints.push(new AreaMicroChartPoint({
						x : this.x,
						y : this.y
					}));
				});

				this.setTarget(new AreaMicroChartItem({
					points : this._aInnerMaxThresholdPoints
				}));

				this._aMinThresholdPoints = [];
				jQuery(this._aMeasures[4].dataPoint).map(function() {
					return this.value;
				}).each(function() {
					that._aMinThresholdPoints.push(new AreaMicroChartPoint({
						x : this.x,
						y : this.y
					}));
				});

				this.setTarget(new AreaMicroChartItem({
					points : this._aMinThresholdPoints
				}));

				this._aMaxThresholdPoints = [];
				jQuery(this._aMeasures[5].dataPoint).map(function() {
					return this.value;
				}).each(function() {
					that._aMaxThresholdPoints.push(new AreaMicroChartPoint({
						x : this.x,
						y : this.y
					}));
				});

				this.setTarget(new AreaMicroChartItem({
					points : this._aMaxThresholdPoints
				}));

			}
		}
	};

	return SmartAreaMicroChart;

});
}; // end of sap/ui/comp/smartmicrochart/SmartAreaMicroChart.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartmicrochart.SmartBulletMicroChart') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartmicrochart.SmartBulletMicroChart.
jQuery.sap.declare('sap.ui.comp.smartmicrochart.SmartBulletMicroChart'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.suite.ui.microchart.library'); // unlisted dependency retained
jQuery.sap.require('sap.suite.ui.microchart.BulletMicroChart'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartmicrochart/SmartBulletMicroChart",['jquery.sap.global', 'sap/ui/comp/library', 'sap/suite/ui/microchart/library', 'sap/ui/comp/providers/ChartProvider', 'sap/suite/ui/microchart/BulletMicroChart'],
	function(jQuery, library, MicroChartLibrary, ChartProvider, BulletMicroChart) {
	"use strict";

	/**
	 * Constructor for a new sap.ui.comp.smartmicrochart/SmartBulletMicroChart.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class The SmartBulletMicroChart control creates a BulletMicroChart based on OData metadata
	 *				and the configuration specified. The entitySet attribute must be specified to use the control.
	 *				This attribute is used to fetch fields from OData metadata, from which Micro Bullet Chart UI
	 *				will be generated; it can also be used to fetch the actual chart data.<br>
	 *				<b><i>Note:</i></b><br>
	 *				Most of the attributes/properties are not dynamic and cannot be changed once the control has been
	 *				initialized.
	 * @extends sap.suite.ui.microchart.BulletMicroChart
	 * @version 1.36.12
	 * @experimental Since 1.34.0 This is currently under development. The API could be changed at any point in time.
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartmicrochart.SmartBulletMicroChart
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var SmartBulletMicroChart = BulletMicroChart.extend("sap.ui.comp.smartmicrochart.SmartBulletMicroChart", /** @lends sap.ui.comp.smartmicrochart.SmartBulletMicroChart.prototype */ {
		metadata: {

			library: "sap.ui.comp",
			properties: {

				/**
				 * The entity set name from which to fetch data and generate the columns. Note that this is not a dynamic UI5 property
				 */
				entitySet: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * ID of the corresponding SmartFilter control; When specified, the SmartBulletMicroChart searches for the SmartFilter (also in the closest
				 * parent View) and attaches to the relevant events of the SmartFilter; to fetch data, show overlay etc.
				 */
				smartFilterId: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * CSV of fields that must be ignored in the OData metadata by the SmartBulletMicroChart control.<br>
				 * <i>Note:</i><br>
				 * No validation is done. Please ensure that you do not add spaces or special characters.
				 */
				ignoredFields: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * CSV of fields that is not shown in the personalization dialog.<br>
				 * <i>Note:</i><br>
				 * No validation is done. Please ensure that you do not add spaces or special characters.
				 */
				ignoreFromPersonalisation: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Specifies the type of Chart to be created in the SmartBulletMicroChart control.
				 */
				chartType: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * The useVariantManagement attribute can be set to true or false depending on whether you want to use variants. As a prerequisite you
				 * need to specify the persistencyKey property.
				 */
				useVariantManagement: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * The useChartPersonalisation attribute can be set to true or false depending on whether you want to define personalized chart
				 * settings. If you want to persist the chart personalization, you need to specify the persistencyKey property.
				 */
				useChartPersonalisation: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Key used to access personalization data.
				 */
				persistencyKey: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Retrieves or sets the current variant.
				 */
				currentVariantId: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * When set to true, this enables automatic binding of the chart using the chartBindingPath (if it exists) or entitySet property. This
				 * happens just after the <code>initialise</code> event has been fired.
				 */
				enableAutoBinding: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * This attribute can be used to specify the path that is used during the binding of the chart. If not specified, the entitySet
				 * attribute is used instead. (used only if binding is established internally/automatically - See enableAutoBinding)
				 */
				chartBindingPath: {
					type: "string",
					group: "Misc",
					defaultValue: null
				}
			},
			/*aggregations: {

			},*/
			events: {

				/**
				 * Event fired once the control has been initialised.
				 */
				initialise: {},

				/**
				 * Event fired just before the binding is being done.
				 *
				 * @param {object} [bindingParams] the bindingParams object contains filters, sorters and other binding related information for the chart.
				 * @param {boolean} [bindingParams.preventChartBind] can be set to true by the listener to prevent binding from being done
				 * @param {object} [bindingParams.filters] the combined filter array containing a set of sap.ui.model.Filter instances from SmartBulletMicroChart and SmartFilter - can be modified by users to influence filtering
				 * @param {object} [bindingParams.sorter] an array containing a set of sap.ui.model.Sorter instances from SmartBulletMicroChart (personalisation) - can be modified by users to influence sorting
				 */
				beforeRebindChart: {},

				/**
				 * Event fired after variant management in the SmartBulletMicroChart has been initialised.
				 */
				afterVariantInitialise: {},

				/**
				 * Event fired after a variant has been saved. This event can be used to retrieve the ID of the saved variant.
				 *
				 * @param {string} [currentVariantId] id of the currently selected variant
				 */
				afterVariantSave: {},

				/**
				 * Event fired after a variant has been applied.
				 *
				 * @param {string} [currentVariantId] id of the currently selected variant
				 */
				afterVariantApply: {},

				/**
				 * Event fired just before the overlay is being shown.
				 *
				 * @param {object} [overlay] the overlay object contains information related to the chart's overlay.
				 * @param {boolean} [overlay.show] can be set to false by the listener to prevent the overlay being shown.
				 */
				showOverlay: {}
			}
		}
	});

	/**
	 * The entity set name from OData metadata, with which the chart should be bound to
	 *
	 * @param {string} sEntitySetName The entity set
	 * @public
	 */
	SmartBulletMicroChart.prototype.setEntitySet = function(sEntitySetName) {
		this.setProperty("entitySet", sEntitySetName);
		this._initialiseMetadata();
	};

	/**
	 * It could happen that the entity type information is set already in the view, but there is no model attached yet. This method is called once the
	 * model is set on the parent and can be used to initialise the metadata, from the model, and finally create the chart controls.
	 *
	 * @private
	 */
	SmartBulletMicroChart.prototype.propagateProperties = function() {
		BulletMicroChart.prototype.propagateProperties.apply(this, arguments);
		this._initialiseMetadata();
	};

	/**
	 * initialises the OData metadata necessary to create the chart
	 *
	 * @private
	 */
	SmartBulletMicroChart.prototype._initialiseMetadata = function() {
		if (!this._bIsInitialised) {
			var oModel = this.getModel();
			if (oModel) {
				// Check if ODataMetaModel was loaded
				// If not, delay the creation of chart content/helpers until ODataMetaModel is loaded!
				// Do this only for async ODataModel
				if (oModel.bLoadMetadataAsync && oModel.getMetaModel() && oModel.getMetaModel().loaded) {
					if (!this._bMetaModelLoadAttached) {
						// wait for the ODataMetaModel loaded promise to be resolved
						oModel.getMetaModel().loaded().then(this._onMetadataInitialised.bind(this));
						this._bMetaModelLoadAttached = true;
					}
				} else {
					// Could be a non ODataModel or a synchronous ODataModel --> just create the necessary helpers
					this._onMetadataInitialised();
				}
			}
		}
	};

	/**
	 * Creates an instance of the chart provider
	 *
	 * @private
	 */
	SmartBulletMicroChart.prototype._createChartProvider = function() {
		var oModel, sEntitySetName;
		sEntitySetName = this.getEntitySet();
		oModel = this.getModel();

		// The SmartBulletMicroChart might also needs to work for non ODataModel models; hence we now create the chart independent
		// of ODataModel.
		if (oModel && !this._bChartCreated) {
//			this._aAlwaysSelect = [];
//			this._createToolbar();
//			this._createChart();
			this._bChartCreated = true;
		}
		if (oModel && sEntitySetName) {
			this._oChartProvider = new ChartProvider({
				entitySet: sEntitySetName,
				ignoredFields: this.getIgnoredFields(),
				dateFormatSettings: this.data("dateFormatSettings"),
				currencyFormatSettings: this.data("currencyFormatSettings"),
				defaultDropDownDisplayBehaviour: this.data("defaultDropDownDisplayBehaviour"),
				useSmartField: this.data("useSmartField"),
				enableInResultForLineItem: this.data("enableInResultForLineItem"),
				model: oModel
			});
		}
	};


	/**
	 * Called once the necessary Model metadata is available
	 *
	 * @private
	 */
	SmartBulletMicroChart.prototype._onMetadataInitialised = function() {
		this._bMetaModelLoadAttached = false;
		if (!this._bIsInitialised) {
			this._createChartProvider();
			if (this._oChartProvider) {
				this._oChartViewMetadata = this._oChartProvider.getChartViewMetadata();
				if (this._oChartViewMetadata) {

					// Indicates the control is initialised and can be used in the initialise event/otherwise!
					this._bIsInitialised = true;
					this._assignData();
					this.fireInitialise();
				}
			}
		}
	};

	SmartBulletMicroChart.prototype._assignData = function() {
		if (this._oChartViewMetadata) {
			if (this._oChartViewMetadata.fields && (this._oChartViewMetadata.fields.length > 0)) {
				this._aMeasures = jQuery.grep(this._oChartViewMetadata.fields, function(value, i) {
		            return value.isMeasure;
		        });

				this._aDimensions = jQuery.grep(this._oChartViewMetadata.fields, function(value, i) {
		            return value.isDimension;
		        });

				if (this._aMeasures[0] !== null && this._aMeasures[0].dataPoint !== null){
					var oActualValue = this._aMeasures[0].dataPoint;

					if (oActualValue.valueFormat !== null){
						this.setProperty("scale", oActualValue.valueFormat.scalefactor, true);
					}

					this.setProperty("showActualValue", oActualValue.showActualValue, true);
					this.setProperty("showDeltaValue", oActualValue.showDeltaValue, true);
					this.setProperty("showValueMarker", oActualValue.showValueMarker, true);
					this.setProperty("mode", oActualValue.mode, true);
					this.setProperty("actualValueLabel", oActualValue.actualValueLabel, true);
					this.setProperty("deltaValueLabel", oActualValue.deltaValueLabel, true);
					this.setProperty("targetValueLabel", oActualValue.targetValueLabel, true);
				}
				if (this._aMeasures[1] !== null && this._aMeasures[1].dataPoint !== null){
					var oTargetValue = this._aMeasures[1].dataPoint;

					this.setProperty("targetValue", oTargetValue.value, true);
					this.setProperty("showTargetValue", oTargetValue.showTargetValue, true);
				}
				if (this._aMeasures[2] !== null && this._aMeasures[2].dataPoint !== null){
					var oForeCastValue = this._aMeasures[2].dataPoint;

					this.setProperty("forecastValue", oForeCastValue.value, true);

					if (oForeCastValue.valueRange !== null){
						this.setProperty("minValue", oForeCastValue.valueRange.minValue, true);
						this.setProperty("maxValue", oForeCastValue.valueRange.maxValue, true);
					}
				}
				this.invalidate();
			}
		}
	};

	// **
	// * This file defines behavior for the control,
	// */

	return SmartBulletMicroChart;

});
}; // end of sap/ui/comp/smartmicrochart/SmartBulletMicroChart.js
