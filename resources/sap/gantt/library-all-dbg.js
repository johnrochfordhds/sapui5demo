// This file has been generated by the SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.gantt.library-all');
if ( !jQuery.sap.isDeclared('sap.gantt.GanttChartRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

jQuery.sap.declare('sap.gantt.GanttChartRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/GanttChartRenderer",[], function () {
	"use strict";

	/**
	 * Gantt Chart renderer.
	 *
	 * @namespace
	 */
	var GanttChartRenderer = {};

	GanttChartRenderer.render = function (oRenderManager, oGanttChart) {
		jQuery.sap.measure.start("GanttChartRenderer render","GanttPerf:GanttChartRenderer render function");
		
		oRenderManager.write("<div");
		oRenderManager.writeControlData(oGanttChart);
		oRenderManager.addStyle("width", oGanttChart.getWidth());
		oRenderManager.addStyle("height", oGanttChart.getHeight());
		oRenderManager.writeStyles();
		oRenderManager.addClass("sapGanttChart");
		oRenderManager.writeClasses();
		oRenderManager.write(">");

		jQuery.sap.measure.start("GanttChartRenderer renderPaintServer","GanttPerf:GanttChartRenderer renderPaintServer part");
		this.renderSvgDefs(oRenderManager, oGanttChart);
		jQuery.sap.measure.end("GanttChartRenderer renderPaintServer");
		
		jQuery.sap.measure.start("GanttChartRenderer renderChartHeader","GanttPerf:GanttChartRenderer renderChartHeader part");
		this.renderChartHeader(oRenderManager, oGanttChart);
		jQuery.sap.measure.end("GanttChartRenderer renderChartHeader");

		jQuery.sap.measure.start("GanttChartRenderer renderChartBody","GanttPerf:GanttChartRenderer renderChartBody part");
		this.renderChartBody(oRenderManager, oGanttChart);
		jQuery.sap.measure.end("GanttChartRenderer renderChartBody");

		oRenderManager.write("</div>");
		
		jQuery.sap.measure.end("GanttChartRenderer render");
	};

	GanttChartRenderer.renderSvgDefs = function (oRenderManager, oGanttChart) {
		var oSvgDefs = oGanttChart.getSvgDefs();
		if (oSvgDefs) {
			oRenderManager.write("<svg id='" + oGanttChart.getId() + "-svg-psdef'");
			oRenderManager.addStyle("float", "left");
			oRenderManager.addStyle("width", "0px");
			oRenderManager.addStyle("height", "0px");
			oRenderManager.writeStyles();
			oRenderManager.write(">");
			oRenderManager.write(oSvgDefs.getDefString());
			oRenderManager.write("</svg>");
		}
	};
	
	GanttChartRenderer.renderChartHeader = function (oRenderManager, oGanttChart) {
		oRenderManager.write("<div id='" + oGanttChart.getId() + "-header'");
		oRenderManager.addClass("sapGanttChartHeader");
		oRenderManager.writeClasses();
		oRenderManager.write(">");

		oRenderManager.write("<svg id='" + oGanttChart.getId() + "-header-svg'");
		oRenderManager.addClass("sapGanttChartHeaderSvg");
		oRenderManager.writeClasses();
		oRenderManager.write("></svg>");

		oRenderManager.write("</div>");
	};

	GanttChartRenderer.renderChartBody = function (oRenderManager, oGanttChart) {
		oRenderManager.write("<div id='" + oGanttChart.getId() + "-tt'");
		oRenderManager.addClass("sapUiTableHScr");  // force horizontal scroll bar to show
		oRenderManager.addClass("sapGanttChartTT");
		oRenderManager.writeClasses();
		oRenderManager.addStyle("width", oGanttChart.getWidth());
		oRenderManager.addStyle("height", oGanttChart.getHeight());
		oRenderManager.writeStyles();
		oRenderManager.write(">");

		jQuery.sap.measure.start("GanttChartRenderer renderSvgDiv","GanttPerf:GanttChartRenderer renderPaintServer part");
		this.renderBodySvg(oRenderManager, oGanttChart);
		jQuery.sap.measure.end("GanttChartRenderer renderSvgDiv");

		oRenderManager.renderControl(oGanttChart.getAggregation("_treeTable"));
		oRenderManager.write("</div>");
	};	

	GanttChartRenderer.renderBodySvg = function (oRenderManager, oGanttChart) {
		oRenderManager.write("<div id='" + oGanttChart.getId() + "-svg-ctn'");
		oRenderManager.addClass("sapGanttChartSvgCtn");
		oRenderManager.writeClasses();
		oRenderManager.write(">");

		oRenderManager.write("<svg id='" + oGanttChart.getId() + "-svg'");
		oRenderManager.addClass("sapGanttChartSvg");
		oRenderManager.writeClasses();
		oRenderManager.addStyle("height", "100%");
		oRenderManager.writeStyles();
		oRenderManager.write(">");
		oRenderManager.write("</svg>");
		oRenderManager.write("</div>");
	};

	return GanttChartRenderer;
}, true);

}; // end of sap/gantt/GanttChartRenderer.js
if ( !jQuery.sap.isDeclared('sap.gantt.GanttChartWithTableRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

jQuery.sap.declare('sap.gantt.GanttChartWithTableRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained
sap.ui.define("sap/gantt/GanttChartWithTableRenderer",['sap/ui/core/theming/Parameters'], function (Parameters) {
	"use strict";

	/**
	 * Gantt Chart with table renderer.
	 *
	 * @namespace
	 */
	var GanttChartWithTable = {};

	GanttChartWithTable.render = function (oRenderManager, oGanttChartWithTable) {
		oRenderManager.write("<div");
		oRenderManager.writeControlData(oGanttChartWithTable);
		oRenderManager.addClass("sapUiTableHScr");  //force horizontal scroll bar to show
		oRenderManager.addClass("sapGanttChartWithTable");
		oRenderManager.writeClasses();
		oRenderManager.addStyle("width", oGanttChartWithTable.getWidth());
		oRenderManager.addStyle("height", oGanttChartWithTable.getHeight());
		oRenderManager.writeStyles();
		oRenderManager.write(">");

		if (oGanttChartWithTable._oToolbar.getAllToolbarItems().length == 0) {
			oGanttChartWithTable._oTT.addStyleClass("sapGanttChartColumnHeight");
		} else if (oGanttChartWithTable._oTT.hasStyleClass("sapGanttChartColumnHeight")){
			oGanttChartWithTable._oTT.removeStyleClass("sapGanttChartColumnHeight");
		}

		oRenderManager.renderControl(oGanttChartWithTable._oSplitter);

		oRenderManager.write("</div>");

	};

	return GanttChartWithTable;
}, /* bExport= */ true);

}; // end of sap/gantt/GanttChartWithTableRenderer.js
if ( !jQuery.sap.isDeclared('sap.gantt.config.ChartScheme') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.config.ChartScheme'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/gantt/config/ChartScheme",[
	'jquery.sap.global', 'sap/ui/core/Element'
], function (jQuery, Element) {
	"use strict";
	/**
	 * Creates and initializes a new ChartScheme class
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * The ChartScheme control is one of the settings of {@link sap.gantt.GanttChart}. 
	 * <p>A Gantt chart uses this setting to decide the mode of Gantt chart and the shapes to display in the Gantt chart.
	 * A Gantt chart contains one or more Chart schemes. By switching between these schemes, the Gantt chart can display different shapes.
	 * </p>
	 * @extends sap.ui.core.Element
	 *
	 * @author SAP SE
	 * @version 1.36.8
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.config.ChartScheme
	 */
	var ChartScheme = Element.extend("sap.gantt.config.ChartScheme", /** @lends sap.gantt.config.ChartScheme.prototype */ {
		metadata: {
			properties: {
				/**
				 * Unique key of the Chart scheme
				 */
				key: {type: "string", defaultValue: null},
				/**
				 * Description of the Chart scheme
				 */
				name: {type: "string", defaultValue: null},
				/**
				 * Decides the row height of {@link sap.gantt.GanttChartBase}
				 * For example, if rowSpan is 2, the row height of the Gantt chart equals twice of the row height of the tree table
				 */
				rowSpan: {type: "int", defaultValue: 1},
				/**
				 * URL of the icon of the Chart scheme
				 */
				icon: {type: "sap.ui.core.URI", defaultValue: null},
				/**
				 * Key of {@link sap.gantt.config.Mode}
				 */
				modeKey: {type: "string", defaultValue: sap.gantt.config.DEFAULT_MODE_KEY},
				/**
				 * Decides the background color of the row in the chart scheme
				 */
				backgroundColor: {type: "string", defaultValue: null},
				/**
				 * Array of the key of {@link sap.gantt.config.Shape}
				 */
				shapeKeys: {type: "array", defaultValue: []}
			}
		}
	});

	return ChartScheme;
}, true);
}; // end of sap/gantt/config/ChartScheme.js
if ( !jQuery.sap.isDeclared('sap.gantt.config.ColumnAttribute') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.config.ColumnAttribute'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/gantt/config/ColumnAttribute",[
	'jquery.sap.global', 'sap/ui/core/Element'
], function (jQuery, Element) {
	"use strict";
	
	/**
	 * Constructor for a new ColumnAttribute
	 *
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * Defines the column attribute which is used in the hierarchy column
	 * @extends sap.ui.core.Element
	 *
	 * @author SAP SE
	 * @version 1.36.8
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.config.ColumnAttribute
	 */
	var ColumnAttribute = Element.extend("sap.gantt.config.ColumnAttribute", /** @lends sap.gantt.config.ColumnAttribute.prototype */ {
		metadata: {
			properties: {
				/**
				 * Key of {@link sap.gantt.config.ObjectType}
				 */
				objectTypeKey: {type: "string", defaultValue: null},
				/**
				 * Attribute name of the column
				 */
				attribute: {type: "string", defaultValue: null}
			}
		}
	});

	return ColumnAttribute;
}, true);
}; // end of sap/gantt/config/ColumnAttribute.js
if ( !jQuery.sap.isDeclared('sap.gantt.config.ContainerLayout') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.config.ContainerLayout'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Orientation'); // unlisted dependency retained
sap.ui.define("sap/gantt/config/ContainerLayout",[
	'jquery.sap.global', 'sap/ui/core/Element', 'sap/ui/core/Orientation'
], function (jQuery, Element, Orientation) {
	"use strict";
	/**
	 * Creates and initializes a new container layout
	 *
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * Defines the container layout. The container layout determines the layout of a Gantt chart container such as the CSS size, orientation, toolbar, and tree table size. 
	 * @extends sap.ui.core.Element
	 *
	 * @author SAP SE
	 * @version 1.36.8
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.config.ContainerLayout
	 */
	var ContainerLayout = Element.extend("sap.gantt.config.ContainerLayout", /** @lends sap.gantt.config.ContainerLayout.prototype */ {
		metadata: {
			properties: {
				/**
				 * Unique key of the container layout
				 */
				key: {type: "string", defaultValue: sap.gantt.config.DEFAULT_CONTAINER_SINGLE_LAYOUT_KEY},
				/*
				 * Description of the container layout
				 */
				text: {type: "string", defaultValue: sap.ui.getCore().getLibraryResourceBundle("sap.gantt").getText("XLST_SINGLE_LAYOUT")},
				/**
				 * Orientation of the Gantt chart container. See {@link sap.ui.core.Oritentation}
				 */
				orientation: {type: "sap.ui.core.Orientation", defaultValue: Orientation.Vertical},
				/**
				 * Active mode key. See {@link sap.gantt.config.Mode}
				 */
				activeModeKey: {type: "string", defaultValue: sap.gantt.config.DEFAULT_MODE_KEY},
				/**
				 * Toolbar scheme key. See {@link sap.gantt.config.ToolbarScheme}
				 */
				toolbarSchemeKey: {type: "string", defaultValue: sap.gantt.config.DEFAULT_CONTAINER_TOOLBAR_SCHEME_KEY},
				/**
				 * CSS size of the selection panel. See {@link sap.ui.core.CSSSize}
				 */
				selectionPanelSize: {type: "sap.ui.core.CSSSize", defaultValue: "30%"},
				/**
				 * Array of the Gantt chart layout. See {@link sap.gantt.config.GanttChartLayout}
				 */
				ganttChartLayouts: {type: "array", defaultValue: []}
			}
		}
	});
	
	return ContainerLayout;
}, true);
}; // end of sap/gantt/config/ContainerLayout.js
if ( !jQuery.sap.isDeclared('sap.gantt.config.ExpandChart') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.config.ExpandChart'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/gantt/config/ExpandChart",[
	'jquery.sap.global', 'sap/ui/core/Element'
], function (jQuery, Element) {
	"use strict";
	/**
	 * Creates and initializes a new expand chart
	 *
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * Defines the expand chart which is used by {@link sap.gantt.config.ExpandChartGroup}.
	 * @extends sap.ui.core.Element
	 *
	 * @author SAP SE
	 * @version 1.36.8
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.config.ExpandChart
	 */
	var ExpandChart = Element.extend("sap.gantt.config.ExpandChart", /** @lends sap.gantt.config.ExpandChart.prototype */ {
		
		metadata: {
			properties: {
				/**
				 * URL of the icon of the expand chart
				 */
				icon: {type: "sap.ui.core.URI", defaultValue: null},
				/**
				 * Specifies whether the action is to expand or to collapse a row in the chart.
				 */
				isExpand: {type: "boolean", defaultValue: null},
				/**
				 * Array of key of {@link sap.gantt.config.ChartScheme}
				 */
				chartSchemeKeys: {type: "array", defaultValue: []}
			}
		}
	});

/*	ExpandChart.prototype.init = function () {
		this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.gantt");
		this.setExpandTooltip(this._oRb.getText("TLTP_SHOW_DETAIL"));
		this.setCollapseTooltip(this._oRb.getText("TLTP_HIDE_DETAIL"));
	};*/

	return ExpandChart;
}, true);

}; // end of sap/gantt/config/ExpandChart.js
if ( !jQuery.sap.isDeclared('sap.gantt.config.GanttChartLayout') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.config.GanttChartLayout'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/gantt/config/GanttChartLayout",[
	'jquery.sap.global', 'sap/ui/core/Element'
], function (jQuery, Element) {
	"use strict";
	/**
	 * Creates and initializes a new Gantt chart layout
	 *
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * Defines the Gantt chart layout. This includes but is not limited to the CSS size, mode, and hierarchy of the Gantt chart.
	 * @extends sap.ui.core.Element
	 *
	 * @author SAP SE
	 * @version 1.36.8
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.config.GanttChartLayout
	 */
	var GanttChartLayout = Element.extend("sap.gantt.config.GanttChartLayout", /** @lends sap.gantt.config.GanttChartLayout.prototype */ {
		metadata: {
			properties: {
				/**
				 *CSS Size of the Gantt chart. See {@link sap.ui.core.CSSSize}
				 */
				ganttChartSize: {type: "sap.ui.core.CSSSize", defaultValue: null},
				/**
				 * Key of the mode. See {@link sap.gantt.config.Mode}
				 */
				activeModeKey: {type: "string", defaultValue: sap.gantt.config.DEFAULT_MODE_KEY},
				/**
				 * Key of the hierarchy. See {@link sap.gantt.config.Hierarchy}
				 */
				hierarchyKey: {type: "string", defaultValue: sap.gantt.config.DEFAULT_HIERARCHY_KEY}
			}
		}
	});
	
	return GanttChartLayout;
}, true);
}; // end of sap/gantt/config/GanttChartLayout.js
if ( !jQuery.sap.isDeclared('sap.gantt.config.Hierarchy') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.config.Hierarchy'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/gantt/config/Hierarchy",[
	'jquery.sap.global', 'sap/ui/core/Element'
], function (jQuery, Element) {
	"use strict";
	/**
	 * Creates and initializes a new hierarchy
	 *
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * Defines the hierarchy in the Gantt chart. The hierarchy is used for building the tree table in {@link sap.gantt.GanttChartWithTable}.
	 * @extends sap.ui.core.Element
	 *
	 * @author SAP SE
	 * @version 1.36.8
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.config.Hierarchy
	 */
	var Hierarchy = Element.extend("sap.gantt.config.Hierarchy", /** @lends sap.gantt.config.Hierarchy.prototype */ {
		metadata: {
			properties: {
				/**
				 * Unique key of the hierarchy
				 */
				key: {type: "string", defaultValue: sap.gantt.config.DEFAULT_HIERARCHY_KEY},
				/**
				 * Description of the hierarchy
				 */
				text: {type: "string", defaultValue: "Default Hierarchy"},
				/**
				 * Key of {@link sap.gantt.config.Mode}
				 */
				activeModeKey: {type: "string", defaultValue: sap.gantt.config.DEFAULT_MODE_KEY},
				/**
				 * Key of {@link sap.gantt.config.ToolbarScheme}
				 */
				toolbarSchemeKey: {type: "string", defaultValue: sap.gantt.config.DEFAULT_GANTTCHART_TOOLBAR_SCHEME_KEY},
				/**
				 * Columns of the hierarchy. Array of {@link sap.gantt.config.HierarchyColumn}
				 */
				columns: {type: "array"},
				/**
				 * expandedLevels determines how the tree table is initially expanded.
				 * This property is a two-dimensional array containing object types of row data. Only rows with data of 
				 * the specified object types are expanded. Each child array represents a specific level in the hierarchy 
				 * with the first child array representing the first level and so forth. For example, if 
				 * this property is set to [["02", "03"], ["05"]], rows containing data of object types 02 or 03 in the 
				 * first level and rows containing data of object type 05 in the second level are expanded.
				 */
				expandedLevels: {type: "array"}
			}
		}
	});
	Hierarchy.prototype.init = function(){
		this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.gantt");
		this.setText(this._oRb.getText("XLST_DEFAULT_HIE"));
	}; 
	
	return Hierarchy;
}, true);
}; // end of sap/gantt/config/Hierarchy.js
if ( !jQuery.sap.isDeclared('sap.gantt.config.HierarchyColumn') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.config.HierarchyColumn'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/gantt/config/HierarchyColumn",[
	'jquery.sap.global', 'sap/ui/core/Element'
], function (jQuery, Element) {
	"use strict";
	/**
	 * Creates and initializes a new hierarchy column
	 *
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * Defines the column attribute which is used in the hierarchy column
	 * @extends sap.ui.core.Element
	 *
	 * @author SAP SE
	 * @version 1.36.8
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.config.HierarchyColumn
	 */
	var HierarchyColumn = Element.extend("sap.gantt.config.HierarchyColumn", /** @lends sap.gantt.config.HierarchyColumn.prototype */ {
		metadata: {
			properties: {
				/**
				 * Unique key of the hierarchy column
				 */
				key: {type: "string", defaultValue: null},
				/**
				 * Title is used as the title of the column header in the tree table
				 */
				title: {type: "string", defaultValue: null},
				/**
				 * Content type of the column
				 */
				contentType: {type: "string", defaultValue: null},
				/**
				 * Specifies the attribute by which the tree table sorts items in the column
				 */
				sortAttribute: {type: "string", defaultValue: null},
				/**
				 * Specifies the attribute by which the tree table filter items in the column
				 */
				filterAttribute: {type: "string", defaultValue: null},
				/**
				 * Attribute
				 */
				attribute: {type: "string", defaultValue: null}, // optional.
				/**
				 * Attributes. Array of {@link sap.gantt.config.ColumnAttribute}
				 */
				attributes: {type: "array", defaultValue: []}, //optional. array of objects. new file columnAttribute to describe object: object type, attribute
				/**
				 * Column Width
				 */
				width: {type: "sap.ui.core.CSSSize"}
			}
		}
	});

	return HierarchyColumn;
}, true);
}; // end of sap/gantt/config/HierarchyColumn.js
if ( !jQuery.sap.isDeclared('sap.gantt.config.Locale') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.config.Locale'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/gantt/config/Locale",['jquery.sap.global', 'sap/ui/core/Element'
], function (jQuery, Element) {
	"use strict";
	/**
	 * Creates and initializes a new Locale
	 *
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * The locale control is used for converting the UTC date time to your local date time
	 * @extends sap.ui.core.Element
	 *
	 * @author SAP SE
	 * @version 1.36.8
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.config.Locale
	 */
	var Locale = Element.extend("sap.gantt.config.Locale", /** @lends sap.gantt.config.Locale.prototype */ {
		metadata: {
			properties: {
				/**
				 * User time zone
				 */
				timeZone: {type: "string", defaultValue: "UTC"},
				/**
				 * Gap value to the UTC time in the format hhmmss
				 */
				utcdiff: {type: "string", defaultValue: "000000"},
				/**
				 * Sign of the gap to the UTC time. Two valid values: "+" or "-".
				 */
				utcsign: {type: "string", defaultValue: "+"},
				/**
				 * Day-light saving time periods. Array of {@link sap.gantt.config.TimeHorizon}
				 */
				dstHorizons: {type: "array", defaultValue: []}	// dst: day-light saving
				// other locale info like langu, dateFormat, timeFormat and numberFormat, please use UI5 standard configuration object.
			}
		}
	});
	
	return Locale;
}, true);
}; // end of sap/gantt/config/Locale.js
if ( !jQuery.sap.isDeclared('sap.gantt.config.Mode') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.config.Mode'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/gantt/config/Mode",[
	'jquery.sap.global', 'sap/ui/core/Element'
], function (jQuery, Element) {
	"use strict";
	/**
	 * Creates and initializes a new mode
	 *
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * The Mode control specifies the mode which is used in GanttChart and Shape.
	 * Mode enables GanttChart to show the same objects in different views.
	 * @extends sap.ui.core.Element
	 *
	 * @author SAP SE
	 * @version 1.36.8
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.config.Mode
	 */
	var Mode = Element.extend("sap.gantt.config.Mode", /** @lends sap.gantt.config.Mode.prototype */ {
		metadata: {
			properties: {
				/**
				 * Unique key of the mode
				 */
				key: {type: "string", defaultValue: null},
				/**
				 * Description of the mode
				 */
				text: {type: "string", defaultValue: null},
				/**
				 * URL of the icon of the mode
				 */
				icon: {type: "sap.ui.core.URI", defaultValue: null},
				/**
				 * URL of the active icon of the mode
				 */
				activeIcon: {type: "sap.ui.core.URL"}
			}
		}
	});
	
	return Mode;
}, true);
}; // end of sap/gantt/config/Mode.js
if ( !jQuery.sap.isDeclared('sap.gantt.config.ObjectType') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.config.ObjectType'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/gantt/config/ObjectType",[
	'jquery.sap.global', 'sap/ui/core/Element'
], function (jQuery, Element) {
	"use strict";
	/**
	 * Creates and initializes a new object type
	 *
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * Define the ObjectType which is used in GanttChart
	 * @extends sap.ui.core.Element
	 *
	 * @author SAP SE
	 * @version 1.36.8
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.config.ObjectType
	 */
	var ObjectType = Element.extend("sap.gantt.config.ObjectType", /** @lends sap.gantt.config.ObjectType.prototype */ {
		metadata: {
			properties: {
				/**
				 * Unique Key of the object type
				 */
				key: {type: "string", defaultValue: null},
				/**
				 * Description of the object type
				 */
				description: {type: "string", defaultValue: null},
				/**
				 * Specifies the chart scheme in which the the object type can be shown
				 * Key of {@link sap.gantt.config.ChartScheme}
				 */
				mainChartSchemeKey: {type: "string", defaultValue: sap.gantt.config.DEFAULT_MAIN_CHART_SCHEME_KEY},
				/**
				 * Specifies the expanded chart scheme in which the the object type can be shown
				 * Array of keys of {@link sap.gantt.config.ChartScheme}
				 */
				expandedChartSchemeKeys: {type: "array", defaultValue: []}
			}
		}
	});

	return ObjectType;
}, true);
}; // end of sap/gantt/config/ObjectType.js
if ( !jQuery.sap.isDeclared('sap.gantt.config.Shape') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.config.Shape'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/gantt/config/Shape",[
	'jquery.sap.global', 'sap/ui/core/Element'
], function (jQuery, Element) {
	"use strict";
	
	/**
	 * Creates and initializes a shape configuration.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given 
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class
	 * Configuration object for Shape.
	 * 
	 * <p>
	 * This configuration specifies the Shape class used to represent specific data and how the Shape class is constructed.
	 * Some properties of Shape can be directly configured by setting property <code>shapeProperties</code>.
	 * 
	 * A Shape class may come from the shape library provided in namespace <code>sap.gantt.shape</code> or from any extended shape you've created.
	 * Shape classes are instantiated according to the structure described in this configuration class inside <code>sap.gantt.Gantt</code>.
	 * The aggregation structure is described by properties <code>groupAggregation</code>, <code>clippathAggregation</code>, and <code>selectedClassName</code>.
	 * 
	 * The root shape is called 'top shape'. Some properties are only top shape relevant such as <code>key</code>, <code>level</code>, and <code>selectedClassName</code>.
	 * </p>
	 * 
	 * @extends sap.ui.core.Element
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.config.Shape
	 */
	var Shape = Element.extend("sap.gantt.config.Shape", /** @lends sap.gantt.config.Shape.prototype */ {
		metadata: {
			properties: {
				/**
				 * Primary key of the shape configuration. This property can be referenced from other configuration object, such as
				 * <code>sap.gantt.config.ChartScheme</code>. This property is only relevant to top Shape configuration.
				 */
				key: {type: "string", defaultValue: null},
				
				/**
				 * Specifies the shape class to be used for data representation. Both shapes from <code>sap.gantt.shape</code> and extended
				 * shapes can be used here.
				 */
				shapeClassName: {type: "string", defaultValue: null},
				
				/**
				 * Specifies the name of the data name to be represented. This is for the top shape only.
				 */
				shapeDataName: {type: "string", defaultValue: null},
				
				/**
				 * Specifies the key of modes in which the shape is drawn. If you leave this property empty, the shape is drawn in all modes.
				 */
				modeKeys: {type: "array", defaultValue: []},
				
				/**
				 * Level of shapes. Shapes closer to the top shape have a smaller value in level. This property is only relevant to top shape configuration
				 * (non aggregated shape configuration).
				 */
				level: {type: "string", defaultValue: null},
				
				/**
				 * Pre-configured values for Shape. The values specified in this object have a higher priority than values coded in the Shape class.
				 */
				shapeProperties: {type: "object", defaultValue: sap.gantt.config.DEFAULT_EMPTY_OBJECT},
				
				/**
				 * Aggregation shapes for sap.gantt.shape.Group class.
				 * This aggregation is only valid for shape classes with tag='g'.
				 */
				groupAggregation: {type: "array"},
				
				
				/**
				 * Aggregation path classes for sap.gantt.shape.Clippath class.
				 * This aggregation is only valid for shape classes with tag='clippath'. 
				 */
				clippathAggregation: {type: "array"},
				
				/**
				 * Aggregation class for drawing selection of this shape. If nothing is assigned to this property, <code>sap.gantt.Gantt</code>
				 * instantiates the default selected shape class. 
				 */
				selectedClassName: {type: "string", defaultValue: null},
				
				/**
				 * Specifies the legend of the shape.
				 */
				legend: {type: "string"}
			}
		}
	});
	
	/**
	 * Checks if a property is pre-configured in <code>shapeProperties</code>.
	 * 
	 * <p>This method together with method <code>getShapeProperty()</code> is frequently used in <code>sap.gantt.shape</code> classes 
	 * to make sure the principle of 'configuration first' is applied.
	 * .</p>
	 * 
	 * @public
	 * @param {string} sPropertyName - Name of the shape property.
	 * @returns {boolean} - Whether the property is pre-configured.
	 */
	Shape.prototype.hasShapeProperty = function (sPropertyName){
		return  this.getShapeProperties().hasOwnProperty(sPropertyName);
	};
	
	/**
	 * Get a pre-configured property from <code>shapeProperties</code>.
	 * 
	 * <p>This method together with method <code>hasShapeProperty</code> is frequently used in <code>sap.gantt.shape</code> classes 
	 * to make sure the principle of 'configuration first' is applied.
	 * .</p>
	 * 
	 * @public
	 * @param {string} sPropertyName - Name of the shape property.
	 * @returns {string} - Pre-configured value.
	 */
	Shape.prototype.getShapeProperty = function (sPropertyName) {
		return  this.getShapeProperties()[sPropertyName];
	};
	
	return Shape;
}, true);
}; // end of sap/gantt/config/Shape.js
if ( !jQuery.sap.isDeclared('sap.gantt.config.TimeAxis') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.config.TimeAxis'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/gantt/config/TimeAxis",[
	'jquery.sap.global', 'sap/ui/core/Element'
], function (jQuery, Element) {
	"use strict";
	/**
	 * Creates and initializes a new time axis
	 *
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * Defines the time axis of a Gantt chart
	 * @extends sap.ui.core.Element
	 *
	 * @author SAP SE
	 * @version 1.36.8
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.config.TimeAxis
	 */
	var TimeAxis = Element.extend("sap.gantt.config.TimeAxis", /** @lends sap.gantt.config.TimeAxis.prototype */ {
		metadata: {
			library: "sap.gantt",
			properties: {
				/**
				 * Whole time horizon of the Gantt chart
				 */
				planHorizon: {type: "sap.gantt.config.TimeHorizon", defaultValue: sap.gantt.config.DEFAULT_PLAN_HORIZON},
				/**
				 * Time horizon which is displayed after the Gantt chart is initialized
				 */
				initHorizon: {type: "sap.gantt.config.TimeHorizon", defaultValue: sap.gantt.config.DEFAULT_INIT_HORIZON},
				/**
				 * Zoom strategy of the Gantt chart
				 * See {@link sap.gantt.config.DEFAULT_TIME_ZOOM_STRATEGY} as example
				 */
				zoomStrategy: {type: "object", defaultValue: sap.gantt.config.DEFAULT_TIME_ZOOM_STRATEGY},
				/**
				 * Initial granularity of the time axis 
				 */
				granularity: {type: "string", defaultValue: "4day"},
				/**
				 * Granularity when the Gantt chart is zoomed in to the maximum
				 */
				finestGranularity: {type: "string", defaultValue: "5min"},
				/**
				 * Granularity when the GanttChart is zoomed out to the minimum
				 */
				coarsestGranularity: {type: "string", defaultValue: "1month"},
				/**
				 * Zoom rate of the Gantt chart
				 */
				rate: {type: "float", defaultValue: 1}
			}
		}
	});
	
	return TimeAxis;
}, true);
}; // end of sap/gantt/config/TimeAxis.js
if ( !jQuery.sap.isDeclared('sap.gantt.config.ToolbarGroup') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.config.ToolbarGroup'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
jQuery.sap.require('sap.m.OverflowToolbarPriority'); // unlisted dependency retained
sap.ui.define("sap/gantt/config/ToolbarGroup",[
	'jquery.sap.global', 'sap/ui/core/Element', "sap/m/OverflowToolbarPriority"
], function (jQuery, Element, OverflowToolbarPriority) {
	"use strict";
	/**
	 * Creates and initializes a new toolbar group
	 *
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * Defines the toolbar group. Toolbar groups enables you to categorize related toolbar items. For example, you can 
	 * put all settings-related toolbar items in the Setting group.
	 * @extends sap.ui.core.Element
	 *
	 * @author SAP SE
	 * @version 1.36.8
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.config.ToolbarGroup
	 */
	var ToolbarGroup = Element.extend("sap.gantt.config.ToolbarGroup", /** @lends sap.gantt.config.ToolbarGroup.prototype */ {
		metadata: {
			properties: {
				/**
				 * Specifies the position of the toolbar group. Note that all toolbar groups must be put into the Gantt chart toolbar.
				 */
				position: {type: "string", defaultValue: null},
				/**
				 * Overflow priority. See {@link sap.m.OverflowToolbarPriority}
				 */
				overflowPriority: {type: "sap.m.OverflowToolbarPriority", defaultValue: OverflowToolbarPriority.Low}
			}
		}
	});
	
	return ToolbarGroup;
}, true);
}; // end of sap/gantt/config/ToolbarGroup.js
if ( !jQuery.sap.isDeclared('sap.gantt.config.ToolbarScheme') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.config.ToolbarScheme'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/gantt/config/ToolbarScheme",[
	'jquery.sap.global', 'sap/ui/core/Element'
], function (jQuery, Element) {
	"use strict";
	/**
	 * Creates and initializes a new toolbar scheme
	 *
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * Defines the Toolbar scheme
	 * @extends sap.ui.core.Element
	 *
	 * @author SAP SE
	 * @version 1.36.8
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.config.ToolbarScheme
	 */
	var ToolbarScheme = Element.extend("sap.gantt.config.ToolbarScheme", /** @lends sap.gantt.config.ToolbarScheme.prototype */ {
		metadata: {
			properties: {
				/**
				 * Unique key of the toolbar scheme
				 */
				key: {type: "string", defaultValue: null},
				/**
				 * Toolbar group for selecting a source
				 */
				sourceSelect: {type: "sap.gantt.config.ToolbarGroup", defaultValue: null},
				/**
				 * Toolbar group for the Gantt chart layout
				 */
				layout: {type: "sap.gantt.config.LayoutGroup", defaultValue: null},
				/**
				 * Toolbar group for custom toolbar items
				 */
				customToolbarItems: {type: "sap.gantt.config.ToolbarGroup", defaultValue: null},
				/**
				 * Toolbar group for expanding a chart
				 */
				expandChart: {type: "sap.gantt.config.ExpandChartGroup", defaultValue: null},
				/**
				 * Toolbar group for expanding nodes of a tree table
				 */
				expandTree: {type: "sap.gantt.config.ToolbarGroup", defaultValue: null},
				/**
				 * Toolbar group for the time zoom
				 */
				timeZoom: {type: "sap.gantt.config.ToolbarGroup", defaultValue: null},
				/**
				 * Toolbar group for legend
				 */
				legend: {type: "sap.gantt.config.ToolbarGroup", defaultValue: null},
				/**
				 * See {@link sap.gantt.config.SettingGroup}
				 */
				settings: {type: "sap.gantt.config.SettingGroup", defaultValue: null},
				/**
				 * See {@link sap.gantt.config.ModeGroup}
				 */
				mode: {type: "sap.gantt.config.ModeGroup", defaultValue: null},
				/**
				 * Toolbar design. See {@link sap.m.ToolbarDesign}
				 */
				toolbarDesign: {type: "string", defaultValue: sap.m.ToolbarDesign.Auto}
			}
		}
	});
	
	return ToolbarScheme;
}, true);
}; // end of sap/gantt/config/ToolbarScheme.js
if ( !jQuery.sap.isDeclared('sap.gantt.control.AssociateContainer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.control.AssociateContainer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
sap.ui.define("sap/gantt/control/AssociateContainer",[
	"sap/ui/core/Control", "sap/ui/core/Core"
], function (Control, Core) {
	"use strict";
	var AssociateContainer = Control.extend("sap.gantt.control.AssociateContainer", {
		metadata: {
			properties: {
				/**
				 * for block DOM element only
				 */
				enableRootDiv: {type: "boolean", defaultValue: false}
			},
			associations: {
				/**
				 * for block DOM element
				 */
				content: {type: "sap.ui.core.Control", multiple: false}
			}
		}
	});

	AssociateContainer.prototype.setContent = function (vContent) {
		this.setAssociation("content", vContent);
		if (vContent) {
			var oContent = typeof (vContent) === "string" ? Core.byId(vContent) : vContent;
			oContent._oAC = this;
		}
		return this;
	};

	return AssociateContainer;
}, true);
}; // end of sap/gantt/control/AssociateContainer.js
if ( !jQuery.sap.isDeclared('sap.gantt.control.AssociateContainerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.control.AssociateContainerRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/control/AssociateContainerRenderer",[], function () {
	"use strict";

	var AssociateContainerRenderer = {};

	AssociateContainerRenderer.render = function(oRenderManager, oControl) {
		
		if (oControl.getEnableRootDiv()) {
			oRenderManager.write("<div");
			oRenderManager.writeControlData(oControl);
			oRenderManager.addClass("sapGanttChartLayoutBG");
			oRenderManager.writeClasses();
			oRenderManager.addStyle("width", "100%");
			oRenderManager.addStyle("height", "100%");
			oRenderManager.addStyle("overFlow", "hidden");
			oRenderManager.writeStyles();
			oRenderManager.write(">");
		}
		oRenderManager.renderControl(sap.ui.getCore().byId(oControl.getContent()));
		if (oControl.getEnableRootDiv()) {
			oRenderManager.write("</div>");
		}
	};

	return AssociateContainerRenderer;
}, /* bExport= */ true);
}; // end of sap/gantt/control/AssociateContainerRenderer.js
if ( !jQuery.sap.isDeclared('sap.gantt.control.Cell') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.control.Cell'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
sap.ui.define("sap/gantt/control/Cell",[
	"sap/ui/core/Control", "sap/m/Label"
], function (Control, Label) {
	"use strict";

	/**
	 * Creates and initializes a new Cell class.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * Cell acts as an abstract class. You can use this class to define a placeholder for your application 
	 * to provide the specific implementation. Applications can fill the cell content by using cellCallback
	 * which returns instances such as Icon, Text, or Text input.
	 * 
	 * You can also use this class to define column specific properties that are applied when rendering a list.
	 * @extends sap.ui.core.Control
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.control.Cell
	 */
	var Cell = Control.extend("sap.gantt.control.Cell",/** @lends sap.gantt.control.Cell.prototype */ {
		metadata : {
			properties : {
				/**
				 * Cell callback function that returns the specific control instance which is rendered in a table.
				 */
				cellCallback : {type : "object"},
				/**
				 * Column configuration object.
				 */
				columnConfig: {type: "sap.gantt.config.HierarchyColumn"}
			}
		}
	});

	Cell.prototype.setColumnConfig = function (oColumnConfig) {
		this.setProperty("columnConfig", oColumnConfig);
		if (oColumnConfig) {
			var aAttributes = oColumnConfig.getAttributes();
			if (aAttributes && aAttributes.length > 0) {
				this._oMapAttributes = {};
				aAttributes.forEach(function (oAttribute) {
					this._oMapAttributes[oAttribute.getObjectTypeKey()] = oAttribute.getAttribute();
				}.bind(this));
			}
		}
		return this;
	};

	/**
	 * Returns a control instance provided by cellCallback. If cellCallback does not provides the control instance, this
	 * function returns Text by default. This indicates the function is overwritten by your application.
	 * 
	 * @param {object} oColumnConfig Column configuration object
	 * @return {sap.ui.core.Control} Control instance is rendered in Table/TreeTable
	 */
	Cell.prototype.createCellContent = function (oColumnConfig) {
		var oCellCallback = this.getCellCallback();
		if (oCellCallback && oCellCallback.createCellContent) {
			return oCellCallback.createCellContent(oColumnConfig);
		}
		return new Label();
	};

	/**
	 * To be overwritten by your application. 
	 * The oContext argument is used for some binding feature and editing feature in a table.
	 * 
	 * @param {sap.ui.core.Control} oCellContent Instance of Cell content
	 * @param {sap.ui.model.Context} oContext Cell binding context
	 * @param {string} sAttributeName Key path of the property name
	 * @param {string} sObjectType Object type
	 * @param {sap.gantt.config.HierarchyColumn} oColumnConfig Column of the configuration object
	 */
	Cell.prototype.updateCellContent = function (oCellContent, oContext, sAttributeName, sObjectType, oColumnConfig) {
		var oCellCallback = this.getCellCallback();
		if (oCellCallback && oCellCallback.updateCellContent) {
			oCellCallback.updateCellContent(oCellContent, oContext, sAttributeName, sObjectType, oColumnConfig);
		} else {
			oCellContent.setText(oContext.getProperty(sAttributeName));
		}
	};

	/**
	 * Updates the table cell instance when scrolling or when SAPUI5 needs to update.
	 * 
	 * This function is called by a table.
	 * oTable.updateTableContent() -> _updateBindingContext() -> _updateRowBindingContext -> _updateCellBindingContext -> oCell._updateTableCell
	 * 
	 * @private
	 * @param {sap.ui.core.Control} oCell Cell control
	 * @param {sap.ui.model.Context} oContext Cell context
	 * @param {DomRef} $tdDomRef jQuery object for <TD>
	 * @param {int} iAbsoluteRowIndex Absolute row index
	 */
	Cell.prototype._updateTableCell = function (oCell, oContext, $tdDomRef, iAbsoluteRowIndex) {
		if (!oContext) {
			return;
		}

		this._oContext = oContext;
		var sObjectType = oContext.getProperty("type");

		if (this._oMapAttributes) { // attribute name per object type
			this.updateCellContent(this._oAttributeControl, oContext, this._oMapAttributes[sObjectType], sObjectType, this.getColumnConfig());
		} else {	// single attribute name
			this.updateCellContent(this._oAttributeControl, oContext, this.getColumnConfig().getAttribute(), sObjectType, this.getColumnConfig());
		}
		// if this.invalidate() is needed here, remember only trigger it when the value changes. Otherwise rendering loop won't stop.
	};

	/**
	 * Creates Cell content if needed or returns Cell content if it is created.
	 * 
	 * @return {sap.ui.core.Control} Content to render in the table
	 */
	Cell.prototype.getContentToRender = function () {
		if (!this._oAttributeControl) {
			this._oAttributeControl = this.createCellContent(this.getColumnConfig());
		}
		return this._oAttributeControl;
	};

	return Cell;
}, true);

}; // end of sap/gantt/control/Cell.js
if ( !jQuery.sap.isDeclared('sap.gantt.control.CellRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

jQuery.sap.declare('sap.gantt.control.CellRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/control/CellRenderer",[], function () {
	"use strict";

	/**
	 * Cell renderer.
	 * @namespace
	 */
	var CellRenderer = {};
	
	CellRenderer.render = function(oRenderManager, oControl) {
		var oContentToRender = oControl.getContentToRender();
		if (oContentToRender){
			oRenderManager.renderControl(oContentToRender);
		}
	};

	return CellRenderer;
}, /* bExport= */ true);

}; // end of sap/gantt/control/CellRenderer.js
if ( !jQuery.sap.isDeclared('sap.gantt.control.ToolbarRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

jQuery.sap.declare('sap.gantt.control.ToolbarRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/control/ToolbarRenderer",[], function () {
	"use strict";

	/**
	 * Gantt Chart Toolbar renderer.
	 * @namespace
	 */
	var ToolbarRenderer = {};

	ToolbarRenderer.render = function(oRm, oToolbar) {
		var iNumOfToolbarItems = oToolbar.getAllToolbarItems().length;
		oRm.write("<div");
		oRm.writeControlData(oToolbar);
		oRm.addClass("sapGanttToolbar");
		if (iNumOfToolbarItems == 0) {
			oRm.addClass("sapGanttSkipToolbar");
		}
		oRm.writeClasses();
		oRm.write(">");
		oRm.renderControl(oToolbar.getAggregation("_toolbar"));
		oRm.write("</div>");

	};

	return ToolbarRenderer;
}, /* bExport= */ true);

}; // end of sap/gantt/control/ToolbarRenderer.js
if ( !jQuery.sap.isDeclared('sap.gantt.def.DefBase') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.def.DefBase'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/gantt/def/DefBase",[
	"sap/ui/core/Element"
], function (Element) {
	"use strict";
	
	/**
	 * Creates and initializes a new SVG graphic object for reuse.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * Base class for all SVG definitions.
	 * 
	 * <p>
	 * SVG uses the 'defs' tag to represent graphic objects that can be reused at a later time.
	 * See {@link http://www.w3.org/TR/SVG/struct.html#DefsElement 'defs' in SVG}.
	 * Currently <code>sap.gantt</code> provides defs including the following definition tags:
	 * 'pattern', 'gradient', and 'filter'. Applications can also extend this base class to support more functionality.
	 * </p>
	 * 
	 * @extends sap.ui.core.Element
	 * @abstract
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.def.DefBase
	 */
	var DefBase = Element.extend("sap.gantt.def.DefBase", /** @lends sap.gantt.def.DefBase.prototype */ {
		metadata : {
			"abstract": true,
			properties: {
				
				/**
				 * Definition string. Subclasses can implement their own getters of this property to override the one in this class.
				 */
				defString: {type: "string", defaultValue: null},
				
				/**
				 * Referencing string. The default implementation is the referencing ID wrapped by 'url(#)'.
				 */
				refString: {type: "string", defaultValue: null}
			}
		}
	});
	
	DefBase.prototype.getRefString = function () {
		var sDefaultRefString = this.getProperty("refString");
		return sDefaultRefString ? sDefaultRefString : "url(#" +  this.generateRefId() + ")";
	};
	
	/**
	 * Provides a referencing ID. The default implementation is to use control ID as the referencing ID.
	 * 
	 * @see sap.ui.table.Table.getSelectedIndex
	 * 
	 * @return {string} Referencing ID.
	 * @public
	 */
	DefBase.prototype.generateRefId = function () {
		return this.getId();
	};

	return DefBase;
}, true);

}; // end of sap/gantt/def/DefBase.js
if ( !jQuery.sap.isDeclared('sap.gantt.def.SvgDefs') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.def.SvgDefs'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
sap.ui.define("sap/gantt/def/SvgDefs",[
	"sap/ui/base/ManagedObject"
], function (ManagedObject) {
	"use strict";

	/**
	 * SVG definition tag class.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * The class handles the container tag "defs" for all reusable SVG graphic definitions. It provides 
	 * interfaces for SVG definition strings and referencing strings. The parent class is responsible for 
	 * rendering the definition strings.
	 * 
	 * <p>
	 * SVG uses the 'defs' tag to represent graphic objects that are defined for reuse at a later time.
	 * See {@link http://www.w3.org/TR/SVG/struct.html#DefsElement 'defs' in SVG}.
	 * Currently <code>sap.gantt</code> provides defs including the following definition tags:
	 * 'pattern', 'gradient', and 'filter'. Applications can also extend this base class to support more functionality.
	 * </p>
	 * 
	 * @extends sap.ui.base.ManagedObject
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.def.SvgDef
	 */
	var SvgDefs = ManagedObject.extend("sap.gantt.def.SvgDefs", /** @lends sap.gantt.def.SvgDefs.prototype */{
		metadata: {
			aggregations: {
				
				/**
				 * SVG definition instances.
				 */
				defs: {type: "sap.gantt.def.DefBase", multiple: true, visibility: "public",
					singularName: "def", bindable: "bindable"}
			}
		}
	});

	/**
	 * Definition string of the SVG 'defs' tag.
	 * 
	 * @returns {string} - Definition string to be rendered by caller.
	 * @public
	 */
	SvgDefs.prototype.getDefString = function () {
		var sRetVal = "<defs id='" + this.getId() + "'>",
			aDefs = this.getDefs();
		
		if (aDefs && aDefs.length > 0) {
			aDefs.forEach(function(oDef, iIndex){
				sRetVal += oDef.getDefString();
			});
		}
		
		return sRetVal + "</defs>";
	};

	/**
	 * Definition data of the SVG 'def' tag. -- experimental
	 * 
	 * @returns {object} - Definition string to be rendered by caller.
	 * @private
	 */
	SvgDefs.prototype.getDefNode = function () {
		var oRetVal = {
			"id": this.getId(),
			"defNodes": []
		};
		var aDefs = this.getDefs();
		
		for (var i = 0; i < aDefs.length; i++){
			oRetVal.defNodes.push(aDefs[i].getDefNode());
		}
		return oRetVal;
	};

	return SvgDefs;
}, true);

}; // end of sap/gantt/def/SvgDefs.js
if ( !jQuery.sap.isDeclared('sap.gantt.def.cal.CalendarDefs') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.def.cal.CalendarDefs'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/def/cal/CalendarDefs",[
	"../SvgDefs"
], function (SvgDefs) {
	"use strict";
	
	/**
	 * Specific 'def' elements for the calendar.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class
	 * Calendar pattern definition. This class generates the 'defs' tag from the 'defs' aggregation.
	 *  
	 * <p>
	 * Calendar (for non-working hours) is a widely used graphic element in a Gantt chart. Calendar is considered to be highly reusable between different rows of  
	 * resources. A default implementation of patterns is provided. After calendars are rendered from def tags, shape <code>sap.gantt.shape.cal.Calendar</code> can be
	 * used to consume the calendar pattern definition.
	 * 
	 * This class is extended to provide a specific logic for generating referencing strings for calendar patterns.
	 * </p>
	 * 
	 * @extends sap.gantt.def.SvgDefs
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.def.cal.CalendarDefs
	 */
	var CalendarDefs = SvgDefs.extend("sap.gantt.def.cal.CalendarDefs", /** @lends sap.gantt.def.cal.CalendarDefs */ {});
	
	CalendarDefs.prototype.getRefString = function (calendarKey) {
		var sId = "";
		if (this.getParent() && this.getParent().getId()) {
			sId = this.getParent().getId();
		}
		return "url(#" + sId + "_" + calendarKey + ")";
	};
	
	return CalendarDefs;
}, true);

}; // end of sap/gantt/def/cal/CalendarDefs.js
if ( !jQuery.sap.isDeclared('sap.gantt.def.filter.MorphologyFilter') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.def.filter.MorphologyFilter'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/def/filter/MorphologyFilter",[
	"../DefBase"
], function (DefBase) {
	"use strict";

	/**
	 * Creates and initializes a morphology filter defined for later reuse.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * This filter is a combination of several filters. The main one is morphology.
	 * 
	 * <p>
	 * The purpose of this filter is to generate a white outline of a target shape when the target is overlapping with other shapes. In general this filter is recommended to be used only on 'text' and
	 * 'image' whose outline is very hard to determine. For regular SVG tags like 'rect', 'circle' etc, use the 'stroke' attribute instead if possible. This is because filters in general have worse performance.<br/>
	 * See {@link http://www.w3.org/TR/SVG/filters.html Filter Effects in SVG 1.1 specification} for detail.<br/>
	 * Tags used in this filter are:
	 * <ul>
	 * 	<li>'femorphology': Use operator 'dilate' to make a fatter shape of the source shape. See {@link http://www.w3.org/TR/SVG/filters.html#feMorphologyElement Tag 'femorphology' in SVG 1.1 specification} for detail.</li>
	 * 	<li>'feColorMatrix': Fills fatter shape. The default matrix turns every color into white. See {@link http://www.w3.org/TR/SVG/filters.html#feColorMatrixElement Tag 'feColorMatrix' in SVG 1.1 specification} for detail.</li>
	 * 	<li>'feMerge': Merges the source shape into the fatter shape to produce an outline effect on the target shape. See {@link http://www.w3.org/TR/SVG/filters.html#feMergeElement Tag 'feMerge' in SVG 1.1 specification} for detail.</li>
	 * </ul>
	 * Effect of this filter is: <br/>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="8.8cm" viewBox="0 0 300 220" version="1.1">
	 * <rect x="1" y="1" width="298" height="218" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<defs><filter id="fm1"><feMorphology in="SourceAlpha" result="morphed" operator="dilate" radius="2,1"></feMorphology><feColorMatrix in="morphed" result="recolored" type="matrix" values="-1 0 0 0 1, 0 -1 0 0 1, 0 0 -1 0 1, 0 0 0 1 0"></feColorMatrix><feMerge><feMergeNode in="recolored"></feMergeNode><feMergeNode in="SourceGraphic"></feMergeNode></feMerge></filter>
	 * 	<filter id="fm2"><feMorphology in="SourceAlpha" result="morphed" operator="dilate" radius="2,1"></feMorphology><feColorMatrix in="morphed" result="recolored" type="matrix" values="-1 0 0 0 0, 0 -1 0 0 0, 0 0 -1 0 0, 0 0 0 1 0"></feColorMatrix><feMerge><feMergeNode in="recolored"></feMergeNode><feMergeNode in="SourceGraphic"></feMergeNode></feMerge></filter></defs>
	 * 	<rect x="1" y="1" width="298" height="150" fill="#222"/>
	 * 	<rect x="1" y="150" width="298" height="68" fill="#ddd"/>
	 * 	<path d="M 80,50 c 0,-50 80,-50 80,0 c 0,50 80,50 80,0" filter="url(#fm1)" stroke="#9E1F63" stroke-width="2" fill="none"/>
	 * 	<text x="20" y="130" filter="url(#fm1)" font-size="30" fill="#1C75BC">Can you see me?</text>
	 * 	<text x="25" y="195" filter="url(#fm2)" font-size="30" fill="#ddd">How about now?</text>
	 * </svg>
	 * </p>
	 * 
	 * @extends sap.gantt.def.DefBase
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.def.filter.MorphologyFilter
	 */
	var MorphologyFilter = DefBase.extend("sap.gantt.def.filter.MorphologyFilter", /** @lends sap.gantt.def.filter.MorphologyFilter.prototype */ {
		metadata: {
			properties: {
				
				/**
				 * Atrribute of SVG tag 'feMorphology'. See {@link http://www.w3.org/TR/SVG/filters.html#feMorphologyOperatorAttribute 'operator' attribute} for detail.
				 * Possible values are in {@link sap.gantt.def.filter.MorphologyOperator}.
				 */
				operator: {type: "string", defaultValue: sap.gantt.def.filter.MorphologyOperator.Dilate},
				
				/**
				 * Attribute of SVG tag 'feMorphology'. See {@link http://www.w3.org/TR/SVG/filters.html#feMorphologyRadiusAttribute 'radius' attribute} for detail.
				 */
				radius: {type: "string", defaultValue: "2,1"},
				
				/**
				 * Attribute of SVG tag 'feColorMatrix'. See {@link http://www.w3.org/TR/SVG/filters.html#feColorMatrixValuesAttribute 'value' attribute} for detail.
				 * Predefined values are in {@link sap.gantt.def.filter.ColorMatrixValue}. Advanced users can provide a customized matrix in string.
				 */
				colorMatrix: {type: "string", defaultValue: sap.gantt.def.filter.ColorMatrixValue.AllToWhite}
			}
		}
	});
	
	MorphologyFilter.prototype.getDefString = function(){
		return "<filter id='" + this.getId() + "'>" + 
			"<feMorphology in='SourceAlpha' result='morphed' operator='" + this.getOperator() +
			"' radius='" + this.getRadius() + "'/>" +
			"<feColorMatrix in='morphed' result='recolored' type='matrix' values='" + this.getColorMatrix() + "'/>" + 
			"<feMerge>" + 
				"<feMergeNode in='recolored'/>" + 
				"<feMergeNode in='SourceGraphic'/>" +
			"</feMerge>" +
		"</filter>";
	};

	return MorphologyFilter;
}, true);

}; // end of sap/gantt/def/filter/MorphologyFilter.js
if ( !jQuery.sap.isDeclared('sap.gantt.def.gradient.LinearGradient') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.def.gradient.LinearGradient'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/def/gradient/LinearGradient",[
	"../DefBase"
], function (DefBase) {
	"use strict";

	/**
	 * Creates and initializes a linear gradient defined for later reuse.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * Linear gradient defined by SVG tag 'linearGradient'. 
	 * 
	 * <p>
	 * See {@link http://www.w3.org/TR/SVG/pservers.html#LinearGradients Linear Gradient in SVG 1.1 specification} for detail.<br/>
	 * {@link http://www.w3.org/TR/SVG/images/pservers/lingrad01.svg Linear gradient sample in SVG specification 1.1}:<br/>
	 * <svg width="8cm" height="4cm" viewBox="0 0 800 400" version="1.1" xmlns="http://www.w3.org/2000/svg">
	 * <g><defs><linearGradient id="MyGradient"><stop offset="5%" stop-color="#F60" /><stop offset="95%" stop-color="#FF6" /></linearGradient></defs>
	 * <rect fill="none" stroke="blue" x="1" y="1" width="798" height="398"/>
	 * <rect fill="url(#MyGradient)" stroke="black" stroke-width="5" x="100" y="100" width="600" height="200"/></g>
	 * </svg>
	 * </p>
	 * 
	 * @extends sap.gantt.def.DefBase
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.def.gradient.LinearGradient
	 */
	var LinearGradient = DefBase.extend("sap.gantt.def.gradient.LinearGradient", /** @lends sap.gantt.def.gradient.LinearGradient.prototype */ {
		metadata : {
			properties: {
				
				/**
				 * Attribute 'x1' of SVG tag 'linearGradient'. See 
				 * {@link http://www.w3.org/TR/SVG/pservers.html#LinearGradientElementX1Attribute 'x1' attribute of 'linearGradient' element in SVG 1.1 specification} for detail.
				 */
				x1: {type: "string", defaultValue: "0"},
				
				/**
				 * Attribute 'y1' of SVG tag 'linearGradient'. See 
				 * {@link http://www.w3.org/TR/SVG/pservers.html#LinearGradientElementY1Attribute 'y1' attribute of 'linearGradient' element in SVG 1.1 specification} for detail.
				 */
				y1: {type: "string", defaultValue: "0"},
				
				/**
				 * Attribute 'x2' of SVG tag 'linearGradient'. See 
				 * {@link http://www.w3.org/TR/SVG/pservers.html#LinearGradientElementX2Attribute 'x2' attribute of 'linearGradient' element in SVG 1.1 specification} for detail.
				 */
				x2: {type: "string", defaultValue: "100"},
				
				/**
				 * Attribute 'y2' of SVG tag 'linearGradient'. See 
				 * {@link http://www.w3.org/TR/SVG/pservers.html#LinearGradientElementY2Attribute 'y2' attribute of 'linearGradient' element in SVG 1.1 specification} for detail.
				 */
				y2: {type: "string", defaultValue: "15"}
			},
			aggregations:{
				
				/**
				 * 'stop' elements in the 'linearGradient' element. See {@link http://www.w3.org/TR/SVG/pservers.html#GradientStops 'stop' element in SVG 1.1 specification} for detail.
				 */
				stops: {type: "sap.gantt.def.gradient.Stop", multiple: true, singularName: "stop"}
			}
		}
	});

	LinearGradient.prototype.getDefString = function () {
		var sRetVal = "<linearGradient id='" + this.getId() +
			"' x1='" + this.getX1() + "' y1='" + this.getY1() + "' x2='" + this.getX2() +
			"' y2='" + this.getY2() +
			"'>";
		var aStops = this.getStops();
		for (var i = 0; i < aStops.length; i++) {
			sRetVal = sRetVal.concat(aStops[i].getDefString());
		}
		sRetVal = sRetVal.concat("</linearGradient>");
		return sRetVal;
	};

	return LinearGradient;
}, true);

}; // end of sap/gantt/def/gradient/LinearGradient.js
if ( !jQuery.sap.isDeclared('sap.gantt.def.gradient.RadialGradient') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.def.gradient.RadialGradient'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/def/gradient/RadialGradient",[
	"../DefBase"
], function (DefBase) {
	"use strict";
	
	/**
	 * Creates and initializes a radial gradient defined for later reuse.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * Radial gradient defined by SVG tag 'radialGradient'. 
	 * 
	 * <p>
	 * See {@link http://www.w3.org/TR/SVG/pservers.html#RadialGradients Radical Gradient in SVG 1.1 specification} for detail.<br/>
	 * {@link http://www.w3.org/TR/SVG/images/pservers/radgrad01.svg Radical gradient sample in SVG specification 1.1}:<br/>
	 * <svg width="8cm" height="4cm" viewBox="0 0 800 400" version="1.1" xmlns="http://www.w3.org/2000/svg">
	 * <g><defs><radialGradient id="MyGradient" gradientUnits="userSpaceOnUse" cx="400" cy="200" r="300" fx="400" fy="200">
	 * <stop offset="0%" stop-color="red" /><stop offset="50%" stop-color="blue" /><stop offset="100%" stop-color="red" /></radialGradient></defs>
	 * <rect fill="none" stroke="blue" x="1" y="1" width="798" height="398"/>
	 * <rect fill="url(#MyGradient)" stroke="black" stroke-width="5" x="100" y="100" width="600" height="200"/></g>
	 * </svg>
	 * </p>
	 * 
	 * @extends sap.gantt.def.DefBase
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.def.gradient.RadicalGradient
	 */
	var RadialGradient = DefBase.extend("sap.gantt.def.gradient.RadialGradient", /** @lends sap.gantt.def.gradient.RadialGradient.prototype */ {
		metadata : {
			properties: {
				
				/**
				 * Attribute 'cx' of SVG tag 'radialGradient'. See 
				 * {@link http://www.w3.org/TR/SVG/pservers.html#RadialGradientElementCXAttribute 'cx' attribute of 'radialGradient' element in SVG 1.1 specification} for detail.
				 */
				cx: {type: "number", defaultValue: 400},
				
				/**
				 * Attribute 'cy' of SVG tag 'radialGradient'. See 
				 * {@link http://www.w3.org/TR/SVG/pservers.html#RadialGradientElementCYAttribute 'cy' attribute of 'radialGradient' element in SVG 1.1 specification} for detail.
				 */
				cy: {type: "number", defaultValue: 200},
				
				/**
				 * Attribute 'r' of SVG tag 'radialGradient'. See 
				 * {@link http://www.w3.org/TR/SVG/pservers.html#RadialGradientElementRAttribute 'r' attribute of 'radialGradient' element in SVG 1.1 specification} for detail.
				 */
				r: {type: "number", defaultValue: 300},
				
				/**
				 * Attribute 'fx' of SVG tag 'radialGradient'. See 
				 * {@link http://www.w3.org/TR/SVG/pservers.html#RadialGradientElementFXAttribute 'fx' attribute of 'radialGradient' element in SVG 1.1 specification} for detail.
				 */
				fx: {type: "number", defaultValue: 400},
				
				/**
				 * Attribute 'fy' of SVG tag 'radialGradient'. See 
				 * {@link http://www.w3.org/TR/SVG/pservers.html#RadialGradientElementFYAttribute 'fy' attribute of 'radialGradient' element in SVG 1.1 specification} for detail.
				 */
				fy: {type: "number", defaultValue: 200}
			},
			aggregations:{
				
				/**
				 * 'stop' elements in the 'radialGradient' element. See {@link http://www.w3.org/TR/SVG/pservers.html#GradientStops 'stop' element in SVG 1.1 specification} for detail.
				 */
				stops: {type: "sap.gantt.def.gradient.Stop", multiple: true, singularName: "stop"}
			}
		}
	});

	return RadialGradient;
}, true);

}; // end of sap/gantt/def/gradient/RadialGradient.js
if ( !jQuery.sap.isDeclared('sap.gantt.def.gradient.Stop') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.def.gradient.Stop'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/def/gradient/Stop",[
	"../DefBase"
], function (DefBase) {
	"use strict";
	
	/**
	 * Creates and initializes a gradient stop defined for later reuse.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * Gradient stop defined by SVG tag 'stop'. 
	 * 
	 * <p>
	 * See {@link http://www.w3.org/TR/SVG/pservers.html#StopElement 'stop' element in SVG 1.1 specification} for detail.
	 * </p>
	 * 
	 * @extends sap.gantt.def.DefBase
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.def.gradient.Stop
	 */
	var Stop = DefBase.extend("sap.gantt.def.gradient.Stop", /** @lends sap.gantt.def.gradient.Stop.prototype */ {
		metadata : {
			properties: {
				
				/**
				 * Attribute 'offset' of SVG tag 'stop'. See 
				 * {@link http://www.w3.org/TR/SVG/pservers.html#StopElementOffsetAttribute 'offset' attribute of 'stop' element in SVG 1.1 specification} for detail.
				 */
				offSet: {type: "string", defaultValue: "5%"},
				
				/**
				 * Property 'stop-color' of SVG tag 'stop'. See 
				 * {@link http://www.w3.org/TR/SVG/pservers.html#StopColorProperty 'stop-color' property of 'stop' element in SVG 1.1 specification} for detail.
				 */
				stopColor: {type: "sap.gantt.ValueSVGPaintServer", defaultValue: "#FFFFFF"}
			}
		}
	});

	Stop.prototype.getDefString = function () {
		return "<stop id='" + this.getId() +
			"' offset='" + this.getOffSet() +
			"' stop-color='" + this.getStopColor() + "' />";
	};

	return Stop;
}, true);

}; // end of sap/gantt/def/gradient/Stop.js
if ( !jQuery.sap.isDeclared('sap.gantt.def.pattern.PatternBase') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.def.pattern.PatternBase'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/def/pattern/PatternBase",[
	"../DefBase"
], function (DefBase) {
	"use strict";
	
	/**
	 * Creates and initializes a new SVG pattern defined for later reuse.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * Base class for SVG pattern definitions.
	 * 
	 * <p>
	 * Pattern is a built-in paint server in SVG. It provides tile-based patterns to the SVG 'fill' or 'stroke' attributes.
	 * See {@link http://www.w3.org/TR/SVG/pservers.html#Patterns 'pattern' element in SVG}.<br>
	 * See {@link http://www.w3.org/TR/SVG/images/pservers/pattern01.svg Pattern sample fro SVG specificiation 1.1}<br/>
	 * <svg width="8cm" height="4cm" viewBox="0 0 800 400" version="1.1" xmlns="http://www.w3.org/2000/svg">
	 * <defs> <pattern id="TrianglePattern" patternUnits="userSpaceOnUse"  x="0" y="0" width="100" height="100" viewBox="0 0 10 10" >
	 * <path d="M 0 0 L 7 0 L 3.5 7 z" fill="red" stroke="blue" /></pattern></defs>
	 * <rect fill="none" stroke="blue" x="1" y="1" width="798" height="398"/>
	 * <ellipse fill="url(#TrianglePattern)" stroke="black" stroke-width="5" cx="400" cy="200" rx="350" ry="150" />
	 * </svg>
	 * </p>
	 * 
	 * @extends sap.gantt.def.DefBase
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.def.pattern.PatternBase
	 */
	var PatternBase = DefBase.extend("sap.gantt.def.pattern.PatternBase", /** @lends sap.gantt.def.pattern.PatternBase.prototype */ {
		metadata : {
			"abstract": true,
			properties: {

				/**
				 * Width of the pattern tile.
				 * See {@link http://www.w3.org/TR/SVG/pservers.html#PatternElementWidthAttribute 'width' attribute of 'pattern' element} for detail.
				 */
				tileWidth : {type : "int", defaultValue : 8},

				/**
				 * Height of the pattern tile.
				 * See {@link http://www.w3.org/TR/SVG/pservers.html#PatternElementHeightAttribute 'height' attribute of 'pattern' element} for detail.
				 */
				tileHeight : {type : "int", defaultValue : 8},

				/**
				 * Background color of the pattern.
				 * Technically a rectangle with the color is added in the beginning of the pattern definition.
				 */
				backgroundColor : {type : "sap.gantt.ValueSVGPaintServer", defaultValue : "#fff"},

				/**
				 * Fill opacity of background color.
				 */
				backgroundFillOpacity : {type : "number", defaultValue : "1"}
			}
		}
	});

	return PatternBase;
}, true);

}; // end of sap/gantt/def/pattern/PatternBase.js
if ( !jQuery.sap.isDeclared('sap.gantt.def.pattern.SlashPattern') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.def.pattern.SlashPattern'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/def/pattern/SlashPattern",[
	"./PatternBase"
], function (PatternBase) {
	"use strict";

	/**
	 * Creates and initializes a slash pattern defined for later reuse.
	 * 
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * 
	 * @class 
	 * Slash pattern defined by a path. Stroke color and stroke width of the path can be changed by corresponding properties.
	 * 
	 * <p>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="8.8cm" viewBox="0 0 300 220" version="1.1">
	 * <defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * 	<marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * 	<style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * 	.arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63;fill:none} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * 	<rect x="1" y="1" width="298" height="218" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<defs><pattern class="pattern" id="p1" patternUnits="userSpaceOnUse" x="0" y="0" width="4" height="4"><rect x="0" width="4" height="4" fill="#e2e2e2"></rect><path d="M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2 " stroke="#9E1F63" stroke-width="1"></path></pattern>
	 * 	<pattern class="pattern" id="p2" patternUnits="userSpaceOnUse" x="0" y="0" width="8" height="8"><rect x="0" width="8" height="8" fill="#fff"></rect><path d="M-2,2 l4,-4 M0,8 l8,-8 M6,10 l4,-4 " stroke="#6d6d6d" stroke-width="2"></path></pattern>
	 * 	<pattern class="pattern" id="p3" patternUnits="userSpaceOnUse" x="70" y="85" width="100" height="100"><rect x="0" width="100" height="100" fill="#e2e2e2"></rect><path d="M-25,25 l50,-50 M0,100 l100,-100 M75,125 l50,-50" stroke="#1C75BC" stroke-width="30"></path></pattern></defs>
	 * 	<rect fill="url(#p1)" x="60" y="20" width="80" height="20" />
	 * 	<circle fill="url(#p2)" cx="180" cy="25" r="10" /> <circle fill="url(#p2)" cx="200" cy="30" r="15" />
	 * 	<text x="50" y="75" class="timeText">Tile Detail:</text>
	 * 	<rect fill="url(#p3)" x="70" y="85" width="100" height="100" />
	 * 	<path d="M 70 85 h 100 v 100 h -100 z" class="dashside" />
	 * 	<path d="M 70 85 h -20 m 0 100 h 20 v 20 m 100 0 v -20 m -7 -10 h 20 m 0 -45 h -20 m 7 -25 l 20 -20 m -21 -19 l -20 20" class="dashassist" />
	 * 	<path d="M 50 85 v 100" class="arrowline" />
	 * 	<path d="M 70 205 h 100" class="arrowline" />
	 * 	<path d="M 165 70 l 20 20" class="arrowline" />
	 * 	<text x="65" y="175" class="propertyText" transform="rotate(-90, 65 175)">tileHeight</text>
	 * 	<text x="80" y="200" class="propertyText">tileWidth</text>
	 * 	<text x="185" y="125" class="propertyText">background</text>
	 * 	<text x="185" y="145" class="propertyText">Color</text>
	 * 	<text x="185" y="180" class="propertyText">strokeColor</text>
	 * 	<text x="180" y="75" class="propertyText">strokeWidth</text>
	 * </svg>
	 * </p>
	 * 
	 * @extends sap.gantt.def.pattern.PatternBase
	 * @abstract
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.def.pattern.SlashPattern
	 */
	var SlashPattern = PatternBase.extend("sap.gantt.def.pattern.SlashPattern", /** @lends sap.gantt.def.pattern.SlashPattern.prototype  */ {
		library : "sap.gantt",
		metadata : {
			properties: {
				
				/**
				 * Value of d attribute in Path element. The value is influenced by property <code>tileWidth</code> and <code>tileHeight</code>.
				 * If this value is changed by coding, the logic cannot be guaranteed.
				 */
				path : {type : "string", defaultValue : null},
				
				/**
				 * Stroke color of the path element.
				 */
				stroke : {type : "sap.gantt.ValueSVGPaintServer"},
				
				/**
				 * Stroke width of the path element.
				 */
				strokeWidth : {type : "int", defaultValue : 2}
			}
		}
	});

	SlashPattern.prototype.getPath = function () {
		var tileWidth = this.getTileWidth();
		var tileHeight = this.getTileHeight();
		var dStr = "";
		dStr = dStr.concat("M-").concat(tileWidth / 4).concat(",").concat(tileHeight / 4).concat(" ");
		dStr = dStr.concat("l").concat(tileWidth / 2).concat(",-").concat(tileHeight / 2).concat(" ");
		dStr = dStr.concat("M0").concat(",").concat(tileHeight).concat(" ");
		dStr = dStr.concat("l").concat(tileWidth).concat(",-").concat(tileHeight).concat(" ");
		dStr = dStr.concat("M").concat(tileWidth / 4 * 3).concat(",").concat(tileHeight / 4 * 5).concat(" ");
		dStr = dStr.concat("l").concat(tileWidth / 2).concat(",-").concat(tileHeight / 2).concat(" ");
		return dStr;
	};
	
	SlashPattern.prototype.getDefString = function () {
		return "<pattern class='pattern' id='" + this.getId() +
			"' patternUnits='userSpaceOnUse' x='0' y='0' width='" + this.getTileWidth() +
			"' height='" + this.getTileHeight() +
			"'><rect x='0' width='" + this.getTileWidth() +
			"' height='" + this.getTileHeight() +
			"' fill='" + this.getBackgroundColor() +
			"' fill-opacity='" + this.getBackgroundFillOpacity() +
			"'></rect><path d='" + this.getPath() +
			"' stroke='" + this.getStroke() +
			"' stroke-width='" + this.getStrokeWidth() + "'></path></pattern>";
	};

	return SlashPattern;
}, true);

}; // end of sap/gantt/def/pattern/SlashPattern.js
if ( !jQuery.sap.isDeclared('sap.gantt.drawer.Drawer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

jQuery.sap.declare('sap.gantt.drawer.Drawer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/gantt/drawer/Drawer",[
	"sap/ui/base/Object"
], function (Object) {
	"use strict";

	/**
	 * Creates and initializes a new drawer.
	 * 
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * 
	 * @class 
	 * Base class for all d3 drawers.
	 * 
	 * <p>In sap.gantt, most d3 logics are wrapped by Drawer classes. This helps to segregate d3 data binding and rendering logic for SVG from genraral UI5 classes.
	 * For now Drawer concept are not open for application development. 
	 * They are instantiated, used and destroyed inside <code>sap.gantt.Gantt</code> and <code>sap.gantt.GanttWithTable</code>.</p>
	 * 
	 * @extend sap.ui.base.Object
	 * @abstract
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @private
	 * @alias sap.gantt.drawer.Drawer
	 */
	var Drawer = Object.extend("sap.gantt.drawer.Drawer", /* @lends sap.gantt.drawer.Drawer */ {
		metadata: {
			"abstract": true
		}
	});

	/**
	 * Provide drawing logic.
	 * 
	 * <p>Every subclasses should implement this method.</p>
	 *
	 * @private
	 * @function
	 * @param {array} aSvgNode d3 Nodes selected by d3 selector. Current drawer is supposed to draw on all the svg nodes passed in by this parameter.
	 */

	/**
	 * Provide destroying logic.
	 * 
	 * <p>Every subclasses should implement this method. 
	 * Events on SVG elements if exist are recommended to be removed in this methods.</p>
	 *
	 * @private
	 * @function
	 * @param {array} aSvgNode d3 Nodes selected by d3 selector.
	 * Current drawer is supposed to draw on all the svg nodes passed in by this parameter.
	 */

	return Drawer;
}, true);

}; // end of sap/gantt/drawer/Drawer.js
if ( !jQuery.sap.isDeclared('sap.gantt.legend.LegendContainer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.legend.LegendContainer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.m.NavContainer'); // unlisted dependency retained
jQuery.sap.require('sap.m.Page'); // unlisted dependency retained
jQuery.sap.require('sap.m.List'); // unlisted dependency retained
jQuery.sap.require('sap.m.StandardListItem'); // unlisted dependency retained
sap.ui.define("sap/gantt/legend/LegendContainer",[
	"sap/ui/core/Control", "sap/m/NavContainer", "sap/m/Page", "sap/m/List", "sap/m/StandardListItem"
], function (Control, NavContainer, Page, List, StandardListItem) {
	"use strict";

	/**
	 * Creates and initializes a new legend container.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * The LegendContainer control uses the NavContainer control to handle hierarchical navigation between legend sections. The LegendContainer control
	 * contains an initial navigation page. Both the initial navigation page legend sections are Page controls.
	 * 
	 * @extends sap.ui.core.Control
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.legend.LegendContainer
	 */
	var LegendContainer = Control.extend("sap.gantt.legend.LegendContainer", /** @lends sap.gantt.legend.Legend.prototype */ {
		metadata: {
			properties: {
				/**
				 * Width of the legend navigation. When the width specified is smaller than a section content, a horizontal scroll bar appears.width of the legend navigation. When the width specified is smaller than a section content, a horizontal scroll bar appears.
				 */
				width: {type : "sap.ui.core.CSSSize", group: "Misc", defaultValue: "200px"},

				/**
				 * Height of the legend navigation. When the height specified is smaller than a section content, a vertical scroll bar appears.
				 */
				height: {type : "sap.ui.core.CSSSize", group: "Misc", defaultValue: "200px"}
			},
			aggregations : {
				/**
				 * <p>This aggregation specifies the title of a legend section. When you add the legend section to a legend navigation container, 
				 * you must specify a title for the legend section so that the section can be identified in the initial navigation list. Otherwise, 
				 * your legend section is not reachable via GUI.
				 */
				legendSections : {type: "sap.m.Page", multiple: true, visibility: "public", singularName: "legendSection"}
			}
		}
	});

	/**
	 * Creates a control instance of NavContainer for the legend and the initial navigation page
	 * 
	 * @private
	 */
	LegendContainer.prototype.init = function(){
		this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.gantt");
		this._sTitle = this._oRb.getText("LEGEND_TITLE");
		this._oNavContainer = new NavContainer({
			width: this.getWidth(),
			height: this.getHeight()
		});
		this._oInitNavPage = new Page({title: this._oRb.getText("LEGEND_TITLE"),
										content: [new List()]
									});
		//this._oNavContainer.addPage(this._oInitNavPage);
		this._aLegendSections = [];
	};

	LegendContainer.prototype.setWidth = function(sWidth){
		this.setProperty("width", sWidth, true);
		this._oNavContainer.setWidth(sWidth);
		return this;
	};

	LegendContainer.prototype.setHeight = function(sHeight){
		this.setProperty("height", sHeight, true);
		this._oNavContainer.setHeight(sHeight);
		return this;
	};

	LegendContainer.prototype.addLegendSection = function(oLegendSection){
		if (oLegendSection) {
			if (this._aLegendSections.length == 1) {
				this._oNavContainer.insertPage(this._oInitNavPage, 0);
				this._aLegendSections[0].setShowNavButton(true);
			}

			if (this._aLegendSections.length !== 0) {
				oLegendSection.setShowNavButton(true);
			}

			oLegendSection.attachNavButtonPress(this._onNavBack, this);
			oLegendSection.setBackgroundDesign(sap.m.PageBackgroundDesign.Solid);
			oLegendSection.setEnableScrolling(true);
			var sLegendTitle = oLegendSection.getTitle();
			if (sLegendTitle !== undefined) {
				var oListItem = new StandardListItem({
					title: sLegendTitle,
					type: sap.m.ListType.Navigation
				});
				oListItem.attachPress(this._onNavToLegendSection, this);
				this._oInitNavPage.getContent()[0].addItem(oListItem);
			}
			this._aLegendSections.push(oLegendSection);
			this._oNavContainer.addPage(oLegendSection);
		}
		return this;
	};

	LegendContainer.prototype.insertLegendSection = function(oLegendSection, iIndex){
		if (oLegendSection) {
			var iMaxLength = this._aLegendSections.length;

			if (iMaxLength == 1) {
				this._oNavContainer.insertPage(this._oInitNavPage, 0);
				this._aLegendSections[0].setShowNavButton(true);
			}

			if (iMaxLength !== 0) {
				oLegendSection.setShowNavButton(true);
			}

			if (iIndex >= iMaxLength) {
				iIndex = iMaxLength;
			}

			oLegendSection.attachNavButtonPress(this._onNavBack, this);
			oLegendSection.setBackgroundDesign(sap.m.PageBackgroundDesign.Solid);
			oLegendSection.setEnableScrolling(true);
			var sLegendTitle = oLegendSection.getTitle();
			if (sLegendTitle !== undefined) {
				var oListItem = new StandardListItem({
					title: sLegendTitle,
					type: sap.m.ListType.Navigation
				});
				oListItem.attachPress(this._onNavToLegendSection, this);
				this._oInitNavPage.getContent()[0].insertItem(oListItem, iIndex);
			}
			this._oNavContainer.insertPage(oLegendSection, iIndex + 1);
			this._aLegendSections.splice(iIndex, 0, oLegendSection);
		}
		return this;
	};

	LegendContainer.prototype.indexOfLegendSection = function(oLegendSection){
		var iIndex = jQuery.inArray(oLegendSection, this._aLegendSections);
		return iIndex;
	};

	LegendContainer.prototype.removeLegendSection = function(vPage){
		var oRetValue;
		if ((typeof vPage) === "number") {
			this._oNavContainer.removePage(vPage + 1);
			this._oInitNavPage.getContent()[0].removeItem(vPage);
			oRetValue = this._aLegendSections.splice(vPage + 1, 1);
		} else if (vPage) {
			this._oInitNavPage.getContent()[0].removeItem(jQuery.inArray(vPage, this._oNavContainer.getPages()) - 1);
			this._oNavContainer.removePage(vPage);
			oRetValue = this._aLegendSections.splice(jQuery.inArray(vPage, this._aLegendSections), 1);
		}

		if (this._aLegendSections.length == 1) {
			if (this._oNavContainer.getCurrentPage() == this._oInitNavPage) {
				this._oNavContainer.to(this._aLegendSections[0]);
			}
			this._aLegendSections[0].setShowNavButton(false);
		}
		return oRetValue;
	};

	LegendContainer.prototype.removeAllLegendSection = function(){
		var aRemovedLegendSections = this._aLegendSections.splice(0, this._aLegendSections.length);
		this._oInitNavPage.getContent()[0].removeAllItems();
		this._oNavContainer.removeAllPages();

		return aRemovedLegendSections;
	};

	LegendContainer.prototype.getLegendSections = function(){
		var aPages = this._oNavContainer.getPages();
		var that = this;
		return aPages.filter(function(oValue){
			if (oValue.getTitle() !== that._sTitle) {
				return true;
			}
		});
	};

	/**
	 * Returns the control instance of List Control for the initial navigation page
	 * 
	 * @return {sap.m.Page} Control instance of the initial navigation page
	 * @public
	 */
	LegendContainer.prototype.getNavigationPage = function(){
		return this._oInitNavPage;
	};

	/**
	 * Returns the navigation items in the initial navigation list
	 * 
	 * @return {sap.m.StandardListItem} Control instance of the initial page
	 * @public
	 */
	LegendContainer.prototype.getNavigationItems = function(){
		return this._oInitNavPage.getContent()[0].getItems();
	};

	/**
	 * Returns the currently displayed legend section. If no legend section is added, this function returns the initial navigation page.
	 *
	 * @return {sap.m.Page} Control instance of the legend section
	 * @public
	 */
	LegendContainer.prototype.getCurrentLegendSection = function(){
		return this._oNavContainer.getCurrentPage();
	};

	/**
	 * Navigates to the detailed legend section page.
	 *
	 * @param {object} oEvent Object that has been passed by clicking an item in the initial navigation page
	 * @private
	 */
	LegendContainer.prototype._onNavToLegendSection = function(oEvent){
		var sLegendSectionName = oEvent.getSource().getTitle();

		for (var i = 0; i < this._aLegendSections.length; i++) {
			if (sLegendSectionName == this._aLegendSections[i].getTitle()){
				this._oNavContainer.to(this._aLegendSections[i]);
			}
		}
	};

	/**
	 * Navigates back to the initial navigation page.
	 *
	 * @param {object} oEvent Object that has been passed by clicking return button
	 * @private
	 */
	LegendContainer.prototype._onNavBack = function(oEvent) {
		this._oNavContainer.to(this._oInitNavPage);
	};

	return LegendContainer;
});

}; // end of sap/gantt/legend/LegendContainer.js
if ( !jQuery.sap.isDeclared('sap.gantt.legend.LegendContainerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

jQuery.sap.declare('sap.gantt.legend.LegendContainerRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/legend/LegendContainerRenderer",[], function () {
	"use strict";

	/**
	 * LegendContainer renderer.
	 * @namespace
	 */
	var LegendContainerRenderer = {};

	LegendContainerRenderer.render = function(oRm, oControl) {
		oRm.write("<div");
		oRm.writeControlData(oControl);
		oRm.writeClasses();
		oRm.addStyle("width", oControl.getWidth());
		oRm.addStyle("height", "100%");
		oRm.writeStyles();
		oRm.write(">");
		oRm.renderControl(oControl._oNavContainer);
		oRm.write("</div>");
	};
	
	return LegendContainerRenderer;
}, /* bExport= */ true);

}; // end of sap/gantt/legend/LegendContainerRenderer.js
if ( !jQuery.sap.isDeclared('sap.gantt.legend.ListLegendRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

jQuery.sap.declare('sap.gantt.legend.ListLegendRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/legend/ListLegendRenderer",[], function () {
	"use strict";

	/**
	 * List Legend renderer.
	 *
	 * @namespace
	 */
	var ListLegendRenderer = {};

	ListLegendRenderer.render = function (oRenderManager, oLegend) {
		jQuery.sap.measure.start("ListLegendRenderer render","GanttPerf:ListLegendRenderer render function");
		oRenderManager.write("<div");
		oRenderManager.writeControlData(oLegend);
		oRenderManager.addStyle("width", "100%");
		oRenderManager.addStyle("height", "100%");
		oRenderManager.addStyle("position", "relative");
		oRenderManager.writeStyles();
		oRenderManager.addClass("sapGanttListLegend");
		oRenderManager.writeClasses();
		oRenderManager.write(">");

		
		var aShapes = oLegend._aShapeInstance,
			sLegendWidth = oLegend._getScaledLegendWidth() + "px",
			sLegendHeight = oLegend._getScaledLegendHeight() + "px";
		
		for (var i = 0; i < aShapes.length; i++) {
			var sLegend = aShapes[i].mShapeConfig.getProperty("legend");
				
			oRenderManager.write("<div");
			oRenderManager.writeAttributeEscaped("title", sLegend);
			oRenderManager.addClass("sapGanttLLItem");
			oRenderManager.writeClasses();
			oRenderManager.addStyle("height", sLegendHeight);
			oRenderManager.addStyle("line-height", sLegendHeight);
			oRenderManager.writeStyles();
			oRenderManager.write(">");
				oRenderManager.write("<svg");
				oRenderManager.writeAttribute("id", oLegend.getId() + "-svg-" + i);
				oRenderManager.addStyle("width", sLegendWidth);
				oRenderManager.writeStyles();
				oRenderManager.addClass("sapGanttLLItemSvg");
				oRenderManager.writeClasses();
				oRenderManager.write("></svg>");
				
				oRenderManager.write("<div");
				oRenderManager.writeAttribute("id", oLegend.getId() + "-txt-" + i);
				oRenderManager.addClass("sapGanttLLItemTxt");
				oRenderManager.writeClasses();
				oRenderManager.addStyle(sap.ui.getCore().getConfiguration().getRTL() ? "right" : "left", sLegendWidth);
				oRenderManager.addStyle("font-size", oLegend.getFontSize() + "px");
				oRenderManager.writeStyles();
				oRenderManager.write(">");
					if (sLegend) {
						oRenderManager.writeEscaped(sLegend);
					}
				oRenderManager.write("</div>");
			oRenderManager.write("</div>");
		}
		
		jQuery.sap.measure.start("ListLegendRenderer renderPaintServer","GanttPerf:ListLegendRenderer renderPaintServer part");
		this.renderSvgDefs(oRenderManager, oLegend);
		jQuery.sap.measure.end("ListLegendRenderer renderPaintServer");

		jQuery.sap.measure.start("ListLegendRenderer renderSvgDiv","GanttPerf:GanttChartRenderer renderPaintServer part");
		jQuery.sap.measure.end("ListLegendRenderer renderSvgDiv");
		
		oRenderManager.write("</div>");
		jQuery.sap.measure.end("ListLegendRenderer render");
	};

	ListLegendRenderer.renderSvgDefs = function (oRenderManager, oLegend) {
		var oSvgDefs = oLegend.getSvgDefs();
		if (oSvgDefs) {
			oRenderManager.write("<svg id='" + oLegend.getId() + "-svg-psdef'");
			oRenderManager.addStyle("float", "left");
			oRenderManager.addStyle("width", "0px");
			oRenderManager.addStyle("height", "0px");
			oRenderManager.writeStyles();
			oRenderManager.write(">");
			oRenderManager.write(oSvgDefs.getDefString());
			oRenderManager.write("</svg>");
		}
	};

	ListLegendRenderer.renderSvgDiv = function (oRenderManager, oLegend) {
		oRenderManager.write("<div id='" + oLegend.getId() + "-svg-ctn'");
		oRenderManager.addClass("sapGanttListLegendSvgCtn");
		oRenderManager.writeClasses();
		oRenderManager.write(">");

		oRenderManager.write("<svg id='" + oLegend.getId() + "-svg'");
		oRenderManager.addClass("sapGanttListLegendSvg");
		oRenderManager.writeClasses();
		oRenderManager.addStyle("height", "100%");
		oRenderManager.addStyle("width", "100%");
		oRenderManager.writeStyles();
		oRenderManager.write(">");
		oRenderManager.write("</svg>");
		oRenderManager.write("</div>");
	};

	return ListLegendRenderer;
}, true);

}; // end of sap/gantt/legend/ListLegendRenderer.js
if ( !jQuery.sap.isDeclared('sap.gantt.misc.Format') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.misc.Format'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/misc/Format",[
	
], function () {
	"use strict";

	/**
	 * A dummy constructor for Format. Do not construct a Format object; instead, call static methods abapTimestampToDate, dateToAbapTimestamp, and abapTimestampToTimeLabel directly.
	 *
	 * @class
	 * The Format class provides static methods for formatting dates, times, and timestamps to be used in sap.gantt
	 *
	 * @public
	 * @alias sap.gantt.misc.Format
	 */

	var Format = function() {
		// Do not use the constructor
		throw new Error();
	};
	
	
	/**
	 * Converts an ABAP timestamp(eg:"20150909000000" ) into a Date instance.
	 *
	 * @param {string} sTimestamp The ABAP timestamp to convert
	 * @return {Date} The output date instance
	 * @static
	 * @public
	 */

	Format.abapTimestampToDate = function (sTimestamp) {
		if (typeof sTimestamp === "string") {
			// for the timestamp format such as "20150909000000"
			var date = new Date(sTimestamp.substr(0, 4),
					parseInt(sTimestamp.substr(4, 2), 0) - 1,
					sTimestamp.substr(6, 2),
					sTimestamp.substr(8, 2),
					sTimestamp.substr(10, 2),
					sTimestamp.substr(12, 2));
			//In case ts is in format of "Fri Jun 12 2015 08:00:00 GMT+0800 (China Standard Time)"
			if (!jQuery.isNumeric(date.getTime())){
				date = new Date(sTimestamp);
			}
			return date;
		} else if (jQuery.type(sTimestamp) === "date"){
			return sTimestamp;
		}
		return null;
	};
	
	
	/**
	 * Converts a Date instance into an ABAP timestamp.
	 *
	 * @param {Date} oDate The date instance to convert
	 * @return {string} The output ABAP timestamp
	 * @static
	 * @public
	 */

	Format.dateToAbapTimestamp = function (oDate) {
		
		return "" + oDate.getFullYear() +
		(oDate.getMonth() < 9 ? "0" : "") + (oDate.getMonth() + 1) +
		(oDate.getDate() < 10 ? "0" : "") + oDate.getDate() +
		(oDate.getHours() < 10 ? "0" : "") + oDate.getHours() +
		(oDate.getMinutes() < 10 ? "0" : "") + oDate.getMinutes() +
		(oDate.getSeconds() < 10 ? "0" : "") + oDate.getSeconds();
	};
	
	
	/**
	 * Converts an ABAP timestamp into a time label to be used in Gantt.
	 *
	 * @param {string} sTimestamp The ABAP timestamp to convert
	 * @param {sap.gantt.config.Locale} oLocale The locale object has the time zone and DST info; this determines how the function converts the timestamp into a locale-specific time label
	 * @return {string} The output time label
	 * @static
	 * @public
	 */
	Format.abapTimestampToTimeLabel = function (sTimestamp, oLocale) {
		var localDate = sap.gantt.misc.Format._convertUTCToLocalTime(sTimestamp, oLocale);
		var oFormat = sap.ui.core.format.DateFormat.getDateTimeInstance();
		var sLabel = oFormat.format(localDate);
		return sLabel;

	};
	
	

	Format._convertUTCToLocalTime = function (sTimeStamp, oLocale) {

		//convert utc date to local date
		//code is from axistime.js
		var timeZoneOffset = 0;
		if (oLocale && oLocale.getUtcdiff()) {
			var format = d3.time.format("%Y%m%d%H%M%S");
			timeZoneOffset = Math.round((format.parse("20000101" + oLocale.getUtcdiff()).getTime() - format.parse("20000101000000").getTime()) / 1000);
			if (oLocale.getUtcsign() === "-") {
				timeZoneOffset = -timeZoneOffset;
			}
		}
		var utcDate = sap.gantt.misc.Format.abapTimestampToDate(sTimeStamp);
		var localDate = d3.time.second.offset(utcDate, timeZoneOffset);

		//to solve the daylight saving time
		var aDstHorizons = oLocale.getDstHorizons();
		if (aDstHorizons.length > 0) {
			for (var i = 0; i < aDstHorizons.length; i++) {
				var startDate = sap.gantt.misc.Format.abapTimestampToDate(aDstHorizons[i].getStartTime());
				var endDate = sap.gantt.misc.Format.abapTimestampToDate(aDstHorizons[i].getEndTime());
				if (localDate >= startDate && localDate <= endDate) {
					localDate = d3.time.second.offset(localDate, 60 * 60);
				}
			}
		}
		return localDate;
	};


	return Format;
}, true);

}; // end of sap/gantt/misc/Format.js
if ( !jQuery.sap.isDeclared('sap.gantt.misc.TreeTableHelper') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

/**
 * JSON-based DataBinding TreeTable Helper Class
 *
 * It's designed only for expand chart which
 * requires to add extra rows to draw vary shapes. TreeTable control haven't provide
 * decent API allows user to manipulate tree nodes, so here we decided to do it by
 * ourself via changing data in order to change tree hierarchy
 *
 * @private
 */

// Provides class sap.gantt.misc.TreeTableHelper
jQuery.sap.declare('sap.gantt.misc.TreeTableHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterProcessor'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.SorterProcessor'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Context'); // unlisted dependency retained
sap.ui.define("sap/gantt/misc/TreeTableHelper",[
	"jquery.sap.global", "sap/ui/model/FilterProcessor", "sap/ui/model/Filter",
	"sap/ui/model/SorterProcessor", "sap/ui/model/Sorter", "sap/ui/model/Context"
], function(jQuery, FilterProcessor, Filter, SorterProcessor, Sorter, Context) {
	"use strict";

	var TreeTableHelper = function() {};
	TreeTableHelper.JSONDataKey = "originJSONData";

	/**
	 * Add dummy data to the JSON based model. 
	 * 
	 * {
	 *   1: [{__group: 'foo'}, {__group: 'foo'}],
	 *   2: [{__group: 'bar'}, {__group: 'bar'}]
	 * }
	 * @param {sap.ui.table.Table} oTable the tree table instance
	 * @param {object} oDummyData dummy data which contain selected index and array of data
	 * @param {bRestoreSelection} bRestoreSelection whether restore previous table row selection
	 */
	TreeTableHelper.addDummyData = function(oTable, oDummyData, bRestoreSelection){

		var aAllContexts = [];
		if (bRestoreSelection) {
			// record all selected rows before adding dummy data
			aAllContexts = oTable.getSelectedIndices().map(function(iIndex){
				return TreeTableHelper._buildContextMap(oTable, iIndex, null, null);
			});
		}

		var aContexts = this._contextIndexMap(oTable, oDummyData);

		if (aContexts && aContexts.length > 0){
			for (var i = 0; i < aContexts.length; i++ ) {
				var oContext = aContexts[i];
				this._addDummyDataToChildren(oTable, oContext);
			}
		}
		
		TreeTableHelper._updateModalBinding(aContexts);
		
		if (bRestoreSelection) {
			this._restoreSelectedIndices(oTable, aAllContexts);
		}
	};

	TreeTableHelper.removeDummyDataFromSelectedIndices = function(oTable, aSelectedIndices, sGroup) {

		// record all selected rows before removing dummy data
		var aAllContexts = oTable.getSelectedIndices().map(function(iIndex){
			return TreeTableHelper._buildContextMap(oTable, iIndex, null, null);
		});

		aSelectedIndices = (aSelectedIndices || []).sort(function(a, b) { return a - b; });
		var aContexts = aSelectedIndices.map(function(iIndex){
			return TreeTableHelper._buildContextMap(oTable, iIndex, null, sGroup);
		});

		for (var i = 0; i < aContexts.length; i++ ) {
			this._removeDummyDataFromSelectedIndex(oTable, aContexts[i]);
		}

		TreeTableHelper._updateModalBinding(aContexts);

		this._restoreSelectedIndices(oTable, aAllContexts);
		
	};

	TreeTableHelper.isDummyRow = function(oTable, iSelectedIndex) {
		var oContext = oTable.getContextByIndex(iSelectedIndex);
		if (oContext) {
			var oSelectedObject = oContext.getObject();
			return !!oSelectedObject.__dummy;
		} else {
			return false;
		}
	};
	
	TreeTableHelper.isMultipleSpanMainRow = function(oTable, iSelectedIndex, bRowInTable) {
		var iIndex;
		
		if (!bRowInTable){
			var oRow = oTable.getRows()[iSelectedIndex];
			if (oRow){
				iIndex = oRow.getIndex();
			} else {
				return false;
			}
		} else {
			iIndex = iSelectedIndex;
		}
		
		var oContext = oTable.getContextByIndex(iIndex);
		if (oContext) {
			var oSelectedObject = oContext.getObject();
			if (oSelectedObject && oSelectedObject.previousNodeNum !== undefined && oSelectedObject.afterNodeNum !== undefined){
				return true;
			} else {
				return false;
			}
		} else {
			return false;
		}
	};
	
	TreeTableHelper.getMultipleSpanMainRowGroupIndices = function(oTable, iSelectedIndex, bRowInTable) {
		
		if (this.isMultipleSpanMainRow(oTable, iSelectedIndex, bRowInTable)){
			var iIndex;
			
			if (!bRowInTable){
				var oRow = oTable.getRows()[iSelectedIndex];
				if (oRow){
					iIndex = oRow.getIndex();
				} else {
					return false;
				}
			} else {
				iIndex = iSelectedIndex;
			}
			
			var currentSelectedObject = oTable.getContextByIndex(iIndex).getObject();
			var startIndex = iSelectedIndex - currentSelectedObject.previousNodeNum;
			var endIndex = iSelectedIndex + currentSelectedObject.afterNodeNum;
			
			var mainRowGroup = [];
			for (var i = startIndex; i <= endIndex; i++){
				mainRowGroup.push(i);
			}
			return mainRowGroup;
		} else {
			return null;
		}
	};

	TreeTableHelper.getContextObject = function(oTable, iSelectedIndex) {
		var oContext = oTable.getContextByIndex(iSelectedIndex);
		if (oContext) {
			return oContext.getObject();
		}	
	};
	
	TreeTableHelper.toggleOpenStateWithRowIndex = function(oTable, iSelectedIndex, bExpanded) {
		var oContext = oTable.getContextByIndex(iSelectedIndex),
			oModel = oContext.getModel(),
			oSelectedObject = oContext.getObject(),
			sParentBindingPath = this._getParentBindingPath(oContext),
			aParentNodes = oContext.getObject(sParentBindingPath);

		var aArrayNames = this._getBindingParameterArrayNames(oTable);

		if (bExpanded) {
			// when expanded, collect the dummy rows below the current level and put them into children
			// start right below from the selected object and collect dummy rows
			// So means remove the parent level first then add into children.

			var oLengthInfo = this._collectNumberOfSiblingDummyData(oSelectedObject, aParentNodes, null /**sGroup*/);

			// remove the selected object level dummy rows
			var aRemovedsData = this._removeSiblingDummyData(oSelectedObject, aParentNodes, null /**sGroup*/);
			this._addDummyDataToChildrenInBatch(oTable, iSelectedIndex, aRemovedsData);

			jQuery.sap.log.info("Move " + oLengthInfo.length + " rows out to its parent level");

		} else {

			// when collapse,  move the dummy children one level up
			var aRemovedRows = this._removeChildrenDummyData(oSelectedObject, aArrayNames, null /**sGroup*/);

			// Prepend the removed dummy rows to the parents
			var iStartIndex = jQuery.inArray(oSelectedObject, aParentNodes);
			aParentNodes.splice.apply(aParentNodes, [iStartIndex + 1, 0].concat(aRemovedRows));

			jQuery.sap.log.info("Move " + aRemovedRows.length + " rows into its children");
		}

		oModel.updateBindings(false/**bForceUpdate*/);
		var aSelectedIndices = oTable.getSelectedIndices();
		oTable.clearSelection();
		aSelectedIndices.forEach(function(iIndex){
			oTable.addSelectionInterval(iIndex, iIndex);
		});
	};

	TreeTableHelper.filter = function(oEvent) {
		oEvent.preventDefault();

		var oTable = oEvent.getSource(),
			aColumns = oTable.getColumns(),
			oBinding = oTable.getBinding("rows"),
			oModel = oBinding.getModel();

		// Clear all dummy data and row selection if necessary
		oTable.clearSelection();
		TreeTableHelper.clearAllDummyData(oTable);

		var oColumn = oEvent.getParameter('column'),
			sValue = oEvent.getParameter('value');
		if (sValue) {
			oColumn.setFiltered(true);
			oColumn.setFilterValue(sValue);
		} else {
			oColumn.setFiltered(false);
			oColumn.setFilterValue(null);
		}

		if (!oTable.data(TreeTableHelper.JSONDataKey)) {
			var oTableModelData = oModel.getProperty(oBinding.getPath());
			oTable.data(TreeTableHelper.JSONDataKey, jQuery.extend(true /**deepCopy*/, {}, oTableModelData));
		}

		// Before to get UNFILTERED contexts, set the origin data back to table and update bindings
		// Otherwise it will get partially filtered contexts
		oModel.setProperty(oBinding.getPath(), jQuery.extend(true, {}, oTable.data(TreeTableHelper.JSONDataKey)), null, true);
		oModel.updateBindings(false);

		var aUnProcessedContext = TreeTableHelper._getRecursiveContexts(oBinding);

		// get filtered columns;
		var aFilters = aColumns.filter(function(oColumn){
			return oColumn.getFiltered();
		}).map(function(oColumn){
			return oColumn._getFilter();
		});
		// get sorted columns
		var aSorters = aColumns.filter(function(oColumn){
			return oColumn.getSorted();
		}).map(function(oColumn){
			return new Sorter(oColumn.getSortProperty(), oColumn.getSortOrder() === sap.ui.table.SortOrder.Descending);
		});

		var aProcessedContext = [],
			aProcessedData;
		if (aFilters.length > 0) {
			aProcessedContext = FilterProcessor.apply(aUnProcessedContext, aFilters, function(vRef, sPath) {
				var oObject = vRef.getObject();
				var oValue = oObject[sPath];

				if (oValue != undefined && typeof oValue !== "string" && !(oValue instanceof Date)){
					oValue = (oValue).toString();
				}

				return oValue;
			});
			aProcessedData = TreeTableHelper._parseDataFromContexts(oTable, aProcessedContext);
			oModel.setProperty(oBinding.getPath(), aProcessedData);
			oModel.updateBindings(false);
		} else {
			// If no filter, copy the data back from origin JSON object, otherwise filter cycle will modify
			// the original json data because of variable reference
			aProcessedData = jQuery.extend(true, {}, oTable.data(TreeTableHelper.JSONDataKey));
			aProcessedContext = aUnProcessedContext;
		}
		if (aSorters.length > 0) {
			var aSortedContext = TreeTableHelper._getSortedRecursiveContexts(oBinding, aSorters, 5);
			aProcessedData = TreeTableHelper._parseDataFromContexts(oTable, aSortedContext);
		}
		// Update Data in model
		oModel.setProperty(oBinding.getPath(), aProcessedData);
		jQuery.sap.log.info("Table filter " + oColumn + ' value is '  + sValue);
	};
	
	TreeTableHelper._sortContexts = function(aContexts, oSorter) {
		var aNewSorters = jQuery.isArray(oSorter) ? oSorter : [oSorter];
		return SorterProcessor.apply(aContexts, aNewSorters, function(oContext, sPath){
			return oContext.getObject()[sPath];
		});
	};

	TreeTableHelper.sort = function(oEvent){
		oEvent.preventDefault();
		var oColumn = oEvent.getParameter('column'),
			sSortOrder = oEvent.getParameter('sortOrder');

		var oTable = oEvent.getSource(),
			aColumns = oTable.getColumns(),
			oBinding = oTable.getBinding("rows"),
			oModel = oBinding.getModel();

		// Clear all dummy data if necessary
		oTable.clearSelection();
		TreeTableHelper.clearAllDummyData(oTable);

		aColumns.forEach(function(oColumn){
			oColumn.setSorted(false);
			oColumn.setSortOrder(sap.ui.table.SortOrder.Ascending);
		});

		oColumn.setSorted(true);
		oColumn.setSortOrder(sSortOrder);

		var oNewSorter = new Sorter(oColumn.getSortProperty(), sSortOrder === sap.ui.table.SortOrder.Descending);

		var aSortedContexts = TreeTableHelper._getSortedRecursiveContexts(oBinding, oNewSorter, 5);
		var aSortedData = this._parseDataFromContexts(oTable, aSortedContexts);

		oModel.setProperty(oBinding.getPath(), aSortedData);
	};
	
	TreeTableHelper.clearAllDummyData = function (oTable){
		var oBinding = oTable.getBinding("rows"),
			iBindingLength = oBinding.getLength(),
			aIndicesToRemoveDummyData = [];
		
		var iTargetIndex;
		for (var i = 0; i < iBindingLength; i++){
			if (!this.isDummyRow(oTable, i)){
				iTargetIndex = i;
			} else if (aIndicesToRemoveDummyData.indexOf(iTargetIndex) === -1){
					aIndicesToRemoveDummyData.push(iTargetIndex);
			}
			
		}
		
		if (aIndicesToRemoveDummyData.length > 0){
			var aContexts = aIndicesToRemoveDummyData.map(function(iIndex){
				return TreeTableHelper._buildContextMap(oTable, iIndex, null);
			});

			for (var j = 0; j < aContexts.length; j++ ) {
				this._removeDummyDataFromSelectedIndex(oTable, aContexts[j]);
			}

			TreeTableHelper._updateModalBinding(aContexts);
		}
		
	};
	
	TreeTableHelper._parseDataFromContexts = function(oTable ,aContexts){
		var oBinding = oTable.getBinding("rows"),
			//oOriginData = jQuery.extend({},oTable.data("originJSONData")),
			oOriginData = jQuery.extend({},oBinding.getModel().getProperty(oBinding.getPath())),
			oResultData = null,
			sBindingRootPath = oBinding.getPath();
			
		if (aContexts.length === 0){
			return {};
		}
		
		// paths for same context in origin data and in result data are often different, must build 
		// the mapping to track the context and check if the context has already in the result.
		var oMatchedPathsMapping = {
				aOriginPathChain : [],
				sHittedOnPath : null, // hitted on origin path
				aMappingChain : [] //use a array to track the path in result data
		};
		
		var aArrayNames = this._getBindingParameterArrayNames(oTable);
		
		for (var i = 0; i < aContexts.length; i++){
			var sPath = aContexts[i].getPath(),
				sRelevantPath = sPath.replace(sBindingRootPath, ""),
				aPathFragment = sRelevantPath.split("/");
			
			aPathFragment.pop();
			var sParentPath = aPathFragment.join("/");
			
			var oCurrentContextData = jQuery.extend({}, this._getObjFromPath(oOriginData, sRelevantPath)),
				oInsertTargetData = this._getObjFromPath(oResultData, oMatchedPathsMapping[sParentPath]);
			if (oInsertTargetData === null){
				//if can't find the target, build the data frame and maintain the mapping
				oResultData = this._buildDataFormOriginData(oResultData, oOriginData, sParentPath, oMatchedPathsMapping);
				oInsertTargetData = this._getObjFromPath(oResultData, oMatchedPathsMapping[sParentPath]);
			}
			
			//check the mapping, if the node is already in the result then we omit it
			if (!oMatchedPathsMapping[sRelevantPath]){
				
				oInsertTargetData.push(oCurrentContextData);
				
				oMatchedPathsMapping.aOriginPathChain = sRelevantPath.split("/");
				oMatchedPathsMapping.sHittedOnPath = sParentPath;
				oMatchedPathsMapping.aMappingChain = [oInsertTargetData.length - 1];
				this._updateMapping(oMatchedPathsMapping);
				
				for (var j = 0; j < aArrayNames.length; j++){
					if (oCurrentContextData[aArrayNames[j]]){
						oCurrentContextData[aArrayNames[j]] = [];
						
						oMatchedPathsMapping.aOriginPathChain = sRelevantPath.split("/");
						oMatchedPathsMapping.sHittedOnPath = sParentPath;
						oMatchedPathsMapping.aMappingChain = [oInsertTargetData.length - 1];
						oMatchedPathsMapping.aOriginPathChain.push(aArrayNames[j]);
						oMatchedPathsMapping.aMappingChain.push(aArrayNames[j]);
						this._updateMapping(oMatchedPathsMapping);
						
					}
				}
				
			}
			
		}
		
		return oResultData;
	};
	
	TreeTableHelper._buildDataFormOriginData = function (oTargetData, oOringinData, sPath, oPathMapping){
		//we should build the data by node level but array level, just because array always belongs to a node
		var aPathFragment = sPath.split("/");
		oPathMapping.aOriginPathChain = jQuery.extend([],aPathFragment);
		
		var sArrayNameFragment = aPathFragment.pop(),
			sNodePath = aPathFragment.join("/"),
			oTempData = jQuery.extend({}, this._getObjFromPath(oOringinData, sNodePath));
		
		// use "X" as a placeholder, will be changed dynamically according the result data path
		oPathMapping.aMappingChain.push("X"); 
		oPathMapping.aMappingChain.push(sArrayNameFragment);
		
		oTempData[sArrayNameFragment] = [];
		oTargetData = this._buildDataRecursive(oTargetData, oOringinData, sNodePath, oTempData, oPathMapping);
		
		this._updateMapping(oPathMapping);
		return oTargetData;
	};
	
	TreeTableHelper._buildDataRecursive = function (oTargetData, oOringinData, sNodePath, oCurrentData, oPathMapping){
		if (sNodePath === ""){
			//means here is the root of the data.
			oPathMapping.aMappingChain[0] = "";
			if (!oPathMapping[""]){
				oPathMapping[""] = "";
			}
			return oCurrentData;
		} else {
			var aPathFragment = sNodePath.split("/");
				aPathFragment.pop();
			var sParentPath =  aPathFragment.join("/"),
				sPreviousArrayNameFragment = aPathFragment.pop(),
				sPreviousNodePath = aPathFragment.join("/"),
				oTempData = jQuery.extend({}, this._getObjFromPath(oOringinData, sPreviousNodePath));
			
			//check if the node already exist in oTargetData
			var oInsertTargetData = this._getObjFromPath(oTargetData, oPathMapping[sPreviousNodePath]);
			if (oInsertTargetData !== null){
				//hit the target node
				oInsertTargetData[sPreviousArrayNameFragment].push(oCurrentData);
				
				oPathMapping.sHittedOnPath = sParentPath;
				oPathMapping.aMappingChain[0] = oInsertTargetData[sPreviousArrayNameFragment].length - 1;
				
				return oTargetData;
			} else {
				//miss the target, build data frame again.
				oTempData[sPreviousArrayNameFragment] = [];
				oTempData[sPreviousArrayNameFragment].push(oCurrentData);
				
				//because we miss the target, so this node must be the first node in the array
				oPathMapping.aMappingChain[0] = "0";
				
				oPathMapping.aMappingChain.unshift(sPreviousArrayNameFragment);
				oPathMapping.aMappingChain.unshift("X");
				return this._buildDataRecursive(oTargetData, oOringinData, sPreviousNodePath, oTempData, oPathMapping);
			}
		}
		
	};
	
	TreeTableHelper._updateMapping = function(oPathMapping){
		var sOriginPath = "",
			sHittedPath = "";
		
		if (oPathMapping.sHittedOnPath !== null){
			
			sOriginPath = oPathMapping.sHittedOnPath;
			sHittedPath = oPathMapping[oPathMapping.sHittedOnPath];
			
			var aHittedPathFragment = sHittedPath.split("/");
			var iLength = oPathMapping.aOriginPathChain.length - aHittedPathFragment.length,
				iBaseIndex = aHittedPathFragment.length;
				
			for (var i = 0; i < iLength; i++){
				sOriginPath = sOriginPath + "/" + oPathMapping.aOriginPathChain[i + iBaseIndex];
				sHittedPath = sHittedPath + "/" + oPathMapping.aMappingChain[i];
				oPathMapping[sOriginPath] = sHittedPath;
			}
		
		} else if (oPathMapping.aOriginPathChain.length === oPathMapping.aMappingChain.length){
			
			for (var j = 0; j < oPathMapping.aMappingChain.length; j++){
				if (oPathMapping.aMappingChain[j] !== ""){
					sOriginPath = sOriginPath + "/" + oPathMapping.aOriginPathChain[j];
					sHittedPath = sHittedPath + "/" + oPathMapping.aMappingChain[j];
					oPathMapping[sOriginPath] = sHittedPath;
				}
			}
		}
		
		//reset the mapping
		oPathMapping.aOriginPathChain = [];
		oPathMapping.sHittedOnPath = null;
		oPathMapping.aMappingChain = [];
	};
	
	TreeTableHelper._getObjFromPath = function(oObj, sPath){
		if (oObj === null || sPath === undefined){
			return null;
		} else if (sPath == ""){
			return oObj;
		}
		
		var aPathFragment = sPath.split("/"),
			oResult = oObj,
			bMatched = false;
		
		for (var i = 0; i < aPathFragment.length; i++){
			if (aPathFragment[i] !== ""){
				if (oResult[aPathFragment[i]] !== undefined){
					bMatched = true;
					oResult = oResult[aPathFragment[i]];
				} else {
					bMatched = false;
					return null;
				}
			}
		}
		
		if (bMatched){
			return oResult;
		} else {
			return null;
		}
		
	};

	// It get the data from the selected row, if it's expanded, remove children dummy data,
	// otherwise, remove the selected row sibling dummy data
	TreeTableHelper._removeDummyDataFromSelectedIndex = function(oTable, oContextParam) {

		var sGroup = oContextParam.group || null;

		var bExpanded = oContextParam.expanded,
			oSelectedObject = oContextParam.object,
			aParentNodes = oContextParam.parentObject;

		var aArrayNames = this._getBindingParameterArrayNames(oTable);

		if (bExpanded) {
			// if the current selected node is expanded, means the dummy rows is in the children
			this._removeChildrenDummyData(oSelectedObject, aArrayNames, sGroup);
		} else {
			// remove the selected object level dummy rows
			this._removeSiblingDummyData(oSelectedObject, aParentNodes, sGroup);
			// Update the Model with the updated data
		}
		jQuery.sap.log.info("Remove dummy rows for selecting row");

	};


	TreeTableHelper._addDummyDataToChildren = function(oTable, oContextParam) {

		// By default, Dummy data has two keys __dummy and __group, __group uses to
		// identify a group of dummy data
		var aDummyData = oContextParam.dummyData;
		aDummyData.forEach(function(oItem, iIndex, aArray){
			aArray[iIndex] = jQuery.extend({__group: null}, oItem, {__dummy: true});
		});

		var aArrayNames = this._getBindingParameterArrayNames(oTable);

		var oSelectedObject = oContextParam.object;

		// You are not allowed to add dummy data on dummy row
		if (oSelectedObject && oSelectedObject.__dummy) {
			return;
		}

		var bExpanded = oTable.isExpanded(oContextParam.oldIndex);
		var sFirstGroupId = aDummyData[0].__group; // aDummyData should contain same group
		var bDoesGroupDummyExist = false;

		aArrayNames.forEach(function(sName){
			var aChildrenData = oSelectedObject[sName];
			if (aChildrenData && bExpanded) {
				// the data node might not exist at all, check it here
				var iInsertIndex = -1;

				// It used to find the last dummy data index
				jQuery.each(aChildrenData, function(iIndex, oChild){
					if (oChild.__group === sFirstGroupId) {
						bDoesGroupDummyExist = true;
					}

					if (iIndex === 0 && !!oChild.__dummy === false){
						// if the first element is non dummy then that's the position to insert
						iInsertIndex = 0;
					} else if (!!oChild.__dummy === true){
						// otherwise continue to loop
						iInsertIndex = iIndex;
					}
					return false;
				});

				if (iInsertIndex == -1 || iInsertIndex == 0){
					// previous no dummy data, insert from the first
					iInsertIndex = 0;
				} else {
					// if not the first row, need to insert AFTER the found dummy element
					iInsertIndex += 1;
				}

				if (!bDoesGroupDummyExist) {
					aChildrenData.splice.apply(aChildrenData, [iInsertIndex, 0].concat(aDummyData));
				}
			} else {
				// node might not exist, need append dummy data to siblings
				jQuery.sap.log.warning("parameter " + sName + " data node doesn not exist");

				var aParentNodes = oContextParam.parentObject;

				var iFoundIndex = jQuery.inArray(oSelectedObject, aParentNodes);
				if (iFoundIndex >= 0) {
					// start from the next row
					var iIterateStartIndex = iFoundIndex + 1;

					while (aParentNodes[iIterateStartIndex] && aParentNodes[iIterateStartIndex].__dummy) {
						if (aParentNodes[iIterateStartIndex].__group === sFirstGroupId) {
							bDoesGroupDummyExist = true;
						}
						iIterateStartIndex++;
					}
					
					if (!bDoesGroupDummyExist) {
						aParentNodes.splice.apply(aParentNodes, [iIterateStartIndex, 0].concat(aDummyData));
					}
				}
			}
		});

	};

	TreeTableHelper._addDummyDataToChildrenInBatch = function(oTable, iSelectedIndex, aDummyData) {

		var aArrayNames = this._getBindingParameterArrayNames(oTable);

		var oContext = oTable.getContextByIndex(iSelectedIndex),
			oSelectedObject = oContext.getObject();

		aArrayNames.forEach(function(sName){
			var aChildrenData = oSelectedObject[sName];
			if (aChildrenData) {
				 aChildrenData.unshift.apply(aChildrenData, aDummyData);
			} else {
				// node might not exist
				jQuery.sap.log.warning("parameter " + sName + " data node doesn not exist");
			}
		});
	};

	TreeTableHelper._getBindingParameterArrayNames = function(oTable) {
		return oTable.getBindingInfo("rows").parameters.arrayNames;
	};

	TreeTableHelper._getParentBindingPath = function(oContext) {
		var aParentPaths = oContext.getPath().split("/");
		aParentPaths.pop();
		return aParentPaths.join("/");
	};

	TreeTableHelper._removeSiblingDummyData = function(oSelectedObject, aParentNodes, sGroup) {
		var oLengthInfo = this._collectNumberOfSiblingDummyData(oSelectedObject, aParentNodes, sGroup);
		// Remove the dummy rows
		return aParentNodes.splice(oLengthInfo.index + 1, oLengthInfo.length);
	};

	TreeTableHelper._removeChildrenDummyData = function(oSelectedObject, aArrayNames, sGroup) {

		var aRemovedRows = [];
		aArrayNames.forEach(function(sName){
			var aChildrenData = oSelectedObject[sName];
			if (aChildrenData) {

				// collect the start index and number of data need to be removed
				var iStartIndex = -1,
					iCount = 0;

				jQuery.each(aChildrenData, function(iIndex, oChild){
					if (oChild.__dummy && (oChild.__group === sGroup || sGroup === null)){
						if (iStartIndex === -1) {
							iStartIndex = iIndex;
						}
						iCount++;
						return true;
					} else if (oChild.__dummy){
						// the Node is a dummy row, so continue here
						return true;
					} else {
						// It means the row is not dummy, stop iteration here!!
						return false;
					}
				});

				if (iStartIndex !== -1 && iCount > 0){
					// if found need removed data
					aRemovedRows.push.apply(aRemovedRows, aChildrenData.splice(iStartIndex, iCount));
				}
			} else {
				// node might not exist
				jQuery.sap.log.info("NO dummy rows were found");
			}
		});
		return aRemovedRows;
	};

	/// This is collect the number of same level dummy rows.
	TreeTableHelper._collectNumberOfSiblingDummyData = function(oSelectedObject, aParentNodes, sGroup) {
		var iNumberOfDummyRow = 0;
		var iFoundGroupIndex = -1;

		var iFoundIndex = jQuery.inArray(oSelectedObject, aParentNodes);
		if (iFoundIndex >= 0) {
			// start from the next row
			var iIterateStartIndex = iFoundIndex + 1;
			var oNode = aParentNodes[iIterateStartIndex];
			while (oNode && oNode.__dummy) {
				if (oNode.__group == sGroup || sGroup === null) {
					iNumberOfDummyRow++;
					if (iFoundGroupIndex == -1) {
						// it identify the index position to change the dummy data
						iFoundGroupIndex = iIterateStartIndex;
					}
				}
				iIterateStartIndex++;
				oNode = aParentNodes[iIterateStartIndex];
			}
		}
		if (iFoundGroupIndex != -1){
			// Found the index in siblings, start from previous index
			iFoundGroupIndex -= 1;
		}
		var result = {
			index: iFoundGroupIndex,
			length: iNumberOfDummyRow
		};

		return result;
	};
	
	TreeTableHelper._restoreSelectedIndices = function(oTable, aContexts) {

		if (aContexts.length === 0) {
			// do nothing if no selected index
			return;
		}

		jQuery.sap.delayedCall(100, oTable, function(){

			oTable.clearSelection();

			aContexts.forEach(function(oContext){
				var oBinding = oTable.getBinding("rows");

				if (oBinding && oBinding.findNode) {
					var iLength = oBinding.getLength();
					for (var iIndex = 0; iIndex < iLength; iIndex++) {
						var oNode = oBinding.findNode(iIndex);
						if (jQuery.sap.equal(oNode.context.getObject(), oContext.object, 1 /**Nested Level*/)) {
							oTable.addSelectionInterval(iIndex, iIndex);
							break;
						}
					}
				}

			});
		});
	};
	
	TreeTableHelper._contextIndexMap = function (oTable, oDummyData) {
		var aSelectedIndices = Object.keys(oDummyData).map(function(iKey){ return parseInt(iKey, 10); }).sort(function(a, b) { return a - b; });
		return aSelectedIndices.map(function(iIndex){
			return TreeTableHelper._buildContextMap(oTable, iIndex, oDummyData, null);
		});
	};
	
	TreeTableHelper._buildContextMap = function(oTable, iSelectedIndex, oDummyData, sGroup) {
		var oContext = oTable.getContextByIndex(iSelectedIndex),
			oModel = oContext.getModel();
		var sParentPath = TreeTableHelper._getParentBindingPath(oContext),
			aParentObjects = oModel.getProperty(sParentPath);
		var bExpanded = false;
		var oBinding = oTable.getBinding("rows");
		if (oBinding.hasChildren && oBinding.hasChildren(oContext)) {
			bExpanded = oTable.isExpanded(iSelectedIndex);
		}
		var oContextMap = {
			oldIndex: iSelectedIndex,
			path: oContext.getPath(),
			object: oContext.getObject(),
			parentObject : aParentObjects,
			context:  oContext,
			expanded: bExpanded
		};
		
		if (oDummyData && oDummyData[iSelectedIndex]) {
			oContextMap.dummyData = oDummyData[iSelectedIndex];
		}
		
		if (sGroup) {
			oContextMap.group = sGroup;
		}
		return oContextMap;
	};
	
	TreeTableHelper._updateModalBinding = function(aContexts) {
		var bUpdateOnce = false;
		for (var iIndex = 0; iIndex < aContexts.length; iIndex++) {
			if (bUpdateOnce) {
				break;
			} else {
				var oContextMapItem = aContexts[iIndex];
				oContextMapItem.context.getModel().updateBindings(false/**bForceUpdate*/);
				bUpdateOnce = true;
			}
		}
	};

	TreeTableHelper._getRecursiveContexts = function(oBinding){
		var aRetContext = [];

		var aRootContexts = oBinding.getRootContexts(0, oBinding.getLength());
		var fnRecursive = function(aContexts) {
			var aNodeContexts = [];
			aContexts.forEach(function(oContext){
				aNodeContexts = aNodeContexts.concat(oContext);
				var iChildCount = oBinding.getChildCount(oContext),
					bHasChild = iChildCount > 0,
					aChildContexts = [];
				if (bHasChild) {
					aChildContexts = oBinding.getNodeContexts(oContext, 0, iChildCount);
					aNodeContexts = aNodeContexts.concat(fnRecursive(aChildContexts));
				}
			});
			return aNodeContexts;
		};
		aRetContext = fnRecursive(aRootContexts);
		return aRetContext;
	};

	TreeTableHelper._getSortedRecursiveContexts = function(oBinding, oSorter, iLevel) {
		iLevel = iLevel ? iLevel : 1;
		var aRetContext = [];
		var aRootContexts = oBinding.getRootContexts(0, oBinding.getLength());

		aRetContext.push(aRootContexts);

		var fnGetChildren = function(aContexts) {
			var aNodeContexts = [];
			aContexts.forEach(function(oContext){
				var iChildCount = oBinding.getChildCount(oContext),
					bHasChild = iChildCount > 0;
				if (bHasChild) {
					var aChildContexts = oBinding.getNodeContexts(oContext, 0, iChildCount);
					aNodeContexts = aNodeContexts.concat(aChildContexts);
				}
			});
			return aNodeContexts;
		};

		var aStartContexts = aRootContexts;
		while (aRetContext.length <= iLevel) {
			// meet the sort level
			var aChildren = fnGetChildren(aStartContexts);
			if (aChildren.length === 0) {
				break;
			} else {
				aRetContext.push(aChildren);
			}
			aStartContexts = aChildren;
		}

		var aFinalContexts = [];
		for (var iIndex = 0; iIndex < aRetContext.length; iIndex++) {
			var aSortedContexts = TreeTableHelper._sortContexts(aRetContext[iIndex], oSorter);
			aFinalContexts = aFinalContexts.concat(aSortedContexts);
		}

		return aFinalContexts;
	};

	return TreeTableHelper;

}, /* bExport= */true);

}; // end of sap/gantt/misc/TreeTableHelper.js
if ( !jQuery.sap.isDeclared('sap.gantt.misc.Utility') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.misc.Utility'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/misc/Utility",["sap/gantt/misc/Format"], function (Format) {
	"use strict";

	var Utility = {};

	/*
	 * This method will do necessary check when you assign parameters,
	 * the check includes:
	 * 1. type check - if type of inputParam does not match defaultParam,
	 * defaultParam will be returned;
	 * 2. value check - if inputParam is undefined,
	 * defaultParam will be returned.
	 */
	Utility.assign = function (inputParam, defaultParam) {
		if (typeof (inputParam) !== typeof (defaultParam)) {
			return defaultParam;
		} else if ((typeof inputParam === "undefined") || inputParam === null) {
			return defaultParam;
		} else {
			return inputParam;
		}
	};

	/*
	 * for JSON object
	 */
	Utility.assignDeep = function (inputObj, defaultObj) {
		if (!inputObj && !defaultObj) {
			return null;
		} else if (inputObj && !defaultObj) {
			return inputObj;
		} else if (!inputObj && defaultObj) {
			return defaultObj;
		} else if (typeof (inputObj) === "object" && typeof (defaultObj) === "object") {
			var retVal = inputObj;
			for (var attr in defaultObj) {
				if (typeof (retVal[attr]) !== "boolean" && !retVal[attr]) {
					retVal[attr] = defaultObj[attr];
				} else if (typeof (defaultObj[attr]) === "object" && typeof (retVal[attr]) === "object") {
					retVal[attr] = this.assignDeep(retVal[attr], defaultObj[attr]);
				}
			}
			return retVal;
		} else {
			return inputObj;
		}
	};

	/**
	 * This method is used to generate an UID for each row object or shapes.
	 * The UID structure will be like this PATH:objectId|DATA:objectType[id]|SCHEME:objectScheme,
	 * For Row object, the uid should contain PATH part and SCHEME part. for shape object,  the uid
	 * should contain PATH part and DATA part, usually shape object doesn't have SCHEME part and row
	 * object doesn't have DATA part.
	 * 
	 * @param {array} [aDataArray] A data array to generate UID.	
	 * @param {object} [oObjectTypesMap] A map for object configuration information.	
	 * @param {array} [aShapeDataNames] An array stored the names of shape data.	
	 * @param {string} [parentUid] The parent uid for children uid generation.
	 */
	Utility.generateRowUid = function (aDataArray, oObjectTypesMap, aShapeDataNames, parentUid) {
		jQuery.each(aDataArray, function (k, v) {
			v.uid = v.id;
			if (parentUid) {
				v.uid = parentUid + "|" + v.uid;
			} else if (v.bindingObj && v.bindingObj.findNode) {
				var oNode = v.bindingObj.findNode(v.rowIndex);
				while (oNode.parent && oNode.level > 0) {
					oNode = oNode.parent;
					v.uid = oNode.context.getObject().id + "|" + v.uid;
				}
			}
			//generate row uid
			v.uid = "PATH:" + v.uid + "|SCHEME:" + v.chartScheme + "[" + v.index + "]";
			//generate uids for other arrays e.g order, activity
			for (var i = 0; i < aShapeDataNames.length; i++) {
				var sDataName = aShapeDataNames[i];
				if (sDataName in v.data) {
					for (var j = 0; j < v.data[sDataName].length; j++) {
						var obj = v.data[sDataName][j];
						//if obj doesn't have id, just set j as it's id to avoid undefined id
						if (obj.id === undefined) {
							obj.id = j;
						}
						obj.uid = v.uid + "|DATA:" + sDataName + "[" + obj.id + "]";
					}
				}
			}
			
		});
	};
	
	/*
	 * Generate uids for relationships
	 */
	Utility.generateUidByShapeDataName = function (aDataArray, sShapeDataName) {
		if (sShapeDataName === undefined) {
			sShapeDataName = "relationship";
		}
		for (var i = 0; i < aDataArray.length; i++) {
			if (aDataArray[i].id === undefined) {
				aDataArray[i].id = i;
			}
			aDataArray[i].uid = "|DATA:" + sShapeDataName + "[" + aDataArray[i].id + "]";
		}
	};
	
	/**
	 * This method iterates dataSet and save elements into the map, the key is 'id' of each element and the value is the element itself.
	 * When an element has children, traverse the children and use parent's 'id' plus "." plus child's 'id' as the key.
	 * For example, dataSet is like below which contains two elements and one of the elements has a child.
	 *        [
	 *            {
	 * 				id: 1
	 * 				children: [
	 * 					{
	 * 						id: 2
	 * 					}
	 * 				]
	 * 			},
	 *            {
	 * 				id: 3
	 * 			}
	 *        ]
	 * Then the map will be,
	 *        {
	 * 			"1" : {}
	 * 			"1.2": {}
	 * 			"3": {}
	 * 		}
	 * Notice that the key of children elements are path of ids which indicate both the children's id and their parent's id.
	 * @param {object} [dataSet]
	 *            The object array which contains all objects in the visible area including the hierarchy and chart.
	 * @param {object} [map]
	 *            The idPath map which is initially empty and is to be constructed by this method.
	 * @param {string} [parentId]
	 *            ID of parent element
	 * @returns {object} [relPath]
	 * 			  The returned object map
	 */
	Utility.generateObjectPathToObjectMap = function (dataSet, map, parentId) {
		var relPath;
		for (var i in dataSet) {
			var obj = dataSet[i],id;
			if (obj.objectInfoRef) {
				id = obj.objectInfoRef.data.id;
				obj = obj.objectInfoRef;
			} else {
				id = obj.data.id;
			}
			
			if (parentId && parentId != "") {
				id = parentId.concat(".").concat(id);
			}
			map[id] = obj;

			if (obj.children && obj.children.length > 0) {
				relPath = this.generateObjectPathToObjectMap(obj.children, map, id);
			}
		}
		return relPath;
	};
	
	/**
	 * This method is used to parse data type by the given uid.
	 * @param {string} [uid] uid
	 * @returns {string} [dataType] The date type if any match	  
	 */
	Utility.getDataTypeByUid = function (uid) {
		if (uid !== null && uid !== undefined) {
			var pattern = new RegExp("\\|DATA:", "");
			var secondPattern = new RegExp("\\[", "");

			var firstMatches = pattern.exec(uid);
			var lastMatches = secondPattern.exec(uid);
			var dataType = null;
			if ((firstMatches !== null) && (lastMatches !== null)) {
				dataType = uid.substring(firstMatches.index + 6, lastMatches.index);
			}
			if (dataType) {
				return dataType;
			} else {
				return undefined;
			}
		}
		return undefined;
	};
	
	/**
	 * This method is used to get object id by the given uid.
	 * @param {string} [uid] uid
	 * @param {boolean} [isRowUid] value is true if the uid is a row uid, or is false	
	 * @returns {string} [objectId] The object id parsed from the uid	
	 */
	Utility.getObjectIdByUid = function (uid, isRowUid) {
		if (uid !== null && uid !== undefined) {
			var pattern = new RegExp("PATH:", "");
			var secondPattern, objectId;
			if (isRowUid) {
				secondPattern = new RegExp("\\|SCHEME:", "");
			} else {
				secondPattern = new RegExp("\\|DATA:", "");
			}
			var firstMatches = pattern.exec(uid);
			var lastMatches = secondPattern.exec(uid);

			if ((firstMatches !== null) && (lastMatches !== null)) {
				objectId = uid.substring(firstMatches.index + 5, lastMatches.index);
			}
			if (objectId) {
				return objectId;
			} else {
				return undefined;
			}
		}
		return undefined;
	};

	Utility.abapTsToDate = function (sTimeStamp) {
		if (typeof sTimeStamp === "string" && sTimeStamp.length >= 6) {
			return new Date(sTimeStamp.substr(0, 4),
				parseInt(sTimeStamp.substr(4, 2), 0) - 1,
				sTimeStamp.substr(6, 2),
				sTimeStamp.substr(8, 2),
				sTimeStamp.substr(10, 2),
				sTimeStamp.substr(12, 2));
		}
		return null;
	};
	/**
	 * Scale size value according to current sapUiSize css setting.
	 * 
	 * @param {string} sMode Sap ui size mode.
	 * @param {number} nCompactValue Number to be scaled.
	 * @return {number} Scaled value.
	 * @protected
	 */
	Utility.scaleBySapUiSize = function (sMode, nCompactValue) {
		switch (sMode){
		case "sapUiSizeCozy":
			return nCompactValue * 1.5;
		case "sapUiSizeCondensed":
			return nCompactValue * 0.78;
		default:
			return nCompactValue;
		}
	};
	/**
	 * Determine the active SAP UI size class.
	 * 
	 * @return {string} SAP UI size class name.
	 */
	Utility.findSapUiSizeClass = function (oControl) {
		var $rootDiv, $sizeDef;
		if (oControl) {
			$rootDiv = oControl.$();
		} else {
			$rootDiv = jQuery("body");
		}

		if ($rootDiv) {
			$sizeDef = $rootDiv.closest(".sapUiSizeCompact,.sapUiSizeCondensed,.sapUiSizeCozy");
			if ($sizeDef.hasClass("sapUiSizeCondensed")) { // over-write Compact
				return "sapUiSizeCondensed";
			} else if ($sizeDef.hasClass("sapUiSizeCompact")) {
				return "sapUiSizeCompact";
			} else if ($sizeDef.hasClass("sapUiSizeCozy")) {
				return "sapUiSizeCozy";
			}
		}
	};
	

	return Utility;
}, /* bExport= */ true);

}; // end of sap/gantt/misc/Utility.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.Shape') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.Shape'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.format.NumberFormat'); // unlisted dependency retained
sap.ui.define("sap/gantt/shape/Shape",[
	"sap/ui/core/Element", "sap/gantt/misc/Utility", "sap/gantt/misc/Format",
	"sap/ui/core/Core", "sap/ui/core/format/NumberFormat"
], function (Element, Utility, Format, Core, NumberFormat) {
	"use strict";
	
	/**
	 * Creates and initializes a new Shape class.
	 * 
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * 
	 * @class 
	 * Base class for all shape classes.
	 * 
	 * <p>
	 * Shape class is designed to  describe how data should be visualized by an SVG tag. Most shape classes contain only properties and only one aggregation:
	 * <ul>
	 * 	<li>Some properties come from standard SVG attribute. Examples are <code>fill</code>, <code>stroke</code> etc.</li>
	 * 	<li>Some properties designed to put Shape class into Gantt chart's coordinate system, especially the X axis called <code>sap.gantt.misc.AxisTime</code>. Examples are <code>time</code>, <code>endTime</code> etc.</li>
	 * 	<li>Some properties are designed to provide some geometry attributes. Examples are <code>side</code>, <code>center</code> in some extend shapes.</li>
	 * 	<li>Every shape has aggregation called selectedShape to provide a way to specify how selection of the shape should be designed.</li>
	 * 	<li>Some container shapes like <code>g</code> and <code>clippath</code> has aggregation to aggregate other shapes in.</li>
	 * </ul>
	 * 
	 * Because d3 is used underneath and d3 use array to do batch data-binding, therefore Shape classes are not designed in the way of SAPUI5 standard data-binding (one shape instance per data). 
	 * Instead, each Shape instance stands for a particular way of visualize one data structure. And one Shape instance is used to draw a list of data by Drawers in Gantt chart. 
	 * 
	 * Because of this specialty, application cannot instantiate a shape class directly. Instead they can use configuration {@link sap.gantt.config.Shape} to describe which Shape class is used to draw
	 * which data in what way. And pass this configuration to Gantt chart control by property <code>shapes</code>. Gantt chart control use these configurations to instatiate Shape instances and Drawers. Drawers
	 * consumes Shape instances to draw real SVG shapes.
	 * 
	 * Each shape classes are designed to support 'configuration-first' principle. So called configure is the <code>shapeProperties</code> property of <code>sap.gantt.config.Shape</code>.
	 * In this object property, application can provide following things:
	 * <ul>
	 * 	<li>A value. Example: <code>{tooltip: 'svg rocks'}.</code></li>
	 * 	<li>An attribute from data. Example: <code>{time: {startTime}}</code></li>
	 * 	<li>Formatted attribute from data. <code>{tooltip: "{time:Timestamp} the stock price falls to {price:Number}."}</code> The typed values are formatted by global legacy
	 * 		number, date and time configurations by {@link sap.gantt.misc.Format}.</li>
	 * </ul>
	 * 
	 * In many applications, simple configuration or even binding cannot meet business requriement. Therefore applications are allowed to extend shapes and provide their own getter methods
	 * to effect all properties by data. For in row shapes, two parameters are injected to help application to do coding. All the shapes provided by Gantt chart follows 'configuration first'
	 * principle by invoking method <code>_configFirst()</code>. Meaning if application provide value by sap.gantt.config.Shape, the configuration over-write code logic in getters.
	 * 
	 * <b>Note:</b> Setter methods are only used for set default values. Because a Shape instance stands for a way of drawing. The instance self does not hold any status (property values).
	 * Meanwhile, all getter are injected with actual data and related informations to adapt to d3 paradigm. 
	 * </p>
	 * 
	 * @extend sap.ui.core.Element
	 * @abstract
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.Shape
	 */
	var Shape = Element.extend("sap.gantt.shape.Shape", /** @lends sap.gantt.shape.Shape.prototype */ {
		metadata: {
			"abstract": true,
			/*
			 * See getters for property jsdoc.
			 */
			properties: {
				tag: {type: "string"},
				category: {type: "string", defaultValue: sap.gantt.shape.ShapeCategory.InRowShape},
				htmlClass: {type: "string"},
				isDuration: {type: "boolean", defaultValue: false},
				time: {type: "string"},
				endTime: {type: "string"},
				title: {type: "string"},
				ariaLabel: {type: "string"},
				xBias: {type: "number", defaultValue: 0},
				yBias: {type: "number", defaultValue: 0},
				fill: {type : "sap.gantt.ValueSVGPaintServer"},
				strokeOpacity: {type: "number", defaultValue: 1},
				fillOpacity: {type: "number", defaultValue: 1},
				stroke: {type : "sap.gantt.ValueSVGPaintServer"},
				strokeWidth: {type: "number", defaultValue: 2},
				strokeDasharray: {type: "string"},
				clipPath: {type: "string"},
				transform: {type: "string"},
				filter: {type: "string"},
				enableDnD: {type: "boolean", defaultValue: false},
				enableSelection: {type: "boolean", defaultValue: true},
				rowYCenter: {type: "number", defaultValue: 7.5},
				rotationCenter: {type: "array"},
				rotationAngle: {type: "number"},
				isBulk: {type: "boolean", defaultValue: false},
				arrayAttribute: {type: "string"},
				timeFilterAttribute: {type: "string"},
				endTimeFilterAttribute: {type: "string"}
			},
			aggregations: {
				
				/**
				 * Selected Shape.
				 * 
				 * Selected shape specifies how to draw the selection high-light. Application can implement it by extending
				 * <code>sap.gantt.shape.SelectedShape</code> and configure it in <code>sap.gantt.config.Shape</code>.
				 */
				selectedShape: {type: "sap.gantt.shape.SelectedShape", multiple: false}
			}
		}
	});
	
	Shape.prototype.init = function () {
		var oRb = sap.ui.getCore().getLibraryResourceBundle("sap.gantt");
		this.setProperty("ariaLabel", oRb.getText("ARIA_SHAPE"));

		this.mShapeConfig = null;
		this.mLocaleConfig = null;
		this.mChartInstance = null;
	};
	
	/**
	 * Gets current value of property <code>tag</code>.
	 * 
	 * SVG tag name of the shape.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html SVG 1.1 specification for shapes}.<br/>
	 * <b>Note:</b> This value is not recommended to be over-written by configuration or coding.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {string} Value of property <code>tag</code>.
	 * @public
	 */
	Shape.prototype.getTag = function (oData) {
		return this._configFirst("tag", oData);
	};
	
	/**
	 * Gets current value of property <code>category</code>.
	 * 
	 * Values are in enum {@link sap.gantt.shape.ShapeCategory}.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {string} Value of property <code>category</code>.
	 * @public
	 */
	Shape.prototype.getCategory = function (oData) {
		return this._configFirst("category", oData);
	};
	
	/**
	 * Gets current value of property <code>htmlClass</code>.
	 * 
	 * Customized html classes. Multiple classes can be provided and seperated by space.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {string} Value of property <code>htmlClass</code>.
	 * @public
	 */
	Shape.prototype.getHtmlClass = function (oData) {
		return this._configFirst("htmlClass", oData);
	};
	
	/**
	 * Gets current value of property <code>isDuration</code>.
	 * 
	 * <p>
	 * When this flag is set to true, the shape is called 'duration shape'. And <code>time</code> stands for startTime, <code>endTime</code> stands for end time.
	 * When this flag is set to be false, the shape is called 'transient shape'. And only <code>time</code> is used.
	 * Usually these 3 properties are used to determine x position of one shape.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {boolean} Value of property <code>isDuration</code>.
	 * @public
	 */
	Shape.prototype.getIsDuration = function (oData) {
		return this._configFirst("isDuration", oData);
	};
	
	/**
	 * Gets current value of property <code>time</code>.
	 * 
	 * Timestamp for transient shape or start timestamp for duration shape.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {string} Value of property <code>time</code>.
	 * @public
	 */
	Shape.prototype.getTime = function (oData) {
		return this._configFirst("time", oData);
	};
	
	/**
	 * Gets current value of property <code>endTime</code>.
	 * 
	 * End timestamp for duration shape.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {string} Value of property <code>endTime</code>.
	 * @public
	 */
	Shape.prototype.getEndTime = function (oData) {
		return this._configFirst("endTime", oData);
	};
	
	/**
	 * Gets current value of property <code>title</code>.
	 * 
	 * Title is visualized as tooltip by browser.
	 * <b>Notes:</b> Use character entity to do simple text tabbing and breaking. (Use "&#09;" for tab and "&#10;" for break.)
	 * See {@link http://www.w3.org/TR/SVG/struct.html#TitleElement SVG 1.1 specification for 'title'}.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {string} Value of property <code>title</code>.
	 * @public
	 */
	Shape.prototype.getTitle = function (oData) {
		return this._configFirst("title", oData);
	};
	
	/**
	 * Gets current value of property <code>ariaLabel</code>.
	 * 
	 * Arial Label enables screen readers.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {string} Value of property <code>ariaLabel</code>.
	 * @public
	 */
	Shape.prototype.getAriaLabel = function (oData) {
		return this._configFirst("ariaLabel", oData);
	};
	
	/**
	 * Gets current value of property <code>xBias</code>.
	 * 
	 * <p>
	 * Fine-tune x coordinate.
	 * This value only works for category <code>inRowShape</code>.
	 * Shape usually determines position in x coordinate by property <code>isDuration</code>, <code>time</code> and <code>endTime</code>.
	 * Application can use this property to do some x coordinate adjustment in pixel.
	 * The xBias will be automatically mirrored for RTL mode. It means if you set 10 to property xBias, in RTL mode, the value of the xBias will be -10.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {number} Value of property <code>xBias</code>.
	 * @public
	 */
	Shape.prototype.getXBias = function (oData) {
		if (Core.getConfiguration().getRTL() === true) {
			return 0 - this._configFirst("xBias", oData);
		} else {
			return this._configFirst("xBias", oData);
		}
	};
	
	/**
	 * Gets current value of property <code>yBias</code>.
	 * 
	 * <p>
	 * Fine-tune y coordinate.
	 * This value only works for category <code>inRowShape</code>.
	 * Y coordinate is automatically determined by row. Application can use this property to do some y coordinate adjustment in pixel. 
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {number} Value of property <code>yBias</code>.
	 * @public
	 */
	Shape.prototype.getYBias = function (oData) {
		return this._configFirst("yBias", oData, true);
	};
	
	/**
	 * Gets current value of property <code>fill</code>.
	 * 
	 * <p> 
	 * Standard SVG 'fill' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#FillProperty SVG 1.1 specification for 'fill'}.
	 * <b>Note:</b> HTML color and url reference to paint server can be provided to fill. Paint server definitions usually comes from paint servers rendered by
	 * {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable} or {@link sap.gantt.GanttChart}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {string} Value of property <code>fill</code>.
	 * @public
	 */
	Shape.prototype.getFill = function (oData, oRowInfo) {
		return this._configFirst("fill", oData);
	};
	
	/**
	 * Gets current value of property <code>strokeOpacity</code>.
	 * 
	 * <p>
	 * Standard SVG 'stroke-Opacity' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeOpacityProperty SVG 1.1 specification for 'stroke-opacity'}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @return {number} Value of property <code>strokeOpacity</code>.
	 * @public
	 */
	Shape.prototype.getStrokeOpacity = function (oData) {
		return this._configFirst("strokeOpacity", oData);
	};
	
	/**
	 * Gets current value of property <code>fillOpacity</code>.
	 * 
	 * <p>
	 * Standard SVG 'fill-Opacity' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#FillOpacityProperty SVG 1.1 specification for 'fill-opacity'}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {number} Value of property <code>fillOpacity</code>.
	 * @public
	 */
	Shape.prototype.getFillOpacity = function (oData) {
		return this._configFirst("fillOpacity", oData);
	};
	
	/**
	 * Gets current value of property <code>stroke</code>.
	 * 
	 * <p>
	 * Standard SVG 'stroke' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeProperty SVG 1.1 specification for 'stroke'}.
	 * <b>Note:</b> HTML color and url reference to paint server can be provided to stroke. Paint server definitions usually comes from paint servers rendered by
	 * {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable} or {@link sap.gantt.GanttChart}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {string} Value of property <code>stroke</code>.
	 * @public
	 */
	Shape.prototype.getStroke = function (oData) {
		return this._configFirst("stroke", oData);
	};
	
	/**
	 * Gets current value of property <code>strokeWidth</code>.
	 * 
	 * <p>
	 * Standard SVG 'stroke-width' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeWidthProperty SVG 1.1 specification for 'stroke-width'}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {number} Value of property <code>strokeWidth</code>.
	 * @public
	 */
	Shape.prototype.getStrokeWidth = function (oData) {
		return this._configFirst("strokeWidth", oData, true);
	};
	
	/**
	 * Gets current value of property <code>strokeDasharray</code>.
	 * 
	 * <p>
	 * Standard SVG 'stroke-dasharray' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeWidthProperty SVG 1.1 specification for 'stroke-dasharray'}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {string} Value of property <code>strokeDasharray</code>.
	 * @public
	 */
	Shape.prototype.getStrokeDasharray = function (oData) {
		return this._configFirst("strokeDasharray", oData);
	};
	
	/**
	 * Gets current value of property <code>clipPath</code>.
	 * 
	 * <p>
	 * Standard SVG 'clippath' attribute.
	 * See {@link http://www.w3.org/TR/SVG/masking.html#ClipPathProperty SVG 1.1 specification for 'clippath'}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {string} Value of property <code>clipPath</code>.
	 * @public
	 */
	Shape.prototype.getClipPath = function (oData) {
		return this._configFirst("clipPath", oData);
	};
	

	/**
	 * Gets current value of property <code>transform</code>.
	 * 
	 * <p>
	 * Standard SVG 'transform' attribute.
	 * See {@link http://www.w3.org/TR/SVG/coords.html#TransformAttribute SVG 1.1 specifica6tion for 'transform'}.
	 * Some logic in getTransform() is provided to enable property <code>rotationCenter</code> and <code>rotationAngle</code>. If application over-write this property by
	 * configuration or coding, rotation behavior cannot be guaranteed.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {string} Value of property <code>transform</code>.
	 * @public
	 */
	Shape.prototype.getTransform = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("transform")) {
			return this._configFirst("transform", oData);
		}
		
		var aRetVal = [];
		/*
		 * in transform, the later function take effect first,
		 * so in this sequence, rotate first, then translate.
		 */
		this._translate(oData, oRowInfo, aRetVal);
		this._rotate(oData, oRowInfo, aRetVal);
		
		if (aRetVal.length > 0) {
			return aRetVal.join(" ");
		}
	};
	
	/**
	 * Rotate Shape
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Shape Row Info.
	 * @param {object} aRetVal Return Value.
	 * @protected
	 */
	Shape.prototype._rotate = function (oData, oRowInfo, aRetVal) {
		var aCenter = this.getRotationCenter(oData, oRowInfo),
			nRotationAngle = this.getRotationAngle(oData, oRowInfo);
		
		if (aCenter && aCenter.length === 2 && nRotationAngle) {
			aRetVal.push("rotate(" + nRotationAngle + " " + aCenter[0] + " " + aCenter[1] + ")");
		}
	};
	
	/**
	 * Translate Shape
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Shape Row Info.
	 * @param {object} aRetVal Return Value.
	 * @protected
	 */
	Shape.prototype._translate = function (oData, oRowInfo, aRetVal) {
		var nXBias = this.getXBias(oData, oRowInfo),
			nYBias = this.getYBias(oData, oRowInfo);
		
		if (nXBias || nYBias) {
			nXBias = nXBias ? nXBias : 0;
			nYBias = nYBias ? nYBias : 0;
			aRetVal.push("translate(" + nXBias + " " + nYBias + ")");
		}
	};
	
	/**
	 * Gets current value of property <code>filter</code>.
	 * 
	 * <p>
	 * Standard SVG 'filter' attribute.
	 * See {@link http://www.w3.org/TR/SVG/filters.html#FilterProperty SVG 1.1 specifica6tion for 'filter'}.
	 * Usually value of filter is an url referenced from paint server definition rendered by
	 * {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable} or {@link sap.gantt.GanttChart}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {string} Value of property <code>filter</code>.
	 * @public
	 */
	Shape.prototype.getFilter = function (oData) {
		return this._configFirst("filter", oData);
	};
	
	/**
	 * Gets current value of property <code>enableDnD</code>.
	 * 
	 * <p>
	 * This value controls whether a shape is enabled for drag-and-drop behavior.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {boolean} Value of property <code>enableDnD</code>.
	 * @public
	 */
	Shape.prototype.getEnableDnD = function (oData) {
		return this._configFirst("enableDnD", oData);
	};
	
	/**
	 * Gets current value of property <code>enableSelection</code>.
	 * 
	 * <p>
	 * This value controls whether a shape is enabled for selection behavior.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {boolean} Value of property <code>enableSelection</code>.
	 * @public
	 */
	Shape.prototype.getEnableSelection = function (oData) {
		return this._configFirst("enableSelection", oData);
	};

	/**
	 * Gets current value of property <code>rotationAngle</code>.
	 * 
	 * <p>
	 * This value is used in combination of property <code>rotationCenter</code>. By providing both shape can be rotated with any angle around rotation center.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {number} Value of property <code>rotationAngle</code>.
	 * @public
	 */
	Shape.prototype.getRotationAngle = function (oData) {
		return this._rtlRotation(this._configFirst("rotationAngle", oData));
	};
	
	/**
	 * Provide logic for rotation considering RTL.
	 * 
	 * @param {number} nAngle Rotation angle.
	 * @return {number} Actual rotation angle.
	 * @protected
	 */
	Shape.prototype._rtlRotation = function (nAngle) {
		if (nAngle > 0 || nAngle < 0) {
			if (Core.getConfiguration().getRTL()){
				return 360 - nAngle;
			} else {
				return nAngle;
			}
		}
	};
	
	/**
	 * Gets current value of property <code>rowYCenter</code>.
	 * 
	 * <p>
	 * Default implementation is return the middle position of the row in y direction.
	 * If application over-write this property by configuration or code, the logic cannot be guaranteed.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {array} Value of property <code>rowYCenter</code>.
	 * @public
	 */
	Shape.prototype.getRowYCenter = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("rowYCenter")) {
			return this._configFirst("rowYCenter", oData);
		}
		
		if (oRowInfo) {
			return oRowInfo.y + oRowInfo.rowHeight / 2;
		} else {
			return this.getProperty("rowYCenter");
		}
	};
	
	/**
	 * Gets current value of property <code>rotationCenter</code>.
	 * 
	 * <p>
	 * This value is used in combination of property <code>rotationAngle</code>. By providing both shape can be rotated with any angle around rotation center.
	 * Default implementation is the coordinate at <code>time</code> in x coordinate, and <code>rowYCenter</code> in y coordinate.
	 * If application over-write this property by configuration or code, the logic cannot be guaranteed.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {array} Value of property <code>rotationCenter</code>.
	 * @public
	 */
	Shape.prototype.getRotationCenter = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("rotationCenter")) {
			return this._configFirst("rotationCenter", oData);
		}
		
		return this._getCenter(oData, oRowInfo);
	};
	
	Shape.prototype._getCenter = function (oData, oRowInfo, bEnd) {
		var oAxisTime = this.mChartInstance.getAxisTime();
		
		var sTime = bEnd ? this.getEndTime(oData, oRowInfo) : this.getTime(oData, oRowInfo);
		
		if (!sTime) {
			return undefined;
		}
		var nX = oAxisTime.timeToView(Format.abapTimestampToDate(sTime));
		if (!nX && !nX == 0) {
			nX = oAxisTime.timeToView(0);
		}
		
		var nY = this.getRowYCenter(oData, oRowInfo);
		
		return [nX, nY];
	};
	
	/**
	 * Gets current value of property <code>isBulk</code>.
	 * 
	 * <p>
	 * Gantt chart do filtering of data by timestamp for performance sake. For simple shapes which has <code>time</code> or <code>endTime</code> provided, set this flag
	 * to false. For shapes (path or polygon) which connect a list of data, set this value to false. And if filtering is required to next level data, provide <code>arrayAttribute</code>,
	 * <code>timeFilterAttribute</code> and <code>endTimeFilterAttribute</code> in combination.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {boolean} Value of property <code>isBulk</code>.
	 * @public
	 */
	Shape.prototype.getIsBulk = function (oData) {
		return this._configFirst("isBulk", oData);
	};
	
	/**
	 * Gets current value of property <code>arrayAttribute</code>.
	 * 
	 * <p>
	 * Specify which attribute is child array.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {string} Value of property <code>arrayAttribute</code>.
	 * @public
	 */
	Shape.prototype.getArrayAttribute = function (oData) {
		return this._configFirst("arrayAttribute", oData);
	};
	
	/**
	 * Gets current value of property <code>timeFilterAttribute</code>.
	 * 
	 * <p>
	 * Specify which is time attribute of items in child array.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {string} Value of property <code>timeFilterAttribute</code>.
	 * @public
	 */
	Shape.prototype.getTimeFilterAttribute = function (oData) {
		return this._configFirst("timeFilterAttribute", oData);
	};
	
	/**
	 * Gets current value of property <code>endTimeFilterAttribute</code>.
	 * 
	 * <p>
	 * Specify which is end time attribute of items in child array.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {string} Value of property <code>endTimeFilterAttribute</code>.
	 * @public
	 */
	Shape.prototype.getEndTimeFilterAttribute = function (oData) {
		return this._configFirst("endTimeFilterAttribute", oData);
	};

	/**
	 * This method must be used to ensure 'configuration-first' principle for extended shapes.
	 * 
	 * @param {string} sAttrName Attribute name.
	 * @param {object} oData Shape data.
	 * @param {boolean} bScaleBySapUiSizeMode whether scale by size mode or not
	 * @return {string} Resolved attribute.
	 * @protected
	 */
	Shape.prototype._configFirst = function (sAttrName, oData, bScaleBySapUiSizeMode) {
		var sPropertyValue = null;
		if (this.mShapeConfig.hasShapeProperty(sAttrName)) {
			var sConfigAttr = this.mShapeConfig.getShapeProperty(sAttrName);
			if (typeof sConfigAttr === "string") {
				sPropertyValue = this._formatting(oData, sAttrName, sConfigAttr);
			} else {
				sPropertyValue = sConfigAttr;
			}
		} else {
			sPropertyValue = this.getProperty(sAttrName);
		}

		if (bScaleBySapUiSizeMode) {
			var sMode = this.mChartInstance.getSapUiSizeClass();
			sPropertyValue = Utility.scaleBySapUiSize(sMode, sPropertyValue);
		}

		return sPropertyValue;
	};

	/**
	 * This method is used to get view boundary for visible area in Gantt Chart. The view boundary is 
	 * a range of x-coordinate for visible area.
	 * 
	 * @return {array} View boundary for visible area in Gantt Chart.
	 * @protected
	 */
	Shape.prototype.getShapeViewBoundary = function() {
		var oStatusSet = this.mChartInstance._oStatusSet;
		if (oStatusSet && oStatusSet.aViewBoundary) {
			return oStatusSet.aViewBoundary;
		}
		return null;
	};

	Shape.prototype._formatting = function (oData, sAttrName, sAttrValue) {
		if (!sAttrValue) {
			return "";
		}
		
		//In shapes' configuration, when attribute name binding (e.g. {id}) is used, we cache the result of parsing
		//so that whenever the get<Attribute> methods are called (which are called thousands times in huge data scenario)
		//the binding paths (e.g. {id}) don't need to be parsed all the time which is also time consuming.
		this._attributeNameBindingMap = this._attributeNameBindingMap || {};
		
		if (!this._attributeNameBindingMap[sAttrName]) {
			this._attributeNameBindingMap[sAttrName] = this._resolveAttributeMap(sAttrValue);
		}
		
		return this._formatFromResolvedAttributeMap(oData, sAttrName);
	};
	
	Shape.prototype._resolveAttributeMap = function (sAttrValue) {
		var aRetVal = [];
		//"  sdf  {dfsdf}   {sdfw} sdfsdf" => ["  sdf  {dfsdf}", "   {sdfw}", " sdfsdf", ""]
		var aMatchResult = sAttrValue.match(/[^\{\}]*(\{.*?\})?/g);
		//["  sdf  {dfsdf}", "   {sdfw}", " sdfsdf", ""] => ["  sdf  {dfsdf}", "   {sdfw}", " sdfsdf"]
		aMatchResult.pop(); 
		
		aMatchResult.forEach(function (sValue, iIndex, aArray){
			var oAttrItem = {}, aSplit = sValue.split("{");
			// resolve plain leading text
			if (aSplit[0].length > 0) {
				oAttrItem.leadingText = aSplit[0];
			}
			// resolve binding, if "{" exist, find the part in between "{}", and split the part by ":"
			if (aSplit[1]) {
				aSplit = aSplit[1].split("}")[0].split(":");
				// resolve attribute path + name
				if (aSplit[0].length > 0) {
					oAttrItem.attributeName = aSplit[0].trim().split("/");
				}
				// resolve attribute type
				if (aSplit[1]) {
					oAttrItem.attributeType = aSplit[1].trim();
				}
			}
			aRetVal.push(oAttrItem);
		});
		return aRetVal;
	};
	
	Shape.prototype._formatFromResolvedAttributeMap = function (oData, sAttrName) {
		var aAttributeNameBindingParts = this._attributeNameBindingMap[sAttrName],
			aRetVal = [], sPart, oValue;
		if (aAttributeNameBindingParts) {
			aAttributeNameBindingParts.forEach(function (oPart, iIndex){
				sPart = oPart.leadingText;
				if (oPart.attributeName) {
					oValue = oData;
					oPart.attributeName.forEach(function (sPath, iIndex){
						oValue = oValue[sPath];
					});
					if (sPart) {
						sPart = sPart + this._formatValue(oValue, oPart.attributeType);
					} else {
						sPart = this._formatValue(oValue, oPart.attributeType);
					}
				}
				aRetVal.push(sPart);
			}.bind(this));
		}
		
		if (aRetVal.length === 1) {
			return aRetVal[0];
		}
		return aRetVal.join("");
	};
	
	Shape.prototype._formatValue = function (sAttrValue, sType) {
		var oLocaleConfig = this.mLocaleConfig,
			sRetVal = sAttrValue;
		
		switch (sType) {
			case "Number": // fill data for handling resource
				sRetVal = this._formatNumber(sAttrValue);
				break;

			case "Timestamp":
				if (oLocaleConfig != undefined) {
					//var isDate = (sAttrValue && (sAttrValue.length === 8));
					sRetVal = Format.abapTimestampToTimeLabel(sAttrValue, oLocaleConfig);
				}
				break;
			default:
				if (sRetVal === undefined || sRetVal === null) {
					sRetVal = "";
				}
				break;
		}
		return sRetVal;
	};
	
	Shape.prototype._formatNumber = function (number,decimalPlaces) {
		var sRetValue = "";
		if (decimalPlaces !== undefined) {
			sRetValue = NumberFormat.getFloatInstance({
				minFractionDigits: decimalPlaces, // minimal number of fraction digits
				maxFractionDigits: decimalPlaces // maximal number of fraction digits
			}).format(number);
		} else {
			sRetValue = NumberFormat.getFloatInstance().format(number);
		}
		return sRetValue;

	};

	return Shape;
}, true);

}; // end of sap/gantt/shape/Shape.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.Text') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.Text'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
sap.ui.define("sap/gantt/shape/Text",[
	"sap/gantt/shape/Shape", "sap/gantt/misc/Utility", "sap/gantt/misc/Format", "sap/ui/core/Core"
], function (Shape, Utility, Format, Core) {
	"use strict";
	
	/**
	 * Creates and initializes a new Text class.
	 * 
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * Text shape class using SVG tag 'text'. This shape is usually used to represent points in time.
	 * 
	 * <p>
	 * See {@link http://www.w3.org/TR/SVG/text.html SVG specification 1.1 for 'text' element} for
	 * more information about the HTML tag.<br/><br/>
	 * {@link http://www.w3.org/TR/SVG/images/text/text01.svg Text sample in SVG specification 1.1}:<br/>
	 * <svg width="10cm" height="3cm" viewBox="0 0 1000 300" xmlns="http://www.w3.org/2000/svg" version="1.1">
	 * <rect x="1" y="1" width="998" height="298" fill="none" stroke="blue" stroke-width="2" />
	 * <text x="250" y="150" font-family="Verdana" font-size="55" fill="blue" >Hello, out there</text>
	 * </svg><br/>
	 * 
	 * {@link http://www.w3.org/TR/SVG/images/text/textdecoration01.svg Decorated text sample in SVG specification 1.1}: <br/>
	 * <svg width="12cm" height="4cm" viewBox="0 0 1200 400" xmlns="http://www.w3.org/2000/svg" version="1.1">
	 * <rect x="1" y="1" width="1198" height="398" fill="none" stroke="blue" stroke-width="2" />
	 * <g font-size="60" fill="blue" stroke="red" stroke-width="1" >
	 * <text x="100" y="75">Normal text</text>
	 * <text x="100" y="165" text-decoration="line-through" >Text with line-through</text>
	 * <text x="100" y="255" text-decoration="underline" >Underlined text</text>
	 * <text x="100" y="345" text-decoration="underline" >
	 * <tspan>One </tspan>
	 * <tspan fill="yellow" stroke="purple" >word </tspan>
	 * <tspan fill="yellow" stroke="black" >has </tspan>
	 * <tspan fill="yellow" stroke="darkgreen" text-decoration="underline" >different </tspan>
	 * <tspan fill="yellow" stroke="blue" >underlining</tspan>
	 * </text>
	 * </g>
	 * </svg>
	 * </p>
	 * 
	 * @extend sap.gantt.shape.Shape
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.Text
	 */
	var Text = Shape.extend("sap.gantt.shape.Text", /** @lends sap.gantt.shape.Text.prototype */ {
		metadata: {
			properties: {
				tag: {type: "string", defaultValue: "text"},

				text: {type: "string"},
				x: {type: "number"},
				y: {type: "number"},
				fontSize: {type: "number", defaultValue: 10},
				textAnchor: {type: "string", defaultValue: "start"},
				fontFamily: {type: "string"},
				wrapWidth: {type: "number", defaultValue: -1},
				wrapDy: {type: "number", defaultValue: 20},
				truncateWidth: {type: "number", defaultValue: -1},
				ellipsisWidth: {type: "number", defaultValue: 12}
			}
		}
	});
	
	/**
	 * Gets the value of property <code>tag</code>.
	 * 
	 * SVG tag name of the shape.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html SVG 1.1 specification for shapes}.<br/>
	 * <b>Note:</b> We do not recommend that you change this value using a configuration or coding.
	 * 
	 * @name sap.gantt.shape.Text.prototype.getTag
	 * @function
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of property <code>tag</code>.
	 * @public
	 */
	
	/**
	 * Gets the value of property <code>x</code>.
	 * 
	 * <p>
	 * x coordinate of the bottom-left corner of the rectangle.
	 * See {@link http://www.w3.org/TR/SVG/text.html#TextElementXAttribute SVG 1.1 specification for 'x' attribute of 'text'}.
	 * 
	 * Usually applications do not set this value. This getter carries out the calculation using property <code>time</code>.
	 * If you override the default value calculated by the getter, the alignment of the center is not guaranteed.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>x</code>.
	 * @public
	 */
	Text.prototype.getX = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("x")) {
			return this._configFirst("x", oData);
		}

		var sTime = this.getTime(oData, oRowInfo);
		var oAxisTime = this.mChartInstance.getAxisTime();
		var xPos = oAxisTime.timeToView(Format.abapTimestampToDate(sTime));
		if ( isNaN(xPos) || !xPos) {
			xPos = oAxisTime.timeToView(0).toFixed(1);
		}
		return xPos;
	};
	
	/**
	 * Gets the value of property <code>y</code>.
	 * 
	 * <p>
	 * y coordinate of the bottom-left corner of the rectangle.
	 * See {@link http://www.w3.org/TR/SVG/text.html#TextElementYAttribute SVG 1.1 specification for 'y' attribute of 'text'}.
	 * 
	 * Usually applications do not set this value. This getter carries out the calculation using parameter <code>oRowInfo</code>
	 * and property <code>height</code> to align the center of the row rectangle along the y axis. 
	 * If you override the default value calculated by the getter, the alignment of the center is not guaranteed.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>y</code>.
	 * @public
	 */
	Text.prototype.getY = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("y")) {
			return this._configFirst("y", oData);
		}

		return this.getRowYCenter(oData, oRowInfo) + this.getFontSize(oData, oRowInfo) / 2;
	};
	
	/**
	 * Gets the value of property <code>text</code>.
	 * 
	 * <p>
	 * Text string.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of property <code>text</code>.
	 * @public
	 */
	Text.prototype.getText = function (oData) {
		return this._configFirst("text", oData);
	};

	/**
	 * Gets the value of property <code>textAnchor</code>.
	 * 
	 * <p>
	 * Text anchor. Possible values are 'start', 'middle', and 'end'.
	 * See {@link http://www.w3.org/TR/SVG/text.html#TextAnchorProperty SVG 1.1 specification for 'text-anchor' property of 'text'}.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of property <code>textAnchor</code>.
	 * @public
	 */
	Text.prototype.getTextAnchor = function (oData) {
		return this._configFirst("textAnchor", oData);
	};
	
	/**
	 * Gets the value of property <code>fontSize</code>.
	 * 
	 * <p>
	 * Text font size.
	 * See {@link http://www.w3.org/TR/SVG/text.html#FontSizeProperty SVG 1.1 specification for 'font-size' property of 'text'}.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>fontSize</code>.
	 * @public
	 */
	Text.prototype.getFontSize = function (oData) {
		return this._configFirst("fontSize", oData, true);
	};
	
	/**
	 * Gets the value of property <code>wrapWidth</code>.
	 * 
	 * <p>
	 * Wrapping width. Default value -1 indicates wrapping function is not activated. To enable wrapping, give a wrap width here. If text legnth is
	 * exceeding wrapping width, text wrap in different lines.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>wrapWidth</code>.
	 * @private
	 */
	Text.prototype.getWrapWidth = function (oData) {
		return this._configFirst("wrapWidth", oData);
	};
	
	/**
	 * Gets the value of property <code>wrapDy</code>.
	 * 
	 * <p>
	 * If wrapping happens, this value gives the deviation of line wrapping. Effect the distance between lines.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>wrapDy</code>.
	 * @private
	 */
	Text.prototype.getWrapDy = function (oData) {
		return this._configFirst("wrapDy", oData);
	};
	
	/**
	 * Gets the value of property <code>truncateWidth</code>.
	 * 
	 * <p>
	 * Truncating width. Default value -1 indicates truncating function is not activated. To enable truncating, give a truncate width here. If text length
	 * exceeds truncate width, text is truncated.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>truncateWidth</code>.
	 * @public
	 */
	Text.prototype.getTruncateWidth = function (oData) {
		return this._configFirst("truncateWidth", oData);
	};
	
	/**
	 * Gets the value of property <code>ellipsisWidth</code>.
	 * 
	 * <p>
	 * Ellipsis width if truncate happens. Default value 12 indicates 12px length reserved for ellipsis. If the value is
	 * -1, no ellipsis appears even truncate happens. If the value is bigger than -1, ellipsis will be 3 dots in length of this value.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>ellipsisWidth</code>.
	 * @public
	 */
	Text.prototype.getEllipsisWidth = function (oData) {
		return this._configFirst("ellipsisWidth", oData);
	};

	return Text;
}, true);

}; // end of sap/gantt/shape/Text.js
if ( !jQuery.sap.isDeclared('sap.gantt.GanttChartContainerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

jQuery.sap.declare('sap.gantt.GanttChartContainerRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained
sap.ui.define("sap/gantt/GanttChartContainerRenderer",['sap/ui/core/theming/Parameters', "sap/gantt/misc/Utility"], function (Parameters, Utility) {
	"use strict";

	/**
	 * Gantt Chart Container renderer.
	 *
	 * @namespace
	 */
	var GanttChartContainerRenderer = {};

	GanttChartContainerRenderer.render = function (oRm, oGanttChartContainer) {
		jQuery.sap.measure.start("GanttChartContainerRenderer render","GanttPerf:GanttChartContainerRenderer render function");
		oRm.write("<div");
		oRm.writeControlData(oGanttChartContainer);
		oRm.addStyle("width", oGanttChartContainer.getWidth());
		oRm.addStyle("height", oGanttChartContainer.getHeight());
		oRm.writeStyles();
		oRm.addClass("sapGanttChartContainer");
		oRm.writeClasses();
		oRm.write(">");
		
		jQuery.sap.measure.start("GanttChartContainerRenderer renderPaintServer","GanttPerf:GanttChartContainerRenderer renderPaintServer part");
		this.renderSvgDefs(oRm, oGanttChartContainer);
		jQuery.sap.measure.end("GanttChartContainerRenderer renderPaintServer");
		
		jQuery.sap.measure.start("GanttChartContainerRenderer renderToolbar","GanttPerf:GanttChartContainerRenderer renderToolbar part");
		this.renderToolbar(oRm, oGanttChartContainer);
		jQuery.sap.measure.end("GanttChartContainerRenderer renderToolbar");
		
		jQuery.sap.measure.start("GanttChartContainerRenderer renderGanttCharts","GanttPerf:GanttChartContainerRenderer renderGanttCharts part");
		this.renderGanttCharts(oRm, oGanttChartContainer);
		jQuery.sap.measure.end("GanttChartContainerRenderer renderGanttCharts");

		oRm.write("</div>");
		jQuery.sap.measure.end("GanttChartContainerRenderer render");
	};

	GanttChartContainerRenderer.renderSvgDefs = function (oRm, oGanttChartContainer) {
		var oSvgDefs = oGanttChartContainer.getSvgDefs();
		if (oSvgDefs) {
			oRm.write("<svg id='" + oGanttChartContainer.getId() + "-svg-psdef'");
			oRm.addClass("sapGanttInvisiblePaintServer");
			oRm.writeClasses();
			oRm.write(">");
			oRm.write(oSvgDefs.getDefString());
			oRm.write("</svg>");
		}
	};

	GanttChartContainerRenderer.renderToolbar = function (oRm, oGanttChartContainer) {
		oRm.renderControl(oGanttChartContainer._oToolbar);
	};

	GanttChartContainerRenderer.renderGanttCharts = function (oRm, oGanttChartContainer) {
		oRm.write("<div");
		oRm.addClass("sapGanttViewContainer");
		oRm.writeClasses();
		oRm.addStyle("width", oGanttChartContainer.getWidth());
		var sGanttViewHeight = oGanttChartContainer.getHeight();
		if (oGanttChartContainer._oToolbar.getAllToolbarItems().length > 0) {
			var sCSSMode = Utility.findSapUiSizeClass();
			var sToolbarHeight = (sCSSMode === "sapUiSizeCozy") ? 
					Parameters.get("sapGlobalToolbarCozyHeight") : 
						Parameters.get("sapGlobalToolbarCompactHeight");
			sGanttViewHeight = "calc(" + sGanttViewHeight + " - " + sToolbarHeight + ")";
		}
		oRm.addStyle("height", sGanttViewHeight);
		oRm.writeStyles();
		oRm.write(">");
		oRm.renderControl(oGanttChartContainer._oSplitter);
		oRm.write("</div>");
	};

	return GanttChartContainerRenderer;

}, /* bExport= */ true);

}; // end of sap/gantt/GanttChartContainerRenderer.js
if ( !jQuery.sap.isDeclared('sap.gantt.config.ExpandChartGroup') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.config.ExpandChartGroup'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/gantt/config/ExpandChartGroup",[
	'jquery.sap.global', './ToolbarGroup'
], function (jQuery, ToolbarGroup) {
	"use strict";
	/**
	 * Creates and initializes a new expand chart group
	 *
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * Defines a toolbar group for the expand chart-related toolbar items. These expand chart-related toolbar items are displayed in the Gantt chart toolbar.
	 * @extends sap.gantt.config.ToolbarGroup
	 *
	 * @author SAP SE
	 * @version 1.36.8
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.config.ExpandChartGroup
	 */
	var ExpandChartGroup = ToolbarGroup.extend("sap.gantt.config.ExpandChartGroup", /** @lends sap.gantt.config.ExpandCharGroup.prototype */ {
		metadata: {
			properties: {
				/**
				 * Array of {@link sap.gantt.config.ExpandChart}
				 */
				expandCharts: {type: "array", defaultValue: []},
				
				/**
				 * When this property is enabled, expand button is in emphasized button type, and collapse button
				 * is in default button type.
				 */
				enableRichType: {type: "boolean"},
				
				/**
				 * When this property is enabled, text arrow is shown beside icon indicating expand/collapse function
				 */
				showArrowText: {type: "boolean"}
			}
		}
	});

	return ExpandChartGroup;
}, true);

}; // end of sap/gantt/config/ExpandChartGroup.js
if ( !jQuery.sap.isDeclared('sap.gantt.config.LayoutGroup') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.config.LayoutGroup'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/gantt/config/LayoutGroup",[
	'jquery.sap.global', './ToolbarGroup'
], function (jQuery, ToolbarGroup) {
	"use strict";
	/**
	 * Creates and initializes a new layout group
	 *
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * You can specify the Gantt chart layout-related toolbar items in the Gantt chart toolbar 
	 * @extends sap.gantt.config.ToolbarGroup
	 *
	 * @author SAP SE
	 * @version 1.36.8
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.config.LayoutGruoop
	 */
	var LayoutGroup = ToolbarGroup.extend("sap.gantt.config.LayoutGroup", /** @lends sap.gantt.config.LayoutGroup.prototype */ {
		metadata: {
			properties: {
				/**
				 * Determines the button type. See {@link sap.m.ButtonType}
				 * true stands for {@link sap.m.ButtonType.Emphasized}
				 * false stands for {@link sap.m.ButtonType.Default}
				 */
				enableRichStyle: {type: "boolean", defaultValue: true}
			}
		}
	});
	
	return LayoutGroup;
}, true);
}; // end of sap/gantt/config/LayoutGroup.js
if ( !jQuery.sap.isDeclared('sap.gantt.config.ModeGroup') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.config.ModeGroup'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/gantt/config/ModeGroup",[
	'jquery.sap.global', './ToolbarGroup'
], function (jQuery, ToolbarGroup) {
	"use strict";
	/**
	 * Creates and initializes a new mode group
	 *
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * The ModeGroup control specifies the mode-related buttons in the Gantt chart toolbar
	 * 
	 * @extends sap.gantt.config.ToolbarGroup
	 *
	 * @author SAP SE
	 * @version 1.36.8
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.config.ModeGroup
	 */
	var ModeGroup = ToolbarGroup.extend("sap.gantt.config.ModeGroup", /** @lends sap.gantt.config.ModeGroup.prototype */ {
		metadata: {
			properties: {
				/**
				 * Array of key of {@link sap.gantt.config.Mode}
				 */
				modeKeys: {type: "array", defaultValue: []}
			}
		}
	});
	
	return ModeGroup;
}, true);
}; // end of sap/gantt/config/ModeGroup.js
if ( !jQuery.sap.isDeclared('sap.gantt.config.SettingItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.config.SettingItem'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/gantt/config/SettingItem",[
	"sap/ui/core/Element", "./ToolbarGroup"
], function (Element, ToolbarGroup) {
	"use strict";

	/**
	 * Creates and initializes a new setting item.
	 *
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * The SettingItem control allows you to create a setting item in the toolbar, which is presented as a checkbox with a label.
	 * @extends sap.ui.core.Element
	 *
	 * @author SAP SE
	 * @version 1.36.8
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.config.SettingItem
	 */
	var SettingItem = Element.extend("sap.gantt.config.SettingItem", /** @lends sap.gantt.config.SettingItem.prototype */ {
		library : "sap.gantt",
		metadata: {
			properties: {
				/**
				 * Indicates whether the checkbox is selected or not
				 */
				checked: {type: "boolean", defaultValue: false},
				/**
				 * Identifier of an event when the checkbox is toggled
				 */
				key: {type: "string", defaultValue: null},
				/**
				 * Aria label of the checkbox
				 */
				displayText: {type: "string", defaultValue: null}
			}
		}
	});

	return SettingItem;

}, /* bExport= */ true);

}; // end of sap/gantt/config/SettingItem.js
if ( !jQuery.sap.isDeclared('sap.gantt.config.TimeHorizon') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.config.TimeHorizon'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/gantt/config/TimeHorizon",[
	'jquery.sap.global', 'sap/ui/core/Element', "sap/gantt/misc/Format"
], function (jQuery, Element, Format) {
	"use strict";
	/**
	 * Creates and initializes a new Time horizon
	 *
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] =Initial settings for the new control
	 *
	 * @class
	 * Defines the Time horizon
	 * @extends sap.ui.core.Element
	 *
	 * @author SAP SE
	 * @version 1.36.8
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.config.TimeHorizon
	 */
	var TimeHorizon = Element.extend("sap.gantt.config.TimeHorizon", /** @lends sap.gantt.config.TimeHorizon.prototype */ {
		metadata: {
			library: "sap.gantt",
			properties: {
				/**
				 * Start time of the time horizon in this format: YYYYMMDDHHMMSS. If the type of startTime is object, the value is converted to string.
				 */
				startTime: {type: "string", group: "Misc", defaultValue: undefined},
				/**
				 * End time of the time horizon in this format: YYYYMMDDHHMMSS. If the type of endTime is object, the value is converted to string.
				 */
				endTime: {type: "string", group: "Misc", defaultValue: undefined}
			}
		}
	});
	
	TimeHorizon.prototype.setStartTime = function (vStartTime) {
		this.setProperty("startTime", this._convertTimestamp(vStartTime));
	};
	
	TimeHorizon.prototype.setEndTime = function (vEndTime) {
		this.setProperty("endTime", this._convertTimestamp(vEndTime));
	};
	
	TimeHorizon.prototype._convertTimestamp = function (vTime) {
		var sRetVal = vTime;
		if (sRetVal && typeof sRetVal === "object") {
			sRetVal = Format.dateToAbapTimestamp(sRetVal);
		}
		return sRetVal;
	};
	
	return TimeHorizon;
}, true);
}; // end of sap/gantt/config/TimeHorizon.js
if ( !jQuery.sap.isDeclared('sap.gantt.control.Toolbar') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.control.Toolbar'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
jQuery.sap.require('sap.m.OverflowToolbar'); // unlisted dependency retained
jQuery.sap.require('sap.m.OverflowToolbarLayoutData'); // unlisted dependency retained
jQuery.sap.require('sap.m.OverflowToolbarPriority'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarSpacer'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexDirection'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexJustifyContent'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.ButtonType'); // unlisted dependency retained
jQuery.sap.require('sap.m.SegmentedButton'); // unlisted dependency retained
jQuery.sap.require('sap.m.Select'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Item'); // unlisted dependency retained
jQuery.sap.require('sap.m.ViewSettingsDialog'); // unlisted dependency retained
jQuery.sap.require('sap.m.ViewSettingsCustomTab'); // unlisted dependency retained
jQuery.sap.require('sap.m.PlacementType'); // unlisted dependency retained
jQuery.sap.require('sap.m.CheckBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Orientation'); // unlisted dependency retained
jQuery.sap.require('sap.m.Slider'); // unlisted dependency retained
jQuery.sap.require('sap.m.Popover'); // unlisted dependency retained
sap.ui.define("sap/gantt/control/Toolbar",[
	"sap/ui/core/Control", "sap/ui/core/Core", "sap/m/OverflowToolbar", "sap/m/OverflowToolbarLayoutData", "sap/m/OverflowToolbarPriority", "sap/m/ToolbarSpacer", "sap/m/FlexBox", "sap/m/FlexDirection", "sap/m/FlexJustifyContent",
	"sap/m/Button", "sap/m/ButtonType", "sap/m/SegmentedButton", "sap/m/Select", 
	"sap/ui/core/Item", "sap/m/ViewSettingsDialog", "sap/m/ViewSettingsCustomTab", "sap/m/PlacementType",
	"sap/m/CheckBox", "sap/ui/core/Orientation", "./AssociateContainer", "sap/gantt/legend/LegendContainer", "sap/gantt/misc/Utility", "sap/m/Slider", "sap/m/Popover"
], function (Control, Core, OverflowToolbar, OverflowToolbarLayoutData, OverflowToolbarPriority, ToolbarSpacer, FlexBox, FlexDirection, FlexJustifyContent,
		Button, ButtonType, SegmentedButton, Select, CoreItem, ViewSettingsDialog, ViewSettingsCustomTab, PlacementType, CheckBox,
		Orientation, AssociateContainer, LegendContainer, Utility, Slider, Popover) {
	"use strict";

	var Toolbar = Control.extend("sap.gantt.control.Toolbar", {
		metadata : {
			properties : {
				width : {type : "CSSSize", defaultValue: "100%"},
				height : {type : "CSSSize", defaultValue: "100%"},
				type: {type: "string", defaultValue: sap.gantt.control.ToolbarType.Global},
				sourceId:{type: "string"},
				zoomRate:{type: "float"},
				zoomInfo: {type: "object"},
				sliderStep: {type: "int"},
				enableTimeScrollSync: {type: "boolean", defaultValue: true},
				enableRowScrollSync: {type: "boolean", defaultValue: false},
				enableCursorLine: {type: "boolean", defaultValue: true},
				enableNowLine: {type: "boolean", defaultValue: true},
				enableVerticalLine: {type: "boolean", defaultValue: true},
				/*
				 * Configuration property.
				 */
				modes: {
					type: "array",
					defaultValue: [sap.gantt.config.DEFAULT_MODE]
				},
				mode: {
					type: "string",
					defaultValue: sap.gantt.config.DEFAULT_MODE_KEY
				},
				/*
				 * Configuration property.
				 */
				toolbarSchemes: {
					type: "array",
					defaultValue: [
						sap.gantt.config.DEFAULT_CONTAINER_TOOLBAR_SCHEME,
						sap.gantt.config.DEFAULT_GANTTCHART_TOOLBAR_SCHEME,
						sap.gantt.config.EMPTY_TOOLBAR_SCHEME
					]
				},
				/*
				 * Configuration property.
				 */
				hierarchies: {
					type: "array", 
					defaultValue: [sap.gantt.config.DEFAULT_HIERARCHY]
				},
				/*
				 * Configuration property.
				 */
				containerLayouts: {
					type: "array",
					defaultValue: [
						sap.gantt.config.DEFAULT_CONTAINER_SINGLE_LAYOUT,
						sap.gantt.config.DEFAULT_CONTAINER_DUAL_LAYOUT
					]
				}
			},
			aggregations : {
				legend: {type: "sap.ui.core.Control", multiple: false, visibility: "public"},
				customToolbarItems: {type: "sap.ui.core.Control", multiple: true, visibility: "public", singularName: "customToolbarItem"},
				_toolbar : {type: "sap.m.OverflowToolbar", multiple: false, visibility: "hidden"}
			},
			events: {
				sourceChange: {
					parameters: {
						id: {type: "string"}
					}
				},
				layoutChange: {
					parameters: {
						id: {type: "string"},
						value: {type: "string"}
					}
				},
				expandChartChange: {
					parameters: {
						action: {type: "string"},
						expandedChartSchemes: {type: "[]"}
					}
				},
				expandTreeChange: {
					parameters: {
						action: {type: "string"}
					}
				},
				zoomRateChange: {
					parameters:{
						zoomRate: {type : "float"}
					}
				},
				settingsChange: {
					parameters: {
						id: {type: "string"},
						value: {type: "boolean"}
					}
				},
				modeChange: {
					parameters: {
						mode: {type: "string"}
					}
				}
			}
		}
	});
	
	// shrinkable class name
	Toolbar.ToolbarItemPosition = {
		Left: "Left",
		Right: "Right"
	};

	Toolbar.prototype.init = function() {
		this._oToolbar = new OverflowToolbar({
			width: "auto",
			design: sap.m.ToolbarDesign.Auto
		});
		this.setAggregation("_toolbar", this._oToolbar, true);

		this._initCustomToolbarInfo();

		this._oModesConfigMap = {};
		this._oModesConfigMap[sap.gantt.config.DEFAULT_MODE_KEY] = sap.gantt.config.DEFAULT_MODE;

		this._oToolbarSchemeConfigMap = {};
		this._oToolbarSchemeConfigMap[sap.gantt.config.DEFAULT_CONTAINER_TOOLBAR_SCHEME_KEY] = sap.gantt.config.DEFAULT_CONTAINER_TOOLBAR_SCHEME;
		this._oToolbarSchemeConfigMap[sap.gantt.config.DEFAULT_GANTTCHART_TOOLBAR_SCHEME_KEY] = sap.gantt.config.DEFAULT_GANTTCHART_TOOLBAR_SCHEME;
		this._oToolbarSchemeConfigMap[sap.gantt.config.EMPTY_TOOLBAR_SCHEME_KEY] = sap.gantt.config.EMPTY_TOOLBAR_SCHEME;

		this._oHierarchyConfigMap = {};
		this._oHierarchyConfigMap[sap.gantt.config.DEFAULT_HIERARCHY_KEY] = sap.gantt.config.DEFAULT_HIERARCHY;

		this._oContainerLayoutConfigMap = {};
		this._oContainerLayoutConfigMap[sap.gantt.config.DEFAULT_CONTAINER_SINGLE_LAYOUT_KEY] = sap.gantt.config.DEFAULT_CONTAINER_SINGLE_LAYOUT;
		this._oContainerLayoutConfigMap[sap.gantt.config.DEFAULT_CONTAINER_DUAL_LAYOUT_KEY] = sap.gantt.config.DEFAULT_CONTAINER_DUAL_LAYOUT;

		this._oZoomSlider = null;
		this._iLastChartWidth = -1;
		
		this._iCustomItemInsertIndex = -1;
		this._aCustomItems = [];

		// iLiveChangeTimer is used to accumulate zoomRate change event in order to reduce shapes drawing cycle
		this._iLiveChangeTimer = -1;

		this._aTimers = [];
		this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.gantt");

	};

	Toolbar.prototype._initCustomToolbarInfo = function(){
		this._oItemConfiguration = {
			Left: [],
			Right: []
		};
		// pos 0 is list left controls, 1 is list of right controls
		this._oAllCustomItems = {
			Left: [],
			Right: []
		};
		this._iCustomItemInsertIndex = -1;
		this._aCustomItems = [];
	};

	/*
	 * This method happens after init run. It receives config from constructor.
	 * If it's a binding, the super method would resolve binding, and the right
	 * timing to access properties is after super call and before returning.
	 */
	Toolbar.prototype.applySettings = function (mSettings, oScope){
		if (this.getSourceId() && this.getType()) {
			this._resetAllCompositeControls();
		}

		var oRetVal = Control.prototype.applySettings.apply(this, arguments);
		return oRetVal;
	};

	Toolbar.prototype.setLegend = function (oLegendContainer){
		this.setAggregation("legend", oLegendContainer);

		if (!this._oLegendPop) {
			this._oLegendPop = new Popover({
				placement: PlacementType.Bottom,
				showArrow: false,
				showHeader: false
			});
		}

		if (oLegendContainer) {
			this._oLegendPop.removeAllContent();
			this._oLegendPop.addContent(oLegendContainer);
			var iOffsetX;
			if (Core.getConfiguration().getRTL() === true) {
				iOffsetX = 100;
			} else {
				var oLegend = sap.ui.getCore().byId(oLegendContainer.getContent());
				iOffsetX = 100 - parseInt(oLegend.getWidth(), 10);
			}
			this._oLegendPop.setOffsetX(iOffsetX);
		}
	};


	Toolbar.prototype.setZoomInfo = function(oZoomInfo) {
		if (oZoomInfo && oZoomInfo.iChartWidth > 0 && this._oZoomSlider) {
			var fMinZoomRate = oZoomInfo.determinedByChartWidth.fMinRate > oZoomInfo.determinedByConfig.fMinRate ?
					oZoomInfo.determinedByChartWidth.fMinRate : oZoomInfo.determinedByConfig.fMinRate,
			fMaxZoomRate = oZoomInfo.determinedByConfig.fMaxRate,
			fSuitableZoomRate = oZoomInfo.determinedByChartWidth.fSuitableRate ?
					oZoomInfo.determinedByChartWidth.fSuitableRate :
					oZoomInfo.determinedByConfig.fRate;

			var fFinalZoomRate = fSuitableZoomRate,
				oZoomSlider = this._oZoomSlider,
				iLastChartWidth = this._iLastChartWidth;

			oZoomSlider.setMin(Math.log(fMinZoomRate));
			oZoomSlider.setMax(Math.log(fMaxZoomRate));
			var fZoomRate = this.getProperty("zoomRate");
			if (fZoomRate && fZoomRate > 0) {
				fFinalZoomRate = fZoomRate;
			} else {
				if (iLastChartWidth === -1) {
					// the Last chart Width is -1 which is set in init method indicates that
					// This is the first time load, use the default suitable zoom rate
					fFinalZoomRate = fSuitableZoomRate;
				} else if (iLastChartWidth !== oZoomInfo.iChartWidth) {
					fFinalZoomRate = fMinZoomRate;
				}
				fFinalZoomRate = Math.max(fFinalZoomRate, oZoomSlider.getMin());
				fFinalZoomRate = Math.min(fFinalZoomRate, oZoomSlider.getMax());
				this.setProperty("zoomRate", fFinalZoomRate);
			}
			this.setProperty("zoomInfo", oZoomInfo);

			oZoomSlider.setValue(Math.log(fFinalZoomRate));
			oZoomSlider.setStep((oZoomSlider.getMax() - oZoomSlider.getMin()) / this.getSliderStep());
			this.fireZoomRateChange({ zoomRate: fFinalZoomRate});
			this._iLastChartWidth = oZoomInfo.iChartWidth;
			
		}
		return this;
	};

	Toolbar.prototype.setMode = function(sMode) {
		this.setProperty("mode", sMode);
		//update mode button value, when the toolbar is empty, then there is no _oModeSegmentButton.
		if (this._oModeSegmentButton) {
			this._oModeSegmentButton.setSelectedButton(this._oModeButtonMap[sMode]);
		}
		return this;
	};

	Toolbar.prototype.setHierarchies = function (aHierarchies) {
		this.setProperty("hierarchies", aHierarchies);
		this._oHierarchyConfigMap = {};
		if (aHierarchies) {
			for (var i = 0; i < aHierarchies.length; i++) {
				this._oHierarchyConfigMap[aHierarchies[i].getKey()] = aHierarchies[i];
			}
		}
		this._resetAllCompositeControls();
		return this;
	};

	Toolbar.prototype.setContainerLayouts = function (aContainerLayouts) {
		this.setProperty("containerLayouts", aContainerLayouts);
		this._oContainerLayoutConfigMap = {};
		if (aContainerLayouts) {
			for (var i = 0; i < aContainerLayouts.length; i++) {
				this._oContainerLayoutConfigMap[aContainerLayouts[i].getKey()] = aContainerLayouts[i];
			}
		}
		this._resetAllCompositeControls();
		return this;
	};

	Toolbar.prototype.setModes = function (aModes) {
		this.setProperty("modes", aModes);
		this._oModesConfigMap = {};
		if (aModes) {
			for (var i = 0; i < aModes.length; i++) {
				this._oModesConfigMap[aModes[i].getKey()] = aModes[i];
			}
		}
		return this;
	};

	Toolbar.prototype.setToolbarDesign = function (sToolbarDesign) {
		this._oToolbar.setDesign(sToolbarDesign);
		return this;
	};
	Toolbar.prototype.setToolbarSchemes = function (aToolbarSchemes) {
		this.setProperty("toolbarSchemes", aToolbarSchemes);
		this._oToolbarSchemeConfigMap = {};
		if (aToolbarSchemes) {
			for (var i = 0; i < aToolbarSchemes.length; i++) {
				this._oToolbarSchemeConfigMap[aToolbarSchemes[i].getKey()] = aToolbarSchemes[i];
			}
		}
		this._resetAllCompositeControls();
		return this;
	};

	Toolbar.prototype.setSourceId = function (sSourceId) {
		this.setProperty("sourceId", sSourceId);
		this._resetAllCompositeControls();
		return this;
	};

	Toolbar.prototype.setType = function (sType) {
		this.setProperty("type", sType);
		this._resetAllCompositeControls();
		return this;
	};

	Toolbar.prototype.addCustomToolbarItem = function (oCustomToolbarItem) {

		if (this._iCustomItemInsertIndex == -1) {
			// -1 means no other items found, so put the item at first!
			// and move the index cursor to next
			this._oToolbar.insertContent(oCustomToolbarItem, 0);
			this._iCustomItemInsertIndex++;

		} else {
			this._oToolbar.insertContent(oCustomToolbarItem, this._iCustomItemInsertIndex + 1);
			this._iCustomItemInsertIndex++;
		}
		this._aCustomItems.push(oCustomToolbarItem);
		return this;
	};

	Toolbar.prototype.insertCustomToolbarItem = function (oCustomToolbarItem, iIndex) {

		var iMaxLength = this._aCustomItems.length;
		if (iIndex >= iMaxLength) {
			iIndex = iMaxLength;
		}
		if (this._iCustomItemInsertIndex === -1) {
			//-1 means no other items found, put the item at first
			this._oToolbar.insertContent(oCustomToolbarItem, 0);
			this._aCustomItems.push(oCustomToolbarItem);
		} else {
			//this._iCustomItemInsertIndex - this._aCustomItems.length + 1 is the start position of the custom item
			this._oToolbar.insertContent(oCustomToolbarItem, this._iCustomItemInsertIndex - this._aCustomItems.length + 1 + iIndex);
			this._aCustomItems.splice(iIndex, 0, oCustomToolbarItem);
		}
		this._iCustomItemInsertIndex++;
		return this;
	};

	Toolbar.prototype.removeCustomToolbarItem = function (vCustomToolbarItem) {
		if (this._aCustomItems.length === 0) {
			return this._aCustomItems;
		}
		if ((typeof vCustomToolbarItem) === "number") {
			var iCustomItemCount = this._aCustomItems.length;
			var iRemoveCustomIndex = vCustomToolbarItem > iCustomItemCount ? iCustomItemCount : vCustomToolbarItem;
			this._oToolbar.removeContent(this._iCustomItemInsertIndex - iCustomItemCount + iRemoveCustomIndex + 1);
			this._iCustomItemInsertIndex--;
			return this._aCustomItems.splice(iRemoveCustomIndex, 1);
		} else if (vCustomToolbarItem) {
			this._oToolbar.removeContent(vCustomToolbarItem);
			this._iCustomItemInsertIndex--;
			return this._aCustomItems.splice(jQuery.inArray(vCustomToolbarItem, this._aCustomItems), 1);
		}
	};

	Toolbar.prototype.removeAllCustomToolbarItems = function () {
		var aRemovedItems = [];
		for (var iIndex = 0; iIndex < this._aCustomItems.length; iIndex++) {
			aRemovedItems.push(this._oToolbar.removeContent(this._aCustomItems[iIndex]));
		}
		this._iCustomItemInsertIndex = this._iCustomItemInsertIndex - this._aCustomItems.length;
		this._aCustomItems.splice(0, this._aCustomItems.length);
		return aRemovedItems;
	};

	Toolbar.prototype._resetAllCompositeControls = function() {
		// determine this._sToolbarSchemeKey, this._sInitMode and this._oToolbarScheme
		this._determineToolbarSchemeConfig(this.getSourceId());
		this._destroyCompositeControls();
		if (!this._sToolbarSchemeKey) {
			return;
		}
		// sort group config into this._oItemConfiguration
		this._resolvePositions();

		var iIndex,
			oContent,
			sLeft = Toolbar.ToolbarItemPosition.Left,
			sRight = Toolbar.ToolbarItemPosition.Right;
		var aLeftItemsConfig = this._oItemConfiguration[sLeft];
		for (iIndex = 0; iIndex < aLeftItemsConfig.length; iIndex++) {
			if (aLeftItemsConfig[iIndex]) {
				// the index might come consecutive 
				this._createCompositeControl(sLeft, iIndex, aLeftItemsConfig[iIndex]);
			}
		}
		
		var aRightItemsConfig = this._oItemConfiguration[sRight];
		for (iIndex = 0; iIndex < aRightItemsConfig.length; iIndex++) {
			if (aRightItemsConfig[iIndex]) {
				this._createCompositeControl(sRight, iIndex, aRightItemsConfig[iIndex]);
			}
		}
		
		var fnAddToolbarContent = function (oContent) {
			if (jQuery.isArray(oContent)) {
				for (var m = 0; m < oContent.length; m++) {
					this._oToolbar.addContent(oContent[m]);
				}
			} else if (oContent) {
				this._oToolbar.addContent(oContent);
			}
		};

		// add left items
		for (iIndex = 0; iIndex < this._oAllCustomItems[sLeft].length; iIndex++) {
			oContent = this._oAllCustomItems[sLeft][iIndex];
			fnAddToolbarContent.call(this, oContent);
		}
		// add spacer
		if (this._oAllCustomItems[sLeft].length !== 0 || this._oAllCustomItems[sRight].length !== 0) {
			this._oToolbar.addContent(new ToolbarSpacer());
		}
		// add right items, reverse order
		for (iIndex = this._oAllCustomItems[sRight].length - 1; iIndex >= 0; iIndex--) {
			oContent = this._oAllCustomItems[sRight][iIndex];
			fnAddToolbarContent.call(this, oContent);
		}
		
		var oZoomInfo = this.getProperty("zoomInfo");
		if (oZoomInfo) {
			this.setZoomInfo(oZoomInfo);
		}
	};

	Toolbar.prototype.getAllToolbarItems = function () {
		return this._oToolbar.getContent();
	};

	Toolbar.prototype._determineToolbarSchemeConfig = function (sSourceId) {
		this._sToolbarSchemeKey = null;
		// determine toolbarSchemeId
		if (this.getType() === sap.gantt.control.ToolbarType.Global && this._oContainerLayoutConfigMap[sSourceId]) {
			this._sToolbarSchemeKey = this._oContainerLayoutConfigMap[sSourceId].getToolbarSchemeKey();
			this._sInitMode = this.getMode() != sap.gantt.config.DEFAULT_MODE_KEY ? this.getMode() : this._oContainerLayoutConfigMap[sSourceId].getActiveModeKey();
		} else if (this.getType() === sap.gantt.control.ToolbarType.Local && this._oHierarchyConfigMap[sSourceId]) {
			this._sToolbarSchemeKey = this._oHierarchyConfigMap[sSourceId].getToolbarSchemeKey();
			this._sInitMode = this.getMode() != sap.gantt.config.DEFAULT_MODE_KEY ? this.getMode() : this._oHierarchyConfigMap[sSourceId].getActiveModeKey();
		}
		// determine toolbar scheme config
		this._oToolbarScheme = this._oToolbarSchemeConfigMap[this._sToolbarSchemeKey];
		if (this._oToolbarScheme && this._oToolbarScheme.getProperty("toolbarDesign")) {
			this.setToolbarDesign(this._oToolbarScheme.getProperty("toolbarDesign"));
		}
	};

	Toolbar.prototype._destroyCompositeControls = function() {
		this._oToolbar.removeAllContent();
		this._initCustomToolbarInfo();
	};
	
	Toolbar.prototype._resolvePositions = function() {
		if (this._oToolbarScheme) {
			jQuery.each(this._oToolbarScheme.getMetadata().getAllProperties(), function (sProperty) {
				if (sProperty !== "key" && sProperty !== "toolbarDesign") {
					var oProperty = this._oToolbarScheme.getProperty(sProperty);
					if (oProperty) {
						var oPosition = this._parsePosition(oProperty.getPosition());
						this._oItemConfiguration[oPosition.position][oPosition.idx] = $.extend({}, {groupId: sProperty}, oProperty);
					}
				}
			}.bind(this));
			
			var oSchemeConfiguration = this._oItemConfiguration;
			var aAlignments = Object.keys(oSchemeConfiguration);
			aAlignments.forEach(function(sAlignmentKey) {
				var aSchemes = oSchemeConfiguration[sAlignmentKey],
					newSchemes = [];
				
				var aSchemeSortedKeys = Object.keys(aSchemes).sort();
				aSchemeSortedKeys.forEach(function(sSchemeKey, aSelf) {
					newSchemes.push(aSchemes[sSchemeKey]);
				});
				
				oSchemeConfiguration[sAlignmentKey] = newSchemes;
			});
		}
		
	};

	Toolbar.prototype._parsePosition = function(sPosition) {
		return {
			position: sPosition.toUpperCase().substr(0, 1) === "L" ? Toolbar.ToolbarItemPosition.Left : Toolbar.ToolbarItemPosition.Right,
			idx: parseInt(sPosition.substr(1, sPosition.length - 1), 10)
		};
	};

	Toolbar.prototype._createCompositeControl = function(sPosition, iIndex, oGroupConfig) {
		var vControl;
		switch (oGroupConfig.groupId) {
			case "sourceSelect":
				vControl = this._genSourceSelectGroup(oGroupConfig);
				break;
			case "layout":
				vControl = this._genLayoutGroup(oGroupConfig);
				break;
			case "expandChart":
				vControl = this._genExpandChartGroup(oGroupConfig);
				break;
			case "expandTree":
				vControl = this._genExpandTreeGroup(oGroupConfig);
				break;
			case "customToolbarItems":
				vControl = this._genCustomToolbarItemGroup(sPosition, oGroupConfig);
				break;
			case "mode":
				vControl = this._genModeButtonGroup(oGroupConfig);
				break;
			case "timeZoom":
				vControl = this._genZoomSliderGroupControls(oGroupConfig);
				break;
			case "legend":
				vControl = this._genLegend(oGroupConfig);
				break;
			case "settings":
				vControl = this._genSettings(oGroupConfig);
				break;
			default:
				break;
		}
		if (vControl) {
			this._oAllCustomItems[sPosition] = this._oAllCustomItems[sPosition].concat(vControl);
		}
	};

	Toolbar.prototype._genSourceSelectGroup = function(oGroupConfig) {
		var sSourceId = this.getSourceId();
		// that is toolbar itself
		var that = this;
		var aSource;

		this._oSourceSelectBox = new Select({
			layoutData: new OverflowToolbarLayoutData({priority: oGroupConfig.getOverflowPriority()}),
			width: "200px",
			change: function (oEvent) {
				var oItem = oEvent.getParameter("selectedItem");
				var oSourceConfig = oItem.oSourceConfig;
				that.fireSourceChange({
					id: oItem.getKey(),
					config: oSourceConfig
				});
			}
		});

		switch (this.getType()){
			case sap.gantt.control.ToolbarType.Global:
				aSource = this.getContainerLayouts();
				this._oSourceSelectBox.setTooltip(this._oRb.getText("TLTP_GLOBAL_HIERARCHY_RESOURCES"));
				break;
			case sap.gantt.control.ToolbarType.Local:
				aSource = this.getHierarchies();
				this._oSourceSelectBox.setTooltip(this._oRb.getText("TLTP_LOCAL_HIERARCHY_RESOURCES"));
				break;
			default:
				return null;
		}

		var oCoreItem;
		for (var iIndex = 0; iIndex < aSource.length; iIndex++) {
			oCoreItem = new CoreItem({
				key: aSource[iIndex].getKey(),
				text: aSource[iIndex].getText()
			});
			oCoreItem.oSourceConfig = aSource[iIndex];
			this._oSourceSelectBox.addItem(oCoreItem);

			if (oCoreItem.getKey() === sSourceId) {
				this._oSourceSelectBox.setSelectedItem(oCoreItem);
			}
		}

		return this._oSourceSelectBox;
	};

	Toolbar.prototype._genLayoutGroup = function(oGroupConfig) {
		if (this.getType === "LOCAL") {
			return null;
		}

		var that = this,
			aHierarchies = this.getHierarchies(),
			oCoreItem,
			i;

		// addGanttChart Select
		this._oAddGanttChartSelect = new Select({
			icon : "sap-icon://add",
			type: sap.m.SelectType.IconOnly,
			autoAdjustWidth: true,
			tooltip: this._oRb.getText("TLTP_ADD_GANTTCHART"),
			forceSelection: false,
			layoutData: new OverflowToolbarLayoutData({priority: oGroupConfig.getOverflowPriority()}),
			change: function (oEvent) {
				if (oEvent.getParameter("selectedItem")) {
					that.fireLayoutChange({
						id: "add",
						value: {
							hierarchyKey: oEvent.getParameter("selectedItem").getKey(),
							hierarchyConfig: oEvent.getParameter("selectedItem").data("hierarchyConfig")
						}
					});
					oEvent.getSource().setSelectedItemId("");
				}
			}
		});
		// add items if exist
		if (aHierarchies && aHierarchies.length > 0) {
			for (i = 0; i < aHierarchies.length; i++) {
				oCoreItem = new CoreItem({
					text: aHierarchies[i].getText(),
					key: aHierarchies[i].getKey()
				});
				oCoreItem.data("hierarchyConfig", aHierarchies[i]);
				this._oAddGanttChartSelect.addItem(oCoreItem);
			}
		}

		// lessGanttChartSelect
		this._oLessGanttChartSelect = new Select({
			icon: "sap-icon://less",
			type: sap.m.SelectType.IconOnly,
			tooltip: this._oRb.getText("TLTP_REMOVE_GANTTCHART"),
			autoAdjustWidth: true,
			forceSelection: false,
			layoutData: new OverflowToolbarLayoutData({priority: oGroupConfig.getOverflowPriority()}),
			change: function (oEvent) {
				if (oEvent.getParameter("selectedItem")) {
					that.fireLayoutChange({
						id: "less",
						value: {
							hierarchyKey: oEvent.getParameter("selectedItem").getKey(),
							hierarchyConfig: oEvent.getParameter("selectedItem").data("hierarchyConfig"),
							ganttChartIndex: oEvent.getParameter("selectedItem").data("ganttChartIndex")
						}
					});
				}
			}
		});
		this._oLessGanttChartSelect.addEventDelegate({
			onclick: this._fillLessGanttChartSelectItem
		}, this);

		// VH Layout Button
		var sIcon = this._oContainerLayoutConfigMap[this.getSourceId()].getOrientation() === Orientation.Vertical ?
				"sap-icon://resize-vertical" : "sap-icon://resize-horizontal";
		this._oVHButton = new Button({
			icon: sIcon,
			tooltip: this._oRb.getText("TLTP_SWITCH_GANTTCHART"),
			type: oGroupConfig.getEnableRichStyle() ? ButtonType.Emphasized : ButtonType.Default,
			layoutData: new OverflowToolbarLayoutData({priority: oGroupConfig.getOverflowPriority()}),
			press: function (oEvent) {
				switch (this.getIcon()){
					case "sap-icon://resize-vertical":
						this.setIcon("sap-icon://resize-horizontal");
						that.fireLayoutChange({
							id: "orientation",
							value: Orientation.Horizontal
						});
						break;
					case "sap-icon://resize-horizontal":
						this.setIcon("sap-icon://resize-vertical");
						that.fireLayoutChange({
							id: "orientation",
							value: Orientation.Vertical
						});
						break;
					default:
						break;
				}
			}
		});

		// Segmented Button
		this._oLayoutButton = [this._oAddGanttChartSelect, this._oLessGanttChartSelect, this._oVHButton];

		return this._oLayoutButton;
	};
	
	Toolbar.prototype._fillLessGanttChartSelectItem = function () {
		var aGanttCharts = this.data("holder").getGanttCharts(),
			oItem;

		this._oLessGanttChartSelect.removeAllItems();
		if (aGanttCharts && aGanttCharts.length > 0) {
			for (var i = 0; i < aGanttCharts.length; i++) {
				oItem = new CoreItem({
					text: this._oHierarchyConfigMap[aGanttCharts[i].getHierarchyKey()].getText(),
					key: aGanttCharts[i].getHierarchyKey()
				});
				oItem.data("hierarchyConfig",
						this._oHierarchyConfigMap[aGanttCharts[i].getHierarchyKey()]);
				oItem.data("ganttChartIndex", i);
				this._oLessGanttChartSelect.insertItem(oItem, i);
			}
		}
	};

	Toolbar.prototype._genExpandChartGroup = function (oGroupConfig) {
		this._aChartExpandButtons = [];

		var fnPressEventHanlder =  function(oEvent) {
			this.fireExpandChartChange({
				isExpand: oEvent.getSource().data("isExpand"),
				expandedChartSchemes: oEvent.getSource().data("chartSchemeKeys")
			});
		};

		var aExpandChartButtonConfig = oGroupConfig.getExpandCharts(),
			oButton;
		for (var i = 0; i < aExpandChartButtonConfig.length; i++) {
			var oConfig = aExpandChartButtonConfig[i];
			
			oButton = new Button({
				icon: oConfig.getIcon(),
				tooltip: oConfig.getTooltip(),
				layoutData: new OverflowToolbarLayoutData({priority: oGroupConfig.getOverflowPriority()}),
				press: fnPressEventHanlder.bind(this),
				type: oGroupConfig.getEnableRichType() && oConfig.getIsExpand() ?
						ButtonType.Emphasized : ButtonType.Default,
				customData : [
					new sap.ui.core.CustomData({
						key : "isExpand",
						value : oConfig.getIsExpand()
					}),
					new sap.ui.core.CustomData({
						key : "chartSchemeKeys",
						value : oConfig.getChartSchemeKeys()
					})
				]
			});
			if (oGroupConfig.getShowArrowText()) {
				oButton.setText(oConfig.getIsExpand() ? "ꜜ" : "ꜛ");
				//"￬" : "￪",// "⬇" : "⬆",//"⤓" : "⤒",//"⇊" : "⇈",//"↓" : "↑", //"⇩" : "⇧"
			}
			this._aChartExpandButtons.push(oButton);
		}
		return this._aChartExpandButtons;
	};

	Toolbar.prototype._genCustomToolbarItemGroup = function (sPosition, oGroupConfig) {

		if (this._iCustomItemInsertIndex === -1) {
			// Because the order had been sorted, the position for the custom tool bar item
			// is right after the previous items.
			var iTotalBeforeLength = this._oAllCustomItems[sPosition].length;
			if (iTotalBeforeLength === 0) {
				// If there is no item at all before custom items, set the cursor to -1
				// It's not only an index but also a flag to indicate the current situation.
				this._iCustomItemInsertIndex = -1;
			} else {
				// Otherwise, the position is the end of the previous items.
				this._iCustomItemInsertIndex = iTotalBeforeLength - 1;
			}
		}
		return this._aCustomItems;
	};

	Toolbar.prototype._genExpandTreeGroup = function (oGroupConfig) {
		var that = this; // tool bar itself
		this._oTreeGroup = [new Button({
				icon: "sap-icon://expand",
				tooltip: this._oRb.getText("TLTP_EXPAND"),
				layoutData: new OverflowToolbarLayoutData({priority: oGroupConfig.getOverflowPriority()}),
				press: function (oEvent) {
					that.fireExpandTreeChange({
						action: "expand"
					});
				}
			}), new Button({
				icon: "sap-icon://collapse",
				tooltip: this._oRb.getText("TLTP_COLLAPSE"),
				layoutData: new OverflowToolbarLayoutData({priority: oGroupConfig.getOverflowPriority()}),
				press: function (oEvent) {
					that.fireExpandTreeChange({
						action: "collapse"
					});
				}
			})];
		return this._oTreeGroup;
	};

	Toolbar.prototype._genModeButtonGroup = function (oGroupConfig) {
		var fnModeButtonGroupSelectHandler = function(oEvent) {
			var selected = oEvent.getParameter("button");
			this.fireModeChange({
				mode: selected.data("mode")
			});
		};
		this._oModeSegmentButton = new SegmentedButton({select: fnModeButtonGroupSelectHandler.bind(this)});
		this._oModeButtonMap = {};	
		var fnJqueryeachFunction =  function (iIndex, sMode) {
			if (this._oModesConfigMap[sMode]) {
				var oButton = new Button({
					icon: this._oModesConfigMap[sMode].getIcon(),
					activeIcon: this._oModesConfigMap[sMode].getActiveIcon(),
					tooltip: this._oModesConfigMap[sMode].getText(),
					layoutData: new OverflowToolbarLayoutData({priority: oGroupConfig.getOverflowPriority()}),
					customData : [
						new sap.ui.core.CustomData({
							key : "mode",
							value : sMode
						})
					]
				});
				this._oModeButtonMap[sMode] = oButton;
				this._oModeSegmentButton.addButton(oButton);
			}
		};
		jQuery.each(oGroupConfig.getModeKeys(), fnJqueryeachFunction.bind(this));
		if (this._sInitMode) {
			this._oModeSegmentButton.setSelectedButton(this._oModeButtonMap[this._sInitMode]);
		}
		return this._oModeSegmentButton;
	};


	Toolbar.prototype._genZoomSliderGroupControls = function (oGroupConfig) {
		

		var oLayoutData = new OverflowToolbarLayoutData({
			priority: oGroupConfig.getOverflowPriority()
		});

		var fnCalculateZoomRate = function(fSliderValue) {
			return Math.pow(Math.E, fSliderValue);
		};

		var fnFireZoomRateChange = function(fZoomRate) {
			jQuery.sap.clearDelayedCall(this._iLiveChangeTimer);
			this._iLiveChangeTimer = -1;

			var fLastZoomRate = this.getZoomRate();
			this.setProperty("zoomRate", fZoomRate);
			if (fZoomRate === fLastZoomRate) {
				return ;
			}

			this.fireZoomRateChange({ zoomRate: fZoomRate });
			jQuery.sap.log.debug("Toolbar Zoom Rate was changed, zoomRate is: " + fZoomRate);
		};

		var oZoomSlider = new Slider({
			width: "200px",
			layoutData: oLayoutData,
			liveChange: function(oEvent) {
				var fZoomRate = fnCalculateZoomRate(oEvent.getSource().getValue());
				// Clear the previous accumulated event
				jQuery.sap.clearDelayedCall(this._iLiveChangeTimer);
				this._iLiveChangeTimer = jQuery.sap.delayedCall(200, this, fnFireZoomRateChange, [fZoomRate]);
			}.bind(this)
		});

		var fnZoomButtonPressHandler = function(bZoomIn) {
			return function(oEvent){
				var fZoomRate = 0.0, 
					sSliderValue = 0.0;
				if (bZoomIn) {
					sSliderValue = this._oZoomSlider.stepUp(1).getValue();
				} else {
					sSliderValue = this._oZoomSlider.stepDown(1).getValue();
				}
				fZoomRate = fnCalculateZoomRate(sSliderValue);
				this._oZoomSlider.setValue(Math.log(fZoomRate));

				this._iLiveChangeTimer = jQuery.sap.delayedCall(200, this, fnFireZoomRateChange, [fZoomRate]);
			};
		};

		var oZoomInButton = new sap.m.Button({
			icon: "sap-icon://zoom-in",
			tooltip: this._oRb.getText("TLTP_SLIDER_ZOOM_IN"),
			layoutData: oLayoutData.clone(),
			press: fnZoomButtonPressHandler(true /**bZoomIn*/).bind(this)
		});

		var oZoomOutButton = new Button({
			icon: "sap-icon://zoom-out",
			tooltip: this._oRb.getText("TLTP_SLIDER_ZOOM_OUT"),
			layoutData: oLayoutData.clone(),
			press: fnZoomButtonPressHandler(false /**bZoomIn*/).bind(this)
		});
		this._oZoomSlider = oZoomSlider;
		return [oZoomInButton, oZoomSlider, oZoomOutButton];
	};

	Toolbar.prototype._genLegend = function (oGroupConfig) {
		if (!this._oLegendPop) {
			this._oLegendPop = new Popover({
				placement: PlacementType.Bottom,
				showArrow: false,
				showHeader: false
			});
		}

		if (this.getLegend()) {
			this._oLegendPop.removeAllContent();
			this._oLegendPop.addContent(this.getLegend());
		}
		
		this._oLegendButton = new Button({
			icon: "sap-icon://legend",
			tooltip: this._oRb.getText("TLTP_SHOW_LEGEND"),
			layoutData: new OverflowToolbarLayoutData({priority: oGroupConfig.getOverflowPriority()}),
			press: function (oEvent) {
				var oLegendPop = this._oLegendPop;
				if (oLegendPop.isOpen()){
					oLegendPop.close();
				} else {
					oLegendPop.openBy(this._oLegendButton);
				}
			}.bind(this)
		});
		return this._oLegendButton;
	};

	Toolbar.prototype._genSettings = function (oGroupConfig) {
		var aSettingGroupItems = oGroupConfig.getItems() || [];

		var that = this;

		var aAllSettingItems = aSettingGroupItems.map(function(oGroupItem){
			return new CheckBox({
				name: oGroupItem.getKey(),
				text: oGroupItem.getDisplayText(),
				tooltip: oGroupItem.getTooltip(),
				selected: oGroupItem.getChecked()
			}).addStyleClass("sapUiSettingBoxItem");
		});

		// Need set the old setting state on the toolbar instance for reference
		this._aOldSettingState = aAllSettingItems.map(function(oItem){
			return oItem.getSelected();
		});
		
		this._setSettingItemStates(aAllSettingItems);
		
		this._oSettingsBox = new FlexBox({
			direction: FlexDirection.Column,
			items: aAllSettingItems
		}).addStyleClass("sapUiSettingBox");

		this._oSettingsDialog = new ViewSettingsDialog({
			title: this._oRb.getText("SETTINGS_DIALOG_TITLE"),
			customTabs: [new ViewSettingsCustomTab({content: this._oSettingsBox})],
			confirm: function() {
				var aSettingItems = /*that.aSharedSettingItemStatus ? 
						that.aSharedSettingItemStatus : */this._oSettingsBox.getItems();
				var parameters = [];
				for (var i = 0; i < aSettingItems.length; i++) {
					parameters.push({
						id: aSettingItems[i].getName(),
						value: aSettingItems[i].getSelected()
					});
					that._aOldSettingState[i] = aSettingItems[i].getSelected();
				}
				//store the custom setting item status in toolbar to keep the data consistency when switching views
				that.aCustomSettingItems = that._getCustomSettingItems(aSettingItems);
				this.fireSettingsChange(parameters);
			}.bind(this),
			cancel: function() {
				// when cancel, the selected state should be restored when reopen
				that._setSettingItemStates(aAllSettingItems);
				that._restoreCustomOldStates(aAllSettingItems);
			}
		});
		
		this._oSettingsButton = new Button({
			icon: "sap-icon://action-settings",
			tooltip: this._oRb.getText("TLTP_CHANGE_SETTINGS"),
			layoutData: new OverflowToolbarLayoutData({priority: oGroupConfig.getOverflowPriority()}),
			press: function (oEvent) {
				this._oSettingsDialog.open();
			}.bind(this)
		});

		return this._oSettingsButton;
	};
	
	Toolbar.prototype._setSettingItemStates = function (aAllSettingItems) {
		for (var i = 0; i < aAllSettingItems.length; i++) {
			switch (aAllSettingItems[i].getName()) {
			case sap.gantt.config.SETTING_ITEM_ENABLE_NOW_LINE_KEY:
				aAllSettingItems[i].setSelected(this.getEnableNowLine());
				break;
			case sap.gantt.config.SETTING_ITEM_ENABLE_CURSOR_LINE_KEY:
				aAllSettingItems[i].setSelected(this.getEnableCursorLine());
				break;
			case sap.gantt.config.SETTING_ITEM_ENABLE_VERTICAL_LINE_KEY:
				aAllSettingItems[i].setSelected(this.getEnableVerticalLine());
				break;
			case sap.gantt.config.SETTING_ITEM_ENABLE_TIME_SCROLL_SYNC_KEY:
				aAllSettingItems[i].setSelected(this.getEnableTimeScrollSync());
				break;
			case sap.gantt.config.SETTING_ITEM_ROW_SCROLL_SYNC_KEY:
				aAllSettingItems[i].setSelected(this.getEnableRowScrollSync());
				break;
			default:
				this._handleCustomSettingItemStates(aAllSettingItems[i]);
				break;
			}
		}
	};
	//need to loop and find custom setting items and set them here
	Toolbar.prototype._handleCustomSettingItemStates = function (settingItem) {
		if (this.aCustomSettingItems && this.aCustomSettingItems.length > 0) {
			for (var j = 0; j < this.aCustomSettingItems.length; j++) {
				if (settingItem.getName() === this.aCustomSettingItems[j].getName()) {
					settingItem.setSelected(this.aCustomSettingItems[j].getSelected());
					break;
				}
			}
		}
	};
	//need to restore the old custom setting item status if canceled.
	Toolbar.prototype._restoreCustomOldStates = function (aAllSettingItems) {
		var settingItemLength = sap.gantt.config.DEFAULT_TOOLBAR_SETTING_ITEMS.length;
		for (var i = settingItemLength; i < aAllSettingItems.length; i++){
			aAllSettingItems[i].setSelected(this._aOldSettingState[i]);
		}

	};
	
	Toolbar.prototype._getCustomSettingItems = function (aSettingItems) {
		var customSettingItems = [];
		var settingItemLength = sap.gantt.config.DEFAULT_TOOLBAR_SETTING_ITEMS.length;
		for (var i = settingItemLength; i < aSettingItems.length; i++){
			customSettingItems.push(aSettingItems[i]);
		}
		return customSettingItems;
	};

	Toolbar.prototype.getToolbarSchemeKey = function () {
		return this._sToolbarSchemeKey;
	};
	
	Toolbar.prototype.setEnableNowLine = function(bEnableNowLine) {
		this.setProperty("enableNowLine", bEnableNowLine);
		if (this._oSettingsBox && this._oSettingsBox.getItems().length > 0) {
			this._setSettingItemProperties(sap.gantt.config.SETTING_ITEM_ENABLE_NOW_LINE_KEY, bEnableNowLine);
		}
		return this;
	};
	
	Toolbar.prototype.setEnableCursorLine = function(bEnableCursorLine) {
		this.setProperty("enableCursorLine", bEnableCursorLine);
		if (this._oSettingsBox && this._oSettingsBox.getItems().length > 0) {
			this._setSettingItemProperties(sap.gantt.config.SETTING_ITEM_ENABLE_CURSOR_LINE_KEY, bEnableCursorLine);
		}
		return this;
	};
	
	Toolbar.prototype.setEnableVerticalLine = function(bEnableVerticalLine) {
		this.setProperty("enableVerticalLine", bEnableVerticalLine);
		if (this._oSettingsBox && this._oSettingsBox.getItems().length > 0) {
			this._setSettingItemProperties(sap.gantt.config.SETTING_ITEM_ENABLE_VERTICAL_LINE_KEY, bEnableVerticalLine);
		}
		return this;
	};
	
	Toolbar.prototype.setEnableRowScrollSync = function(bEnableRowScrollSync) {
		this.setProperty("enableRowScrollSync", bEnableRowScrollSync);
		if (this._oSettingsBox && this._oSettingsBox.getItems().length > 0) {
			this._setSettingItemProperties(sap.gantt.config.SETTING_ITEM_ROW_SCROLL_SYNC_KEY, bEnableRowScrollSync);
		}
		return this;
	};
	
	Toolbar.prototype.setEnableTimeScrollSync = function(bEnableTimeScrollSync) {
		this.setProperty("enableTimeScrollSync", bEnableTimeScrollSync);
		if (this._oSettingsBox && this._oSettingsBox.getItems().length > 0) {
			this._setSettingItemProperties(sap.gantt.config.SETTING_ITEM_ENABLE_TIME_SCROLL_SYNC_KEY, bEnableTimeScrollSync);
		}
		return this;
	};
	
	Toolbar.prototype._setSettingItemProperties = function(settingItemKey, settingItemStatus) {
		var settingItems = this._oSettingsBox.getItems();
		for (var i = 0; i < settingItems.length; i++) {
			if (settingItems[i].getName() === settingItemKey) {
				settingItems[i].setSelected(settingItemStatus);
				break;
			}	
		}
	};

	Toolbar.prototype.exit = function () {
		if (this._oLegendPop) {
			this._oLegendPop.destroy(false);
		}
		if (this._oSettingsPop) {
			this._oSettingsPop.destroy(false);
		}
	};

	return Toolbar;
}, true);

}; // end of sap/gantt/control/Toolbar.js
if ( !jQuery.sap.isDeclared('sap.gantt.def.cal.Calendar') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.def.cal.Calendar'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/def/cal/Calendar",[
	"../DefBase", "sap/gantt/misc/Format"
], function (DefBase,Format) {
	"use strict";
	
	/**
	 * Creates and initializes a calendar defined and embedded in a 'defs' tag for later reuse.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * A calendar that contains a list of time interval definitions.
	 * 
	 * <p>
	 * A pattern definition is generated per calendar key.
	 * </p>
	 * 
	 * @extends sap.gantt.def.DefBase
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.def.cal.Calendar
	 */
	var Calendar = DefBase.extend("sap.gantt.def.cal.Calendar", /** @lends sap.gantt.def.cal.Calendar */ {
		metadata: {
			properties: {
				
				/**
				 * Key of the calendar. Note that this value is used to generate the referencing string of the calendar pattern.
				 */
				key: {type : "string", defaultValue : "calendar"},
				
				/**
				 * Background color of time intervals.
				 */
				backgroundColor: {type : "sap.gantt.ValueSVGPaintServer", defaultValue: "#e5e5e5"}
			},
			aggregations: {
				
				/**
				 * Time intervals that should be painted with the value of <code>backgroundColor</code>.
				 */
				timeIntervals: {type: "sap.gantt.def.cal.TimeInterval", multiple: true,
					singularName: "timeInterval",bindable: "bindable"}
			}
		}
	});
	
	Calendar.prototype.getDefNode = function () {
		var aTimeIntervals = this.getTimeIntervals();
		var oStatusSet = (this.getParent() && this.getParent().getParent()) ? this.getParent().getParent()._oStatusSet : null;
		var oViewBoundary = oStatusSet ? oStatusSet.aViewBoundary : null;
		var oTimeBoundary = oStatusSet ? oStatusSet.aTimeBoundary : null;

		var aFilteredTimeIntervals = aTimeIntervals;
		if (oTimeBoundary && oStatusSet) {
			aFilteredTimeIntervals = aTimeIntervals.filter(function(oItem){
				var startTime = Format.abapTimestampToDate(oItem.getStartTime());
				var endTime = Format.abapTimestampToDate(oItem.getEndTime());
				if (oStatusSet.bRTL === true){
					return (endTime < oTimeBoundary[0] && endTime > oTimeBoundary[1]) || (startTime > oTimeBoundary[1] && startTime < oTimeBoundary[0]);
				} else {
					return (endTime < oTimeBoundary[1] && endTime > oTimeBoundary[0]) || (startTime > oTimeBoundary[0] && startTime < oTimeBoundary[1]);
				}
			});
		}

		var width = (oViewBoundary && oViewBoundary.length > 1 ) ? (oViewBoundary[1] - oViewBoundary[0]) : 1;
		var patternObj = { id: this.generateRefId(), x: 0, y: 0, width: width, timeIntervals: [] };
		for (var i = 0; i < aFilteredTimeIntervals.length; i++) {
			var oInterval = aFilteredTimeIntervals[i].getDefNode();
			oInterval.fill = this.getBackgroundColor();
			patternObj.timeIntervals.push(oInterval);
		}

		return patternObj;
	};

	Calendar.prototype.generateRefId = function () {
		var sId = (this.getParent() && this.getParent().getParent()) ? this.getParent().getParent().getId() : "";
		return sId + "_" + this.getKey();
	};

	return Calendar;
}, true);

}; // end of sap/gantt/def/cal/Calendar.js
if ( !jQuery.sap.isDeclared('sap.gantt.def.cal.TimeInterval') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.def.cal.TimeInterval'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
sap.ui.define("sap/gantt/def/cal/TimeInterval",[
	"../DefBase", "sap/gantt/misc/Format", "sap/ui/core/Core"
], function (DefBase, Format, Core) {
	"use strict";
	
	/**
	 * Creates and initializes a time interval inside the calendar.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * A time interval.
	 * 
	 * @extends sap.gantt.def.DefBase
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.def.cal.TimeInterval
	 */
	var TimeInterval = DefBase.extend("sap.gantt.def.cal.TimeInterval", {
		metadata: {
			properties: {
				
				/**
				 * Start Time of timeHorizon. Format: YYYYMMDDHHMMSS. If the type of startTime is object, the value is converted to string.
				 */
				startTime: {type: "string", group: "Misc", defaultValue: null},
				
				/**
				 * End time of timeHorizon. Format: YYYYMMDDHHMMSS. If the type of startTime is object, the value is converted to string.
				 */
				endTime: {type: "string", group: "Misc", defaultValue: null}
			}
		}
	});
	
	TimeInterval.prototype.setStartTime = function (vStartTime) {
		this.setProperty("startTime", this._convertTimestamp(vStartTime));
	};
	
	TimeInterval.prototype.setEndTime = function (vEndTime) {
		this.setProperty("endTime", this._convertTimestamp(vEndTime));
	};
	
	TimeInterval.prototype._convertTimestamp = function (vTime) {
		var sRetVal = vTime;
		if (sRetVal && typeof sRetVal === "object") {
			sRetVal = Format.dateToAbapTimestamp(sRetVal);
		}
		return sRetVal;
	};

	TimeInterval.prototype.getDefNode = function () {
		var oAxisTime = (this.getParent() && this.getParent().getParent() && this.getParent().getParent().getParent()) ?
				this.getParent().getParent().getParent().getAxisTime() : null;
		var startX;
		var width;
		if (oAxisTime) { 
			if (Core.getConfiguration().getRTL() === true) {
				startX = oAxisTime.timeToView(Format.abapTimestampToDate(this.getEndTime()));
				width = oAxisTime.timeToView(Format.abapTimestampToDate(this.getStartTime())) - startX;
			} else {
				startX = oAxisTime.timeToView(Format.abapTimestampToDate(this.getStartTime()));
				width = oAxisTime.timeToView(Format.abapTimestampToDate(this.getEndTime())) - startX;
			}
		}

		return {x: startX, y: 0, width: width};
	};

	return TimeInterval;
}, true);

}; // end of sap/gantt/def/cal/TimeInterval.js
if ( !jQuery.sap.isDeclared('sap.gantt.def.pattern.BackSlashPattern') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.def.pattern.BackSlashPattern'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/def/pattern/BackSlashPattern",[
	"./PatternBase"
], function (PatternBase) {
	"use strict";
	
	/**
	 * Creates and initializes a backslash pattern defined for later reuse.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * Backslash pattern defined by a path. The stroke color and stroke width of the path can be modified with properties.
	 * 
	 * <p>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="8.8cm" viewBox="0 0 300 220" version="1.1">
	 * <defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * 	<marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * 	<style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * 	.arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63;fill:none} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * 	<rect x="1" y="1" width="298" height="218" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<defs><pattern class="pattern" id="p3" patternUnits="userSpaceOnUse" x="0" y="0" width="4" height="4"><rect x="0" width="4" height="4" fill="#e2e2e2"></rect><path d="M -1 3 l 2 2 M 0 0 l 4 4 M 3 -1 l 2,2" stroke="#9E1F63" stroke-width="1"></path></pattern>
	 * 	<pattern class="pattern" id="p4" patternUnits="userSpaceOnUse" x="0" y="0" width="8" height="8"><rect x="0" width="8" height="8" fill="#fff"></rect><path d="M -2 6 l 4 4 M 0 0 l 8 8 M 6 -2 l 4,4" stroke="#6d6d6d" stroke-width="2"></path></pattern>
	 * 	<pattern class="pattern" id="p5" patternUnits="userSpaceOnUse" x="120" y="85" width="100" height="100"><rect x="0" width="100" height="100" fill="#e2e2e2"></rect><path d="M -25 75 l 50 50 M 0 0 l 100 100 M 75 -25 l 50,50" stroke="#1C75BC" stroke-width="30"></path></pattern></defs>
	 * 	<rect fill="url(#p3)" x="60" y="20" width="80" height="20" />
	 * 	<circle fill="url(#p4)" cx="180" cy="25" r="10" /> <circle fill="url(#p4)" cx="200" cy="30" r="15" />
	 * 	<text x="150" y="75" class="timeText">Tile Detail:</text>
	 * 	<rect fill="url(#p5)" x="120" y="85" width="100" height="100" />
	 * 	<path d="M 120 85 h 100 v 100 h -100 z" class="dashside" />
	 * 	<path d="M 220 85 h 20 m 0 100 h -20 v 20 m -100 0 v -20 m 7 -10 h -20 m 0 -45 h 20 m -7 -25 l -20 -20 m 21 -19 l 20 20" class="dashassist" />
	 * 	<path d="M 240 85 v 100" class="arrowline" />
	 * 	<path d="M 120 205 h 100" class="arrowline" />
	 * 	<path d="M 125 70 l -20 20" class="arrowline" />
	 * 	<text x="235" y="175" class="propertyText" transform="rotate(-90, 235 175)">tileHeight</text>
	 * 	<text x="130" y="200" class="propertyText">tileWidth</text>
	 * 	<text x="20" y="125" class="propertyText">background</text>
	 * 	<text x="50" y="145" class="propertyText">Color</text>
	 * 	<text x="15" y="180" class="propertyText">strokeColor</text>
	 * 	<text x="25" y="75" class="propertyText">strokeWidth</text>
	 * </svg>
	 * </p>
	 * 
	 * @extends sap.gantt.def.pattern.PatternBase
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.def.pattern.BackSlashPattern
	 */
	var BackSlashPattern = PatternBase.extend("sap.gantt.def.pattern.BackSlashPattern", /** @lends sap.gantt.def.pattern.BackSlashPattern.prototype  */ {
		metadata : {
			properties: {
				
				/**
				 * Value of the d attribute in Path element. The value is affected by property <code>tileWidth</code> and <code>tileHeight</code>.
				 * If this value is changed by coding, the effect is not guaranteed.
				 */
				path : {type : "string"},
				
				/**
				 * Stroke color of the path element.
				 */
				stroke : {type : "sap.gantt.ValueSVGPaintServer"},
				
				/**
				 * Stroke width of the path element.
				 */
				strokeWidth : {type : "int", defaultValue : 2}
			}
		}
	});

	BackSlashPattern.prototype.getPath = function () {
		var tileWidth = this.getTileWidth();
		var tileHeight = this.getTileHeight();
		var dStr = "";
		dStr = dStr.concat("M").concat(tileWidth / 4).concat(",").concat(tileHeight / 4 * 5).concat(" ");
		dStr = dStr.concat("l-").concat(tileWidth / 2).concat(",-").concat(tileHeight / 2).concat(" ");
		dStr = dStr.concat("M0,0").concat(" ");
		dStr = dStr.concat("l").concat(tileWidth).concat(",").concat(tileHeight).concat(" ");
		dStr = dStr.concat("M").concat(tileWidth / 4 * 5).concat(",").concat(tileHeight / 4).concat(" ");
		dStr = dStr.concat("l-").concat(tileWidth / 2).concat(",-").concat(tileHeight / 2).concat(" ");
		return dStr;
	};

	BackSlashPattern.prototype.getDefString = function () {
		return "<pattern class='pattern' id='" + this.getId() +
			"' patternUnits='userSpaceOnUse' x='0' y='0' width='" + this.getTileWidth() +
			"' height='" + this.getTileHeight() +
			"'><rect x='0' width='" + this.getTileWidth() +
			"' height='" + (this.getTileHeight() + 4) +
			"' stroke-width='" + this.getStrokeWidth() +
			"' fill='" + this.getBackgroundColor() +
			"' fill-opacity='" + this.getBackgroundFillOpacity() +
			"'></rect><path d='" + this.getPath() +
			"' stroke='" + this.getStroke() +
			"' stroke-width='" + this.getStrokeWidth() + "'></path></pattern>";
	};

	return BackSlashPattern;
}, true);

}; // end of sap/gantt/def/pattern/BackSlashPattern.js
if ( !jQuery.sap.isDeclared('sap.gantt.drawer.CalendarPattern') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.drawer.CalendarPattern'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained
jQuery.sap.require('sap.ui.thirdparty.d3'); // unlisted dependency retained
sap.ui.define("sap/gantt/drawer/CalendarPattern",[
	"sap/ui/core/Core", "sap/gantt/misc/Format","sap/ui/core/format/DateFormat", "sap/gantt/drawer/Drawer",
	// 3rd party lib
	"sap/ui/thirdparty/d3"
], function (Core, Format, DateFormat, Drawer) {
	"use strict";

	var CalendarPattern = Drawer.extend("sap.gantt.drawer.CalendarPattern");

	/*
	 * aSvgNode: svg body of parent node
	 * sParentId: parent id of the paint server defs
	 * 
	 */
	CalendarPattern.prototype.drawSvg = function (aSvgBodyNode, sParentId, oPatternDef, oStatusSet, iBaseRowHeight) {
		// temp save config
		this._oStatusSet = oStatusSet;
		
		if (oPatternDef && oPatternDef.getDefNode() && oPatternDef.getDefNode().defNodes) {
			var defNode = oPatternDef.getDefNode();
			var defId = sParentId + "-calendardefs";
			if (!(d3.select("#" + defId).empty())) {
				jQuery("#" + defId).remove();
			}
			var width = this._oStatusSet.aViewBoundary[1] - this._oStatusSet.aViewBoundary[0];
			if (width < 0) {
				width = this._oStatusSet.aViewBoundary[0] - this._oStatusSet.aViewBoundary[1];
			}
			var patternProp = {height: iBaseRowHeight, width: width};
			var patternDefG = aSvgBodyNode.select("#" + defId);
			if (patternDefG.empty()){
				patternDefG = aSvgBodyNode.insert("defs",":first-child")
									.attr("id", defId);
			}
			var patGData = patternDefG.selectAll(".calendarPattern")
									.data(defNode.defNodes);
			patGData.enter().append("pattern")
							.attr("class", "calendarPattern")
							.attr("id", function(d) {
								return d.id;
							})
							.attr("patternUnits", "userSpaceOnUse")
							.attr("x", 0)
							.attr("y", 0)
							.attr("width", patternProp.width)
							.attr("height", patternProp.height);
			patGData.exit().remove();
			
			var patternRect = patGData.selectAll("rect")
									.data(function() { 
											return this.parentNode.__data__.timeIntervals; 
										});
			patternRect.enter().append("rect");
			patternRect.attr("x",function(d) {
							return d.x;	
						})
						.attr("y", function(d) {
							return d.y;	
						})
						.attr("width", function(d) {
							return d.width;	
						})
						.attr("height", patternProp.height)
						.attr("fill", function(d){
							return d.fill;
						});
			patternRect.exit().remove();
		}
	};

	return CalendarPattern;
}, true);

}; // end of sap/gantt/drawer/CalendarPattern.js
if ( !jQuery.sap.isDeclared('sap.gantt.drawer.CursorLine') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.drawer.CursorLine'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained
jQuery.sap.require('sap.ui.thirdparty.d3'); // unlisted dependency retained
sap.ui.define("sap/gantt/drawer/CursorLine",[
	"sap/ui/core/Core", "sap/ui/Device", "sap/gantt/misc/Format","sap/ui/core/format/DateFormat", "sap/gantt/drawer/Drawer",
	// 3rd party lib
	"sap/ui/thirdparty/d3"
], function (Core, Device, Format, DateFormat, Drawer) {
	"use strict";

	/**
	 * CursorLine drawer.
	 *  ________
	 * | 12.Feb |
	 * |________|
	 *     |
	 *     |
	 *     |
	 *     |
	 *     |
	 */
	var CursorLine = Drawer.extend("sap.gantt.drawer.CursorLine");

	/**
	 * Draw cursor line to all gantt chart instances currently displayed.
	 * 
	 * @param {object} [aSvgBodyNode]: SVG body of all chart instances. update synchronized
	 * @param {object} [aSvgHeaderNode] Header SVG documents of Gantt Chart
	 * @param {sap.ui.core.Locale} [oLocale] Locale instance
	 * @param {object} [oCursorPoint] Cursor point of the target element information including 
	 *	x: x coordinate of mouse in the triggering SVG relative to the document: pageX,
	 *	y: y coordinate of mouse in the triggering SVG relative to the document: pageY,
	 *	svgHeight: height of the triggering SVG,
	 *	svgId: id of the triggering SVG
	 */
	CursorLine.prototype.drawSvg = function (aSvgBodyNode, aSvgHeaderNode, oLocale, oCursorPoint) {

		this._oLocale = oLocale;

		// Find out the left offset of SVG document which triggered the event 
		var iCursorOffsetLeft = jQuery('#' + oCursorPoint.svgId).offset().left;
		
		// The Gantt might have multiple charts. Here find out the chart SVG DOM node offset regarding to the document
		// Notice: Only Gantt charts in vertical layout are considered. It makes sure cursor line is draw vertical axis.
		//         It might have potential drawing problem on horizontal gantt chart layout
		var aActualDrawingPoints = [];
		aSvgBodyNode.each(function(data, index){
			var oSvg = jQuery(this),
				offset = oSvg.offset();
			aActualDrawingPoints.push({
				x: oCursorPoint.x + iCursorOffsetLeft - offset.left,
				y: oCursorPoint.y,

				svgId: oSvg.attr("id"),
				svgHeight: oSvg.height()
			});
		});

		var that = this;

		// Draw rectangle time label in Gantt Chart header SVG document
		aSvgHeaderNode.each(function(data, index){
			var aHeaderTopG = that._createHeaderTopG(d3.select(this));
			that._drawHeaderLabel(aHeaderTopG, aActualDrawingPoints[index]);
		});

		// Draw vertical line indicates the time in Gantt Chart body SVG document
		aSvgBodyNode.each(function(data, index){
			var aBodyTopG = that._createBodyTopG(d3.select(this));
			that._drawCursorLine(aBodyTopG, aActualDrawingPoints[index]);
		});
	};

	CursorLine.prototype._createBodyTopG = function (aSvgBodyNode) {
		// update body top g and bind data
		var aBodyTopG = aSvgBodyNode.selectAll(".cursorline-top")
			.data(function(){
				// use current svg height and id of topG data
				return [{
					svgHeight: jQuery(this.parentNode).height()
				}];
			});
		aBodyTopG.enter().append("g")
			.classed("cursorline-top", true);
		aBodyTopG.exit().remove();
		return aBodyTopG;
	};

	CursorLine.prototype._drawCursorLine = function (aGroup, oSvgPoint) {
		// update path
		var aPath = aGroup.selectAll("path")
			.data(function(d) {
				return [{
					svgHeight: d.svgHeight,
					x: oSvgPoint.x,
					y: oSvgPoint.y
				}];
			});
		aPath.enter().append("path")
			.classed("sapGanttCursorLineBody", true);
		aPath
			.attr("d", function (d) {
				return "M" + d.x + ",0v" + d.svgHeight + "h1h-1";
			});
		aPath.exit().remove();
	};

	CursorLine.prototype._createHeaderTopG = function (aSvgHeaderNode) {
		// update chart header top g and bind data
		var aHeaderTopG = aSvgHeaderNode.selectAll(".cursorline-header-top")
			.data(function(){
				// use current svg height and id of topG data
				return [{
					svgHeight: jQuery(this.parentNode).height()
				}];
			});
		aHeaderTopG.enter().append("g")
			.classed("cursorline-header-top", true);
		aHeaderTopG.exit().remove();
		return aHeaderTopG;
	};

	CursorLine.prototype._drawHeaderLabel = function (aGroup, oSvgPoint) {
		var that = this;
		var oAxisTime = this._getAxisTime(oSvgPoint.svgId);
		// update path
		var aRect = aGroup.selectAll("rect")
			.data(function(d) {
				return [{
					svgHeight: d.svgHeight,
					svgId: d.svgId,
					x: oSvgPoint.x,
					y: oSvgPoint.y
				}];
			});
		
		aRect.enter().append("rect")
			.classed("sapGanttCursorLineHeader", true);
		aRect
			.attr("width", function (d) {
				// Since width and height are not style class in SVG for FF and IE 
				// Have provide default width and height here
				return 64;
			}).attr("height", function (d) {
				// If more than 80, most likely it's in Cozy Mode, so make the height larger
				return d.svgHeight > 80 ? 30 : 25;
			})
			.attr("x", function (d) {
				// Move the start point by moving half of the rectangle width
				return d.x - parseFloat(aRect.attr('width')) / 2;
			})
			.attr("y", function (d) {
				// Minus the height of the rectangle and 5 for the margin
				return d.svgHeight - parseFloat(aRect.attr('height')) - 5;
			});
		aRect.exit().remove();

		var aText = aGroup.selectAll("text")
						.data(function(d) {
							return [{
								x: parseFloat(aRect.attr('x')) + parseFloat(aRect.attr('width') / 2),
								y: parseFloat(aRect.attr('y')) + parseFloat(aRect.attr('height') / 2)
							}];
						});
		aText.enter().append("text").classed("sapGanttCursorLineLabel", true);
		aText
			.attr("x", function (d) {
				return d.x;
			})
			.attr("y", function (d) {
				return d.y;
			})
			.text(function (d) {
				return that._getTimeLabel(
						Format.dateToAbapTimestamp(oAxisTime.viewToTime(d.x)),
						that._oLocale,
						oAxisTime);
			});
		if (Device.browser.msie) {
			// IE doesn't support alignment-baseline, so here need add relative vertical alignment
			aText.attr("dy", ".35em");
		}
		aText.exit().remove();
	};

	CursorLine.prototype.destroySvg = function (aSvgBodyNode, aSvgHeaderNode) {
		aSvgBodyNode.selectAll(".cursorline-top").remove();
		aSvgHeaderNode.selectAll(".cursorline-header-top").remove();
	};

	/**
	 * Get the AxisTime instance associated with the Gantt Chart SVG document
	 * 
	 * @param {string} [elementId] SVG document ID
	 * @returns {AxisTime} AxisTime instance of the Gantt Chart control
	 */
	CursorLine.prototype._getAxisTime = function (elementId) {
		var $element = jQuery("#" + elementId);
		var oAxisTime = null;
		if ($element && $element.control()) {
			oAxisTime = $element.control()[0].getAxisTime();
		}
		return oAxisTime;
	};

	CursorLine.prototype._getTimeLabel = function (sTimeStamp, oLocale, oAxisTime) {
		var oLocalTime = Format._convertUTCToLocalTime(sTimeStamp, oLocale);

		var langu = (sap.ui.getCore().getConfiguration().getLanguage()).toLowerCase();
		
		var oFormat = DateFormat.getDateTimeInstance({
			pattern : oAxisTime.getZoomStrategy()[oAxisTime.getCurrentTickTimeIntervalKey()].smallInterval.format
		}, new sap.ui.core.Locale(langu));

		return oFormat.format(oLocalTime);
	};

	return CursorLine;
}, true);

}; // end of sap/gantt/drawer/CursorLine.js
if ( !jQuery.sap.isDeclared('sap.gantt.drawer.ListLegend') ) {
jQuery.sap.declare('sap.gantt.drawer.ListLegend'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.thirdparty.d3'); // unlisted dependency retained
sap.ui.define("sap/gantt/drawer/ListLegend",[
	"sap/gantt/drawer/Drawer", "sap/gantt/misc/Utility","sap/gantt/misc/Format",
	// 3rd party lib
	"sap/ui/thirdparty/d3"
], function (Drawer, Utility, Format) {
	"use strict";

	var ListLegend = Drawer.extend("sap.gantt.drawer.ListLegend");
	
	ListLegend.prototype._drawPerTag = function (aShape, oShape) {
		var oLegend = oShape.mChartInstance;

		if (oShape.getIsDuration()) {
			oShape.setTime(oLegend.TIME_RANGE[0]);
			oShape.setEndTime(oLegend.TIME_RANGE[1]);
		} else {
			oShape.setTime(oLegend.TIME);
		}
	
		oShape.setRowYCenter(oLegend._getScaledLegendHeight() / 2);
		
		switch (oShape.getTag()) {
			case "g":
				this._drawGroup(aShape, oShape);
				break;
			case "line":
				this._drawLine(aShape, oShape);
				break;
			case "rect":
				this._drawRect(aShape, oShape);
				break;
			case "text":
				this._drawText(aShape, oShape);
				break;
			case "path":
				this._drawPath(aShape, oShape);
				break;
//			case "clippath":
//				this._drawClipPath(aShape, oShape);
//				break;
			case "image":
				this._drawImage(aShape, oShape);
				break;
			case "polygon":
				this._drawPolygon(aShape, oShape);
				break;
			case "polyline":
				this._drawPolyline(aShape, oShape);
				break;
			case "circle":
				this._drawCircle(aShape, oShape);
				break;
			default:
				break;
		}
	};

	ListLegend.prototype._drawGroup = function (aShape, oShape) {
		var oGroup = aShape.append("g");

		var aAggregationShapes = oShape.getShapes();
		if (aAggregationShapes && aAggregationShapes.length > 0) {
			for (var i = 0; i < aAggregationShapes.length; i++) {
				this._drawPerTag(oGroup, aAggregationShapes[i]);
			}
		}
	};

	ListLegend.prototype._drawLine = function (aShape, oShape) {
		aShape.append("line")
			.attr("x1", oShape.getX1())
			.attr("y1", oShape.getY1())
			.attr("x2", oShape.getX2())
			.attr("y2", oShape.getY2())
			.attr("filter", oShape.getFilter())
			.attr("aria-label", oShape.getAriaLabel())
			.attr("stroke", this.determineValue("stroke", oShape))
			.attr("stroke-width", oShape.getStrokeWidth())
			.attr("stroke-dasharray", oShape.getStrokeDasharray())
			.attr("fill-opacity", oShape.getFillOpacity())
			.attr("stroke-opacity", oShape.getStrokeOpacity())
			.attr("transform", oShape.getTransform());
	};

	ListLegend.prototype._drawRect = function (aShape, oShape) {
//		var oRowInfo = {
//			y: 0,
//			rowHeight: oShape.mChartInstance._getScaledLegendHeight()
//		};
		aShape.append("rect")
			.attr("x", oShape.getX())
			.attr("y", oShape.getY(/*null, oRowInfo*/))
			.attr("width", oShape.getWidth())
			.attr("height", oShape.getHeight(/*null, oRowInfo*/))
			.attr("fill", this.determineValue("fill", oShape))
			.attr("rx", oShape.getRx())
			.attr("ry", oShape.getRy())
			.attr("filter", oShape.getFilter())
			.attr("stroke", this.determineValue("stroke", oShape))
			.attr("stroke-width", oShape.getStrokeWidth())
			.attr("stroke-dasharray", oShape.getStrokeDasharray())
			.attr("fill-opacity", oShape.getFillOpacity())
			.attr("stroke-opacity", oShape.getStrokeOpacity())
			.attr("aria-label", oShape.getAriaLabel())
			.attr("transform", oShape.getTransform());
	};

	ListLegend.prototype._drawText = function (aShape, oShape) {
		aShape.append("text")
			.attr("x", oShape.getX())//oShape.mChartInstance.getLegendWidth() / 2)
			.attr("y", oShape.getRowYCenter())
			.attr("text-anchor", "middle")
			.attr("font-size", oShape.getFontSize())
			.attr("fill", this.determineValue("fill", oShape))
			.attr("filter", oShape.getFilter())
			.attr("stroke", this.determineValue("stroke", oShape))
			.attr("stroke-width", oShape.getStrokeWidth())
			.attr("alignment-baseline", "central")
			.attr("font-family", oShape.getFontFamily())
			.text(oShape.getText())
			.attr("transform", oShape.getTransform());
	};

	ListLegend.prototype._drawPath = function (aShape, oShape) {
		function fOpacity() {
			if (oShape.getIsClosed()) {
				return oShape.getFillOpacity();
			}
		}
		function sOpacity() {
			if (oShape.getIsClosed()) {
				return oShape.getStrokeOpacity();
			}
		}
				
		aShape.append("path")
			.attr("d", oShape.getD())
			.attr("fill", this.determineValue("fill", oShape))
			.attr("stroke", this.determineValue("stroke", oShape))
			.attr("stroke-width", oShape.getStrokeWidth())
			.attr("stroke-dasharray", oShape.getStrokeDasharray())
			.attr("fill-opacity", fOpacity())
			.attr("stroke-opacity", sOpacity())
			.attr("filter", oShape.getFilter())			
			.attr("aria-label", oShape.getAriaLabel())
			.attr("transform", oShape.getTransform());
	};

//	ListLegend.prototype._drawClipPath = function (aShape, oShape) {
////		var fFindObjectInfo = this._findObjectInfo;
//
//		aShape/*.enter()*/.append("clipPath")
//			.classed(oShape.getId(), true)
////			.attr("id", oShape.getHtmlClass())
//			.append("path");
//
//		// Jean TODO: why getPaths()[0] ? should loop and generate all, then .apend("path") should be detached from enter();
//		aShape.selectAll("path")
//			.attr("d", oShape.getPaths()[0].getD4Area());
//	};

	ListLegend.prototype._drawImage = function (aShape, oShape) {
		aShape.append("image")
			.attr("xlink:href", oShape.getImage())
			.attr("x", oShape.getX() - oShape.getWidth() / 2)
			.attr("y", oShape.getY())
			.attr("width", oShape.getWidth())
			.attr("height", oShape.getHeight())
			.attr("filter", oShape.getFilter())
			.attr("aria-label", oShape.getAriaLabel())
			.attr("transform", oShape.getTransform());
	};

	ListLegend.prototype._drawPolygon = function (aShape, oShape) {
		aShape.append("polygon")
			.attr("fill", this.determineValue("fill", oShape))
			.attr("points", oShape.getPoints())
			.attr("stroke-width", oShape.getStrokeWidth())
			.attr("stroke", this.determineValue("stroke", oShape))
			.attr("filter", oShape.getFilter())
			.attr("aria-label", oShape.getAriaLabel())
			.attr("transform", oShape.getTransform());
	};
	
	ListLegend.prototype._drawPolyline = function (aShape, oShape) {
		aShape.append("polyline")
			.attr("fill", this.determineValue("fill", oShape))
			.attr("points", oShape.getPoints())
			.attr("stroke-width", oShape.getStrokeWidth())
			.attr("stroke", this.determineValue("stroke", oShape))
			.attr("filter", oShape.getFilter())
			.attr("aria-label", oShape.getAriaLabel())
			.attr("transform", oShape.getTransform());
	};
	
	ListLegend.prototype._drawCircle = function (aShape, oShape) {
		aShape.append("circle")
			.attr("fill", this.determineValue("fill", oShape))
			.attr("stroke-width", oShape.getStrokeWidth())
			.attr("stroke", this.determineValue("stroke", oShape))
			.attr("filter", oShape.getFilter())
			.attr("aria-label", oShape.getAriaLabel())
			.attr("cx", oShape.getCx())
			.attr("cy", oShape.getCy())
			.attr("r", oShape.getR())
			.attr("transform", oShape.getTransform());
	};

	ListLegend.prototype.determineValue = function(sAttr, oShape) {
		var sAttrValue = null;
		if (sAttr === "fill") {
			sAttrValue = oShape.getFill();
		} else if (sAttr === "stroke") {
			sAttrValue = oShape.getStroke();
		}
		return sap.gantt.ValueSVGPaintServer.normalize(sAttrValue);
	};
	return ListLegend;
	
}, true);

}; // end of sap/gantt/drawer/ListLegend.js
if ( !jQuery.sap.isDeclared('sap.gantt.drawer.NowLine') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.drawer.NowLine'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.thirdparty.d3'); // unlisted dependency retained
sap.ui.define("sap/gantt/drawer/NowLine",[
	"sap/gantt/misc/Utility", "./Drawer",
	"sap/ui/thirdparty/d3"
], function (Utility, Drawer) {
	"use strict";

	/*
	 * Default triangle length of side
	 */
	var mLengthOfSide = 8;

	/**
	 * Constructor for a NowLine.
	 *
	 * @class
	 * The Now line indicate the current date and time in Gantt Chart
	 * @extends sap.gantt.drawer.Drawer
	 * @constructor
	 * @private
	 * @alias sap.gantt.drawer.NowLine
	 */
	var NowLine = Drawer.extend("sap.gantt.drawer.NowLine", /** @lends sap.gantt.drawer.NowLine.prototype */ {
		/**
		 * Formatter for NowLine drawer.
		 *
		 * @param {object} oAxisTime an object know how to convert time and coordinates
		 */
		constructor : function(oAxisTime) {
			this.oAxisTime = oAxisTime;
		}
	});

	/*
	 * Drawer for NowLine.
	 * ___
	 * \ /
	 *  | It has two parts, header and body. Due to the Gantt Chart has two separate SVG documents represent Axis time header
	 *  | and body respectively, here we also need to draw SVG line separately.
	 */
	NowLine.prototype.drawSvg = function ($GanttChartSvg, $GanttChartHeaderSvg) {

		// Remove the line before drawing first
		this.destroySvg($GanttChartSvg, $GanttChartHeaderSvg);

		var iNowLineAxisX = this.oAxisTime.timeToView(new Date());

		var iChartWidth = jQuery($GanttChartSvg.node()).width();
		if (iNowLineAxisX > iChartWidth) {
			// if the calculated axis-x is larger than the current chart visible area.
			// It means the now line is out of the range so no need to draw anything.
			return;
		}

		var oChartContent = $GanttChartSvg,
			oChartHeader  = $GanttChartHeaderSvg;

		// For Axis X, the start X is calculated from AxitTime based on the latest date time
		// Chart header and content body was separate SVG document and header default height is 64px include 3px bottom padding
		// in order to make the triangle and line connect each other, using 61 as the top point Y Axis coordinate in chart header
		var oStartPoint = {
			x: iNowLineAxisX,
			y: jQuery($GanttChartHeaderSvg.node()).height()
		};
		
		this._drawHeaderTriangle(oStartPoint, oChartHeader);
		this._drawBodyStaightLine(oStartPoint, oChartContent);
	};

	NowLine.prototype._drawHeaderTriangle = function(oStartPoint, oParentSvgNode) {
		var halfTriangleWidth = mLengthOfSide / 2,
			tringleHeight = Math.sqrt(mLengthOfSide * mLengthOfSide - halfTriangleWidth * halfTriangleWidth);

		var aTrianglePoints = [
			oStartPoint,
			{x: oStartPoint.x - halfTriangleWidth, y: oStartPoint.y - tringleHeight},
			{x: oStartPoint.x + halfTriangleWidth, y: oStartPoint.y - tringleHeight},
			oStartPoint
		];
		var fnLine = d3.svg.line()
			.x(function(d) { return d.x; })
			.y(function(d) { return d.y; })
			.interpolate("linera");

		oParentSvgNode.append("g").classed("sapGanttNowLineHeaderSvgPath", true)
			.append("path")
			.attr("d", fnLine(aTrianglePoints));
	};

	NowLine.prototype._drawBodyStaightLine = function(oStartPoint, oParentSvgNode) {
		var aNowlineBody = oParentSvgNode.selectAll(".sapGanttNowLineBodySvgLine")
			.data(function(){
				var iWindowHeight = jQuery(window).height();
				return [{
					x1: oStartPoint.x, y1: 0,
					x2: oStartPoint.x, y2: oStartPoint.y + iWindowHeight
				}];
		});

		aNowlineBody.enter().append("g").classed("sapGanttNowLineBodySvgLine", true);
		var oNowline = aNowlineBody.selectAll("g").data(function(d){
			return [d];
		});
		oNowline.enter().append("line");
		oNowline.attr("x1", function(d){ return d.x1; })
			.attr("y1", function(d){ return d.y1; })
			.attr("x2", function(d){ return d.x2; })
			.attr("y2", function(d){ return d.y2; });
		oNowline.exit().remove();
	};

	NowLine.prototype.destroySvg = function ($GanttChartSvg, $GanttChartHeaderSvg) {
		if ($GanttChartSvg && $GanttChartHeaderSvg) {
			$GanttChartSvg.selectAll(".sapGanttNowLineBodySvgLine").remove();
			$GanttChartHeaderSvg.selectAll(".sapGanttNowLineHeaderSvgPath").remove();
		}
	};

	return NowLine;
}, true);

}; // end of sap/gantt/drawer/NowLine.js
if ( !jQuery.sap.isDeclared('sap.gantt.drawer.SelectionPanel') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.drawer.SelectionPanel'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
jQuery.sap.require('sap.ui.thirdparty.d3'); // unlisted dependency retained
sap.ui.define("sap/gantt/drawer/SelectionPanel",[
	"sap/gantt/drawer/Drawer", "sap/gantt/misc/Utility", "sap/ui/core/Core",
	// 3rd party lib
	"sap/ui/thirdparty/d3"
], function (Drawer, Utility, Core) {
	"use strict";

	var SelectionPanel = Drawer.extend("sap.gantt.drawer.SelectionPanel");
	
	SelectionPanel.prototype.drawSvg = function (aTableSvg, aSelectionSvg, aData, oGanttChartWithTable) {
		// temp save param
		this._oGanttChartWithTable = oGanttChartWithTable;
		// create top g
		
//		append row_g
		if (aData.length == 0){
			return null;
		}
		
		var dummyData = [];
		
		for (var i = 0; i < aData.length; i++){
			if (aData[i].data.__dummy && !aData[i].data.previousNodeNum && !aData[i].data.afterNodeNum){
				dummyData.push(aData[i]);
			}
		}
		

		var aTableRowG = aTableSvg.selectAll(".selectionpanel").data(dummyData);
		aTableRowG.enter().append("g").classed("selectionpanel",true);
		aTableRowG.exit().remove();
		
		var aSelectionRowG = aSelectionSvg.selectAll(".selectionpanel").data(dummyData);
		aSelectionRowG.enter().append("g").classed("selectionpanel",true);
		aSelectionRowG.exit().remove();
		
		// draw
		if (!aTableRowG.empty() && !aSelectionRowG.empty()) {
			var iSelectionWidth = $(aSelectionSvg[0][0]).width();
			var iTableWidth = $(aTableSvg[0][0]).width();
			this._drawExpandedBackground(aSelectionSvg,iSelectionWidth);
			this._drawExpandedBackground(aTableSvg,iTableWidth);
			this._drawExpandedContent(aTableSvg, iTableWidth);
		}
	};

	SelectionPanel.prototype._drawExpandedBackground = function (aSvg, iWidth) {		
		aSvg.selectAll(".selectionpanel").selectAll("rect").remove();
		aSvg.selectAll(".selectionpanel").append("rect").classed("sapGanttExpandChartBG",true)
			.attr("x", function (d) {
				return 0;
			})
			.attr("y", function (d) {
				return d.y;
			})
			.attr("height", function (d) {
				// -1 just for show parent container border 
				return d.rowHeight - 1;
			})
			.attr("width", function (d) {
				// -1 just for show parent container border
				return iWidth - 1;
			});
		
	};
	
	SelectionPanel.prototype._drawExpandedContent = function (aSvg, iWidth) {
		aSvg.selectAll(".selectionpanel").selectAll("g").remove();

		var that = this;
		aSvg.selectAll(".selectionpanel").append("g").classed("sapGanttExpandChartContent",true);
		var gShape = aSvg.selectAll(".sapGanttExpandChartContent");
		var filterGroup = gShape.filter(function(d, i) { return d.index === 1; });
		filterGroup.append("image")
		.classed("hasTitle", function (d) {
			return "image";
		})
		.attr("xlink:href", function (d) {
			return d.icon;
		})
		.attr("x", function (d) {
			if (Core.getConfiguration().getRTL() === true) {
				//right width to the parent container for RTL mode
				return iWidth - 19 - 16;
			} else {
				//left width to the parent container
				return 19;
			}
			
		})
		.attr("y", function (d) {
			//top height to parent container
			return d.y + 4.25;
		})
		.attr("width", function (d) {
			//icon width
			return 16;
		})
		.attr("height", function (d) {
			//icon height
			return 16;
		});

		filterGroup.append("text")
		.attr("x", function (d) {
			if (Core.getConfiguration().getRTL() === true) {
				//right width to the parent container for RTL mode
				return iWidth - 93 + 56;
			} else {
				//left width to the parent container
				return 38;
			}
			
		})
		.attr("y", function (d) {
			//top height to parent container
			return d.y + 16.5;
		})
		.attr("font-size", function (d) {
			return "0.75em";
		})
		.text(function (d) {
			return d.name;
		});
		filterGroup.append("g")
					.attr("transform", function(d){
						var sInitialX = 0, sInitialY = d.y + 7;
						if (Core.getConfiguration().getRTL() === true) {
							//right width to the parent container for RTL mode
							sInitialX =  iWidth - 93 - 4;
						} else {
							//left width to the parent container, plus half width of the close button
							sInitialX =  93 + 8;
						}
						return "translate(" + sInitialX + "," + sInitialY + ")";
					});
		filterGroup.select("g").append("path")
			.classed("sapGanttExpandChartCloseButton", true)
			.attr("d", "M1 0 h3 v4 h4 v3 h-4 v4 h-3 v-4 h-4 v-3 h4 v-4 z")
			.attr("transform", "rotate(45)")
			.on("click", function (d) {
				var aChartScheme = [];
				aChartScheme.push(d.chartScheme);
				var oBinding = that._oGanttChartWithTable._oTT.getBinding("rows");
				var aRows = oBinding.getContexts(0, oBinding.getLength());
				for (var i = 0; i < aRows.length; i++) {
					var oContext = aRows[i].getProperty();
					if (oContext && d.data.parentData && oContext.id == d.data.parentData.id) {
						that._oGanttChartWithTable.fireEvent("collapseDummyRow",{isExpand : false, expandedChartSchemes: aChartScheme, aExpandedIndices : [i]});
					}
				}
			});
		var aClosePath = filterGroup.selectAll("path");
		aClosePath.select("title").remove();
		aClosePath.insert("title", ":first-child")
		.text(function(d) {
			return sap.ui.getCore().getLibraryResourceBundle("sap.gantt").getText("TLTP_CLOSE");
		});
	};

	return SelectionPanel;
},true);

}; // end of sap/gantt/drawer/SelectionPanel.js
if ( !jQuery.sap.isDeclared('sap.gantt.drawer.ShapeCrossRow') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.drawer.ShapeCrossRow'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.thirdparty.d3'); // unlisted dependency retained
sap.ui.define("sap/gantt/drawer/ShapeCrossRow",[
	"sap/gantt/drawer/Drawer", "sap/gantt/misc/Utility",
	// 3rd party lib
	"sap/ui/thirdparty/d3"
], function (Drawer, Utility) {
	"use strict";

	var ShapeCrossRow = Drawer.extend("sap.gantt.drawer.ShapeCrossRow");
	
	ShapeCrossRow.prototype.drawSvg = function (aSvgNode, oShape, oAxisTime, oAxisOrdinal) {
		// temp save param
		this._oAxisTime = oAxisTime;
		this._oAxisOrdinal = oAxisOrdinal;
		// create top g
		var aShapeTopG = aSvgNode.select("." + oShape.getId() + "-top");
		if (aShapeTopG.empty()) {
			aShapeTopG = aSvgNode.append("g")
				.classed(oShape.getId() + "-top", true);
		}
		var relationshipDataObjectArray = [];
		for (var i in oShape.dataSet) {
			relationshipDataObjectArray.push(oShape.dataSet[i].shapeData[0]);
		}
		var aShape = aShapeTopG.selectAll("." + oShape.getId())
			.data(relationshipDataObjectArray);
		this._drawPath(aShape, oShape);
		this._drawInsertTitle(aShape, oShape);
	};
	
	ShapeCrossRow.prototype._drawPath = function (aShape, oShape) {
		var fFindObjectInfo = this._findObjectInfo;
		var that = this;

		aShape.enter().append("path")
			.classed(oShape.getId(), true);

		aShape
			.classed("hasTitle", function (d) {
				return oShape.getTitle(d, fFindObjectInfo(this, oShape, that)) ? true : false;
			})
			.classed("enableSelected", function (d) {
				return oShape.getEnableSelection(d, fFindObjectInfo(this, oShape, that)) ? true : false;
			})
			.attr("d", function (d) {
				return oShape.getD(d, fFindObjectInfo(this, oShape, that));
			}).attr("fill", function (d) {
				if (oShape.getIsClosed(d, fFindObjectInfo(this, oShape, that))) {
					return oShape.getFill(d, fFindObjectInfo(this, oShape, that));
				}
			}).attr("stroke", function (d) {
				return oShape.getStroke(d, fFindObjectInfo(this, oShape, that));
			}).attr("stroke-width", function (d) {
				return oShape.getStrokeWidth(d, fFindObjectInfo(this, oShape, that));
			}).attr("stroke-dasharray", function (d) {
				return oShape.getStrokeDasharray(d, fFindObjectInfo(this, oShape, that));
			}).attr("fill-opacity", function (d) {
				if (oShape.getIsClosed(d, fFindObjectInfo(this, oShape, that))) {
					return oShape.getFillOpacity(d, fFindObjectInfo(this, oShape, that));
				}
			}).attr("stroke-opacity", function (d) {
				if (oShape.getIsClosed(d, fFindObjectInfo(this, oShape, that))) {
					return oShape.getStrokeOpacity(d, fFindObjectInfo(this, oShape, that));
				}
			});

		aShape.exit().remove();
	};
	
	ShapeCrossRow.prototype._drawInsertTitle = function (aShape, oShape) {
		var fFindObjectInfo = this._findObjectInfo;
		var that = this;

		aShape.select("title").remove();
		aShape.insert("title", ":first-child")
			.text(function(d) {
				return oShape.getTitle(d, fFindObjectInfo(this, oShape, that));
			});
	};
	
	ShapeCrossRow.prototype._findObjectInfo = function (oNode, oShape, oThis, isSelectedShape) {
		// Since relationship raw data has been processed by _drawShapes method, oRawData (i.e. oNode.__data__.rawData) has already have "fromShapeInstance", "toShapeInstance" attributes.
		// To get the coordinates of the from shape (starting point) and to shape (ending point), it 
		// iterates objectDataSet to find the one whose id equals oRawData.fromObjectPath and gets the raw data of the ref object whose id equals oRawData.fromDataId.
		// The returned object which contains object and shape's raw data of from and to are later used by getD method and are passed into oRawData.fromShapeInstance.getRLSAnchors and
		// oRawData.toShapeInstance.getRLSAnchors methods for getting the coordinates.

		var relationship = oNode.__data__;
		var oRawData = relationship;
		if (isSelectedShape) {
			oRawData = relationship.data.rawData;
		}

		var rlsRetVal = {
			from: {
				objectInfo: oRawData.fromObject.objectInfoRef ? oRawData.fromObject.objectInfoRef : oRawData.fromObject,
				shapeRawData: oRawData.fromShapeRawData
			},
			to: {
				objectInfo: oRawData.toObject.objectInfoRef ? oRawData.toObject.objectInfoRef : oRawData.toObject,
				shapeRawData: oRawData.toShapeRawData
			}
		};
		return rlsRetVal;
	};
	
	ShapeCrossRow.prototype.destroySvg = function (aSvgNode, oShape) {
	};
	
	ShapeCrossRow.prototype.generateRelationshipDataSet = function (aSvgNode, oShapeMap, aNonVisibleShapeData, aShapeDataNames, oRelationship, oAxisTime, oAxisOrdinal) {
			/*
			 * This piece of code searches aRelationship and finds all relationships whose starting point and ending point are both expanded. 
			 * Set below attributes for these relationship:
			 * 		"fromShapeInstance"	the instance of shape class		type: object
			 * 		"toShapeInstance"		the instance of shape class		type: object
			 * And push these relationships into the "dataSet" attribute of Relationship class instance for drawing them later on.
			 * Additionally, this method also saves a reference of aDataSet into the "_objectDataSet" attribute of Relationship class.
			 * 
			 * Description of some objects which are used in this algorithm:
			 * - oShapeInstances
			 * 			the collection of shape instances, each element has 'dataSet' attribute which contains the data of that shape to draw
			 * - aRelationship
			 * 			the raw data of relationship which is set and stored in Chart object
			 * - this.dataSet 
			 * 			the array of the data of all the expanded rows (this means that its length is no smaller than 23 because there are always 23 rows in the visible area including empty rows), 
			 * it is changing according to users' interactions on the UI, e.g. expand/collapse a row,
			 * and it is constructed from traversing the initial tree structured data, for example,
			 * tree structure: 
			 * 			root
			 * 				header			id: 0
			 * 					phase		id: 10
			 * 						task	id: 20
			 * 						task	id: 21
			 * 					phase		id: 11
			 * 						task	id: 22
			 * 					phase		id: 12
			 * 				header			id: 1
			 * 
			 * dataSet structure:
			 * 		[header, phase, task, task, phase, task, phase, header]
			 * 
			 * map structure (is constructed in this function):
			 * 		{
			 * 			0: header,
			 * 			1: header,
			 * 			10: phase,
			 * 			11: phase,
			 * 			12: phase,
			 * 			20: task,
			 * 			21: task,
			 * 			22: task
			 * 		}
			 */
			//this._relationships = oRowBinding.getModel().getObject(oRowBinding.getPath() + "/relationships");
			var aRelationship = oRelationship;
			var relationshipDataSet = [];
			if (aRelationship !== undefined && aRelationship.length > 0) {
				var relationshipClass;
				var sShapeId;
				for (sShapeId in oShapeMap) {
					if (oShapeMap[sShapeId].getCategory(null, oAxisTime, oAxisOrdinal)
						=== sap.gantt.shape.ShapeCategory.Relationship) {
						relationshipClass = oShapeMap[sShapeId];
						break;
					}
				}

				if (relationshipClass) {

					var objectIdPathMap = {};

					//Initial objectIdPathMap
					//The purpose of generating the map of expanded row data is for checking whether both the relationship's starting point and ending point are expanded.
					//If the starting point isn't expanded, map[relationship.rawData.fromObjectPath] will be undefined.
					//If the ending point isn't expanded, map[relationship.rawData.toObjectPath] will be undefined.
					//A relationship whose starting point or ending point is not expanded won't be displayed.
					for (sShapeId in oShapeMap) {
						if (oShapeMap[sShapeId].dataSet && oShapeMap[sShapeId].dataSet != "" 
							&& oShapeMap[sShapeId].mShapeConfig.getShapeDataName() != sap.gantt.shape.ShapeCategory.Relationship){
							Utility.generateObjectPathToObjectMap(oShapeMap[sShapeId].dataSet, objectIdPathMap, null);
						}
					}
					Utility.generateObjectPathToObjectMap(aNonVisibleShapeData, objectIdPathMap, null);
						
					var relationship;
					var relationshipRawData;
					
					for (var i = 0; i < aRelationship.length; i++) {
						relationship = aRelationship[i];
						relationshipRawData = relationship;
						var fromObjectPath = relationshipClass.getFromObjectPath(relationshipRawData, null);
						var fromObject = objectIdPathMap[fromObjectPath];
					    var fromShapeId = relationshipClass.getFromShapeId(relationshipRawData, null);
						var fromDataId = relationshipClass.getFromDataId(relationshipRawData, null);
						//If fromObject doesn't exist in the map or it doesn't have 'y' attribute, it means the row isn't expanded,
						//then we are NOT displaying the relationship.
						if (!fromObject) {
							continue;
						}
						//fromObject.shapeData is the array contains one or multiple elements of shape data (when multiple, in that row there are multiple ones of that shape)
						//fromObject.shapeData MUST NOT be undefined
						var sFromShapeDataName = oShapeMap[fromShapeId].mShapeConfig.getShapeDataName();
						var fromShapeRawData = this._findShapeDataFromRowObjectByShapeDataName(fromObject, fromDataId, sFromShapeDataName);
						if (!fromShapeRawData) {
							continue;
						}
						//Get the raw data of the ref object whose id equals oRawData.fromDataId.
						//objecthierarchy._enhanceObject method sets rawData attribute to ref object, so
						//that the raw data of ref object is available.
						
						var toObjectPath = relationshipClass.getToObjectPath(relationshipRawData, null);
						var toObject = objectIdPathMap[toObjectPath];
						var toShapeId = relationshipClass.getToShapeId(relationshipRawData, null);
						var toDataId = relationshipClass.getToDataId(relationshipRawData, null);
						//If toObject doesn't exist in the map or it doesn't have 'y' attribute, it means the row isn't expanded,
						//then we are NOT displaying the relationship.
						if (!toObject) {
							continue;
						}
						var sToShapeDataName = oShapeMap[toShapeId].mShapeConfig.getShapeDataName();
						var toShapeRawData = this._findShapeDataFromRowObjectByShapeDataName(toObject, toDataId, sToShapeDataName);
						if (!toShapeRawData) {
							continue;
						}

						relationshipRawData.fromObject = fromObject;
						relationshipRawData.toObject = toObject;
						relationshipRawData.fromShapeRawData = fromShapeRawData;
						relationshipRawData.toShapeRawData = toShapeRawData;

						var object = {
							"shapeData": [relationship]
						};
						relationshipDataSet.push(object);

					}

				}
			}
			return relationshipDataSet;
		};

		/*
		 * Find the shape data object from the row object by shape data id
		 * 
		 * @param {object} oRowObject
		 * @param {string} sShapeDataId
		 * @return {object} The shape data object whose id equals to the given sShapeDataId
		 * 
		 * Case 1: There is shapeData array in oRowObject, then loop shapeData and return the matched object whose id equals to the given sShapeDataId
		 * oRowObject = {
		 * 		objectInfoRef: {
		 * 			bindingObj: {},
		 * 			contextObj: {},
		 * 			data: {
		 * 				activity: [],
		 * 				order: [],
		 * 				endTime: "2014.09.23",
		 * 				end_loc_id: "BERLIN",
		 * 				id: "0000",
		 * 				selected: false,
		 * 				startTime: "2014.09.20",
		 * 				start_loc_id: "WDF",
		 * 				status: 2,
		 * 				type: "TOL",
		 * 				uuid: "01_0"
		 * 			},
		 * 			rowHeight: 28,
		 * 			uid: "PATH:0000|SCHEME:ac_main",
		 * 			y: 0
		 * 		},
		 * 		shapeData: [{},{},...] <-------------- matched object
		 * }
		 * 
		 * Case 2: oRowObject is already the objectInfoRef of Case 1, then loop <sShapeId> (e.g. 'activity' or 'order' and so on) and return the matched object whose id equals to the given sShapeDataId
		 * oRowObject = {
		 * 		bindingObj: {},
		 * 		contextObj: {},
		 * 		data: {
		 * 			activity: [], <-------------------matched object
		 * 			order: [],
		 * 			endTime: "2014.09.23",
		 * 			end_loc_id: "BERLIN",
		 * 			id: "0000",
		 * 			selected: false,
		 * 			startTime: "2014.09.20",
		 * 			start_loc_id: "WDF",
		 * 			status: 2,
		 * 			type: "TOL",
		 * 			uuid: "01_0"
		 * 		},
		 * 		rowHeight: 28,
		 * 		uid: "PATH:0000|SCHEME:ac_main",
		 * 		y: 0
		 * }
		 */
		ShapeCrossRow.prototype._findShapeDataFromRowObjectByShapeDataName = function (oRowObject, sShapeDataId, sShapeName) {
			/* the key in shapeConfig sometimes is different from shapeDataName, e.g.: {key: "criticalTask", shapeDataName: "task", shapeClassName: }
			 * in above example, the fromShapeId in relationship is "criticalTask", but the uid generation use "task"
			 * use related shapeDataName to get the shape data
			 */
			var oShapeData, aShapeData;

			if (oRowObject.shapeData) {
				aShapeData = oRowObject.shapeData;
			} else if (oRowObject.data && oRowObject.data[sShapeName]){
				aShapeData = oRowObject.data[sShapeName];
			} else if (oRowObject.data) {
				aShapeData = oRowObject.data;
			} else {
				aShapeData = oRowObject;
			}

			for (var i = 0; i < aShapeData.length; i++) {
				if (aShapeData[i].id !== undefined && aShapeData[i].id == sShapeDataId) {
					oShapeData = aShapeData[i];
					break;
				}
			}
			if (oShapeData == undefined && aShapeData.length > 0) {
				oShapeData = aShapeData[0];
			}
			
			return oShapeData;
		};

	return ShapeCrossRow;
}, true);

}; // end of sap/gantt/drawer/ShapeCrossRow.js
if ( !jQuery.sap.isDeclared('sap.gantt.drawer.ShapeInRow') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.drawer.ShapeInRow'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.thirdparty.d3'); // unlisted dependency retained
sap.ui.define("sap/gantt/drawer/ShapeInRow",[
	"sap/gantt/drawer/Drawer", "sap/gantt/misc/Utility","sap/gantt/misc/Format",
	// 3rd party lib
	"sap/ui/thirdparty/d3"
], function (Drawer, Utility, Format) {
	"use strict";

	var ShapeInRow = Drawer.extend("sap.gantt.drawer.ShapeInRow", {

		/**
		 * Constructor of ShapInRow
		 */
		constructor: function() {
			// for fewer normalize color value purpose only
			this._mValueColors = {};
		}
	});

	/*
	 * oShape is the shape instance which already have data collected.
	 */
	ShapeInRow.prototype.drawSvg = function (aSvgNode, oShape, oAxisTime, oAxisOrdinal, oStatusSet) {
		// temp save param
		this._oAxisTime = oAxisTime;
		this._oAxisOrdinal = oAxisOrdinal;
		this._oStatusSet = oStatusSet;
		// create top g
		var aShapeTopG = aSvgNode.select("." + oShape.getId() + "-top");
		if (aShapeTopG.empty()) {
			aShapeTopG = aSvgNode.append("g")
				.classed(oShape.getId() + "-top", true);
		}
		// bind data to row g
		var aRowG = aShapeTopG.selectAll("." + oShape.getId() + "-row")
			.data(oShape.dataSet);
		aRowG.enter().append("g")
			.classed(oShape.getId() + "-row", true);
		aRowG.exit().remove();
		// draw
		if (!aRowG.empty()) {
			this._recursiveDraw(aRowG, oShape);
		}
	};

	ShapeInRow.prototype._recursiveDraw = function (aGroup, oShape, sData) {
		var that = this;
		var aShape = aGroup.selectAll("." + oShape.getId())
			.data(function (d) {
				return that._bindRowData(d, sData, this, oShape);
			});

		this._drawPerTag(aShape, oShape);
		this._drawInsertTitle(aGroup, oShape);
	};

	ShapeInRow.prototype._bindRowData = function (oData, sData, oNode, oShape) {
		var aViewRange = this._oStatusSet && this._oStatusSet.aViewBoundary ? this._oStatusSet.aViewBoundary : undefined;
		var isBulk = oShape.getIsBulk();
		var oFilterParam, i;
		
		if (oData) {
			var aRetVal = [];
			if (oData.shapeData) {  // top shapes
				if (!(oData.shapeData instanceof Array)) {
					aRetVal = aRetVal.concat(oData.shapeData);
				} else {
					for (i = 0; i < oData.shapeData.length; i++) {
						if (oData.shapeData[i]) {
							oFilterParam = {};
							oFilterParam.oShape = oShape;
							oFilterParam.objectInfo = oData.objectInfoRef;
							oFilterParam.dShapeData = oData.shapeData[i];
							oFilterParam.aViewRange = aViewRange;
							if (!isBulk && (aViewRange !== undefined) && this._filterDataVisibleRange(oFilterParam)) {
								continue;
							}
							aRetVal = aRetVal.concat(oData.shapeData[i]);
						}
					}
				}
			} else if (sData && oData[sData]) {	// aggregated shapes and special attribute is identified
				if (oData[sData].length) { // is array
					for (i = 0; i < oData[sData].length; i++) {
						oFilterParam = {};
						oFilterParam.oShape = oShape;
						oFilterParam.objectInfo = oData.objectInfoRef;
						oFilterParam.dShapeData = oData[sData][i];
						oFilterParam.aViewRange = aViewRange;
						if (!isBulk && (aViewRange !== undefined) && this._filterDataVisibleRange(oFilterParam)) {
							continue;
						}
						aRetVal.push(oData[sData][i]);
					}
				} else {
					aRetVal.push(oData[sData]);
				}
			} else if (oData){	// inherigate parent data
				aRetVal = aRetVal.concat(oData);
			}
			//if the shape has a filterValidData method, filter valid data for the shape
			if (oShape.filterValidData && (aRetVal.length > 0)) {
				aRetVal = oShape.filterValidData(aRetVal);
			}
			return aRetVal;
		}
	};
	
	ShapeInRow.prototype._filterDataVisibleRange = function (oFilterParam) {
		var oAxisTime = this._oAxisTime;
		var oAxisOrdinal = this._oAxisOrdinal;
		var aViewRange = oFilterParam.aViewRange;
	
		var isDuration = oFilterParam.oShape.getIsDuration(oFilterParam.dShapeData);
		if (isDuration) {
			var startTime = oAxisTime.timeToView(Format.abapTimestampToDate(oFilterParam.oShape.getTime(oFilterParam.dShapeData, undefined, oAxisTime, oAxisOrdinal, oFilterParam.objectInfo)));
			var endTime = oAxisTime.timeToView(Format.abapTimestampToDate(oFilterParam.oShape.getEndTime(oFilterParam.dShapeData, undefined, oAxisTime, oAxisOrdinal, oFilterParam.objectInfo)));
			if (this._oStatusSet.bRTL === true){
				return (endTime > aViewRange[1]) || (startTime < aViewRange[0]);
			}else {
				return (endTime < aViewRange[0]) || (startTime > aViewRange[1]);
			}
		} else {
			var time = oAxisTime.timeToView(Format.abapTimestampToDate(oFilterParam.oShape.getTime(oFilterParam.dShapeData, undefined, oAxisTime, oAxisOrdinal, oFilterParam.objectInfo)));
			return (time > aViewRange[1]) || (time < aViewRange[0]);
		}
		return false;
	};

	ShapeInRow.prototype._drawPerTag = function (aShape, oShape) {
		switch (oShape.getTag()) {
			case "g":
				this._drawGroup(aShape, oShape);
				break;
			case "line":
				this._drawLine(aShape, oShape);
				break;
			case "rect":
				this._drawRect(aShape, oShape);
				break;
			case "text":
				this._drawText(aShape, oShape);
				break;
			case "path":
				this._drawPath(aShape, oShape);
				break;
			case "clippath":
				this._drawClipPath(aShape, oShape);
				break;
			case "image":
				this._drawImage(aShape, oShape);
				break;
			case "polygon":
				this._drawPolygon(aShape, oShape);
				break;
			case "polyline":
				this._drawPolyline(aShape, oShape);
				break;
			case "circle":
				this._drawCircle(aShape, oShape);
				break;
			default:
				break;
		}
	};

	ShapeInRow.prototype._drawGroup = function (aShape, oShape) {
		var fFindObjectInfo = this._findObjectInfo;

		aShape.enter().append("g")
			.classed(oShape.getId(), true);

		aShape
			.classed("hasTitle", function (d) {
				return oShape.getTitle(d, fFindObjectInfo(this, oShape)) ? true : false;
			});

		aShape.exit().remove();

		var aAggregationShapes = oShape.getShapes();
		if (aAggregationShapes && aAggregationShapes.length > 0) {
			for (var i = 0; i < aAggregationShapes.length; i++) {
				this._recursiveDraw(aShape, aAggregationShapes[i], aAggregationShapes[i].mShapeConfig.getShapeDataName());
			}
		}
	};

	ShapeInRow.prototype._drawLine = function (aShape, oShape) {
		var fFindObjectInfo = this._findObjectInfo;

		aShape.enter().append("line")
			.classed(oShape.getId(), true);

		aShape
			.classed("hasTitle", function (d) {
				return oShape.getTitle(d, fFindObjectInfo(this, oShape)) ? true : false;
			})
			.attr("x1", function (d) {
				return oShape.getX1(d, fFindObjectInfo(this, oShape));
			})
			.attr("y1", function (d) {
				return oShape.getY1(d, fFindObjectInfo(this, oShape));
			})
			.attr("x2", function (d) {
				return oShape.getX2(d, fFindObjectInfo(this, oShape));
			})
			.attr("y2", function (d) {
				return oShape.getY2(d, fFindObjectInfo(this, oShape));
			})
			.attr("filter",function(d) {
				return oShape.getFilter(d, fFindObjectInfo(this, oShape));
			})
			.attr("transform", function (d) {
				return oShape.getTransform(d, fFindObjectInfo(this, oShape));
			})
			.attr("aria-label", function (d) {
				return oShape.getAriaLabel(d, fFindObjectInfo(this, oShape));
			})
			.attr("stroke", this.determineValue("stroke", oShape))
			.attr("stroke-width", function (d) {
				return oShape.getStrokeWidth(d, fFindObjectInfo(this, oShape));
			})
			.attr("stroke-dasharray", function (d) {
				return oShape.getStrokeDasharray(d, fFindObjectInfo(this, oShape));
			})
			.attr("fill-opacity", function (d) {
				return oShape.getFillOpacity(d, fFindObjectInfo(this, oShape));
			})
			.attr("stroke-opacity", function (d) {
				return oShape.getStrokeOpacity(d, fFindObjectInfo(this, oShape));
			});

		aShape.exit().remove();
	};

	ShapeInRow.prototype._drawRect = function (aShape, oShape) {
		var fFindObjectInfo = this._findObjectInfo;

		aShape.enter().append("rect")
			.classed(oShape.getId(), true);

		aShape
			.classed("hasTitle", function (d) {
				return oShape.getTitle(d, fFindObjectInfo(this, oShape)) ? true : false;
			})
			// for expand background
			.classed("sapGanttExpandChartBG", function (d) {
				return oShape.getHtmlClass(d, fFindObjectInfo(this, oShape)) ? true : false;
			})
			.classed("enableClone", function (d) {
				return oShape.getEnableDnD(d, fFindObjectInfo(this, oShape)) ? true : false;
			})
			.attr("x", function (d) {
				return oShape.getX(d, fFindObjectInfo(this, oShape));
			})
			.attr("y", function (d) {
				return oShape.getY(d, fFindObjectInfo(this, oShape));
			})
			.attr("width", function (d) {
				return oShape.getWidth(d, fFindObjectInfo(this, oShape));
			})
			.attr("height", function (d) {
				return oShape.getHeight(d, fFindObjectInfo(this, oShape));
			})
			.attr("fill", this.determineValue("fill", oShape))
			.attr("rx", function (d) {
				return oShape.getRx(d, fFindObjectInfo(this, oShape));
			})
			.attr("ry", function (d) {
				return oShape.getRy(d, fFindObjectInfo(this, oShape));
			})
			.attr("filter",function(d) {
				return oShape.getFilter(d, fFindObjectInfo(this, oShape));
			})
			.attr("transform", function (d) {
				return oShape.getTransform(d, fFindObjectInfo(this, oShape));
			})
			.attr("stroke", this.determineValue("stroke", oShape))
			.attr("stroke-width", function (d) {
				return oShape.getStrokeWidth(d, fFindObjectInfo(this, oShape));
			})
			.attr("stroke-dasharray", function (d) {
				return oShape.getStrokeDasharray(d, fFindObjectInfo(this, oShape));
			})
			.attr("fill-opacity", function (d) {
				return oShape.getFillOpacity(d, fFindObjectInfo(this, oShape));
			})
			.attr("stroke-opacity", function (d) {
				return oShape.getStrokeOpacity(d, fFindObjectInfo(this, oShape));
			})
			.attr("clip-path", function (d) {
				return oShape.getClipPath(d, fFindObjectInfo(this, oShape));
			})
			.attr("aria-label", function (d) {
				return oShape.getAriaLabel(d, fFindObjectInfo(this, oShape));
			});

		aShape.exit().remove();
	};

	ShapeInRow.prototype._drawText = function (aShape, oShape) {
		var fFindObjectInfo = this._findObjectInfo;
		var that = this;

		aShape.enter().append("text")
			.classed(oShape.getId(), true);
		aShape
			.classed("sapGanttShapeSvgText", true)
			.classed("hasTitle", function (d) {
				return oShape.getTitle(d, fFindObjectInfo(this, oShape)) ? true : false;
			})
			.attr("x", function (d) {
				return oShape.getX(d, fFindObjectInfo(this, oShape));
			})
			.attr("y", function (d) {
				return oShape.getY(d, fFindObjectInfo(this, oShape));
			})
			.attr("text-anchor", function (d) {
				return oShape.getTextAnchor(d, fFindObjectInfo(this, oShape));
			})
			.attr("font-size", function (d) {
				return oShape.getFontSize(d, fFindObjectInfo(this, oShape));
			})
			.attr("fill", this.determineValue("fill", oShape))
			.attr("filter",function(d) {
				return oShape.getFilter(d, fFindObjectInfo(this, oShape));
			})
			.attr("transform", function (d) {
				return oShape.getTransform(d, fFindObjectInfo(this, oShape));
			})
			.attr("stroke", this.determineValue("stroke", oShape))
			.attr("stroke-width", function (d) {
				return oShape.getStrokeWidth(d, fFindObjectInfo(this, oShape));
			})
			.text(function (d) {
				return oShape.getText(d, fFindObjectInfo(this, oShape));
			}).each(function (d) { // wrapping, truncating
				var oSelf = d3.select(this);
				oSelf.selectAll("tspan").remove();
				var nWrapWidth = oShape.getWrapWidth(d, fFindObjectInfo(this, oShape));
				var nTruncateWidth = oShape.getTruncateWidth(d, fFindObjectInfo(this, oShape));
				if (nTruncateWidth > -1) { // do truncating
					that._textTruncate(d, oSelf, nTruncateWidth, oShape.getEllipsisWidth(d, fFindObjectInfo(this, oShape)));
				} else if (nWrapWidth > -1) { // do wrapping
					that._textWrap(d, this, nWrapWidth, oShape.getWrapDy(d, fFindObjectInfo(this, oShape)));
				}
			});

		aShape.exit().remove();
	};
	
	ShapeInRow.prototype._textTruncate = function (oData, oSelf, nTruncateWidth, nEllipsisWidth) {
		var nTextLength = oSelf.node().getComputedTextLength();
		
		if (nTextLength > nTruncateWidth) { // truncate needed
			var sText = oSelf.text(),
				nTargetLength,
				bEllipsisAppear;
			
			if (nEllipsisWidth > -1 && nEllipsisWidth < nTruncateWidth) { // ellipsis enabled
				bEllipsisAppear = true;
				nTargetLength = nTruncateWidth - nEllipsisWidth;
			} else { // ellipsis disabled
				bEllipsisAppear = false;
				nTargetLength = nTruncateWidth;
			}
			
			// truncate
			while ( (nTextLength > nTargetLength && sText.length > 0)) {
				sText = sText.slice(0, -1); // truncate last char
				oSelf.text(sText);
				nTextLength = oSelf.node().getComputedTextLength();
			}
			
			// add ellipsis if determined to be needed
			if (bEllipsisAppear) {
				if (sap.ui.Device.browser.name === "cr"){
					//Chrome's textlength is rendered differently to ie and ff. If the textlength specified in tspan and the direction is RTL, 
					//then text length is applied to whole text element 
					oSelf.append("tspan")
						.text("...")
						.attr("textLength", oSelf.node().getComputedTextLength())
						.attr("lengthAdjust", "spacingAndGlyphs");
				} else {
					oSelf.append("tspan")
					.text("...")
					.attr("textLength", nEllipsisWidth)
					.attr("lengthAdjust", "spacingAndGlyphs");
				
				}
			}
		}
	};
	
	ShapeInRow.prototype._textWrap = function (oData, oSelf, nWrapWidth, nWrapDy) {
		//var nTextLength = oSelf.node().getComputedTextLength();
		
		//if (nTextLength > nWrapWidth) { // wrap needed
			// tokenize the text
			// connect tokens in tspan, and check against nWrapWidth
			// create tspan with dy = nWrapDy
		//}
	};

	ShapeInRow.prototype._drawPath = function (aShape, oShape) {
		var fFindObjectInfo = this._findObjectInfo;

		aShape.enter().append("path")
			.classed(oShape.getId(), true);

		aShape
			.classed("hasTitle", function (d) {
				return oShape.getTitle(d, fFindObjectInfo(this, oShape)) ? true : false;
			})
			.attr("d", function (d) {
				return oShape.getD(d, fFindObjectInfo(this, oShape));
			})
			.attr("fill", this.determineValue("fill", oShape))
			.attr("stroke", this.determineValue("stroke", oShape))
			.attr("stroke-width", function (d) {
				return oShape.getStrokeWidth(d, fFindObjectInfo(this, oShape));
			})
			.attr("stroke-dasharray", function (d) {
				return oShape.getStrokeDasharray(d, fFindObjectInfo(this, oShape));
			})
			.attr("fill-opacity", function (d) {
				if (oShape.getIsClosed(d, fFindObjectInfo(this, oShape))) {
					return oShape.getFillOpacity(d, fFindObjectInfo(this, oShape));
				}
			})
			.attr("stroke-opacity", function (d) {
				if (oShape.getIsClosed(d, fFindObjectInfo(this, oShape))) {
					return oShape.getStrokeOpacity(d, fFindObjectInfo(this, oShape));
				}
			})
			.attr("transform", function (d) {
				return oShape.getTransform(d, fFindObjectInfo(this, oShape));
			})
			.attr("filter",function(d) {
				return oShape.getFilter(d, fFindObjectInfo(this, oShape));
			})			
			.attr("aria-label", function (d) {
				return oShape.getAriaLabel(d, fFindObjectInfo(this, oShape));
			});

		aShape.exit().remove();
	};

	ShapeInRow.prototype._drawClipPath = function (aShape, oShape) {
		var fFindObjectInfo = this._findObjectInfo;

		aShape.enter().append("clipPath")
			.classed(oShape.getId(), true);
		
		aShape.selectAll("path").remove();
		
		aShape.attr("id", function (d) {  // Jean TODO: id is important for clip path, but why use htmlClass attribute?
			return oShape.getHtmlClass(d, fFindObjectInfo(this, oShape));
		});

		// Jean TODO: why getPaths()[0] ? should loop and generate all, then .apend("path") should be detached from enter();
		aShape.append("path")
			.attr("d", function (d) {
				return oShape.getPaths()[0].getD(d, fFindObjectInfo(this, oShape));
			});
		
		aShape.exit().remove();
	};

	ShapeInRow.prototype._drawImage = function (aShape, oShape) {
		var fFindObjectInfo = this._findObjectInfo;

		aShape.enter().append("image")
			.classed(oShape.getId(), true);

		aShape
			.classed("hasTitle", function (d) {
				return oShape.getTitle(d, fFindObjectInfo(this, oShape)) ? true : false;
			})
			.attr("xlink:href", function (d) {
				return oShape.getImage(d, fFindObjectInfo(this, oShape));
			})
			.attr("x", function (d) {
				return oShape.getX(d, fFindObjectInfo(this, oShape));
			})
			.attr("y", function (d) {
				return oShape.getY(d, fFindObjectInfo(this, oShape));
			})
			.attr("width", function (d) {
				return oShape.getWidth(d, fFindObjectInfo(this, oShape));
			})
			.attr("height", function (d) {
				return oShape.getHeight(d, fFindObjectInfo(this, oShape));
			})
			.attr("filter",function(d) {
				return oShape.getFilter(d, fFindObjectInfo(this, oShape));
			})
			.attr("transform", function (d) {
				return oShape.getTransform(d, fFindObjectInfo(this, oShape));
			})			
			.attr("aria-label", function (d) {
				return oShape.getAriaLabel(d, fFindObjectInfo(this, oShape));
			});

		aShape.exit().remove();
	};

	ShapeInRow.prototype._drawPolygon = function (aShape, oShape) {
		var fFindObjectInfo = this._findObjectInfo;

		aShape.enter().append("polygon")
			.classed(oShape.getId(), true);

		aShape
			.classed("hasTitle", function (d) {
				return oShape.getTitle(d, fFindObjectInfo(this, oShape)) ? true : false;
			})
			.attr("fill", this.determineValue("fill", oShape))
			.attr("fill-opacity", function (d) {
				return oShape.getFillOpacity(d, fFindObjectInfo(this, oShape));
			})
			.attr("points", function (d) {
				return oShape.getPoints(d, fFindObjectInfo(this, oShape));
			})
			.attr("stroke-width", function (d) {
				return oShape.getStrokeWidth(d, fFindObjectInfo(this, oShape));
			})
			.attr("stroke", this.determineValue("stroke", oShape))
			.attr("filter",function(d) {
				return oShape.getFilter(d, fFindObjectInfo(this, oShape));
			})
			.attr("transform", function (d) {
				return oShape.getTransform(d, fFindObjectInfo(this, oShape));
			})
			.attr("aria-label", function (d) {
				return oShape.getAriaLabel(d, fFindObjectInfo(this, oShape));
			});

		aShape.exit().remove();
	};
	
	ShapeInRow.prototype._drawPolyline = function (aShape, oShape) {
		var fFindObjectInfo = this._findObjectInfo;

		aShape.enter().append("polyline")
			.classed(oShape.getId(), true);
		aShape
			.classed("hasTitle", function (d) {
				return oShape.getTitle(d, fFindObjectInfo(this, oShape)) ? true : false;
			})
			.attr("fill", this.determineValue("fill", oShape))
			.attr("fill-opacity", function (d) {
				return oShape.getFillOpacity(d, fFindObjectInfo(this, oShape));
			})
			.attr("points", function (d) {
				return oShape.getPoints(d, fFindObjectInfo(this, oShape));
			})
			.attr("stroke-width", function (d) {
				return oShape.getStrokeWidth(d, fFindObjectInfo(this, oShape));
			})
			.attr("stroke", this.determineValue("stroke", oShape))
			.attr("filter",function(d) {
				return oShape.getFilter(d, fFindObjectInfo(this, oShape));
			})
			.attr("transform", function (d) {
				return oShape.getTransform(d, fFindObjectInfo(this, oShape));
			})
			.attr("aria-label", function (d) {
				return oShape.getAriaLabel(d, fFindObjectInfo(this, oShape));
			});

		aShape.exit().remove();
	};
	
	ShapeInRow.prototype._drawCircle = function (aShape, oShape) {
		var fFindObjectInfo = this._findObjectInfo;

		aShape.enter().append("circle")
			.classed(oShape.getId(), true);

		aShape
			.classed("hasTitle", function (d) {
				return oShape.getTitle(d, fFindObjectInfo(this, oShape)) ? true : false;
			})
			.attr("fill", this.determineValue("fill", oShape))
			.attr("fill-opacity", function (d) {
				return oShape.getFillOpacity(d, fFindObjectInfo(this, oShape));
			})
			.attr("stroke-width", function (d) {
				return oShape.getStrokeWidth(d, fFindObjectInfo(this, oShape));
			})
			.attr("stroke", this.determineValue("stroke", oShape))
			.attr("filter",function(d) {
				return oShape.getFilter(d, fFindObjectInfo(this, oShape));
			})
			.attr("transform", function (d) {
				return oShape.getTransform(d, fFindObjectInfo(this, oShape));
			})
			.attr("aria-label", function (d) {
				return oShape.getAriaLabel(d, fFindObjectInfo(this, oShape));
			})
			.attr("cx", function (d) {
				return oShape.getCx(d, fFindObjectInfo(this, oShape));
			})
			.attr("cy", function (d) {
				return oShape.getCy(d, fFindObjectInfo(this, oShape));
			})
			.attr("r", function (d) {
				return oShape.getR(d, fFindObjectInfo(this, oShape));
			});

		aShape.exit().remove();
	};

	ShapeInRow.prototype._drawInsertTitle = function (aGroup, oShape) {
		var fFindObjectInfo = this._findObjectInfo;

		var aShape = aGroup.selectAll("." + oShape.getId() + ".hasTitle");
		aShape.select("title").remove();
		aShape.insert("title", ":first-child")
			.text(function(d) {
				return oShape.getTitle(d, fFindObjectInfo(this, oShape));
			});
	};

	ShapeInRow.prototype._findObjectInfo = function (oNode, oShape, isSelectedShape) {
		var oTargetNode = oNode;
		while (!oTargetNode.__data__.objectInfoRef) {
			oTargetNode = oTargetNode.parentNode;
		}
		return oTargetNode.__data__.objectInfoRef;
	};

	ShapeInRow.prototype.determineValue = function(sAttr, oShape) {
		var that = this;
		return function(d) {
			var sAttrValue = null;
			if (sAttr === "fill") {
				sAttrValue = oShape.getFill(d, that._findObjectInfo(this, oShape));
			} else if (sAttr === "stroke") {
				sAttrValue = oShape.getStroke(d, that._findObjectInfo(this, oShape));
			}
			var sFoundColor = that._mValueColors[sAttrValue];
			if (sAttrValue && !sFoundColor) {
				// if attribute has value but no paint server value
				sFoundColor = sap.gantt.ValueSVGPaintServer.normalize(sAttrValue);
				that._mValueColors[sAttrValue] = sFoundColor;
			}
			return sFoundColor;
		};
	};

	ShapeInRow.prototype.destroySvg = function (aSvgNode, oShape) {};

	return ShapeInRow;
}, true);

}; // end of sap/gantt/drawer/ShapeInRow.js
if ( !jQuery.sap.isDeclared('sap.gantt.drawer.VerticalLine') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.drawer.VerticalLine'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.thirdparty.d3'); // unlisted dependency retained
sap.ui.define("sap/gantt/drawer/VerticalLine",[
	"sap/gantt/misc/Utility", "./Drawer",
	"sap/ui/thirdparty/d3"
], function (Utility, Drawer) {
	"use strict";

	/**
	 * Constructor for a new Vertical Line.
	 *
	 * @class
	 * A drawer for constructing multiple vertical line in the Gantt Chart
	 * @extends sap.gantt.drawer.Drawer
	 *
	 * @author SAP SE
	 * @version 
	 *
	 * @constructor
	 * @private
	 */
	var VerticalLine = Drawer.extend("sap.gantt.drawer.VerticalLine", /** @lends sap.gantt.drawer.VerticalLine.prototype */ {
		/**
		 * VerticalLine drawer.
		 *
		 * @param {object} oAxisTime an object know how to convert time and coordinates
		 */
		constructor : function(oAxisTime) {
			this.oAxisTime = oAxisTime;
		}
	});

	VerticalLine.prototype.drawSvg = function ($GanttChartSvg) {

		var $Chart = jQuery($GanttChartSvg.node()),
			iChartWidth = $Chart.width(),
			//iChartHeight = Math.max.apply(null, $Chart.map(function(){ return jQuery(this).height(); }).get());
			iWindowHeight = document.body.clientHeight;
		// 1month, 1day etc
		var sInternalKey = this.oAxisTime.getCurrentTickTimeIntervalKey();
		var aTickTimeIntervals = this.oAxisTime.getTickTimeIntervalLabel(sInternalKey, null, [0, iChartWidth]);

		// the second item have all the tick time info
		var aTicks = aTickTimeIntervals[1];

		var sPathContent = "";
		// By Default line width is 1, is need to minus the half width of line
		for (var i = 0; i < aTicks.length; i++) {
			sPathContent += " M" +
				" " + (aTicks[i].value - 1 / 2) +
				" 0" +
				" L" +
				" " + (aTicks[i].value - 1 / 2) +
				" " + (iWindowHeight);//(iChartHeight);
		}
		if (sPathContent) {
			$GanttChartSvg.selectAll(".sapGanttChartVerticalLine").remove();
			var $firstRect = jQuery($GanttChartSvg.select("rect").node());
			var sClassName = $firstRect.attr("class") ? $firstRect.attr("class").split(" ")[0] : "";
			if (sap.ui.getCore().byId(sClassName) && sap.ui.getCore().byId(sClassName).getMetadata().getName() === "sap.gantt.shape.ext.RowBackgroundRectangle") {
				$GanttChartSvg.select("g").append("g").classed("sapGanttChartVerticalLine", true)
				.append("path").attr("d", sPathContent);
			} else {
				$GanttChartSvg.insert("g", ":first-child")
				.classed("sapGanttChartVerticalLine", true)
				.append("path").attr("d", sPathContent);
			}
		}
	};

	VerticalLine.prototype.destroySvg = function ($GanttChartSvg) {
		if ($GanttChartSvg) {
			$GanttChartSvg.selectAll(".sapGanttChartVerticalLine").remove();
		}
	};

	return VerticalLine;
}, true);

}; // end of sap/gantt/drawer/VerticalLine.js
if ( !jQuery.sap.isDeclared('sap.gantt.library') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

/**
 * Initialization Code and shared classes of library sap.gantt.
 */
jQuery.sap.declare('sap.gantt.library'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.DataType'); // unlisted dependency retained
sap.ui.define("sap/gantt/library",['jquery.sap.global', 'sap/ui/core/library', 'sap/gantt/misc/Utility', 'sap/ui/base/DataType'],
	function(jQuery, library1, Utility, DataType) {
	"use strict";


	/**
	 * UI5 library: sap.gantt.
	 *
	 * @namespace
	 * @name sap.gantt
	 * @public
	 */

	// library dependencies

	// delegate further initialization of this library to the Core
	sap.ui.getCore().initLibrary({
		name : "sap.gantt",
		dependencies : ["sap.ui.core", "sap.ui.layout", "sap.ui.table", "sap.m", "sap.ui.unified"],
		types: [
			"sap.gantt.control.ToolbarType",
			"sap.gantt.SelectionMode",
			"sap.gantt.shape.ShapeCategory",
			"sap.gantt.def.filter.MorphologyOperator",
			"sap.gantt.def.filter.ColorMatrixValue"
		],
		interfaces: [
			"sap.gantt.GanttChartBase"
		],
		controls: [
			"sap.gantt.control.Toolbar",
			"sap.gantt.GanttChart",
			"sap.gantt.GanttChartWithTable",
			"sap.gantt.GanttChartContainer"
		],
		elements: [
			"sap.gantt.config.TimeHorizon",
			"sap.gantt.config.TimeAxis",
			"sap.gantt.config.ToolbarGroup",
			"sap.gantt.config.Mode",
			"sap.gantt.config.ModeGroup",
			"sap.gantt.config.LayoutGroup",
			"sap.gantt.config.ExpandChart",
			"sap.gantt.config.ExpandChartGroup",
			"sap.gantt.config.ToolbarScheme",
			"sap.gantt.config.Hierarchy",
			"sap.gantt.config.HierarchyColumn",
			"sap.gantt.config.ColumnAttribute",
			"sap.gantt.config.GanttChartLayout",
			"sap.gantt.config.ContainerLayout",
			"sap.gantt.config.SettingItem",
			"sap.gantt.config.SettingGroup",
			"sap.gantt.config.ObjectType",
			"sap.gantt.config.ChartScheme",
			"sap.gantt.config.Locale",
			"sap.gantt.config.Shape"
		],
		noLibraryCSS: false,
		version: "1.36.8"
	});
	
	this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.gantt");
	/**
	 * Different selection mode for GanttChart
	 *
	 * @enum {string}
	 * @private
	 */
	sap.gantt.SelectionMode = {

		/**
		 * Support Multiple Selection with Ctrl key
		 * @private
		 */
		MultiWithKeyboard : "MultiWithKeyboard",
		
		/**
		 * Support Multiple Selection without Ctrl key
		 * @private
		 */
		Multiple : "Multiple",
		
		/**
		 * Only Support Single Selection
		 * @private
		 */
		Single : "Single",
		
		/**
		 * Do not support Selection
		 * @private
		 */
		None : "None"
	};	
	
	/**
	 * Different types for a tool bar (predefined types)
	 *
	 * @enum {string}
	 * @private
	 */
	sap.gantt.control.ToolbarType = {

		/**
		 * Toolbar of GanttContainer
		 * @private
		 */
		Global : "GLOBAL",

		/**
		 * Toolbar of GanttWithTable
		 * @private
		 */
		Local : "LOCAL"
	};

	/**
	 * A string type that represents SVG fill color values.
	 *
	 * Allowed values are {@link sap.ui.core.CSSColor} and {@link sap.m.ValueColor} and LESS parameter
	 *
	 * The empty string and invalid less parameter fall back to default black color.
	 *
	 * @public
	 */
	sap.gantt.ValueSVGPaintServer = DataType.createType('sap.gantt.ValueSVGPaintServer', {
		isValid : function(vValue) {
			var bValid = sap.m.ValueCSSColor.isValid(vValue);
			if (!bValid){
				bValid = /(?:url\(['|"]?)(.*?)(?:['|"]?\))|^[@|#](.*?)$|initial|transparent|none|inherit/.test(vValue);
			}
			return bValid;
		}
	}, DataType.getType('string'));
	sap.gantt.ValueSVGPaintServer.setNormalizer(
		/**
		 * Check if the input value is an valid value for property fill and stroke. It allows hex/name color, URL pattern,
		 * Otherwise try to match the input with LESS parameters
		 * 
		 * @param {vValue} vValue user passed value
		 * @return {string} valid paint value
		 */
		function (vValue) {
			jQuery.sap.require("sap.ui.core.theming.Parameters");
			if (!vValue) {
				// Return if input is undefined
				return vValue;
			}

			if (vValue.substr(0, 1) === "@") {
				vValue = vValue.substring(1);
			}

			var sRetValue = sap.ui.core.theming.Parameters.get(vValue) || vValue;
			return sRetValue;
		}
	);
	
	/**
	 * The <code>sap.gantt.shape</code> namespace.
	 * 
	 * This namespace provides the following configuration related features:
	 * <ul>
	 * 		<li>A base class <code>sap.gantt.shape.Shape</code> is provided directly in this namespace</li>
	 * 		<li>A default selection shape class <code>sap.gantt.shape.SelectedShape</code> is provided directly in this namespace</li>
	 * 		<li>All basic shapes corresponding to SVG tag are provided directly in this namespace</li>
	 * 		<li>Extended shapes from tag shapes are provided in sub-namespace <code>ext</code></li>
	 * 		<li>Special calendar shape, which should be used in combination with the calendar paint server, is provided in sub-namespace<code>cal</code></li>
	 * </ul>
	 * See {@link http://www.w3.org/TR/SVG/ SVG 1.1 specification}
	 *
	 * @namespace
	 * @name sap.gantt.shape
	 * @public
	 */
	
	/**
	 * Namespace <code>sap.gantt.config</code> provides all configuration related objects and default configuration value for optional ones.
	 *
	 * @namespace
	 * @name sap.gantt.config
	 * @public
	 */

	/**
	 * Shape Categories.
	 * 
	 * Different categories use different Drawers. Therefore, different categories may have different designs of parameters in their getter methods.
	 * @enum {string}
	 * @namespace
	 * @name sap.gantt.shape.ShapeCategory
	 * @public
	 */
	sap.gantt.shape.ShapeCategory = {
		
		/**
		 * Shapes attached to one row.
		 * @public
		 */
		InRowShape: "inRowShape",
		
		/**
		 * Relationship shapes connecting two in-row shape instances.
		 * @public
		 */
		Relationship: "relationship"
	};
	
	/**
	 * Morphology Operators.
	 * 
	 * The operator decides the morphology to make the shape fatter or slimmer.
	 * @enum {string}
	 * @namespace
	 * @name sap.gantt.def.filter.MorphologyOperator
	 * @public
	 */
	sap.gantt.def.filter.MorphologyOperator = {
		
		/**
		 * Fatter Morphology.
		 * @public
		 */
		Dilate: "dilate",
		
		/**
		 * Slimmer Morphology.
		 * @public
		 */
		Erode: "erode"
	};

	/**
	 * Color Matrix Values.
	 * 
	 * The matrix decides what target color from source color.
	 * @enum {string}
	 * @namespace
	 * @name sap.gantt.def.filter.ColorMatrixValue
	 * @public
	 */
	sap.gantt.def.filter.ColorMatrixValue = {
		
		/**
		 * Turns every color to white.
		 * @public
		 */
		AllToWhite: "-1 0 0 0 1, 0 -1 0 0 1, 0 0 -1 0 1, 0 0 0 1 0",
		
		/**
		 * Turns every color to black.
		 * @public
		 */
		AllToBlack: "-1 0 0 0 0, 0 -1 0 0 0, 0 0 -1 0 0, 0 0 0 1 0"
	};

	
	/**
	 * Different time units used as part of the zoom level. They are names of d3 time unit classes.
	 * 
	 * @enum {string}
	 * @name sap.gantt.config.TimeUnit
	 * @public
	 */
	sap.gantt.config.TimeUnit = {
			
		/**
		 * Time unit of minute.
		 * @public
		 */
		minute: "d3.time.minute",
		
		/**
		 * Time unit of hour.
		 * @public
		 */
		hour: "d3.time.hour",
		
		/**
		 * Time unit of day.
		 * @public
		 */
		day: "d3.time.day",
		
		/**
		 * Time unit of week.
		 * @public
		 */
		week: "d3.time.week",
		
		/**
		 * Time unit of month.
		 * @public
		 */
		month: "d3.time.month",
		
		/**
		 * Time unit of year.
		 * @public
		 */
		year: "d3.time.year"
	};

	/**
	 * Defines the default configuration planHorizon.
	 * 
	 * <p>From one year ago, to one year from now.</p>
	 * @public
	 */
	sap.gantt.config.DEFAULT_PLAN_HORIZON = new sap.gantt.config.TimeHorizon({
		startTime: new Date((new Date()).getTime() - 31536000000),
		endTime: new Date((new Date()).getTime() + 31536000000)
	});

	/**
	 * Defines the default configuration initHorizon.
	 * 
	 * <p>From one month ago, to one year from now.</p>
	 * @public
	 */
	sap.gantt.config.DEFAULT_INIT_HORIZON = new sap.gantt.config.TimeHorizon({
		startTime: new Date((new Date()).getTime() - 2628000000),
		endTime: new Date((new Date()).getTime() + 2628000000)
	});

	/**
	 * Defines the default configuration of the time zoom level.
	 * <p>The default time zoom level includes a granularity factor that determines the length of the interval between neighboring vertical lines.
	 *  
	 * The time zoom level now is a JSON object with the granularity as the key and some internal information such as formatting. Each level has 3 interval objects
	 * describing the time unit, the time span, and the jump condition to the next level. The zoom level decides how the time axis behaves and how ticks are displayed.
	 * 
	 * Take <code>"12hour"</code> level for example
	 * 	<ul>
	 * 		<li><code>"12hour":</code> - Granularity level ID.
	 * 			<ul>
	 * 				<li>
	 * 					<code>"innerInterval"</code> - Time interval between neighboring vertical lines is 12 hours. The jump condition to the next level is "1day" when the interval exceeds 90 pixels.
	 * 					<ul>
	 * 						<li><code>"unit": sap.gantt.config.TimeUnit.hour</code> - Time unit is hour.</li>
	 * 						<li><code>"span": 12</code> - Span is 12.</li>
	 * 						<li><code>"range": 90</code> - Jumping condition is 90 pixels between neighboring vertical lines.</li>
	 * 					</ul>
	 * 				</li>
	 * 				<li>
	 * 					<code>largeInterval</code> - Time interval of top row along the time axis is 1 day. Formatted in the locale language with the format string. This zoom level implements an interval larger than the interval in the default zoom level.
	 * 					<ul>
	 * 						<li><code>"unit": sap.gantt.config.TimeUnit.day</code> - </li>
	 * 						<li><code>"span": 1</code> - Time span is 1.</li>
	 * 						<li><code>"format": "cccc dd.M.yyyy"</code> - Formats the string in CLDR date/time symbols.</li>
	 * 					</ul>
	 * 				</li>
	 * 				<li>
	 * 					<code>smallInterval</code> - Time interval of the bottom row along the time axis is 12 hours. Formatted in the locale language with the format string. This zoom level implements an interval the same as the interval in the default zoom level.
	 * 					<ul>
	 * 						<li><code>"unit": sap.gantt.config.TimeUnit.hour</code> - Time unit is hour.</li>
	 * 						<li><code>"span": 12</code> - Time span is 12.</li>
	 * 						<li><code>"format": "HH:mm"</code> - Formats the string in CLDR date/time symbols.</li>
	 * 					</ul>
	 * 				</li>
	 * 			</ul>
	 * 		</li>
	 * 	</ul>
	 * 
	 * The current granularity setting provides the following values in the default time zoom level:<br/>
	 * <code>5min</code>, <code>10min</code>, <code>15min</code>, <code>30min</code>,<br/>
	 * <code>1hour</code>, <code>2hour</code>, <code>4hour</code>, <code>6hour</code>, <code>12hour</code>,<br/>
	 * <code>1day</code>, <code>2day</code>, <code>4day</code>,<br/>
	 * <code>1week</code>, <code>2week</code>,<br/>
	 * <code>1month</code>, <code>2month</code>, <code>4month</code>, <code>6month</code>,<br/>
	 * <code>1year</code>, <code>2year</code>, <code>5year</code>.
	 * 
	 * @public
	 */
	sap.gantt.config.DEFAULT_TIME_ZOOM_STRATEGY = {
		"5min": {
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.minute,
				span: 5,
				range: 90
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.day,
				span: 1,
				format: "cccc dd.M.yyyy"
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.minute,
				span: 5,
				format: "HH:mm"
			}
		},
		"10min": {
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.minute,
				span: 10,
				range: 90
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.day,
				span: 1,
				format: "cccc dd.M.yyyy"
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.minute,
				span: 10,
				format: "HH:mm"
			}
		},
		"15min": {
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.minute,
				span: 15,
				range: 90
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.day,
				span: 1,
				format: "cccc dd.M.yyyy"
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.minute,
				span: 15,
				format: "HH:mm"
			}
		},
		"30min": {
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.minute,
				span: 30,
				range: 90
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.day,
				span: 1,
				format: "cccc dd.M.yyyy"
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.minute,
				span: 30,
				format: "HH:mm"
			}
		},
		"1hour": {
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.hour,
				span: 1,
				range: 90
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.day,
				span: 1,
				format: "cccc dd.M.yyyy"
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.hour,
				span: 1,
				format: "HH:mm"
			}
		},
		"2hour": {
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.hour,
				span: 2,
				range: 90
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.day,
				span: 1,
				format: "cccc dd.M.yyyy"
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.hour,
				span: 2,
				format: "HH:mm"
			}
		},
		"4hour": {
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.hour,
				span: 4,
				range: 90
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.day,
				span: 1,
				format: "cccc dd.M.yyyy"
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.hour,
				span: 4,
				format: "HH:mm"
			}
		},
		"6hour": {
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.hour,
				span: 6,
				range: 90
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.day,
				span: 1,
				format: "cccc dd.M.yyyy"
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.hour,
				span: 6,
				format: "HH:mm"
			}
		},
		"12hour": {
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.hour,
				span: 12,
				range: 90
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.day,
				span: 1,
				format: "cccc dd.M.yyyy"
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.hour,
				span: 12,
				format: "HH:mm"
			}
		},
		"1day": {
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.day,
				span: 1,
				range: 90
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.month,
				span: 1,
				format: "MMMM yyyy"
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.day,
				span: 1,
				format: sap.ui.getCore().getConfiguration().getRTL() ? ".d.M" : "d.M."
			}
		},
		"2day": {
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.day,
				span: 2,
				range: 90
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.month,
				span: 1,
				format: "MMMM yyyy"
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.day,
				span: 2,
				format: sap.ui.getCore().getConfiguration().getRTL() ? ".d.M" : "d.M."
			}
		},
		"4day": {
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.day,
				span: 4,
				range: 90
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.month,
				span: 1,
				format: "MMMM yyyy"
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.day,
				span: 4,
				format: sap.ui.getCore().getConfiguration().getRTL() ? ".d.M" : "d.M."
			}
		},
		"1week": {
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.week,
				span: 1,
				range: 90
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.month,
				span: 1,
				format: "MMMM yyyy"
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.week,
				span: 1,
				format: sap.ui.getCore().getConfiguration().getRTL() ? ".d.M" : "d.M."
			}
		},
		"2week": {
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.week,
				span: 2,
				range: 90
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.month,
				span: 1,
				format: "MMMM yyyy"
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.week,
				span: 2,
				format: sap.ui.getCore().getConfiguration().getRTL() ? ".d.M" : "d.M."
			}
		},
		"1month": {
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.month,
				span: 1,
				range: 90
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.month,
				span: 6,
				format: "MMMM yyyy"
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.month,
				span: 1,
				format: sap.ui.getCore().getConfiguration().getRTL() ? ".d.M" : "d.M."
			}
		},
		"2month": {
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.month,
				span: 2,
				range: 90
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.month,
				span: 6,
				format: "MMMM yyyy"
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.month,
				span: 2,
				format: sap.ui.getCore().getConfiguration().getRTL() ? ".d.M" : "d.M."
			}
		},
		"4month": {
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.month,
				span: 4,
				range: 90
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.year,
				span: 1,
				format: "yyyy"
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.month,
				span: 4,
				format: "MMMM"
			}
		},
		"6month": {
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.month,
				span: 6,
				range: 90
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.year,
				span: 1,
				format: "yyyy"
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.month,
				span: 6,
				format: "MMMM"
			}
		},
		"1year": {
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.year,
				span: 1,
				range: 90
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.year,
				span: 10,
				format: "yyyy"
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.year,
				span: 1,
				format: "MMMM"
			}
		},
		"2year": {
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.year,
				span: 2,
				range: 90
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.year,
				span: 10,
				format: "yyyy"
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.year,
				span: 2,
				format: "MMMM"
			}
		},
		"5year": {
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.year,
				span: 5,
				range: 90
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.year,
				span: 10,
				format: "yyyy"
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.year,
				span: 5,
				format: "MMMM"
			}
		}
	};

	/**
	 * Defines the default configuration for the time axis.
	 * 
	 * Default values are:
	 * <ul>
	 * 		<li>planHorizon - <code>sap.gantt.config.DEFAULT_PLAN_HORIZON</code></li>
	 * 		<li>initHorizon - <code>sap.gantt.config.DEFAULT_INIT_HORIZON</code></li>
	 * 		<li>zoomStrategy - <code>sap.gantt.config.DEFAULT_TIME_ZOOM_STRATEGY</code></li>
	 * 		<li>finestGranularity - "15min"</li>
	 * 		<li>coarsestGranularity - "6month"</li>
	 * 		<li>rate> - 1</li>
	 * </ul>
	 * @public
	 */
	sap.gantt.config.DEFAULT_TIME_AXIS = new sap.gantt.config.TimeAxis();
	
	/**
	 * Defines the default mode key.
	 * 
	 * The default mode key is used in Gantt and the default mode configuration is used when no mode configuration is provided.
	 * @public
	 * @type {string}
	 */
	sap.gantt.config.DEFAULT_MODE_KEY = "sap_mode";
	
	/**
	 * Defines the default configuration mode.
	 * 
	 * Default values are:
	 * <ul>
	 * 		<li>key - <code>sap.gantt.config.DEFAULT_MODE_KEY</code></li>
	 * 		<li>text - "Default"</li>
	 * 		<li>icon - <code>"sap-icon://status-positive"</code></li>
	 * </ul>
	 * @public
	 * @type {object}
	 */
	sap.gantt.config.DEFAULT_MODE = new sap.gantt.config.Mode({
		key: sap.gantt.config.DEFAULT_MODE_KEY,
		text: this._oRb.getText("TLTP_DEFAULT"),
		icon: "sap-icon://status-positive"
	});

	/**
	 * Defines the default list of configuration modes.
	 *
	 * Default value:  <code>sap.gantt.config.DEFAULT_MODE</code>.
	 * @public
	 * @type {array}
	 */
	
	sap.gantt.config.DEFAULT_MODES = [sap.gantt.config.DEFAULT_MODE];
	
	/**
	 * Defines the default chart scheme key.
	 * 
	 * The Default Chart Scheme Key is used in the default chart scheme configuration.
	 * @public 
	 * @type {string}
	 */
	sap.gantt.config.DEFAULT_CHART_SCHEME_KEY = "sap_main";

	/**
	 * Defines the default configuration chart scheme.
	 * 
	 * Default values:
	 * <ul>
	 * 		<li>key - <code>sap.gantt.config.DEFAULT_CHART_SCHEME_KEY</code></li>
	 * 		<li>name - "Default"</li>
	 * 		<li>rowSpan - 1</li>
	 * 		<li>icon - null</li>
	 * 		<li>modeKey - <code>sap.gantt.config.DEFAULT_MODE_KEY</code></li>
	 * 		<li>shapeKeys - []</li>
	 * </ul>
	 * @public
	 * @type {object}
	 */ 
	sap.gantt.config.DEFAULT_CHART_SCHEME = new sap.gantt.config.ChartScheme({
		key: sap.gantt.config.DEFAULT_CHART_SCHEME_KEY,
		name: "Default",
		rowSpan: 1
	});

	/**
	 * Defines the default list of chart schemes.
	 *
	 * Default values is <code>sap.gantt.config.DEFAULT_CHART_SCHEME</code>
	 * @public
	 * @type {array}
	 */
	sap.gantt.config.DEFAULT_CHART_SCHEMES = [sap.gantt.config.DEFAULT_CHART_SCHEME];
	
	/**
	 * Defines the default object type key.
	 * 
	 * Default object type key is used in the default object type configuration.
	 * @public
	 * @type {string}
	 */
	sap.gantt.config.DEFAULT_OBJECT_TYPE_KEY = "sap_object";
	
	/**
	 * Defines the default configuration object type.
	 * 
	 * Default values:
	 * <ul>
	 * 		<li>key - <code>sap.gantt.config.DEFAULT_OBJECT_TYPE_KEY</code></li>
	 * 		<li>description - "Default"</li>
	 * 		<li>mainChartSchemeKey - <code>sap.gantt.config.DEFAULT_CHART_SCHEME_KEY</code></li>
	 * 		<li>expandedChartSchemeKeys - []</li>
	 * </ul>
	 * @public
	 * @type {object}
	 */
	sap.gantt.config.DEFAULT_OBJECT_TYPE = new sap.gantt.config.ObjectType({
		key: sap.gantt.config.DEFAULT_OBJECT_TYPE_KEY,
		description: "Default",
		mainChartSchemeKey: sap.gantt.config.DEFAULT_CHART_SCHEME_KEY
	});

	/**
	 * Defines the default list of object types.
	 *
	 * The default value is <code>sap.gantt.config.DEFAULT_OBJECT_TYPE</code>.
	 * @public
	 * @type {array}
	 */
	sap.gantt.config.DEFAULT_OBJECT_TYPES = [sap.gantt.config.DEFAULT_OBJECT_TYPE];

	/**
	 * Defines the default setting item key for the present time indicator.
	 * 
	 * Default setting item key for the present time indicator is used in the default settings group configuration.
	 * @public 
	 * @type {string}
	 */
	sap.gantt.config.SETTING_ITEM_ENABLE_NOW_LINE_KEY = "sap_enableNowLine";
	
	/**
	 * Defines the default configuration object for enabling the present time indicator setting item.
	 * Default values:
	 * <ul>
	 * 		<li>key - <code>sap.gantt.config.SETTING_ITEM_ENABLE_NOW_LINE_KEY</code></li>
	 * 		<li>checked - true</li>
	 * 		<li>displayText - "Indicate Current Time"</li>
	 * 		<li>tooltip - "Draw a Vertical Line to Indicate the Current Time"</li>
	 * </ul>
	 * @public
	 * 	@type {object}
	 */
	sap.gantt.config.SETTING_ITEM_ENABLE_NOW_LINE = new sap.gantt.config.SettingItem({
		key: sap.gantt.config.SETTING_ITEM_ENABLE_NOW_LINE_KEY,
		checked: true,
		displayText: this._oRb.getText("XCKL_NOW_LINE"),
		tooltip: this._oRb.getText("TLTP_NOW_LINE")
	});
	
	/**
	 * Defines the default setting item key for the cursor line.
	 * 
	 * Default setting item key for the cursor line is used in the default settings group configuration.
	 * @public 
	 * @type {string}
	 */
	sap.gantt.config.SETTING_ITEM_ENABLE_CURSOR_LINE_KEY = "sap_enableCursorLine";
	
	/**
	 * Defines the default configuration object for enabling the cursor line setting items.
	 * Default values:
	 * <ul>
	 * 		<li>key - <code>sap.gantt.config.SETTING_ITEM_ENABLE_CURSOR_LINE_KEY</code></li>
	 * 		<li>checked - true</li>
	 * 		<li>displayText - "Show Cursor Line"</li>
	 * 		<li>tooltip - "Show a Vertical Line that Follows the Mouse Pointer"</li>
	 * </ul>
	 * @public
	 * @type {object}
	 */
	sap.gantt.config.SETTING_ITEM_ENABLE_CURSOR_LINE = new sap.gantt.config.SettingItem({
		key: sap.gantt.config.SETTING_ITEM_ENABLE_CURSOR_LINE_KEY,
		checked: true,
		displayText: this._oRb.getText("XCKL_CURSOR_LINE"),
		tooltip: this._oRb.getText("TLTP_CURSOR_LINE")
	});
	
	/**
	 * Defines the default setting item key for the vertical lines.
	 * 
	 * Default setting item key for vertical lines is used in the default settings group configuration.
	 * @public 
	 * @type {string}
	 */
	sap.gantt.config.SETTING_ITEM_ENABLE_VERTICAL_LINE_KEY = "sap_enableVerticalLine";
	
	/**
	 * Defines the default configuration object for enabling vertical line setting item.
	 * Default values:
	 * <ul>
	 * 		<li>key - <code>sap.gantt.config.SETTING_ITEM_ENABLE_VERTICAL_LINE_KEY</code></li>
	 * 		<li>checked - true</li>
	 * 		<li>displayText - "Show Divider Lines"</li>
	 * 		<li>tooltip - "Show Vertical Divider Lines between Time Periods"</li>
	 * </ul>
	 * @public
	 * @type {object}
	 */
	sap.gantt.config.SETTING_ITEM_ENABLE_VERTICAL_LINE = new sap.gantt.config.SettingItem({
		key: sap.gantt.config.SETTING_ITEM_ENABLE_VERTICAL_LINE_KEY,
		checked: true,
		displayText: this._oRb.getText("XCKL_VERTICAL_LINE"),
		tooltip: this._oRb.getText("TLTP_VERTICAL_LINE")
	});
	
	/**
	 * Defines the default setting item key for synchronized time scroll.
	 * 
	 * Default setting item key for synchronized time scroll is used in the default settings group configuration.
	 * @public 
	 * @type {string}
	 */
	sap.gantt.config.SETTING_ITEM_ENABLE_TIME_SCROLL_SYNC_KEY = "sap_enableTimeScrollSync";
	
	/**
	 * Defines the default configuration object for enabling the synchronized time scroll setting item.
	 * Default values are:
	 * <ul>
	 * 		<li>key - <code>sap.gantt.config.SETTING_ITEM_ENABLE_TIME_SCROLL_SYNC_KEY</code></li>
	 * 		<li>checked - true</li>
	 * 		<li>displayText - "Synchronize Time Scroll"</li>
	 * 		<li>tooltip - "Synchronize Horizontal Scroll Bars in Chart"</li>
	 * </ul>
	 * @public
	 * @type {object}
	 */
	sap.gantt.config.SETTING_ITEM_ENABLE_TIME_SCROLL_SYNC = new sap.gantt.config.SettingItem({
		key: sap.gantt.config.SETTING_ITEM_ENABLE_TIME_SCROLL_SYNC_KEY,
		checked: true,
		displayText: this._oRb.getText("XCKL_TIME_SCROLL_SYNC"),
		tooltip: this._oRb.getText("TLTP_TIME_SCROLL_SYNC")
	});
	
	/**
	 * Defines the default setting item key for synchronized row scroll.
	 * 
	 * The default setting item key for synchronized row scroll is used in the default settings group configuration.
	 * @public 
	 * @type {string}
	 */
	sap.gantt.config.SETTING_ITEM_ROW_SCROLL_SYNC_KEY = "sap_enableRowScrollSync";
	
	/**
	 * Defines the default configuration object for enabling the synchronized row scroll setting item.
	 * Default values are:
	 * <ul>
	 * 		<li>key - <code>sap.gantt.config.SETTING_ITEM_ROW_SCROLL_SYNC_KEY</code></li>
	 * 		<li>checked - false</li>
	 * 		<li>displayText - "Synchronize Row Scroll"</li>
	 * 		<li>tooltip - "Synchronize Vertical Scroll Bars in Chart"</li>
	 * </ul>
	 * @public
	 * @type {object}
	 */
	sap.gantt.config.SETTING_ITEM_ROW_SCROLL_SYNC = new sap.gantt.config.SettingItem({
		key: sap.gantt.config.SETTING_ITEM_ROW_SCROLL_SYNC_KEY,
		checked: false,
		displayText: this._oRb.getText("XCKL_ROW_SCROLL_SYNC"),
		tooltip: this._oRb.getText("TLTP_ROW_SCROLL_SYNC")
	});
	
	/**
	 * Defines the default configuration object for setting groups in the toolbar.
	 * 
	 * Default values:
	 * <ul>
	 * 		<li><code>sap.gantt.config.SETTING_ITEM_ENABLE_NOW_LINE</code></li>
	 * 		<li><code>sap.gantt.config.SETTING_ITEM_ENABLE_CURSOR_LINE</code></li>
	 * 		<li><code>sap.gantt.config.SETTING_ITEM_ENABLE_VERTICAL_LINE</code></li>
	 * 		<li><code>sap.gantt.config.SETTING_ITEM_ENABLE_TIME_SCROLL_SYNC</code></li>
	 * 		<li><code>sap.gantt.config.SETTING_ITEM_ROW_SCROLL_SYNC</code></li>
	 * </ul>
	 * @public
	 * @type {array}
	 */
	sap.gantt.config.DEFAULT_TOOLBAR_SETTING_ITEMS = [
		sap.gantt.config.SETTING_ITEM_ENABLE_NOW_LINE,
		sap.gantt.config.SETTING_ITEM_ENABLE_CURSOR_LINE,
		sap.gantt.config.SETTING_ITEM_ENABLE_VERTICAL_LINE,
		sap.gantt.config.SETTING_ITEM_ENABLE_TIME_SCROLL_SYNC,
		sap.gantt.config.SETTING_ITEM_ROW_SCROLL_SYNC
	];
	
	/**
	 * Defines the default empty toolbar scheme key.
	 * 
	 * The default empty toolbar scheme key is used in the default empty toolbar scheme.
	 * @public
	 * @type {string}
	 */
	sap.gantt.config.EMPTY_TOOLBAR_SCHEME_KEY = "sap_empty_toolbar";

	/**
	 * Defines the default empty toolbar scheme.
	 * 
	 * This toolbar scheme has no built-in toolbar items. Only one toolbar group
	 * <code>customToolbarItems</code> is configured to allow applications to place custom toolbar items.
	 * Default values:
	 * <ul>
	 * 		<li>key - <code>sap.gantt.config.EMPTY_TOOLBAR_SCHEME_KEY</code></li>
	 * 		<li>customToolbarItems - <code>sap.gantt.config.ToolbarGroup({
	 * 				position: "L1",
	 * 				overflowPriority: sap.m.OverflowToolbarPriority.High
	 * 			})</code></li>
	 * </ul>
	 * @public
	 * @type {object}
	 */
	sap.gantt.config.EMPTY_TOOLBAR_SCHEME = new sap.gantt.config.ToolbarScheme({
		key: sap.gantt.config.EMPTY_TOOLBAR_SCHEME_KEY,
		customToolbarItems: new sap.gantt.config.ToolbarGroup({
			position: "L1",
			overflowPriority: sap.m.OverflowToolbarPriority.High
		})
	});
	
	/**
	 * Defines the default toolbar scheme key for GanttContainer.
	 * 
	 * The default GanttContainer toolbar scheme key is used in the default GanttContainer toolbar scheme configuration.
	 * @public
	 * @type {string}
	 */
	sap.gantt.config.DEFAULT_CONTAINER_TOOLBAR_SCHEME_KEY = "sap_container_toolbar";
	
	/**
	 * Defines the default configuration object for toolbar scheme on <code>sap.gantt.GanttChartContainer</code>.
	 * 
	 * Default values:
	 * <ul>
	 * 		<li>key - <code>sap.gantt.config.DEFAULT_CONTAINER_TOOLBAR_SCHEME_KEY</code></li>
	 * 		<li>customToolbarItems - <code>sap.gantt.config.ToolbarGroup({
	 * 				position: "L1",
	 * 				overflowPriority: sap.m.OverflowToolbarPriority.High
	 * 			})</code></li>
	 * 		<li>timeZoom - <code>sap.gantt.config.ToolbarGroup({
	 * 				position: "R2",
	 * 				overflowPriority: sap.m.OverflowToolbarPriority.NeverOverflow
	 * 			})</code></li>
	 * 		<li>settings - <code>sap.gantt.config.ToolbarGroup({
	 * 				position: "R1",
	 * 				overflowPriority: sap.m.OverflowToolbarPriority.low,
	 * 				items: sap.gantt.config.DEFAULT_TOOLBAR_SETTING_ITEMS
	 * 			})</code></li>
	 * </ul>
	 * @public
	 * @type {object}
	 */
	sap.gantt.config.DEFAULT_CONTAINER_TOOLBAR_SCHEME = new sap.gantt.config.ToolbarScheme({
		key: sap.gantt.config.DEFAULT_CONTAINER_TOOLBAR_SCHEME_KEY,
		customToolbarItems: new sap.gantt.config.ToolbarGroup({
			position: "L1",
			overflowPriority: sap.m.OverflowToolbarPriority.High
		}),
		timeZoom: new sap.gantt.config.ToolbarGroup({
			position: "R2",
			overflowPriority: sap.m.OverflowToolbarPriority.NeverOverflow
		}),
		settings: new sap.gantt.config.SettingGroup({
			position: "R1",
			overflowPriority: sap.m.OverflowToolbarPriority.Low,
			items: sap.gantt.config.DEFAULT_TOOLBAR_SETTING_ITEMS
		})
	});
	
	/**
	 * Defines the default toolbar scheme key for GanttWithTable.
	 * 
	 * The default GanttWithTable toolbar scheme key is used in the default GanttWithTable toolbar scheme configuration.
	 * @public
	 * @type {string}
	 */
	sap.gantt.config.DEFAULT_GANTTCHART_TOOLBAR_SCHEME_KEY = "sap_ganttchart_toolbar";

	/**
	 * Defines the default configuration object for the toolbar scheme on <code>sap.gantt.GanttChartWithTable</code>.
	 * 
	 * Default values:
	 * <ul>
	 * 		<li>key - <code>sap.gantt.config.DEFAULT_GANTTCHART_TOOLBAR_SCHEME_KEY</code></li>
	 * 		<li>customToolbarItems - <code>sap.gantt.config.ToolbarGroup({
	 * 				position: "L2",
	 * 				overflowPriority: sap.m.OverflowToolbarPriority.High
	 * 			})</code></li>
	 * 		<li>expandTree - <code>sap.gantt.config.ToolbarGroup({
	 * 				position: "L3",
	 * 				overflowPriority: sap.m.OverflowToolbarPriority.Low
	 * 			})</code></li>
	 * </ul>
	 * @public
	 * @type {object}
	 */
	sap.gantt.config.DEFAULT_GANTTCHART_TOOLBAR_SCHEME = new sap.gantt.config.ToolbarScheme({
		key: sap.gantt.config.DEFAULT_GANTTCHART_TOOLBAR_SCHEME_KEY,
		customToolbarItems: new sap.gantt.config.ToolbarGroup({
			position: "L2",
			overflowPriority: sap.m.OverflowToolbarPriority.High
		}),
		expandTree: new sap.gantt.config.ToolbarGroup({
			position: "L3",
			overflowPriority: sap.m.OverflowToolbarPriority.Low
		})
	});

	/**
	 * Defines the default list of toolbar schemes for <code>sap.gantt.GanttChartBase</code>.
	 *
	 * The default values include an empty toolbar and a default Gantt Chart toolbar.
	 * @public
	 * @type {array}
	 */
	sap.gantt.config.DEFAULT_GANTTCHART_TOOLBAR_SCHEMES = [
		sap.gantt.config.DEFAULT_GANTTCHART_TOOLBAR_SCHEME,
		sap.gantt.config.EMPTY_TOOLBAR_SCHEME
	];

	/**
	 * Define default list of toolbar schemes for <code>sap.gantt.GanttChartContainer</code>.
	 *
	 * The default values include an empty toolbar and a default Gantt Chart Container toolbar.
	 * @public
	 * @type {array}
	 */
	sap.gantt.config.DEFAULT_CONTAINER_TOOLBAR_SCHEMES = [
		sap.gantt.config.DEFAULT_CONTAINER_TOOLBAR_SCHEME,
		sap.gantt.config.EMPTY_TOOLBAR_SCHEME
	];
	
	/**
	 * Defines the default hierarchy key.
	 * 
	 * The default hierarchy key is used in the default hierarchy configuration.
	 * @public
	 * @type {string}
	 */
	sap.gantt.config.DEFAULT_HIERARCHY_KEY = "sap_hierarchy";
	
	/**
	 * Defines the default configuration object for Hierarchy.
	 * 
	 * Default values:
	 * <ul>
	 * 		<li>key - <code>sap.gantt.config.DEFAULT_HIERARCHY_KEY</code></li>
	 * 		<li>text - "Default Hierarchy"</li>
	 * 		<li>activeModeKey - <code>sap.gantt.config.DEFAULT_MODE_KEY</code></li>
	 * 		<li>toolbarSchemeKey - <code>sap.gantt.config.DEFAULT_GANTTCHART_TOOLBAR_SCHEME_KEY</code></li>
	 * 		<li>columns - null</li>
	 * 		<li>expandedLevels - null</li>
	 * </ul>
	 * @public
	 * @type {object}
	 */
	sap.gantt.config.DEFAULT_HIERARCHY = new sap.gantt.config.Hierarchy();

	/**
	 * Defines the default list of hierarchies.
	 *
	 * The default value is <code>sap.gantt.config.DEFAULT_HIERARCHY</code>
	 * @public
	 * @type {array}
	 */
	sap.gantt.config.DEFAULT_HIERARCHYS = [sap.gantt.config.DEFAULT_HIERARCHY];
	
	/**
	 * Defines the default Gantt single layout key.
	 * 
	 * The default Gantt single layout key is used in the default Gantt single layout configuration.
	 * @public
	 * @type {string}
	 */
	sap.gantt.config.DEFAULT_CONTAINER_SINGLE_LAYOUT_KEY = "sap_container_layout_single";
	
	/**
	 * Defines the default configuration object for the Single Container layout.
	 * 
	 * Default values:
	 * <ul>
	 * 		<li>key - <code>sap.gantt.config.DEFAULT_CONTAINER_SINGLE_LAYOUT_KEY</code></li>
	 * 		<li>text - "Single Gantt Chart Layout"</li>
	 * 		<li>toolbarSchemeKey - <code>sap.gantt.config.DEFAULT_CONTAINER_TOOLBAR_SCHEME_KEY</code></li>
	 * 		<li>ganttChartLayouts - <code>[new sap.gantt.config.GanttChartLayout({
	 * 			activeModeKey: sap.gantt.config.DEFAULT_MODE_KEY,
				hierarchyKey: sap.gantt.config.DEFAULT_HIERARCHY_KEY
	 * 		})]</code></li>
	 * </ul>
	 * @public
	 * @type {object}
	 */
	sap.gantt.config.DEFAULT_CONTAINER_SINGLE_LAYOUT = new sap.gantt.config.ContainerLayout({
		key: sap.gantt.config.DEFAULT_CONTAINER_SINGLE_LAYOUT_KEY,
		text: this._oRb.getText("XLST_SINGLE_LAYOUT"),
		toolbarSchemeKey: sap.gantt.config.DEFAULT_CONTAINER_TOOLBAR_SCHEME_KEY,
		ganttChartLayouts: [new sap.gantt.config.GanttChartLayout({
			activeModeKey: sap.gantt.config.DEFAULT_MODE_KEY,
			hierarchyKey: sap.gantt.config.DEFAULT_HIERARCHY_KEY
		})]
	});
	
	/**
	 * Defines the default Gantt dual-view layout key.
	 * 
	 * The default Gantt dual-view layout key is used in the default Gantt dual layout configuration.
	 * @public
	 * @type {string}
	 */
	sap.gantt.config.DEFAULT_CONTAINER_DUAL_LAYOUT_KEY = "sap_container_layout_dual";
	
	/**
	 * Defines the default configuration object for Dual Container layout.
	 * 
	 * Default values:
	 * <ul>
	 * 		<li>key - <code>sap.gantt.config.DEFAULT_CONTAINER_DUAL_LAYOUT_KEY</code></li>
	 * 		<li>text - "Dual Gantt Chart Layout"</li>
	 * 		<li>toolbarSchemeKey - <code>sap.gantt.config.DEFAULT_CONTAINER_TOOLBAR_SCHEME_KEY</code></li>
	 * 		<li>ganttChartLayouts - <code>[new sap.gantt.config.GanttChartLayout({
	 * 			activeModeKey: sap.gantt.config.DEFAULT_MODE_KEY,
	 *			hierarchyKey: sap.gantt.config.DEFAULT_HIERARCHY_KEY
	 * 		}), new sap.gantt.config.GanttChartLayout({
	 * 			activeModeKey: sap.gantt.config.DEFAULT_MODE_KEY,
	 *			hierarchyKey: sap.gantt.config.DEFAULT_HIERARCHY_KEY
	 * 		})]</code></li>
	 * </ul>
	 * @public
	 * @type {object}
	 */
	sap.gantt.config.DEFAULT_CONTAINER_DUAL_LAYOUT = new sap.gantt.config.ContainerLayout({
		key: sap.gantt.config.DEFAULT_CONTAINER_DUAL_LAYOUT_KEY,
		text: this._oRb.getText("XLST_DUAL_LAYOUT"),
		toolbarSchemeKey: sap.gantt.config.DEFAULT_CONTAINER_TOOLBAR_SCHEME_KEY,
		ganttChartLayouts: [new sap.gantt.config.GanttChartLayout({
			activeModeKey: sap.gantt.config.DEFAULT_MODE_KEY,
			hierarchyKey: sap.gantt.config.DEFAULT_HIERARCHY_KEY
		}), new sap.gantt.config.GanttChartLayout({
			activeModeKey: sap.gantt.config.DEFAULT_MODE_KEY,
			hierarchyKey: sap.gantt.config.DEFAULT_HIERARCHY_KEY
		})]
	});

	/**
	 * Defines the default list of Container layouts.
	 *
	 * Default values are a single-view layout and a dual-view layout.
	 * @public
	 * @type {array}
	 */
	sap.gantt.config.DEFAULT_CONTAINER_LAYOUTS = [
		sap.gantt.config.DEFAULT_CONTAINER_SINGLE_LAYOUT,
		sap.gantt.config.DEFAULT_CONTAINER_DUAL_LAYOUT
	];
	
	/**
	 * Defines the default configuration object Locale.
	 * 
	 * Default values 
	 * <ul>
	 * 		<li>timeZoine - <code>"CET"</code></li>
	 * 		<li>utcdiff - <code>"000000"</code></li>
	 * 		<li>utcsign - <code>"+"</code></li>
	 * </ul>
	 * @public
	 * @type {object}
	 */
	sap.gantt.config.DEFAULT_LOCALE_CET = new sap.gantt.config.Locale({
		timeZone: "CET",
		utcdiff: "000000",
		utcsign: "+"
	});
	
	/**
	 * Defines the default empty JSON object.
	 * @public
	 * @type {object}
	 */
	sap.gantt.config.DEFAULT_EMPTY_OBJECT = {};

	return sap.gantt;
	
});

}; // end of sap/gantt/library.js
if ( !jQuery.sap.isDeclared('sap.gantt.misc.AxisOrdinal') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.misc.AxisOrdinal'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.thirdparty.d3'); // unlisted dependency retained
sap.ui.define("sap/gantt/misc/AxisOrdinal",[
	"sap/gantt/misc/Utility",   // cannot be referenced because of loop dependency between AxisOrdinal and Utility, use global name to reference
	// Unreferenced libs
	"sap/ui/thirdparty/d3"
], function () {
	"use strict";

	/**
	 * Creates and initializes an AxisOrdinal class.

	 * @class The reusable functional class represents an instance of ordinal pattern coordinate mapping.
	 * 
	 * @param {array} aAlementArray Element array corresponding to an ordinal axis.
	 * @param {array} aScaleArray Scale array where each item represents one or more smallest width units in one-to-one relationship with aAlementArray.
	 * @param {number} nViewBandWidth Smallest width unit for elements.
	 * @param {number} nViewRangeStart Start position of an axis in the viewport area.
	 * @param {number} nViewRangeEnd End position of an axis in the viewport area. The parameter is ignored if viewBandWidth is set.
	 * @param {number} nZoomRate Zoom rate of the viewport area.
	 * @param {number} nZoomOrigin Zoom origin of the viewport area.
	 * @param {number} nPadding Padding for each band.
	 * 
	 * @return Instance of an AxisOrdinal.
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.misc.AxisOrdinal
	 */
	
	var AxisOrdinal = function (aAlementArray, aScaleArray, nViewBandWidth, nViewRangeStart,
	                            nViewRangeEnd, nZoomRate, nZoomOrigin, nPadding) {
		this.elementArray = aAlementArray;
		this.scaleArray = aScaleArray;

		this.padding = sap.gantt.misc.Utility.assign(nPadding, 0);

		this.zoomRate = sap.gantt.misc.Utility.assign(nZoomRate, 1);
		this.zoomOrigin = sap.gantt.misc.Utility.assign(nZoomOrigin, 0);

		this.viewRangeStart = sap.gantt.misc.Utility.assign(nViewRangeStart, 0);
		this.viewBandWidth = nViewBandWidth;
		this.viewRangeEnd = nViewRangeEnd;
		this.scale = d3.scale.ordinal();
	//	this.scaleForVisibleRow = null;
		this._createScale();
	};

	/*
	 * Constants
	 */
	AxisOrdinal.prototype.CONSTANT = {
		C_SEPARATOR: "_@@_",
		C_MESSAGE: {
			ARGUMENT_ERROR: "AxisOrdinal: Argument Error!"
		}
	};

	// private methods =>
	AxisOrdinal.prototype._createScale = function(){
		if (typeof (this.viewBandWidth) !== "undefined"){
			this.viewRangeEnd = undefined;
			this.scale.domain(this._calculateInternalValuesByElements())
				.rangeRoundBands(this._calculateViewRangeByViewBandWidth());
		} else if (typeof (this.viewRangeEnd) !== "undefined"){
			this.viewBandWidth = undefined;
			this.scale.domain(this._calculateInternalValuesByElements())
				.rangeRoundBands([this.viewRangeStart, this.viewRangeEnd]);
		} else {
			//sap.gantt.Message.create("Error", this.CONSTANT.C_MESSAGE.ARGUMENT_ERROR);
		}
	};
	
	AxisOrdinal.prototype._calculateInternalValuesByElements = function(){
		var values = [];
		for (var i = 0; i < this.scaleArray.length; i++){
			var id = this.elementArray[i] + this.CONSTANT.C_SEPARATOR;
			for (var j = 0; j < this.scaleArray[i]; j++){
				values.push(id + j);
			}
		}
		return values;
	};
	

	AxisOrdinal.prototype._calculateViewRangeByViewBandWidth = function(){
		var viewRangeWidth = 0;
		for (var i = 0; i < this.scaleArray.length; i++){
			viewRangeWidth += this.scaleArray[i] * this.viewBandWidth;
		}
		return [this.viewRangeStart, this.viewRangeStart + viewRangeWidth];
	};
	// <= private methods

	// public methods =>
	
	/**
	 * Transforms an element to a position in the coordinate system
	 * 
	 * @param {Object} element Element that exists in parameter elementArray of the constructor
	 * 
	 * @return Position in the coordinate system
	 * 
	 * @public
	 */
	
	AxisOrdinal.prototype.elementToView = function(element){
		return (this.scale(element + this.CONSTANT.C_SEPARATOR + 0) + this.padding - this.zoomOrigin) * this.zoomRate;
	};

	/**
	 * Transforms a position in the coordinate system to an element
	 * 
	 * @param {Number} value Position in the coordinate system
	 * 
	 * @return Element that exists in parameter elementArray of the constructor
	 * 
	 * @public
	 */
	
	AxisOrdinal.prototype.viewToElement = function(value){
		var curValue = value / this.zoomRate + this.zoomOrigin;

		var head = 0;
		var tail = this.elementArray.length - 1;
		while (head < tail){
			var mid = Math.ceil((head + tail) / 2);
			var midValue = this.scale(this.elementArray[mid] + this.CONSTANT.C_SEPARATOR + 0);
			if (curValue < midValue){
				tail = mid - 1;
			} else {
				head = mid;
			}
		}

		var ret = this.elementArray[head];
		var retValue = this.scale(ret + this.CONSTANT.C_SEPARATOR + 0);
		if (curValue < retValue + this.padding || curValue >= retValue + this.scale.rangeBand() * this.scaleArray[head]){
			return undefined;
		}
		return ret;
	};

	/**
	 * Transforms a position in the coordinate system to an element index
	 * 
	 * @param {Number} value Position in the coordinate system
	 * 
	 * @return Index of the corresponding element that exists in parameter elementArray of the constructor
	 * 
	 * @public
	 */
	
	AxisOrdinal.prototype.viewToElementIndex = function(value){
		var curValue = value / this.zoomRate + this.zoomOrigin;
				
		var head = 0;
		var tail = this.elementArray.length - 1;
		
		while (head < tail){
			var mid = Math.ceil((head + tail) / 2);
			var midValue = this.scale(this.elementArray[mid] + this.CONSTANT.C_SEPARATOR + 0);

			if (curValue < midValue){
				tail = mid - 1;
			} else {
				head = mid;
			}
		}

		var ret = this.elementArray[head];
		var retValue = this.scale(ret + this.CONSTANT.C_SEPARATOR + 0);

		if (curValue < retValue + this.padding || curValue >= retValue + this.scale.rangeBand() * this.scaleArray[head]){
			return -1;
		}
		
		return head;
	};

	/**
	 * Transforms a position in the coordinate system to a band index
	 * 
	 * @param {Number} value A position in the coordinate system
	 * 
	 * @return Index that describes which band the position is located in
	 * 
	 * @public
	 */
	
	AxisOrdinal.prototype.viewToBandIndex = function(value){
		var curValue = value / this.zoomRate + this.zoomOrigin;

		var aInternalElements = this._calculateInternalValuesByElements();
		var head = 0;
		var tail = aInternalElements.length - 1;

		while (head < tail){
			var mid = Math.ceil((head + tail) / 2);
			var midValue = this.scale(aInternalElements[mid]);

			if (curValue < midValue){
				tail = mid - 1;
			} else {
				head = mid;
			}
		}

		var retValue = this.scale(aInternalElements[head]);

		if (curValue < retValue + this.padding || curValue >= retValue + this.scale.rangeBand()){
			return -1;
		}

		return head;
	};

	/**
	 * Transforms a position in the coordinate system to a row index
	 * 
	 * @param {Number} value Position in the coordinate system
	 * @param {Number} iMaxIndex Max row index in the coordinate system
	 * 
	 * @return Index of the corresponding row
	 * 
	 * @public
	 */
	
	AxisOrdinal.prototype.viewToRowIndex = function(value, iMaxIndex){
		var curValue = value / this.zoomRate + this.zoomOrigin;

		var head = 0;
		//Get the scale of elements
		var viewWidth = this._calculateViewRangeByViewBandWidth();
		
		if (curValue <= viewWidth[1] && curValue >= viewWidth[0]) {
			//If current position is in the elements scale, calculate the row index
			return this.viewToBandIndex(value);
		} else {
			//if current position is out of elements scale, calculate the row index
			var aInternalElements = this._calculateInternalValuesByElements();
			if (jQuery.isNumeric(iMaxIndex) && iMaxIndex > aInternalElements.length) {
				var blankIndex = parseInt( ( value - viewWidth[1] - viewWidth[0] ) / this.viewBandWidth, 10);
				var rowIndex = blankIndex + aInternalElements.length;
				head = rowIndex;
			} else {
				return -1;
			}
		}
		return head;
	};

	/**
	 * Sets a new value of elementArray with the corresponding scaleArray.
	 * 
	 * @param {array} elementArray New element array corresponding to an ordinal axis.
	 * @param {array} scaleArray Corresponding scale array where each item represents one or more smallest width units in one-to-one relationship with elementArray.
	 * 
	 * @return {sap.gantt.misc.AxisOrdinal} Reference to this in order to allow method chaining.
	 * 
	 * @public
	 */

	AxisOrdinal.prototype.setElements = function(elementArray, scaleArray){
		this.elementArray = elementArray;
		this.scaleArray = scaleArray;
		this._createScale();
		return this;
	};

	/**
	 * Retrieves the value of elementArray.
	 * 
	 * @return {array} Value of elementArray.
	 * 
	 * @public
	 */
	
	AxisOrdinal.prototype.getElementArray = function(){
		return this.elementArray;
	};

	/**
	 * Retrieves the value of scaleArray.
	 * 
	 * @return {array} Value of scaleArray.
	 * 
	 * @public
	 */

	AxisOrdinal.prototype.getScaleArray = function(){
		return this.scaleArray;
	};

	/**
	 * Sets a new value of the start position of a view range.
	 * 
	 * @param {number} viewRangeStart Start position of an axis in the viewport area.
	 * 
	 * @return {sap.gantt.misc.AxisOrdinal} Reference to this in order to allow method chaining.
	 * 
	 * @public
	 */

	AxisOrdinal.prototype.setViewRangeStart = function(viewRangeStart){
		this.viewBandWidth = undefined;
		this.viewRangeStart = sap.gantt.misc.Utility.assign(viewRangeStart, 0);
		this.scale.rangeRoundBands([this.viewRangeStart, this.viewRangeEnd]);
		return this;
	};

	/**
	 * Sets a new value of the end position of a view range.
	 * 
	 * @param {number} viewRangeEnd End position of axis in the viewport area. The parameter is ignored if viewBandWidth is set.
	 * 
	 * @return {sap.gantt.misc.AxisOrdinal} Reference to this in order to allow method chaining.
	 * 
	 * @public
	 */

	AxisOrdinal.prototype.setViewRangeEnd = function(viewRangeEnd){
		this.viewBandWidth = undefined;
		this.viewRangeEnd = viewRangeEnd;
		this.scale.rangeRoundBands([this.viewRangeStart, this.viewRangeEnd]);
		return this;
	};

	/**
	 * Retrieves the view range of the current viewport area.
	 * 
	 * @return {array} Value of the view range containing the start and end positions.
	 * 
	 * @public
	 */

	AxisOrdinal.prototype.getViewRange = function(){
		var viewRange = this.scale.rangeExtent();
		return [(viewRange[0] - this.zoomOrigin) * this.zoomRate, (viewRange[1] - this.zoomOrigin) * this.zoomRate];
	};

	/**
	 * Sets a new value of viewBandWidth.
	 * 
	 * @param {number} viewBandWidth Smallest width unit for elements.
	 * 
	 * @return {sap.gantt.misc.AxisOrdinal} Reference to this in order to allow method chaining.
	 * 
	 * @public
	 */

	AxisOrdinal.prototype.setViewBandWidth = function(viewBandWidth){
		this.viewRangeEnd = undefined;
		this.viewBandWidth = viewBandWidth;
		this.scale.rangeRoundBands(this._calculateViewRangeByViewBandWidth());
		return this;
	};

	/**
	 * Retrieves the value of viewBandWidth.
	 * 
	 * @return {number} Value of viewBandWidth that indicates the smallest width unit for elements.
	 * 
	 * @public
	 */

	AxisOrdinal.prototype.getViewBandWidth = function(){
		return this.scale.rangeBand() * this.zoomRate;
	};

	/**
	 * Sets a new value of zoom rate.
	 * 
	 * @param {number} zoomRate New zoom rate of the viewport area.
	 * 
	 * @return {sap.gantt.misc.AxisOrdinal} Reference to this in order to allow method chaining.
	 * 
	 * @public
	 */

	AxisOrdinal.prototype.setZoomRate = function(zoomRate){
		this.zoomRate = sap.gantt.misc.Utility.assign(zoomRate, 1);
		return this;
	};

	/**
	 * Retrieves the value of zoom rate.
	 * 
	 * @return {number} Value of zoom rate.
	 * 
	 * @public
	 */

	AxisOrdinal.prototype.getZoomRate = function(){
		return this.zoomRate;
	};

	/**
	 * Sets the zoom origin.
	 * 
	 * @param {number} zoomOrigin Zoom origin of the viewport area.
	 * 
	 * @return {sap.gantt.misc.AxisOrdinal} Reference to this in order to allow method chaining.
	 * 
	 * @public
	 */

	AxisOrdinal.prototype.setZoomOrigin = function(zoomOrigin){
		this.zoomOrigin = sap.gantt.misc.Utility.assign(zoomOrigin, 0);
		return this;
	};

	/**
	 * Retrieves the zoom origin.
	 * 
	 * @return {number} Zoom origin.
	 * 
	 * @public
	 */

	AxisOrdinal.prototype.getZoomOrigin = function(){
		return this.zoomOrigin;
	};

	/**
	 * Clones a new AxisOrdinal from the current one.
	 * 
	 * @return {sap.gantt.misc.AxisOrdinal} Reference to the newly created clone.
	 * 
	 * @public
	 */

	AxisOrdinal.prototype.clone = function(){
		return new AxisOrdinal(this.elementArray.slice(0), this.scaleArray.slice(0), this.viewBandWidth,
			this.viewRangeStart, this.viewRangeEnd, this.zoomRate, this.zoomOrigin, this.padding);
	};
	// <= public methods

	return AxisOrdinal;
}, true);

}; // end of sap/gantt/misc/AxisOrdinal.js
if ( !jQuery.sap.isDeclared('sap.gantt.misc.AxisTime') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.misc.AxisTime'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.thirdparty.d3'); // unlisted dependency retained
sap.ui.define("sap/gantt/misc/AxisTime",["sap/ui/base/Object", "sap/gantt/misc/Utility", "sap/ui/thirdparty/d3"], function (BaseObject) {
	// Utility cannot be referenced because of cyclic dependency between AxisOrdinal and Utility, use global name to reference
	"use strict";

	/**
	 * Creates and initializes an AxisTime class.
	 * 
	 * @class The reusable functional class represents an instance of time-value linear coordinate mapping.
	 * 
	 * @param {array} timeRange The array must contain two or more dates that represent some ranges of data.
	 * @param {array} viewRange The array must contain two or more values, to match the cardinality of timeRange, representing some ranges of values.
	 * @param {number} zoomRate Zoom rate of the viewport area.
	 * @param {number} zoomOrigin Zoom origin of the viewport area.
	 * @param {number} viewOffset Offset of the viewport area.
	 * @param {object} locale Settings for language, time zone, and daylight saving.
	 * @param {boolean} RTL Indicates whether to apply the "right-to-left" layout.
	 * @param {array} oZoomStrategy Specifies the strategy to zoom in/out.
	 * 
	 * @return Instance of AxisTime.
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.misc.AxisTimes
	 */
	
	var AxisTime = function (timeRange, viewRange, zoomRate, zoomOrigin, viewOffset, locale, RTL, oZoomStrategy) {
		this.scale = d3.time.scale().domain(timeRange).range(viewRange).clamp(false);

		this.timeRange = timeRange;
		this.viewRange = viewRange;

		this.zoomRate = sap.gantt.misc.Utility.assign(zoomRate, 1);
		this.zoomOrigin = sap.gantt.misc.Utility.assign(zoomOrigin, 0);

		this.viewOffset = sap.gantt.misc.Utility.assign(viewOffset, 0);

		this.locale = locale;
		var language = sap.ui.getCore().getConfiguration().getLanguage();
		this.language = language.toLowerCase();

		if (locale && locale.getUtcdiff()) {
			var format = d3.time.format("%Y%m%d%H%M%S");
			this.timeZoneOffset = Math.round((format.parse("20000101" + locale.getUtcdiff()).getTime() - format.parse("20000101000000").getTime()) / 1000);
			if (locale.getUtcsign() === "-") {
				this.timeZoneOffset = -this.timeZoneOffset;
			}
		}
		this.RTL = RTL;
		this._oZoomStrategy = oZoomStrategy ? oZoomStrategy : sap.gantt.config.DEFAULT_TIME_ZOOM_STRATEGY;
	};

	/*
	 * Constants
	 */
	AxisTime.prototype.CONSTANT = {
		C_SEPARATOR: "_@@_",
		C_MESSAGE: {
			ARGUMENT_ERROR: "AxisOrdinal: Argument Error!"
		}
	};

	// public methods =>
	
	/**
	 * Given a date within the timeRange, this function returns the corresponding value within the viewRange.
	 * 
	 * @param {date} time Given date within the timeRange.
	 * 
	 * @return {number} Value corresponding to the given date within the viewRange.
	 * 
	 * @public
	 */
	
	AxisTime.prototype.timeToView = function(time){
		if (this.RTL !== true) {
			return Math.round((this.scale(time) - this.zoomOrigin) * this.zoomRate - this.viewOffset);
		} else {
			return Math.round(this.viewRange[1] * this.zoomRate - (((this.scale(time) + this.zoomOrigin) * this.zoomRate) + this.viewOffset));
		}
	};
	
	/**
	 * Returns the date within the timeRange for the corresponding value within the viewRange.
	 * 
	 * @param {number} value Given value within the viewRange.
	 * 
	 * @return {date} Date corresponding to the given value within the timeRange.
	 * 
	 * @public
	 */
	
	AxisTime.prototype.viewToTime = function(value){
		if (this.RTL !== true) {
			return this.scale.invert((value + this.viewOffset) / this.zoomRate + this.zoomOrigin);
		} else {
			return this.scale.invert(this.viewRange[1] - (value + this.viewOffset) / this.zoomRate - this.zoomOrigin);
		}
	};

	/**
	 * Sets a new value of timeRange.
	 * 
	 * @param {array} timeRange New value of timeRange.
	 * 
	 * @return {sap.gantt.misc.AxisTimes} Reference to this in order to allow method chaining.
	 * 
	 * @public
	 */
	
	AxisTime.prototype.setTimeRange = function(timeRange){
		this.timeRange = timeRange;
		this.scale.domain(timeRange);
		return this;
	};

	/**
	 * Retrieves the value of timeRange.
	 * 
	 * @return {array} Value of timeRange.
	 * 
	 * @public
	 */

	AxisTime.prototype.getTimeRange = function(){
		return this.scale.domain();
	};

	/**
	 * Sets a new value of viewRange.
	 * 
	 * @param {array} viewRange New value of viewRange.
	 * 
	 * @return {sap.gantt.misc.AxisTimes} Reference to this in order to allow method chaining.
	 * 
	 * @public
	 */

	AxisTime.prototype.setViewRange = function(viewRange){
		this.viewRange = viewRange;
		this.scale.range(viewRange);
		return this;
	};

	/**
	 * Retrieves the value of viewRange.
	 * 
	 * @return {array} Value of viewRange.
	 * 
	 * @public
	 */

	AxisTime.prototype.getViewRange = function(){
		var range = this.scale.range();
		return [Math.round((range[0] - this.zoomOrigin) * this.zoomRate - this.viewOffset),
		        Math.round((range[1] - this.zoomOrigin) * this.zoomRate - this.viewOffset)];
	};
	
	/**
	 * Retrieves the value of oZoomStrategy.
	 * 
	 * @return {object} Value of oZoomStrategy.
	 * 
	 * @public
	 */

	AxisTime.prototype.getZoomStrategy = function () {
		return this._oZoomStrategy;
	};

	/**
	 * Sets a new value of zoomRate.
	 * 
	 * @param {number} zoomRate New value of zoomRate.
	 * 
	 * @return {sap.gantt.misc.AxisTimes} Reference to this in order to allow method chaining.
	 * 
	 * @public
	 */
	AxisTime.prototype.setZoomRate = function(zoomRate){
		this.zoomRate = sap.gantt.misc.Utility.assign(zoomRate, 1);
		return this;
	};

	/**
	 * Retrieves the value of zoomRate.
	 * 
	 * @return {number} Value of zoomRate.
	 * 
	 * @public
	 */
	AxisTime.prototype.getZoomRate = function(){
		return this.zoomRate;
	};

	/**
	 * Sets a new value of zoomOrigin.
	 * 
	 * @param {number} zoomOrigin New value of zoomOrigin.
	 * 
	 * @return {sap.gantt.misc.AxisTimes} Reference to this in order to allow method chaining.
	 * 
	 * @public
	 */
	AxisTime.prototype.setZoomOrigin = function(zoomOrigin){
		this.zoomOrigin = sap.gantt.misc.Utility.assign(zoomOrigin, 0);
		return this;
	};

	/**
	 * Retrieves the value of zoomOrigin.
	 * 
	 * @return {number} Value of zoomOrigin.
	 * 
	 * @public
	 */
	AxisTime.prototype.getZoomOrigin = function(){
		return this.zoomOrigin;
	};

	/**
	 * Sets a new value of viewOffset.
	 * 
	 * @param {number} viewOffset New value of viewOffset.
	 * 
	 * @return {sap.gantt.misc.AxisTimes} Reference to this in order to allow method chaining.
	 * 
	 * @public
	 */
	AxisTime.prototype.setViewOffset = function(viewOffset){
		this.viewOffset = sap.gantt.misc.Utility.assign(viewOffset, 0);
		return this;
	};

	/**
	 * Retrieves the value of viewOffset.
	 * 
	 * @return {number} Value of viewOffset.
	 * 
	 * @public
	 */
	AxisTime.prototype.getViewOffset = function(){
		return this.viewOffset;
	};

	AxisTime.prototype.setLocale = function(locale){
		this.locale = locale;
		if (locale && locale.getUtcdiff()) {
			var format = d3.time.format("%Y%m%d%H%M%S");
			this.timeZoneOffset = Math.round((format.parse("20000101" + locale.getUtcdiff()).getTime() - format.parse("20000101000000").getTime()) / 1000);
			if (locale.getUtcsign() === "-") {
				this.timeZoneOffset = -this.timeZoneOffset;
			}
		}
		return this;
	};

	AxisTime.prototype.getLocale = function(){
		return this.locale;
	};

	/**
	 * Clones a new AxisTimes from the current one.
	 * 
	 * @return {sap.gantt.misc.AxisTimes} Reference to the newly created clone.
	 * 
	 * @public
	 */
	AxisTime.prototype.clone = function(){
		return new AxisTime([new Date(this.timeRange[0].valueOf()), new Date(this.timeRange[1].valueOf())],
			this.viewRange.slice(0), this.zoomRate, this.zoomOrigin, this.viewOffset, this.locale, this.RTL);
	};

	/**
	 * Retrieves an index of the time interval level in array oZoomStrategy.
	 * 
	 * @return {number} Index of the time interval level in array oZoomStrategy.
	 * 
	 * @public
	 */
	AxisTime.prototype.getCurrentTickTimeIntervalLevel = function(){
		var startTime = d3.time.format("%Y%m%d%H%M%S").parse("20000101000000");
		var start = this.scale(startTime);
		var count = 0;
		for (var i in this._oZoomStrategy) {
			var interval = this._oZoomStrategy[i].innerInterval;
			var end = this.scale(jQuery.sap.getObject(interval.unit).offset(startTime, interval.span));
			var r = (end - start) * this.zoomRate;
			if (r > interval.range) {
				return count;
			}
			count++;
		}
		return count - 1;
	};

	/**
	 * Retrieves a key of the time interval level in array oZoomStrategy.
	 * 
	 * @return {string} Key of the time interval level in array oZoomStrategy.
	 * 
	 * @public
	 */
	AxisTime.prototype.getCurrentTickTimeIntervalKey = function(){
		var startTime = d3.time.format("%Y%m%d%H%M%S").parse("20000101000000");
		var start = this.scale(startTime);
		var iCurrentTickKey;
		for (var i in this._oZoomStrategy) {
			var interval = this._oZoomStrategy[i].innerInterval;
			var end = this.scale(jQuery.sap.getObject(interval.unit).offset(startTime, interval.span));
			var r = (end - start) * this.zoomRate;
			if (r > interval.range) {
				iCurrentTickKey = i;
				break;
			}
		}
		return iCurrentTickKey;
	};

	/**
	 * Retrieves an object containing the information of current time, its position, and label.
	 * 
	 * @return {object} Reference to an object containing the information of current time, its position, and label.
	 * 
	 * @public
	 */
	AxisTime.prototype.getNowLabel = function(){
		var date = new Date();
		var utcDate = new Date(date.getTime() + (date.getTimezoneOffset() * 60000));
		var value = this.timeToView(utcDate);
		var localDate = d3.time.second.offset(utcDate,this.timeZoneOffset);
		
		var label = this.getTimeLabel(this.language, this._oZoomStrategy[this.getCurrentTickTimeIntervalKey()].smallInterval.format, localDate);

		return [{"date": localDate, "value": Math.round(value), "label": label}];
	};

	/**
	 * Retrieves an array of time ticks, each item containing date position and label, for the specified level within the given timeBoundary or viewBoundary.
	 * 
	 * @param {number} level Corresponding index in array oZoomStrategy.
	 * 
	 * @param {number} timeBoundary Time range within which time ticks are generated.
	 * 
	 * @param {number} viewBoundary View range within which time ticks are generated. Available only when timeBoundary isn't specified.
	 * 
	 * @return {object} Reference to an array of time ticks, each item containing date, position, and label.
	 * 
	 * @public
	 */
	AxisTime.prototype.getTickTimeIntervalLabel = function(level, timeBoundary, viewBoundary){
		var i;
		var lvl = level;
		if (typeof level === "number") {
			var count = 0;
			for (i in this._oZoomStrategy) {
				if (count === level) {
					lvl = i;
					break;
				}
				count++;
			}
		}

		var preStartDate, preEndDate;
		var daylightInterval = null;
		if (this.locale && this.locale.getDstHorizons().length > 0){
			daylightInterval = this.locale.getDstHorizons();
		}
		var format = d3.time.format("%Y%m%d%H%M%S");
		var dlsIntervals = [];
		if (daylightInterval){
			for (i = 0; i < daylightInterval.length; i++){
				dlsIntervals[i] = {};
				preStartDate = daylightInterval[i].getStartTime();
				preEndDate = daylightInterval[i].getEndTime();
				dlsIntervals[i].startDate = format.parse(preStartDate);
				dlsIntervals[i].endDate = format.parse(preEndDate);
			}
		}

		var localTimeRange = this.timeZoneOffset ?
			[d3.time.second.offset(this.timeRange[0], this.timeZoneOffset), d3.time.second.offset(this.timeRange[1], this.timeZoneOffset)] :
			this.timeRange;
		var localAxisTime = new sap.gantt.misc.AxisTime(localTimeRange, this.viewRange, this.zoomRate, this.zoomOrigin, this.viewOffset, null, this.RTL);
		var timeRange = null;
		var viewRange = null;
		var visibleScale = null;
		var dstScale = null;
		var normalScale = null;
		var startTimeRange = null;
		var endTimeRange = null;
		var timeRangeSet = [];
		var viewRangeSet = [];
		var scaleValue = null;
		if (timeBoundary) {
			startTimeRange = this.timeZoneOffset ? d3.time.second.offset(timeBoundary[0], this.timeZoneOffset) : timeBoundary[0];
			endTimeRange = this.timeZoneOffset ? d3.time.second.offset(timeBoundary[1], this.timeZoneOffset) : timeBoundary[1];

			timeRange = this.timeZoneOffset ?
				[d3.time.second.offset(timeBoundary[0], this.timeZoneOffset), d3.time.second.offset(timeBoundary[1], this.timeZoneOffset)] :
				timeBoundary;
			viewRange = [this.timeToView(timeBoundary[0]), this.timeToView(timeBoundary[1])];

			if (dlsIntervals && dlsIntervals.length){
				this._calculateTimeRange(dlsIntervals, startTimeRange, endTimeRange, timeRangeSet);
			}
			scaleValue = this._calculateScale(timeRangeSet, viewRangeSet, timeRange, viewRange, false);
		} else if (viewBoundary){
			startTimeRange = this.timeZoneOffset ? d3.time.second.offset(this.viewToTime(viewBoundary[0]), this.timeZoneOffset) : this.viewToTime(viewBoundary[0]);
			endTimeRange = this.timeZoneOffset ? d3.time.second.offset(this.viewToTime(viewBoundary[1]), this.timeZoneOffset) : this.viewToTime(viewBoundary[1]);
			timeRange = [startTimeRange, endTimeRange];
			viewRange = viewBoundary;

			if (dlsIntervals.length){
				this._calculateTimeRange(dlsIntervals, startTimeRange, endTimeRange, timeRangeSet);
			}
			scaleValue = this._calculateScale(timeRangeSet, viewRangeSet, timeRange, viewRange, false);
		} else {
			startTimeRange = localTimeRange[0];
			endTimeRange = localTimeRange[1];
			timeRange = localTimeRange;
			viewRange = this.viewRange;

			if (dlsIntervals.length){
				this._calculateTimeRange(dlsIntervals, startTimeRange, endTimeRange, timeRangeSet);
			}
			scaleValue = this._calculateScale(timeRangeSet, viewRangeSet, timeRange, viewRange, localTimeRange);
		}
		viewRangeSet = scaleValue.viewRangeSet;
		visibleScale = scaleValue.visibleScale;
		dstScale = scaleValue.dstScale;
		normalScale = scaleValue.normalScale;
		var ticks = [];
		var date, normalDate, value, label;
		var largeInterval = this._oZoomStrategy[lvl].largeInterval;
		var smallInterval = this._oZoomStrategy[lvl].smallInterval;

		var iIndex, iInner;
		if (largeInterval) {
			var largeIntervalTicks = [];
			var largeDstIntervalTicks = [];
			var largeNorIntervalTicks = [];

			if (!(visibleScale instanceof Array)){
				largeIntervalTicks[0] = visibleScale.ticks(jQuery.sap.getObject(largeInterval.unit).range, largeInterval.span);
			} else {
				for (iIndex = 0; iIndex < dstScale.length; iIndex++){
					largeDstIntervalTicks[iIndex] = dstScale[iIndex].ticks(jQuery.sap.getObject(largeInterval.unit).range, largeInterval.span);
					largeNorIntervalTicks[iIndex] = normalScale[iIndex].ticks(jQuery.sap.getObject(largeInterval.unit).range, largeInterval.span);
				}
				for (iIndex = 0; iIndex < visibleScale.length; iIndex++){
					largeIntervalTicks[iIndex] = visibleScale[iIndex].ticks(jQuery.sap.getObject(largeInterval.unit).range, largeInterval.span);
				}
			}
			var largeIntervalData = [];
			if (largeIntervalTicks[0] !== null){
				for (iIndex = 0; iIndex < largeIntervalTicks.length; iIndex++){
					for (iInner = 0; iInner < largeIntervalTicks[iIndex].length; iInner++) {
						date = largeIntervalTicks[iIndex][iInner];

						value = localAxisTime.timeToView(date);
					
						label = this.getTimeLabel(this.language, largeInterval.format, date);

						largeIntervalData.push({"date": date, "value": Math.round(value), "label": label});
					}
				}
			}

			if (largeDstIntervalTicks[0] !== null){
				for (iIndex = 0; iIndex < largeDstIntervalTicks.length; iIndex++){
					for (iInner = 0; iInner < largeDstIntervalTicks[iIndex].length; iInner++){
						date = largeDstIntervalTicks[iIndex][iInner];
						normalDate = largeNorIntervalTicks[iIndex][iInner];

						value = localAxisTime.timeToView(d3.time.second.offset(date.getTime(), -60 * 60));
						
						label = this.getTimeLabel(this.language, largeInterval.format, date);

						largeIntervalData.push({"date": date, "value": Math.round(value), "label": label});

					}
				}
			}
			ticks.push(largeIntervalData);
		} else {
			ticks.push([]);
		}
		if (smallInterval) {
			var smallDstIntervalTicks = [];
			var smallNorIntervalTicks = [];
			var smallIntervalTicks = [];
			if (!(visibleScale instanceof Array)){
				smallIntervalTicks[0] = visibleScale.ticks(jQuery.sap.getObject(smallInterval.unit).range, smallInterval.span);
			} else {
				for (iIndex = 0; iIndex < dstScale.length; iIndex++){
					smallDstIntervalTicks[iIndex] = dstScale[iIndex].ticks(jQuery.sap.getObject(smallInterval.unit).range, smallInterval.span);
					smallNorIntervalTicks[iIndex] = normalScale[iIndex].ticks(jQuery.sap.getObject(smallInterval.unit).range, smallInterval.span);
				}
				for (iIndex = 0; iIndex < visibleScale.length; iIndex++){
					smallIntervalTicks[iIndex] = visibleScale[iIndex].ticks(jQuery.sap.getObject(smallInterval.unit).range, smallInterval.span);
				}
			}

			var smallIntervalData = [];
			if (smallIntervalTicks[0]){
				for (iIndex = 0; iIndex < smallIntervalTicks.length; iIndex++){
					for (iInner = 0; iInner < smallIntervalTicks[iIndex].length; iInner++) {
						date = smallIntervalTicks[iIndex][iInner];
						var changeDate;
						var ignoreTickFlag = false;
						if (dlsIntervals.length){
							for (var d = 0; d < dlsIntervals.length; d++){
								if (date.getTime() === dlsIntervals[d].startDate.getTime()){
									changeDate = d3.time.second.offset(date.getTime(), 60 * 60);
									if ((iInner === smallIntervalTicks[iIndex].length - 1) && (lvl === "1hour" || lvl === "30min" || lvl === "15min" || lvl === "10min" || lvl === "5min")){
										ignoreTickFlag = true;
									}
								}
								if ((iInner === smallIntervalTicks[iIndex].length - 1) && (date.getTime() === d3.time.second.offset(dlsIntervals[d].endDate.getTime(), 60 * 60).getTime())){
									changeDate = d3.time.second.offset(date.getTime(), -60 * 60);
								}
							}
						}

						value = localAxisTime.timeToView(date);

						if (ignoreTickFlag){
							break;
						} else if (changeDate){
							label = this.getTimeLabel(this.language, smallInterval.format, changeDate);
							changeDate = null;
						} else {
							label = this.getTimeLabel(this.language, smallInterval.format, date);
						}

						smallIntervalData.push({"date": date, "value": Math.round(value), "label": label});
					}
				}
			}

			if (smallDstIntervalTicks[0]){
				for (iIndex = 0; iIndex < smallDstIntervalTicks.length; iIndex++){
					for (iInner = 0; iInner < smallDstIntervalTicks[iIndex].length; iInner++){
						date = smallDstIntervalTicks[iIndex][iInner];
						normalDate = smallNorIntervalTicks[iIndex][iInner];
						var oChangeDate;
						var bIgnoreTickFlag = false;
						if ((iInner === smallDstIntervalTicks[iIndex].length - 1) && (lvl === "1hour" || lvl === "30min" || lvl === "15min" || lvl === "10min" || lvl === "5min")){
							if (timeRangeSet.length > 0){
								for (var rangeItem = 0; rangeItem < timeRangeSet.length; rangeItem++){
									if ((!timeRangeSet[rangeItem].haveDST) && (normalDate.getTime() === timeRangeSet[rangeItem].range[0].getTime())){
										bIgnoreTickFlag = true;
									}
								}
							}
						}
						if (dlsIntervals.length){
							for (var s = 0; s < dlsIntervals.length; s++){
								if (date.getTime() === dlsIntervals[s].startDate.getTime()){
									oChangeDate = d3.time.second.offset(date.getTime(), 60 * 60);
								}
								if ((iInner === smallDstIntervalTicks[iIndex].length - 1) &&
										(date.getTime() === d3.time.second.offset(dlsIntervals[s].endDate.getTime(), 60 * 60).getTime())){
									oChangeDate = d3.time.second.offset(date.getTime(), -60 * 60);
								}
							}
						}
						if (lvl !== "1hour" && lvl !== "30min" && lvl !== "15min" && lvl !== "10min" && lvl !== "5min"){
							value = localAxisTime.timeToView(d3.time.second.offset(date.getTime(), -60 * 60));
						} else {
							value = localAxisTime.timeToView(normalDate);
						}
						if (bIgnoreTickFlag){
							break;
						} else if (oChangeDate){
							
							label = this.getTimeLabel(this.language, smallInterval.format, oChangeDate);
							oChangeDate = null;
						} else {
							
							label = this.getTimeLabel(this.language, smallInterval.format, date);
						}

						smallIntervalData.push({"date": date, "value": Math.round(value), "label": label});

					}
				}
			}
			ticks.push(smallIntervalData);
		} else {
			ticks.push([]);
		}

		return ticks;
	};
	// <= public methods

	AxisTime.prototype._calculateScale = function(timeRangeSet, viewRangeSet, timeRange, viewRange, localTimeRange){
		var visibleScale = null;
		var dstScale = [];
		var normalScale = [];
		if (timeRangeSet.length){
			visibleScale = [];
			var dstCount = 0;
			var visibleCount = 0;
			for (var t = 0; t < timeRangeSet.length; t++){
				viewRangeSet[t] = [this.timeToView(timeRangeSet[t].range[0]), this.timeToView(timeRangeSet[t].range[1])];
				if (timeRangeSet[t].haveDST){
					dstScale[dstCount] = new sap.gantt.misc.AxisTime(timeRangeSet[t].dstRange, viewRangeSet[t], this.zoomRate, this.zoomOrigin, this.viewOffset, null, this.RTL).scale;
					normalScale[dstCount] = new sap.gantt.misc.AxisTime(timeRangeSet[t].range, viewRangeSet[t], this.zoomRate, this.zoomOrigin, this.viewOffset, null, this.RTL).scale;
					dstCount++;
				} else {
					visibleScale[visibleCount] = new sap.gantt.misc.AxisTime(timeRangeSet[t].range, viewRangeSet[t], this.zoomRate, this.zoomOrigin, this.viewOffset, null, this.RTL).scale;
					visibleCount++;
				}
			}
		} else if (localTimeRange) {
			visibleScale = new sap.gantt.misc.AxisTime(localTimeRange, this.viewRange, this.zoomRate, this.zoomOrigin, this.viewOffset, null, this.RTL).scale;
		} else {
			visibleScale = new sap.gantt.misc.AxisTime(timeRange, viewRange, this.zoomRate, this.zoomOrigin, this.viewOffset, null, this.RTL).scale;
		}
		var retVal = {"viewRangeSet": viewRangeSet, "visibleScale" : visibleScale, "dstScale" : dstScale, "normalScale" : normalScale};
		return retVal;
	};

	AxisTime.prototype._calculateTimeRange = function(dlsIntervals, startTimeRange, endTimeRange, timeRangeSet){
		if (dlsIntervals.length){
			var startTime = startTimeRange;
			var endTime = endTimeRange;
			var tempTimeRange = [];
			var tempDstRange = [];
			var dstStartDate, dstEndDate;
			dstStartDate = dlsIntervals[0].startDate;
			dstEndDate = dlsIntervals[0].endDate;
			this._calculateRangeItem(dstStartDate, dstEndDate, startTime, endTime, tempTimeRange, tempDstRange);
			if (dlsIntervals.length > 1){
				for (var j = 1; j < dlsIntervals.length; j++){
					if (tempTimeRange.length){
						var rangeNeedCal = [];
						for (var item in tempTimeRange){
							rangeNeedCal.push(tempTimeRange[item]);
						}

						tempTimeRange = [];
						//tempDstRange = [];
						for (var t = 0 ; t < rangeNeedCal.length; t++){
							dstStartDate = dlsIntervals[j].startDate;
							dstEndDate = dlsIntervals[j].endDate;
							startTime = rangeNeedCal[t].range[0];
							endTime = rangeNeedCal[t].range[1];
							this._calculateRangeItem(dstStartDate, dstEndDate, startTime, endTime, tempTimeRange, tempDstRange);
						}
					}
				}
			}

			for (var dst in tempDstRange){
				timeRangeSet.push(tempDstRange[dst]);
			}
			for (var time in tempTimeRange){
				timeRangeSet.push(tempTimeRange[time]);
			}
		}
	};

	AxisTime.prototype._calculateRangeItem = function(dstStartDate, dstEndDate, startTimeRange, endTimeRange, tempTimeRange, timeRangeSet){
		var rangeItem = null;
		if (startTimeRange < dstStartDate){
			if (endTimeRange < dstEndDate){
				if (endTimeRange > dstStartDate){
					rangeItem = {};
					rangeItem.haveDST = false;
					rangeItem.range = [startTimeRange, dstStartDate];
					tempTimeRange.push(rangeItem);
					rangeItem = {};
					rangeItem.haveDST = true;
					rangeItem.range = [dstStartDate, endTimeRange];
					rangeItem.dstRange = [d3.time.second.offset(dstStartDate.getTime(), 60 * 60), d3.time.second.offset(endTimeRange, 60 * 60)];
					timeRangeSet.push(rangeItem);
				} else {
					rangeItem = {};
					rangeItem.haveDST = false;
					rangeItem.range = [startTimeRange, endTimeRange];
					tempTimeRange.push(rangeItem);
				}
			} else {
				rangeItem = {};
				rangeItem.haveDST = false;
				rangeItem.range = [startTimeRange, dstStartDate];
				tempTimeRange.push(rangeItem);
				rangeItem = {};
				rangeItem.haveDST = true;
				rangeItem.range = [dstStartDate, dstEndDate];
				rangeItem.dstRange = [d3.time.second.offset(dstStartDate.getTime(), 60 * 60), d3.time.second.offset(dstEndDate.getTime(), 60 * 60)];
				timeRangeSet.push(rangeItem);
				rangeItem = {};
				rangeItem.haveDST = false;
				rangeItem.range = [dstEndDate, endTimeRange];
				tempTimeRange.push(rangeItem);
			}
		} else if (startTimeRange >= dstStartDate){
			if (startTimeRange < dstEndDate){
				if (endTimeRange <= dstEndDate){
					rangeItem = {};
					rangeItem.haveDST = true;
					rangeItem.range = [startTimeRange, endTimeRange];
					rangeItem.dstRange = [d3.time.second.offset(startTimeRange, 60 * 60), d3.time.second.offset(endTimeRange, 60 * 60)];
					timeRangeSet.push(rangeItem);
				} else {
					rangeItem = {};
					rangeItem.haveDST = true;
					rangeItem.range = [startTimeRange, dstEndDate];
					rangeItem.dstRange = [d3.time.second.offset(startTimeRange, 60 * 60), d3.time.second.offset(dstEndDate.getTime(), 60 * 60)];
					timeRangeSet.push(rangeItem);
					rangeItem = {};
					rangeItem.haveDST = false;
					rangeItem.range = [dstEndDate, endTimeRange];
					tempTimeRange.push(rangeItem);
				}
			} else {
				rangeItem = {};
				rangeItem.haveDST = false;
				rangeItem.range = [startTimeRange, endTimeRange];
				tempTimeRange.push(rangeItem);
			}
		}
	};

	AxisTime.prototype.getTimeLabel = function(language, format, date){
		
		var oFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({pattern : format}, new sap.ui.core.Locale(language));
		
		return oFormat.format(date);
		
	};

	return AxisTime;
}, true);

}; // end of sap/gantt/misc/AxisTime.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.Circle') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.Circle'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/Circle",[
	"sap/gantt/shape/Shape"
], function (Shape) {
	"use strict";
	
	/**
	 * Creates and initializes a new Circle class.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * Circle shape class using SVG tag 'circle'. This shape is usually used to represent points in time.
	 * 
	 * <p>
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#CircleElement SVG specification 1.1 for 'circle' element} for
	 * more information about the HTML tag.<br/><br/>
	 * {@link http://www.w3.org/TR/SVG/images/shapes/circle01.svg Circle samples in SVG specification 1.1}:<br/>
	 * <svg width="12cm" height="4cm" viewBox="0 0 1200 400" xmlns="http://www.w3.org/2000/svg" version="1.1">
	 * <rect x="1" y="1" width="1198" height="398" fill="none" stroke="blue" stroke-width="2"/>
	 * <circle cx="600" cy="200" r="100" fill="red" stroke="blue" stroke-width="10" />
	 * </svg>
	 * </p>
	 * 
	 * @extend sap.gantt.shape.Shape
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.Circle
	 */
	var Circle = Shape.extend("sap.gantt.shape.Circle", /** @lends sap.gantt.shape.Circle.prototype */ {
		metadata: {
			properties: {
				tag: {type: "string", defaultValue: "circle"},
				
				cx: {type: "number"},
				cy: {type: "number"},
				r: {type: "number", defaultValue: 5}
			}
		}
	});
	
	Circle.prototype.init = function() {
		var oRb = sap.ui.getCore().getLibraryResourceBundle("sap.gantt");
		this.setProperty("ariaLabel", oRb.getText("ARIA_CIRCLE"));
	};
	
	/**
	 * Gets the value of property <code>tag</code>.
	 * 
	 * SVG tag name of the shape.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html SVG 1.1 specification for shapes}.<br/>
	 * <b>Note:</b> We do not recommend that you change this value using a configuration or coding.
	 * 
	 * @name sap.gantt.shape.Circle.prototype.getTag
	 * @function
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of property <code>tag</code>.
	 * @public
	 */
	
	/**
	 * Gets the value of property <code>cx</code>.
	 * 
	 * <p>
	 * x coordinate of the center of the circle.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#CircleElementCXAttribute SVG 1.1 specification for 'cx' attribute of 'circle'}.
	 * 
	 * Usually applications do not set this value. This getter carries out the calculation using the <code>time</code> property 
	 * as a base and makes some adjustments.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>cx</code>.
	 * @public
	 */
	Circle.prototype.getCx = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("cx")) {
			return this._configFirst("cx", oData);
		}
		
		return this.getRotationCenter(oData, oRowInfo)[0];
	};
	
	/**
	 * Gets the current value of property <code>cy</code>.
	 * 
	 * <p>
	 * y coordinate of the center of the circle.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#CircleElementCYAttribute SVG 1.1 specification for 'cy' attribute of 'circle'}.
	 * 
	 * Usually applications do not set this value. This getter carries out the calculation using parameter <code>oRowInfo</code> as a base
	 * and makes some adjustments to align the center of the row rectangle along the y axis. 
	 * If you override the default value calculated by the getter, the alignment of the center is not guaranteed.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>cy</code>.
	 * @public
	 */
	Circle.prototype.getCy = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("cy")) {
			return this._configFirst("cy", oData);
		}
		
		return this.getRowYCenter(oData, oRowInfo);
	};
	
	/**
	 * Gets the value of property <code>r</code>.
	 * 
	 * <p>
	 * Radius of the circle.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#CircleElementRAttribute SVG 1.1 specification for 'r' attribute of 'circle'}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>r</code>.
	 * @public
	 */
	Circle.prototype.getR = function (oData) {
		return this._configFirst("r", oData, true);
	};

	return Circle;
}, true);

}; // end of sap/gantt/shape/Circle.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ClipPath') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ClipPath'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ClipPath",[
	"sap/gantt/shape/Shape"
], function (Shape) {
	"use strict";
	
	/**
	 * Creates and initializes a new Clippath class.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * Clippath shape class using SVG container tag 'clippath'. It is usually used together with {@link sap.gantt.shape.Path} as aggregations, and
	 * referenced by other shapes by URL.
	 * 
	 * <p>
	 * See {@link http://www.w3.org/TR/SVG/masking.html#EstablishingANewClippingPath SVG specification 1.1 for 'clippath' element} for
	 * more information about the HTML tag.<br/><br/>
	 * {@link http://www.w3.org/TR/SVG/images/shapes/circle01.svg Circle samples in SVG specification 1.1}:<br/>
	 * <svg width="12cm" height="4cm" viewBox="0 0 300 100" xmlns="http://www.w3.org/2000/svg" version="1.1">
	 * <defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * <marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * <style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * .arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * 	<rect x="1" y="1" width="298" height="98" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<rect x="30" y="30" width="250" height="30" fill="#dddddd"/>
	 * 	<rect x="30" y="30" width="250" height="30" fill="#9E1F63" style="stroke: none; clip-path: url(#clipPath4);"/>
	 * 	<path d="M 90 70 l 10 -20 m 0 0 l 35 0 m 0 0 l 13 7 m 0 0 l 15 -14 m 0 0 l 15 27 m 0 0 l 20 -30 m 0 0 l 14 30" stroke="#1C75BC" stroke-width="2"/>
	 * 	<clipPath id="clipPath4"><path d="M 90 70 l 10 -20 l 35 0 l 13 7 l 15 -14 l 15 27 l 20 -30 l 14 30"/></clipPath>
	 * </svg>
	 * </p>
	 * 
	 * @extend sap.gantt.shape.Shape
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ClipPath
	 */
	var ClipPath = Shape.extend("sap.gantt.shape.ClipPath", /** @lends sap.gantt.shape.ClipPath.prototype */{
		metadata: {
			properties: {
				tag: {type: "string", defaultValue: "clippath"}
			},
			aggregations: {
				
				/**
				 * Paths defining the clipPath.
				 */
				paths: {type: "sap.gantt.shape.Path", multiple: true, singularName: "path"}
			}
		}
	});
	
	/**
	 * Gets the value of property <code>tag</code>.
	 * 
	 * SVG tag name of the shape.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html SVG 1.1 specification for shapes}.<br/>
	 * <b>Note:</b> We do not recommend that you change this value using a configuration or coding.
	 * 
	 * @name sap.gantt.shape.ClipPath.prototype.getTag
	 * @function
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of property <code>tag</code>.
	 * @public
	 */

	return ClipPath;
}, true);

}; // end of sap/gantt/shape/ClipPath.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.Group') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.Group'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/Group",[
	"sap/gantt/shape/Shape"
], function (Shape) {
	"use strict";
	
	/**
	 * Creates and initializes a new Group class.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * Group shape class using SVG tag 'group'. It is a container shape. Any other shapes can be aggregated under a group.
	 * 
	 * <p>
	 * See {@link http://www.w3.org/TR/SVG/struct.html#Groups SVG specification 1.1 for 'group' element} for
	 * more information about the HTML tag.<br/><br/>
	 * </p>
	 * 
	 * @extend sap.gantt.shape.Shape
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.Group
	 */
	var Group = Shape.extend("sap.gantt.shape.Group", /** @lends sap.gantt.shape.Group.prototype */ {
		metadata: {
			properties: {
				tag: {type: "string", defaultValue: "g"},
				RLSAnchors: {type: "array"}
			},
			aggregations: {
				
				/**
				 * 
				 */
				shapes: {type: "sap.gantt.shape.Shape", multiple: true, singularName: "shape"}
			}
		}
	});
	
	/**
	 * Gets the value of property <code>tag</code>.
	 * 
	 * SVG tag name of the shape.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html SVG 1.1 specification for shapes}.<br/>
	 * <b>Note:</b> We do not recommend that you change this value using a configuration or coding.
	 * 
	 * @name sap.gantt.shape.Group.prototype.getTag
	 * @function
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of property <code>tag</code>.
	 * @public
	 */
	
	/**
	 * To enable connections between in-row shapes, a custom Group class has to be implemented that extends <code>sap.gantt.shape.Group</code>.
	 * Additionally, the <code>getRLSAnchors</code> method has to be implemented for the Relationship class to know the coordinates of the connection points.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {object} Coordinates of the "from" shape (start) and "to" shape (end)
	 * @public
	 */
	Group.prototype.getRLSAnchors = function (oData){
		return this._configFirst("RLSAnchors", oData);
	};
	
	return Group;
}, true);

}; // end of sap/gantt/shape/Group.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.Image') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.Image'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
sap.ui.define("sap/gantt/shape/Image",[
	"sap/gantt/shape/Shape", "sap/gantt/misc/Utility", "sap/gantt/misc/Format", "sap/ui/core/Core"
], function (Shape, Utility, Format, Core) {
	"use strict";
	
	/**
	 * Creates and initializes a new Image class.
	 * 
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * Image shape class using SVG tag 'image'. This shape is usually used to represent points in time.
	 * 
	 * <p>
	 * See {@link http://www.w3.org/TR/SVG/struct.html#ImageElement SVG specification 1.1 for 'image' element} for
	 * more information about the HTML tag.<br/><br/>
	 * </p>
	 * 
	 * @extend sap.gantt.shape.Shape
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.Image
	 */
	var Image = Shape.extend("sap.gantt.shape.Image", /** @lends sap.gantt.shape.Image.prototype */ {
		metadata: {
			properties: {
				tag: {type: "string", defaultValue: "image"},
				
				image: {type: "string"},
				x: {type: "number"},
				y: {type: "number"},
				width: {type: "number", defaultValue : 20},
				height: {type: "number", defaultValue : 20}
			}
		}
	});
	
	Image.prototype.init = function() {
		var oRb = sap.ui.getCore().getLibraryResourceBundle("sap.gantt");
		this.setProperty("ariaLabel", oRb.getText("ARIA_IMAGE"));
	};
	
	/**
	 * Gets the value of property <code>tag</code>.
	 * 
	 * SVG tag name of the shape.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html SVG 1.1 specification for shapes}.<br/>
	 * <b>Note:</b>  We do not recommend that you change this value using a configuration or coding.
	 * 
	 * @name sap.gantt.shape.Image.prototype.getTag
	 * @function
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of property <code>tag</code>.
	 * @public
	 */
	
	/**
	 * Gets the current value of property <code>x</code>.
	 * 
	 * <p>
	 * x coordinate of the image rectangle.
	 * See {@link http://www.w3.org/TR/SVG/struct.html#ImageElementXAttribute SVG 1.1 specification for 'x' attribute of 'image'}.
	 * 
	 * Usually applications do not set this value. This getter carries out the calculation using property <code>time</code> as a base
	 * and makes some adjustments.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>x</code>.
	 * @public
	 */
	Image.prototype.getX = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("x")) {
			return this._configFirst("x", oData);
		}
		var nTimeX,
			oAxisTime = this.mChartInstance.getAxisTime();
		
		if (Core.getConfiguration().getRTL()) {
			if (this.getIsDuration(oData, oRowInfo) === true) {
				nTimeX = oAxisTime.timeToView(Format.abapTimestampToDate(this.getEndTime(oData, oRowInfo)));
			} else {
				nTimeX = oAxisTime.timeToView(Format.abapTimestampToDate(this.getTime(oData, oRowInfo)));
			}
			return (nTimeX ? nTimeX : 0) - this.getWidth(oData, oRowInfo);
		} else {
			nTimeX = oAxisTime.timeToView(Format.abapTimestampToDate(this.getTime(oData, oRowInfo)));
			return nTimeX ? nTimeX : 0;
		}
	};

	/**
	 * Gets the current value of property <code>y</code>.
	 * 
	 * <p>
	 * y coordinate of the image rectangle.
	 * See {@link http://www.w3.org/TR/SVG/struct.html#ImageElementYAttribute SVG 1.1 specification for 'y' attribute of 'image'}.
	 * 
	 * Usually applications do not set this value. This getter carries out the calculation using parameter  <code>oRowInfo</code> as a base
	 * and makes some adjustments to align the center of the row rectangle along the y axis. 
	 * If you override the default value calculated by the getter, the alignment of the center is not guaranteed.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>y</code>.
	 * @public
	 */
	Image.prototype.getY = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("y")) {
			return this._configFirst("y", oData);
		}

		return this.getRowYCenter(oData, oRowInfo) - this.getHeight(oData, oRowInfo) / 2;
	};
	
	/**
	 * Gets the value of property <code>image</code>.
	 * 
	 * <p>
	 * IRI reference of the image.
	 * See {@link http://www.w3.org/TR/SVG/struct.html#ImageElementHrefAttribute SVG 1.1 specification for 'xlink:href' attribute of 'image'}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>image</code>.
	 * @public
	 */
	Image.prototype.getImage = function (oData){
		return this._configFirst("image", oData);
	};

	/**
	 * Gets the value of property <code>width</code>.
	 * 
	 * <p>
	 * Width of the image.
	 * See {@link http://www.w3.org/TR/SVG/struct.html#ImageElementWidthAttribute SVG 1.1 specification for 'width' attribute of 'image'}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>width</code>.
	 * @public
	 */
	Image.prototype.getWidth = function (oData){
		return this._configFirst("width", oData, true);
	};
	
	/**
	 * Gets the value of property <code>height</code>.
	 * 
	 * <p>
	 * Height of the image.
	 * See {@link http://www.w3.org/TR/SVG/struct.html#ImageElementHeightAttribute SVG 1.1 specification for 'height' attribute of 'image'}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>height</code>.
	 * @public
	 */
	Image.prototype.getHeight = function (oData){
		return this._configFirst("height", oData, true);
	};
	
	return Image;
}, true);

}; // end of sap/gantt/shape/Image.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.Line') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.Line'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/Line",[
	"sap/gantt/shape/Shape", "sap/gantt/misc/Utility", "sap/gantt/misc/Format"
], function (Shape, Utility, Format) {
	"use strict";
	
	/**
	 * Creates and initializes a new Line class.
	 * 
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * Line shape class using SVG tag 'line'. This shape is usually used to represent durations.
	 * 
	 * <p>
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#LineElement SVG specification 1.1 for 'line' element} for
	 * more information about the HTML tag.<br/><br/>
	 * {@link http://www.w3.org/TR/SVG/images/shapes/line01.svg Line samples in SVG specification 1.1}:<br/>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="4cm" viewBox="0 0 1200 400" version="1.1">
	 * <rect x="1" y="1" width="1198" height="398" fill="none" stroke="blue" stroke-width="2"/>
	 * <g stroke="green">
	 *   <line x1="100" y1="300" x2="300" y2="100" stroke-width="5"/>
	 *   <line x1="300" y1="300" x2="500" y2="100" stroke-width="10"/>
	 *   <line x1="500" y1="300" x2="700" y2="100" stroke-width="15"/>
	 *   <line x1="700" y1="300" x2="900" y2="100" stroke-width="20"/>
	 *   <line x1="900" y1="300" x2="1100" y2="100" stroke-width="25"/>
	 * </g>
	 * </svg>
	 * </p>
	 * 
	 * @extend sap.gantt.shape.Shape
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.Line
	 */
	var Line = Shape.extend("sap.gantt.shape.Line", /** @lends sap.gantt.shape.Line.prototype */ {
		metadata: {
			properties: {
				tag: {type: "string", defaultValue: "line"},
				isDuration: {type: "boolean", defaultValue: true},
				
				x1: {type: "number"},
				y1: {type: "number"},
				x2: {type: "number"},
				y2: {type: "number"}
			}
		}
	});
	
	Line.prototype.init = function() {
		var oRb = sap.ui.getCore().getLibraryResourceBundle("sap.gantt");
		this.setProperty("ariaLabel", oRb.getText("ARIA_LINE"));
	};
	
	/**
	 * Gets the value of property <code>tag</code>.
	 * 
	 * SVG tag name of the shape.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html SVG 1.1 specification for shapes}.<br/>
	 * <b>Note:</b>  We do not recommend that you change this value using a configuration or coding.
	 * 
	 * @name sap.gantt.shape.Line.prototype.getTag
	 * @function
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of property <code>tag</code>.
	 * @public
	 */
	
	/**
	 * Gets the value of property <code>isDuration</code>.
	 * 
	 * @name sap.gantt.shape.Line.prototype.getIsDuration
	 * @function
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {boolean} Value of property <code>isDuration</code>.
	 * @public
	 */
	
	/**
	 * Gets the value of property <code>x1</code>.
	 * 
	 * <p>
	 * x coordinate of the start of the line.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#LineElementX1Attribute SVG 1.1 specification for 'x1' attribute of 'line'}.
	 * 
	 * Usually applications do not set this value. This getter carries out the calculation using property <code>time</code> as a base
	 * and makes some adjustments.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>x1</code>.
	 * @public
	 */
	Line.prototype.getX1 = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("x1")) {
			return this._configFirst("x1", oData);
		}
		
		return this.mChartInstance.getAxisTime().timeToView(
			Format.abapTimestampToDate(this.getTime(oData, oRowInfo)));
	};
	
	/**
	 * Gets the value of property <code>y1</code>.
	 * 
	 * <p>
	 * y coordinate of the start of the line.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#LineElementY1Attribute SVG 1.1 specification for 'y1' attribute of 'line'}.
	 * 
	 * Usually applications do not set this value. This getter carries out the calculation using parameter <code>oRowInfo</code>,
	 * and makes some adjustments to align the center of the row rectangle along the y axis. 
	 * If you override the default value calculated by the getter, the alignment of the center is not guaranteed.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>y1</code>.
	 * @public
	 */
	Line.prototype.getY1 = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("y1")) {
			return this._configFirst("y1", oData, true);
		}
		
		return this.getRowYCenter(oData, oRowInfo);
	};
	
	/**
	 * Gets the value of property <code>x2</code>.
	 * 
	 * <p>
	 * x coordinate of the end of the line.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#LineElementX2Attribute SVG 1.1 specification for 'x2' attribute of 'line'}.
	 * 
	 * Usually applications do not set this value. This getter carries out the calculation using property <code>endTime</code> as a base
	 * and makes some adjustments.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>x2</code>.
	 * @public
	 */
	Line.prototype.getX2 = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("x2")) {
			return this._configFirst("x2", oData);
		}
		
		return this.mChartInstance.getAxisTime().timeToView(
				Format.abapTimestampToDate(this.getEndTime(oData, oRowInfo)));
	};
	
	/**
	 * Gets the value of property <code>y2</code>.
	 * 
	 * <p>
	 * y coordinate of the end of the line.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#LineElementY2Attribute SVG 1.1 specification for 'y2' attribute of 'line'}.
	 * 
	 * Usually applications do not set this value. This getter carries out the calculation using parameter <code>oRowInfo</code> as a base
	 * and makes some adjustments to align the center of the row rectangle along the y axis. 
	 * f you override the default value calculated by the getter, the alignment of the center is not guaranteed.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>y2</code>.
	 * @public
	 */
	Line.prototype.getY2 = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("y2")) {
			return this._configFirst("y2", oData, true);
		}
		
		return this.getRowYCenter(oData, oRowInfo);
	};

	return Line;
}, true);

}; // end of sap/gantt/shape/Line.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.Path') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.Path'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/Path",[
	"sap/gantt/shape/Shape", "sap/gantt/misc/Utility"
], function (Shape, Utility) {
	"use strict";
	
	/**
	 * Creates and initializes a new Path class.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * Path shape class using SVG tag 'path'.
	 * 
	 * <p>
	 * See {@link http://www.w3.org/TR/SVG/paths.html SVG specification 1.1 for 'path' element} for
	 * more information about the HTML tag.<br/><br/>
	 * 
	 * {@link http://www.w3.org/TR/SVG/images/paths/triangle01.svg Sample of closed path in SVG specification 1.1}:<br/>
	 * <svg width="4cm" height="4cm" viewBox="0 0 400 400"  xmlns="http://www.w3.org/2000/svg" version="1.1">
	 * <rect x="1" y="1" width="398" height="398" fill="none" stroke="blue" />
	 * <path d="M 100 100 L 300 100 L 200 300 z"  fill="red" stroke="blue" stroke-width="3" />
	 * </svg><br/>
	 * 
	 * {@link http://www.w3.org/TR/SVG/images/paths/cubic01.svg Sample of open curve path in SVG specification 1.1}: <br/>
	 * <svg width="5cm" height="4cm" viewBox="0 0 500 400" xmlns="http://www.w3.org/2000/svg" version="1.1">
	 * <style>.Border { fill:none; stroke:blue; stroke-width:1 } .Connect { fill:none; stroke:#888888; stroke-width:2 }
	 * .SamplePath { fill:none; stroke:red; stroke-width:5 } .EndPoint { fill:none; stroke:#888888; stroke-width:2 }
	 * .CtlPoint { fill:#888888; stroke:none } .AutoCtlPoint { fill:none; stroke:blue; stroke-width:4 }
	 * .Label { font-size:22; font-family:Verdana }</style>
	 * <rect class="Border" x="1" y="1" width="498" height="398" />
	 * <polyline class="Connect" points="100,200 100,100" />
	 * <polyline class="Connect" points="250,100 250,200" />
	 * <polyline class="Connect" points="250,200 250,300" />
	 * <polyline class="Connect" points="400,300 400,200" />
	 * <path class="SamplePath" d="M100,200 C100,100 250,100 250,200 S400,300 400,200" />
	 * <circle class="EndPoint" cx="100" cy="200" r="10" />
	 * <circle class="EndPoint" cx="250" cy="200" r="10" />
	 * <circle class="EndPoint" cx="400" cy="200" r="10" />
	 * <circle class="CtlPoint" cx="100" cy="100" r="10" />
	 * <circle class="CtlPoint" cx="250" cy="100" r="10" />
	 * <circle class="CtlPoint" cx="400" cy="300" r="10" />
	 * <circle class="AutoCtlPoint" cx="250" cy="300" r="9" />
	 * <text class="Label" x="25" y="70">M100,200 C100,100 250,100 250,200</text>
	 * <text class="Label" x="325" y="350" style="text-anchor:middle">S400,300 400,200</text>
	 * </svg>
	 * </p>
	 * 
	 * @extend sap.gantt.shape.Shape
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.Path
	 */
	var Path = Shape.extend("sap.gantt.shape.Path", /** @lends sap.gantt.shape.Path.prototype */ {
		metadata: {
			properties: {
				tag: {type: "string", defaultValue: "path"},
				isClosed: {type: "boolean", defaultValue: false},
				fill: {type: "string", defaultValue: "none"},

				d: {type: "string"}
			}
		}
	});
	
	Path.prototype.init = function() {
		var oRb = sap.ui.getCore().getLibraryResourceBundle("sap.gantt");
		this.setProperty("ariaLabel", oRb.getText("ARIA_PATH"));
	};
	
	/**
	 * Gets the value of property <code>tag</code>.
	 * 
	 * SVG tag name of the shape.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html SVG 1.1 specification for shapes}.<br/>
	 * <b>Note:</b> We do not recommend that you change this value using a configuration or coding.
	 * 
	 * @name sap.gantt.shape.Path.prototype.getTag
	 * @function
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of property <code>tag</code>.
	 * @public
	 */
	
	/**
	 * Gets the value of property <code>d</code>.
	 * 
	 * <p>
	 * d attribute of path element.
	 * See {@link http://www.w3.org/TR/SVG/paths.html#DAttribute SVG 1.1 specification for 'd' attribute of 'path'}.
	 * The 'd' attribute has very powerful grammar. See {@link http://www.w3.org/TR/SVG/paths.html#PathDataBNF BNF grammar} for more information.
	 * Rich extension of paths is provided in namespace <code>sap.gantt.shape.ext</code>.<br/>
	 * This shape provides a default implementation of the d attribute:<br/>
	 * <svg width="12cm" height="4cm" viewBox="0 0 300 100" xmlns="http://www.w3.org/2000/svg" version="1.1">
	 * <defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * <marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * <style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * .arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * <rect x="1" y="1" width="298" height="98" fill="none" stroke="blue" stroke-width="0.5"/>
	 * <path d="M 80,50 c 0,-50 80,-50 80,0 c 0,50 80,50 80,0" class="side" />
	 * <circle cx="80" cy="50" class="center" />
	 * <circle cx="240" cy="50" class="center" />
	 * <path d="M 80,70 v -20 m 160 0 v -20" class="texthyphon" />
	 * <text x="65" y="85" class="timeText">time</text>
	 * <text x="220" y="25" class="timeText">endTime</text>
	 * </svg>
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of property <code>d</code>.
	 * @public
	 */
	Path.prototype.getD = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("d")) {
			return this._configFirst("d", oData);
		}
		
		var aCenter = this._getCenter(oData, oRowInfo),
			bIsDuration = this.getIsDuration(oData, oRowInfo),
			sMode = this.mChartInstance.getSapUiSizeClass();
		var nHalfLength = Utility.scaleBySapUiSize(sMode, 7.5);
		
		if (bIsDuration) {
			var aEndCenter = this._getCenter(oData, oRowInfo, true);
			nHalfLength = (aEndCenter[0] - aCenter[0]) / 2;
		}
		
		return "M " + aCenter[0] + " " + aCenter[1] +
			" c 0," + -nHalfLength + " " + nHalfLength + "," + -nHalfLength + " " + nHalfLength +
			",0 c 0," + nHalfLength + " " + nHalfLength + "," + nHalfLength + " " + nHalfLength + ",0";
	};
	
	/**
	 * Gets the value of property <code>isClosed</code>.
	 * 
	 * <p>
	 * When this value is true, the 'fill' attribute is applied. Otherwise, the 'fill' attribute is none.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {boolean} Value of property <code>isClosed</code>.
	 * @public
	 */
	Path.prototype.getIsClosed = function (oData) {
		return this._configFirst("isClosed", oData);
	};

	return Path;
}, true);

}; // end of sap/gantt/shape/Path.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.Polygon') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.Polygon'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/Polygon",[
	"sap/gantt/shape/Shape", "sap/gantt/misc/Utility"
], function (Shape, Utility) {
	"use strict";
	
	/**
	 * Creates and initializes a new Polygon class.
	 * 
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * Polygon shape class using SVG tag 'polygon'.
	 * 
	 * <p>
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#PolygonElement SVG specification 1.1 for 'polygon' element} for
	 * more information about the HTML tag.<br/><br/>
	 * 
	 * {@link http://www.w3.org/TR/SVG/images/shapes/polygon01.svg Sample of 'polygon' in SVG specification 1.1}:<br/>
	 * <svg width="12cm" height="4cm" viewBox="0 0 1200 400" xmlns="http://www.w3.org/2000/svg" version="1.1">
	 * <rect x="1" y="1" width="1198" height="398" fill="none" stroke="blue" stroke-width="2" />
	 * <polygon fill="red" stroke="blue" stroke-width="10" points="350,75  379,161 469,161 397,215 423,301 350,250 277,301 303,215 231,161 321,161" />
	 * <polygon fill="lime" stroke="blue" stroke-width="10" points="850,75  958,137.5 958,262.5 850,325 742,262.6 742,137.5" />
	 * </svg>
	 * </p>
	 * 
	 * @extend sap.gantt.shape.Shape
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.Polygon
	 */
	var Polygon = Shape.extend("sap.gantt.shape.Polygon", /** @lends sap.gantt.shape.Polygon.prototype */ {
		metadata: {
			properties: {
				tag: {type: "string", defaultValue: "polygon"},
				
				points: {type: "string"}
			}
		}
	});

	Polygon.prototype.init = function() {
		var oRb = sap.ui.getCore().getLibraryResourceBundle("sap.gantt");
		this.setProperty("ariaLabel", oRb.getText("ARIA_POLYGON"));
	};
	
	/**
	 * Gets the value of property <code>tag</code>.
	 * 
	 * SVG tag name of the shape.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html SVG 1.1 specification for shapes}.<br/>
	 * <b>Note:</b> We do not recommend that you change this value using a configuration or coding.
	 * 
	 * @name sap.gantt.shape.Polygon.prototype.getTag
	 * @function
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of property <code>tag</code>.
	 * @public
	 */
	
	/**
	 * Gets the value of property <code>points</code>.
	 * 
	 * <p>
	 * Points attribute of the polygon element.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#PolygonElementPointsAttribute SVG 1.1 specification for 'points' attribute of 'polygon'}.
	 * Rich extension of paths is provided in namespace <code>sap.gantt.shape.ext</code>.<br/>
	 * This shape provides a default implementation of points:<br/>
	 * <svg width="12cm" height="4cm" viewBox="0 0 300 100" xmlns="http://www.w3.org/2000/svg" version="1.1">
	 * 	<defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * 	<marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * 	<style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * 	.arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63;fill:none} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * 	<rect x="1" y="1" width="298" height="98" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<polygon points="115.4,30 150,10 184.6,30 184.6,70 150,90 115.4,70" class="side" />
	 * 	<circle cx="150" cy="50" class="center" />
	 * 	<path d="M 150,30 v 20 h 20" class="texthyphon" />
	 * 	<text x="135" y="20" class="timeText">time</text>
	 * 	<text x="190" y="50" class="timeText">rotation</text>
	 * 	<text x="200" y="70" class="timeText">Center</text>
	 * </svg>
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of property <code>points</code>.
	 * @public
	 */
	Polygon.prototype.getPoints = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("points")) {
			return this._configFirst("points", oData);
		}
		
		// default polygon is a regular hexagon.
		var sMode = this.mChartInstance.getSapUiSizeClass();
		var aCenter = this.getRotationCenter(oData, oRowInfo),
			nXian = Utility.scaleBySapUiSize(sMode, 8),
			nGou = Utility.scaleBySapUiSize(sMode, 4),
			nGu = Utility.scaleBySapUiSize(sMode, 4 * Math.sqrt(3)),
			aRetVal = [];
		aRetVal.push([aCenter[0] - nGu, aCenter[1] - nGou].join(","));
		aRetVal.push([aCenter[0], aCenter[1] - nXian].join(","));
		aRetVal.push([aCenter[0] + nGu, aCenter[1] - nGou].join(","));
		aRetVal.push([aCenter[0] + nGu, aCenter[1] + nGou].join(","));
		aRetVal.push([aCenter[0], aCenter[1] + nXian].join(","));
		aRetVal.push([aCenter[0] - nGu, aCenter[1] + nGou].join(","));
		return aRetVal.join(" ");
	};
	
	return Polygon;
}, true);

}; // end of sap/gantt/shape/Polygon.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.Polyline') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.Polyline'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/Polyline",[
	"sap/gantt/shape/Shape", "sap/gantt/misc/Utility"
], function (Shape, Utility) {
	"use strict";
	
	/**
	 * Creates and initializes a new Polyline class.
	 * 
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * Polyline shape class using SVG tag 'polyline'.
	 * 
	 * <p>
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#PolylineElement SVG specification 1.1 for 'polyline' element} for
	 * more information about the HTML tag.<br/><br/>
	 * 
	 * {@link http://www.w3.org/TR/SVG/images/shapes/polyline01.svg Sample of 'polyline' in SVG specification 1.1}:<br/>
	 * <svg width="12cm" height="4cm" viewBox="0 0 1200 400" xmlns="http://www.w3.org/2000/svg" version="1.1">
	 * <rect x="1" y="1" width="1198" height="398" fill="none" stroke="blue" stroke-width="2" />
	 * <polyline fill="none" stroke="blue" stroke-width="10" points="50,375
	 * 150,375 150,325 250,325 250,375 350,375 350,250 450,250 450,375 550,375 550,175 650,175 650,375
	 * 750,375 750,100 850,100 850,375 950,375 950,25 1050,25 1050,375 1150,375" />
	 * </svg>
	 * </p>
	 * 
	 * @extend sap.gantt.shape.Shape
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.Polyline
	 */
	var Polyline = Shape.extend("sap.gantt.shape.Polyline", /** @lends sap.gantt.shape.Polyline.prototype */ {
		metadata: {
			properties: {
				tag: {type: "string", defaultValue: "polyline"},
				fill: {type: "string", defaultValue: "none"},
				
				points: {type: "string"}
			}
		}
	});
	
	Polyline.prototype.init = function() {
		var oRb = sap.ui.getCore().getLibraryResourceBundle("sap.gantt");
		this.setProperty("ariaLabel", oRb.getText("ARIA_CIRCLE"));
	};
	
	/**
	 * Gets the value of property <code>tag</code>.
	 * 
	 * SVG tag name of the shape.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html SVG 1.1 specification for shapes}.<br/>
	 * <b>Note:</b> We do not recommend that you change this value using a configuration or coding.
	 * 
	 * @name sap.gantt.shape.Polyline.prototype.getTag
	 * @function
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of property <code>tag</code>.
	 * @public
	 */
	
	/**
	 * Gets the value of property <code>fill</code>.
	 * 
	 * <p> 
	 * Standard SVG 'fill' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#FillProperty SVG 1.1 specification for 'fill'}.
	 * <b>Note:</b> The HTML color and URL reference to an SVG definition can be provided to fill. SVG definitions usually come from SVG definitions rendered by
	 * {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable}, or {@link sap.gantt.GanttChart}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of property <code>fill</code>.
	 * @public
	 */
	
	/**
	 * Gets the value of property <code>points</code>.
	 * 
	 * <p>
	 * points attribute of the polygon shape.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#PolylineElementPointsAttribute SVG 1.1 specification for 'points' attribute of 'polyline'}.
	 * This shape provides a default implementation of points:<br/>
	 * <svg width="12cm" height="4cm" viewBox="0 0 300 100" xmlns="http://www.w3.org/2000/svg" version="1.1">
	 * 	<defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * 	<marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * 	<style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * 	.arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63;fill:none} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * 	<rect x="1" y="1" width="298" height="98" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<polyline points="120,50 140,50 150,30 154,74 160,50 180,50" class="side" />
	 * 	<circle cx="120" cy="50" class="center" />
	 * 	<path d="M 120,30 v 20 h -20" class="texthyphon" />
	 * 	<text x="105" y="20" class="timeText">time</text>
	 * 	<text x="25" y="50" class="timeText">rotation</text>
	 * 	<text x="30" y="70" class="timeText">Center</text>
	 * </svg>
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of property <code>points</code>.
	 * @public
	 */
	Polyline.prototype.getPoints = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("points")) {
			return this._configFirst("points", oData);
		}
		
		// default polyline.
		var aCenter = this.getRotationCenter(oData, oRowInfo),
			aRetVal = [];
		var sMode = this.mChartInstance.getSapUiSizeClass();

		aRetVal.push([aCenter[0] - 15, aCenter[1]].join(","));
		aRetVal.push([aCenter[0] - 10, aCenter[1]].join(","));
		aRetVal.push([aCenter[0] - 5, aCenter[1] - Utility.scaleBySapUiSize(sMode, 7.5)].join(","));
		aRetVal.push([aCenter[0] + 5, aCenter[1] + Utility.scaleBySapUiSize(sMode, 7.5)].join(","));
		aRetVal.push([aCenter[0] + 10, aCenter[1]].join(","));
		aRetVal.push([aCenter[0] + 15, aCenter[1]].join(","));
		
		return aRetVal.join(" ");
	};
	
	return Polyline;
}, true);

}; // end of sap/gantt/shape/Polyline.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.Rectangle') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.Rectangle'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
sap.ui.define("sap/gantt/shape/Rectangle",[
	"sap/gantt/shape/Shape", "sap/gantt/misc/Utility", "sap/gantt/misc/Format", "sap/ui/core/Core"
], function (Shape, Utility, Format, Core) {
	"use strict";
	
	/**
	 * Creates and initializes a new Rectangle class.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * Rectangle shape class using SVG tag 'rect'. This shape is usually used to represent durations.
	 * 
	 * <p>
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#RectElement SVG specification 1.1 for 'rect' element} for
	 * more information about the HTML tag.<br/><br/>
	 * {@link http://www.w3.org/TR/SVG/images/shapes/rect01.svg Rectangle sample in SVG specification 1.1}:<br/>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="4cm" viewBox="0 0 1200 400" version="1.1">
	 * <rect x="1" y="1" width="1198" height="398" fill="none" stroke="blue" stroke-width="2"/>
	 * <rect x="400" y="100" width="400" height="200" fill="yellow" stroke="navy" stroke-width="10"/>
	 * </svg><br/>
	 * 
	 * {@link http://www.w3.org/TR/SVG/images/shapes/rect02.svg Rectangle sample with rounded corner in SVG specification 1.1}: <br/>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="4cm" viewBox="0 0 1200 400" version="1.1">
	 * 	<rect x="1" y="1" width="1198" height="398" fill="none" stroke="blue" stroke-width="2"/>
	 * 	<rect x="100" y="100" width="400" height="200" rx="50" fill="green"/>
	 * 	<g transform="translate(700 210) rotate(-30)">
	 * 		<rect x="0" y="0" width="400" height="200" rx="50" fill="none" stroke="purple" stroke-width="30"/>
	 * 	</g>
	 * </svg>
	 * </p>
	 * 
	 * @extend sap.gantt.shape.Shape
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.Rectangle
	 */
	var Rectangle = Shape.extend("sap.gantt.shape.Rectangle", /** @lends sap.gantt.shape.Rectangle.prototype */ {
		metadata: {
			properties: {
				tag: {type: "string", defaultValue: "rect"},
				isDuration: {type: "boolean", defaultValue: true},

				x: {type: "number"},
				y: {type: "number"},
				width: {type: "number"},
				height: {type: "number", defaultValue: 15},
				rx: {type: "string", defaultValue: "1"},
				ry: {type: "string", defaultValue: "1"}
			}
		}
	});
	
	Rectangle.prototype.init = function() {
		var oRb = sap.ui.getCore().getLibraryResourceBundle("sap.gantt");
		this.setProperty("ariaLabel", oRb.getText("ARIA_RECTANGLE"));
	};
	
	/**
	 * Gets the value of property <code>tag</code>.
	 * 
	 * SVG tag name of the shape.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html SVG 1.1 specification for shapes}.<br/>
	 * <b>Note:</b> TWe do not recommend that you change this value using a configuration or coding.
	 * 
	 * @name sap.gantt.shape.Rectangle.prototype.getTag
	 * @function
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of property <code>tag</code>.
	 * @public
	 */
	
	/**
	 * Gets the value of property <code>isDuration</code>.
	 * 
	 * @name sap.gantt.shape.Rectangle.prototype.getIsDuration
	 * @function
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {boolean} Value of property <code>isDuration</code>.
	 * @public
	 */
	
	/**
	 * Gets the value of property <code>x</code>.
	 * 
	 * <p>
	 * x coordinate of the top-left corner of the rectangle.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#RectElementXAttribute SVG 1.1 specification for 'x' attribute of 'rect'}.
	 * 
	 * Usually applications do not set this value. This getter carries out the calculation using property <code>time</code> as a base
	 * and makes some adjustments, depending on the value of <code>strokeWidth</code>.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>x</code>.
	 * @public
	 */
	Rectangle.prototype.getX = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("x")) {
			return this._configFirst("x", oData);
		}
		var nTimeX;
		var nStrokeWidth = this.getStrokeWidth(oData, oRowInfo);
		var oAxisTime = this.mChartInstance.getAxisTime();
		
		if (Core.getConfiguration().getRTL()) {
			nTimeX = oAxisTime.timeToView(Format.abapTimestampToDate(this.getEndTime(oData, oRowInfo)));
		} else {
			nTimeX = oAxisTime.timeToView(Format.abapTimestampToDate(this.getTime(oData, oRowInfo)));
		}
		return (nTimeX ? nTimeX : 0) + (nStrokeWidth ? nStrokeWidth : 0) / 2;
	};
	
	/**
	 * Gets the value of property <code>y</code>.
	 * 
	 * <p>
	 * y coordinate of the top-left corner of the rectangle.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#RectElementYAttribute SVG 1.1 specification for 'y' attribute of 'rect'}.
	 * 
	 * Usually applications do not set this value. This getter carries out the calculation using parameter <code>oRowInfo</code> as a base
	 * and uses property <code>height</code> as an offset to align the center of the row rectangle along the y axis. 
	 * If you override the default value calculated by the getter, the alignment of the center is not guaranteed.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>y</code>.
	 * @public
	 */
	Rectangle.prototype.getY = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("y")) {
			return this._configFirst("y", oData, true);
		}
		
		return this.getRowYCenter(oData, oRowInfo) -
			this.getHeight(oData, oRowInfo) / 2 -
			this.getStrokeWidth(oData, oRowInfo) / 2;
	};
	
	/**
	 * Gets the value of property <code>width</code>.
	 * 
	 * <p>
	 * Width of the rectangle.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#RectElementWidthAttribute SVG 1.1 specification for 'width' attribute of 'rect'}.
	 * 
	 * Usually applications do not set this value. This getter carries out the calculation using properties <code>time</code> and
	 * <code>endTime</code>. If you override the default value calculated by the getter, proper rendering is not guaranteed.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>width</code>.
	 * @public
	 */
	Rectangle.prototype.getWidth = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("width")) {
			return this._configFirst("width", oData);
		}
		
		var nRetVal,
			strokeWidth = this.getStrokeWidth(oData, oRowInfo),
			startTime = this.getTime(oData, oRowInfo),
			endTime = this.getEndTime(oData, oRowInfo),
			oAxisTime = this.mChartInstance.getAxisTime();
		
		if (Core.getConfiguration().getRTL()) {
			nRetVal = oAxisTime.timeToView(Format.abapTimestampToDate(startTime)) -
				oAxisTime.timeToView(Format.abapTimestampToDate(endTime)) - strokeWidth - 1;
		} else {
			nRetVal = oAxisTime.timeToView(Format.abapTimestampToDate(endTime)) -
				oAxisTime.timeToView(Format.abapTimestampToDate(startTime)) - strokeWidth - 1;
		}
		
		if (nRetVal === 0 || nRetVal < 0 || !nRetVal) {
			nRetVal = 1;
		}
		
		return nRetVal;
	};

	/**
	 * Gets the value of property <code>height</code>.
	 * 
	 * <p>
	 * Height of the rectangle.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#RectElementHeightAttribute SVG 1.1 specification for 'height' attribute of 'rect'}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>height</code>.
	 * @public
	 */
	Rectangle.prototype.getHeight = function (oData) {
		return this._configFirst("height", oData, true);
	};
	
	/**
	 * Gets the value of property <code>rx</code>.
	 * 
	 * <p>
	 * Rx of the rectangle.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#RectElementRXAttribute SVG 1.1 specification for 'rx' attribute of 'rect'}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>rx</code>.
	 * @public
	 */
	Rectangle.prototype.getRx = function (oData) {
		return this._configFirst("rx", oData);
	};
	
	/**
	 * Gets the value of property <code>ry</code>.
	 * 
	 * <p>
	 * Ry of the rectangle.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#RectElementRYAttribute SVG 1.1 specification for 'ry' attribute of 'rect'}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>ry</code>.
	 * @public
	 */
	Rectangle.prototype.getRy = function (oData) {
		return this._configFirst("ry", oData);
	};
	
	return Rectangle;
}, true);

}; // end of sap/gantt/shape/Rectangle.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.SelectedShape') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

// Provides control sap.gantt.shape.SelectedShape.
jQuery.sap.declare('sap.gantt.shape.SelectedShape'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
sap.ui.define("sap/gantt/shape/SelectedShape",[
	"sap/gantt/shape/Path", "sap/gantt/misc/Utility", "sap/gantt/misc/Format", "sap/ui/core/Core"
], function (Path, Utility, Format, Core) {
	"use strict";
	
	/**
	 * Constructor for a new SelectedShape.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * <p>
	 *     Provides an implementation of selected shapes, allowing you to create a highlighting effect by drawing the selected shapes with red and thicker strokes. 
	 * </p>
	 *
	 *
	 * @extends sap.gantt.shape.Path
	 * @version 1.36.8
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.SelectedShape
	 */
	var SelectedShape = Path.extend("sap.gantt.shape.SelectedShape", {
		metadata: {
			properties: {
				fill: {type: "string", defaultValue: "none"},
				fillOpacity: {type: "float", defaultValue: 0},
				strokeOpacity: {type: "float", defaultValue: 0},
				height: {type: "int", defaultValue: 15}
			}
		}
	});

	/**
	 * Gets the value of property <code>d</code>.
	 * 
	 * <p>
	 * d attribute of the path element.
	 * See {@link http://www.w3.org/TR/SVG/paths.html#DAttribute SVG 1.1 specification for 'd' attribute of 'path'}.
	 * 
	 * Usually applications do not set this value. This getter carries out the calculation using properties <code>time</code>, <code>endTime</code>,
	 * <code>tailLength</code>, <code>headLength</code>, and <code>height</code>.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of property <code>d</code>.
	 * @public
	 */
	SelectedShape.prototype.getD = function (oData, oRowInfo) {
		var iStrokeWidth, x1, x2, y1, y2;
		var sPath = "";
		var sParentTag = this.getParent().getTag();
		switch (sParentTag) {
			case "rect": case "image":
				iStrokeWidth = this.getStrokeWidth(oData, oRowInfo);
				x1 = this.getParent().getX(oData, oRowInfo) - iStrokeWidth / 2;
				y1 = this.getParent().getY(oData, oRowInfo) - iStrokeWidth / 2;
				x2 = x1 + this.getParent().getWidth(oData, oRowInfo) + iStrokeWidth;
				y2 = y1 + this.getParent().getHeight(oData) + iStrokeWidth;
				sPath = "M " + x1 + " " + y1 +
					" L " + x2 + " " + y1 +
					" L " + x2 + " " + y2 +
					" L " + x1 + " " + y2 + " z";
				break;
			case "line":
				iStrokeWidth = this.getStrokeWidth(oData, oRowInfo);
				x1 = this.getParent().getX1(oData, oRowInfo) - iStrokeWidth / 2;
				y1 = this.getParent().getY1(oData, oRowInfo) - iStrokeWidth / 2;
				x2 = this.getParent().getX2(oData, oRowInfo) + iStrokeWidth;
				y2 = this.getParent().getY2(oData, oRowInfo) + iStrokeWidth;
				sPath = "M " + x1 + " " + y1 +
				" L " + x2 + " " + y1 +
				" L " + x2 + " " + y2 +
				" L " + x1 + " " + y2 + " z";
				break;
			case "path":
				sPath = this.getParent().getD(oData, oRowInfo);
				break;
			case "clippath":
				sPath = this.getParent().getPaths()[0].getD(oData, oRowInfo);
				break;
			case "polygon": case "polyline":
				var sPoints = this.getParent().getPoints(oData, oRowInfo);
				var aPoints = sPoints.split(" ");
				if (aPoints !== undefined && aPoints[0] == ""){
					aPoints.splice(0, 1);
				}
				if (aPoints !== undefined && aPoints.length > 1) {
					sPath = "M ";
					var sP;
					for (var i in aPoints) {
						sP = aPoints[i].split(",");
						if (aPoints[i] !== "" && sP.length > 1) {
							if (i == aPoints.length - 1) {//polygon has a closed path and the polyline doesn't need to be closed
								if (sParentTag === "polygon") {
									sPath = sPath + sP[0] + " " + sP[1] + " z";
								}else {
									sPath = sPath + sP[0] + " " + sP[1];
								}
							}else {
								sPath = sPath + sP[0] + " " + sP[1] + " L ";
							}
						}
					}
				}
				break;
			case "circle":
				var cX, cY, r;
				cX = this.getParent().getCx(oData, oRowInfo);
				cY = this.getParent().getCy(oData, oRowInfo);
				r = this.getParent().getR(oData);
				//e.g. "M230 230 A 45 45, 0, 1, 1, 275 275--3/4 circle
				sPath = "M " + cX + " " + cY 
						+ " A " + r + " " + r + ", 0, 1, 1, " + cX + " " + cY;
				break;
			case "text":
				break;
			default://group
				var iWidth;
				var iParentStrokeWidth = this.getParent().getStrokeWidth(oData, oRowInfo);
				iStrokeWidth = this.getStrokeWidth(oData, oRowInfo);
				var	startTime = this.getParent().getTime(oData, oRowInfo);
				var	endTime = this.getParent().getEndTime(oData, oRowInfo);
				var	oAxisTime = this.getParent().mChartInstance.getAxisTime();
				var iHeight = this.getHeight(oData) + iStrokeWidth;
				
				if (Core.getConfiguration().getRTL()) {
					x1 = oAxisTime.timeToView(Format.abapTimestampToDate(endTime));
					x2 = oAxisTime.timeToView(Format.abapTimestampToDate(startTime));
				} else {
					x1 = oAxisTime.timeToView(Format.abapTimestampToDate(startTime));
					x2 = oAxisTime.timeToView(Format.abapTimestampToDate(endTime));
				}
				if (this.getParent().mShapeConfig.hasShapeProperty("y")) {
					y1 = this.getParent()._configFirst("y", oData) - iStrokeWidth / 2;
				}else {
					y1 = this.getParent().getRowYCenter(oData, oRowInfo) - iHeight / 2 - iStrokeWidth / 2;
				}
				
				if (this.getParent().mShapeConfig.hasShapeProperty("width")) {
					iWidth = this.getParent()._configFirst("width", oData) + iStrokeWidth;
				}else {
					iWidth = x2 - x1 - iParentStrokeWidth - 1 + iStrokeWidth;
				}
				
				if (iWidth === 0 || iWidth < 0 || !iWidth) {
					iWidth = 2;
				}
				x2 = x1 + iWidth;
				y2 = y1 + iHeight;
				sPath = "M " + x1 + " " + y1 +
					" L " + x2 + " " + y1 +
					" L " + x2 + " " + y2 +
					" L " + x1 + " " + y2 + " z";
				break;
		}
		return sPath;
	};

	/**
	 * Gets the value of property <code>stroke</code>.
	 * 
	 * <p>
	 * Standard SVG 'stroke' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeProperty SVG 1.1 specification for 'stroke'}.
	 * <b>Note:</b> An HTML color and URL reference to an SVG definition can be provided for strokes. SVG definitions usually come from SVG definitions rendered by
	 * {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable}, or {@link sap.gantt.GanttChart}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of property <code>stroke</code>.
	 * @public
	 */
	SelectedShape.prototype.getStroke = function (oData, oRowInfo) {
		return "red";
	};
	
	/**
	 * Gets current value of property <code>fill</code>.
	 * 
	 * <p> 
	 * Standard SVG 'fill' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#FillProperty SVG 1.1 specification for 'fill'}.
	 * <b>Note:</b> HTML color and url reference to paint server can be provided to fill. Paint server definitions usually comes from paint servers rendered by
	 * {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable} or {@link sap.gantt.GanttChart}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {string} Value of property <code>fill</code>.
	 * @public
	 */
	SelectedShape.prototype.getFill = function (oData, oRowInfo) {
		return "none";
	};

	/**
	 * Gets the value of property <code>strokeWidth</code>.
	 * 
	 * <p>
	 * Standard SVG 'stroke-width' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeWidthProperty SVG 1.1 specification for 'stroke-width'}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>strokeWidth</code>.
	 * @public
	 */
	SelectedShape.prototype.getStrokeWidth = function (oData, oRowInfo) {
		var iStrokeWidth = this.getParent().getStrokeWidth(oData, oRowInfo);
		return iStrokeWidth ? iStrokeWidth : 2;
	};
	
	/**
	 * Gets the value of property <code>transform</code>.
	 * 
	 * <p>
	 * Standard SVG 'transform' attribute.
	 * See {@link http://www.w3.org/TR/SVG/coords.html#TransformAttribute SVG 1.1 specifica6tion for 'transform'}.
	 * The implementation of getTransform() provides some logic to enable properties <code>rotationCenter</code> and <code>rotationAngle</code>. 
	 * If you override the default value calculated by the getter, proper rotation is not guaranteed.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of property <code>transform</code>.
	 * @public
	 */
	SelectedShape.prototype.getTransform = function (oData, oRowInfo) {
		return this.getParent().getTransform(oData, oRowInfo);
	};
	
	/**
	 * Gets the value of property <code>enableDnD</code>.
	 * 
	 * <p>
	 * This value determines whether the selectedShape of a shape is enabled for drag-and-drop.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {boolean} Value of property <code>enableDnD</code>.
	 * @public
	 */
	SelectedShape.prototype.getEnableDnD = function (oData, oRowInfo) {
		return false;
	};
	
	/**
	 * Gets the value of property <code>enableSelection</code>.
	 * 
	 * <p>
	 * This value determines whether the selectedShape of a shape is enabled for selection.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {boolean} Value of property <code>enableSelection</code>.
	 * @public
	 */
	SelectedShape.prototype.getEnableSelection = function (oData, oRowInfo) {
		return false;
	};
	
	/**
	 * Gets the value of property <code>height</code>.
	 * 
	 * <p>
	 * This value determines the height of the selectedShape.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @return {number} Value of property <code>height</code>.
	 * @public
	 */
	SelectedShape.prototype.getHeight = function (oData) {
		return this._configFirst("height", oData, true);
	};
	
	return SelectedShape;
}, true);

}; // end of sap/gantt/shape/SelectedShape.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.cal.Calendar') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.cal.Calendar'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/cal/Calendar",[
	"sap/gantt/shape/Rectangle"
], function (Rectangle) {
	"use strict";
	
	/**
	 * Creates a Calendar shape which consumes pattern from Calendar in 'def' package.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * Calendar shape.
	 * 
	 * <p>
	 * The Calendar shape must be used in combination with Calendar def class {@link sap.gantt.def.cal.Calendar} which draws SVG 'defs' tag.
	 * </p>
	 * 
	 * @extends sap.gantt.shape.Rectangle
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.cal.Calendar
	 */
	var Calendar = Rectangle.extend("sap.gantt.shape.cal.Calendar", /** @lends sap.gantt.shape.cal.Calendar.prototype */ {
		metadata: {
			properties: {
				isBulk: {type: "boolean", defaultValue: true},
				enableSelection: {type: "boolean", defaultValue: false},
				
				calendarName: {type: "string", defaultValue: "nwt"}
			}
		}
	});
	
	Calendar.prototype.init = function() {
		var oRb = sap.ui.getCore().getLibraryResourceBundle("sap.gantt");
		this.setProperty("ariaLabel", oRb.getText("ARIA_CALENDAR"));
	};
	
	
	/**
	 * Gets the value of property <code>calendarName</code>.
	 * 
	 * <p>
	 * Calendar key.
	 * 
	 * This property is used to generate referencing string to compose the <code>fill</code> property. This property is must provided.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of property <code>calendarName</code>.
	 * @public
	 */
	Calendar.prototype.getCalendarName = function (oData) {
		return this._configFirst("calendarName", oData);
	};
	
	/**
	 * Gets current value of property <code>isBulk</code>.
	 * 
	 * General recommendation is don't configure or code against this property.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {boolean} Value of property <code>isBulk</code>.
	 * @public
	 */
	Calendar.prototype.getIsBulk = function (oData) {
		if (this.mShapeConfig.isBulk) {
			return this._configFirst("isBulk", oData);
		}
		
		return true;
	};
	
	/**
	 * Gets current value of property <code>enableSelection</code>.
	 * 
	 * General recommendation is don't configure or code against this property. Calendar is treated as a bulk shape filled with pattern occupying visible chart area.
	 * Application should implement their own shape if a select able calendar is expected.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {boolean} Value of property <code>enableSelection</code>.
	 * @public
	 */
	Calendar.prototype.getEnableSelection = function (oData) {
		if (this.mShapeConfig.enableSelection) {
			return this._configFirst("enableSelection", oData);
		}
		
		return false;
	};
	
	/**
	 * Gets current value of property <code>x</code>.
	 * 
	 * General recommendation is don't configure or code against this property. Calendar is treated as a bulk shape filled with pattern occupying visible chart area.
	 * Application should implement their own shape if a select able calendar is expected.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {number} Value of property <code>x</code>.
	 * @public
	 */
	Calendar.prototype.getX = function (oData) {
		if (this.mShapeConfig.x) {
			return this._configFirst("x", oData);
		}

		return this.mChartInstance._oStatusSet.aViewBoundary[0];
	};
	
	/**
	 * Gets current value of property <code>y</code>.
	 * 
	 * General recommendation is don't configure or code against this property. Calendar is treated as a bulk shape filled with pattern occupying visible chart area.
	 * Application should implement their own shape if a select able calendar is expected.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {number} Value of property <code>y</code>.
	 * @public
	 */
	Calendar.prototype.getY = function (oData, oRowInfo) {
		if (this.mShapeConfig.y) {
			return this._configFirst("y", oData);
		}
		
		return oRowInfo.y;
	};
	
	/**
	 * Gets current value of property <code>width</code>.
	 * 
	 * General recommendation is don't configure or code against this property. Calendar is treated as a bulk shape filled with pattern occupying visible chart area.
	 * Application should implement their own shape if a select able calendar is expected.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {number} Value of property <code>width</code>.
	 * @public
	 */
	Calendar.prototype.getWidth = function (oData) {
		if (this.mShapeConfig.width) { 
			return this._configFirst("width", oData);
		}
		
		var oStatusSet = this.mChartInstance._oStatusSet;
		if (oStatusSet) {
			return oStatusSet.aViewBoundary[1] - oStatusSet.aViewBoundary[0];
		} else {
			return 0;
		}

	};
	
	/**
	 * Gets current value of property <code>height</code>.
	 * 
	 * General recommendation is don't configure or code against this property. Calendar is treated as a bulk shape filled with pattern occupying visible chart area.
	 * Application should implement their own shape if a select able calendar is expected.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {number} Value of property <code>height</code>.
	 * @public
	 */
	Calendar.prototype.getHeight = function (oData, oRowInfo) {
		if (this.mShapeConfig.height) {
			return this._configFirst("height", oData);
		}
		
		return oRowInfo.rowHeight;
	};
	/**
	 * Gets current value of property <code>fill</code>.
	 * 
	 * General recommendation is don't configure or code against this property. Calendar is treated as a bulk shape filled with pattern occupying visible chart area.
	 * Application should implement their own shape if a select able calendar is expected.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {string} Value of property <code>fill</code>.
	 * @public
	 */
	
	Calendar.prototype.getFill = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("fill")) {
			return this._configFirst("fill", oData);
		}
		
		var sCalendarName = this.getCalendarName(oData, oRowInfo);
		var oPaintServerDef = this.mChartInstance.getCalendarDef();
		if (oPaintServerDef) {
			return oPaintServerDef.getRefString(sCalendarName);	
		}
	};
	
	return Calendar;
}, true);

}; // end of sap/gantt/shape/cal/Calendar.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.Chevron') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.Chevron'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
sap.ui.define("sap/gantt/shape/ext/Chevron",[
	"sap/gantt/shape/Path", "sap/gantt/misc/Utility", "sap/gantt/misc/Format", "sap/ui/core/Core"
], function (Path, Utility, Format, Core) {
	"use strict";
	
	/**
	 * Creates and initializes a new Chevron class.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings of the new control
	 * 
	 * @class 
	 * Chevron shape class using SVG tag 'path'. It's usually used to represent a duration of time.
	 * 
	 * <p>
	 * See {@link http://www.w3.org/TR/SVG/paths.html#PathElement SVG specification 1.1 for 'path' element} for
	 * detail information about the html tag.<br/><br/>
	 * The following SVG image shows how the properties are designed:<br/>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="8.8cm" viewBox="0 0 300 220" version="1.1">
	 * 	<rect x="1" y="1" width="298" height="218" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * 	<marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * 	<style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * 	.arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * 	<path d="M 60 50 h 150 l 70 50 l -70 50 h -150 l 40 -50 z" class="side" />
	 * 	<path d="M 60 50 v 100" class="dashside" />
	 * 	<circle cx="60" cy="100" class="center" />
	 * 	<path d="M 60 50 h -20 m 0 100 h 20 v 20 m 40 0 v -70 m 180 0 v 70 m -70 0 v -20" class="dashassist" />
	 * 	<path d="M 40 50 v 100" class="arrowline" />
	 * 	<path d="M 60 170 h 40" class="arrowline" />
	 * 	<path d="M 210 170 h 70" class="arrowline" />
	 * 	<path d="M 60 50 v -20 m 150 0 v 20 m -130 50 h -20" class="texthyphon" />
	 * 	<text x="45" y="25" class="timeText">time</text>
	 * 	<text x="190" y="25" class="timeText">endTime</text>
	 * 	<text x="105" y="95" class="timeText">rotation</text>
	 * 	<text x="110" y="115" class="timeText">Center</text>
	 * 	<text x="35" y="125" class="propertyText" transform="rotate(-90, 35, 125)">height</text>
	 * 	<text x="60" y="190" class="propertyText">tailLength</text>
	 * 	<text x="210" y="190" class="propertyText">headLength</text>
	 * </svg>
	 * </p>
	 * 
	 * @extend sap.gantt.shape.Shape
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.Chevron
	 */
	var Chevron = Path.extend("sap.gantt.shape.ext.Chevron", /** @lends sap.gantt.shape.ext.Chevron.prototype */ {
		metadata: {
			properties: {
				isClosed: {type: "boolean", defaultValue: true},
				isDuration: {type: "boolean", defaultValue: true},
				
				headLength: {type: "number", defaultValue: 5},
				tailLength: {type: "number", defaultValue: 5},
				height: {type: "number", defaultValue: 15}
			}
		}
	});

	Chevron.prototype.init = function() {
		// RTL mode
		this._isRTL = Core.getConfiguration().getRTL();
		var oRb = sap.ui.getCore().getLibraryResourceBundle("sap.gantt");
		this.setProperty("ariaLabel", oRb.getText("ARIA_CHEVRON"));
	};
	
	/**
	 * Gets the value of property <code>isClosed</code>.
	 * 
	 * @name sap.gantt.shape.ext.Chevron.prototype.getIsClosed
	 * @function
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {boolean} Value of property <code>isClosed</code>.
	 * @public
	 */
	
	/**
	 * Gets the value of property <code>isDuration</code>.
	 * 
	 * @name sap.gantt.shape.ext.Chevron.prototype.getIsDuration
	 * @function
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {boolean} Value of property <code>isDuration</code>.
	 * @public
	 */

	/**
	 * Gets the value of property <code>d</code>.
	 * 
	 * <p>
	 * d attribute of the path element.
	 * See {@link http://www.w3.org/TR/SVG/paths.html#DAttribute SVG 1.1 specification for the 'd' attribute of 'path'}.
	 * 
	 * Your application should not configure this value. Instead, the getter calculates the value of d by using property <code>time</code>, <code>endTime</code>,
	 * <code>tailLength</code>, <code>headLength</code>, and <code>height</code>.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>d</code>.
	 * @public
	 */
	Chevron.prototype.getD = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("d")) {
			return this._configFirst("d", oData);
		}

		var nHeight = this.getHeight(oData, oRowInfo);
		
		var nHeadLength = this.getHeadLength(oData, oRowInfo),
			nTailLength = this.getTailLength(oData, oRowInfo),
			nHeight = this.getHeight(oData, oRowInfo),
			oAxisTime = this.mChartInstance.getAxisTime();
		
		var nStartOriginalX = oAxisTime.timeToView(Format.abapTimestampToDate(
				this.getTime(oData, oRowInfo)));
		var nEndOriginalX = oAxisTime.timeToView(Format.abapTimestampToDate(
				this.getEndTime(oData, oRowInfo)));
		
		if (nStartOriginalX < 0) {
			nStartOriginalX = oAxisTime.timeToView(0);
		}
		if (nEndOriginalX < 0) {
			nEndOriginalX = oAxisTime.timeToView(0);
		}
		
		var nRowYCenter = this.getRowYCenter(oData, oRowInfo);
		
		return this.getDString({
			nStartOriginalX: nStartOriginalX,
			nEndOriginalX: nEndOriginalX,
			nTailLength: nTailLength,
			nHeadLength: nHeadLength,
			nHeight: nHeight,
			nRowYCenter: nRowYCenter
		});
	};
	
	Chevron.prototype.getDString = function (oConf) {
		var nHalfHeight = oConf.nHeight / 2;
		
		if (this._isRTL) {
			//for RTL mode, get the axis X1
			var nX1 = oConf.nStartOriginalX - oConf.nTailLength;
			var nBodyLength = oConf.nStartOriginalX - oConf.nEndOriginalX - oConf.nHeadLength;
			var nBodyLength = (nBodyLength > 0) ? nBodyLength : 1;
			var sRetVal = "m " + nX1 + " " + oConf.nRowYCenter + " l " + oConf.nTailLength + " -" + nHalfHeight + " l -" + nBodyLength + " " +
				0 + " l -" + oConf.nHeadLength + " " + nHalfHeight + " l " + oConf.nHeadLength + " " + nHalfHeight + " l " + nBodyLength +
				" " + 0 + " z";
		} else {
			var nX1 = oConf.nStartOriginalX + oConf.nTailLength;
			var nBodyLength = oConf.nEndOriginalX - oConf.nStartOriginalX - oConf.nHeadLength;
			var nBodyLength = (nBodyLength > 0) ? nBodyLength : 1;
			var sRetVal = "m " + nX1 + " " + oConf.nRowYCenter + " l -" + oConf.nTailLength + " -" + nHalfHeight + " l " + nBodyLength + " " +
				0 + " l " + oConf.nHeadLength + " " + nHalfHeight + " l -" + oConf.nHeadLength + " " + nHalfHeight + " l -" + nBodyLength +
				" " + 0 + " z";
		}
		
		return sRetVal;
	};
	
	/**
	 * Gets the value of property <code>headLength</code>.
	 * 
	 * <p>
	 * Head length of a chevron shape.
	 * 
	 * This property influences property <code>d</code>.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>headLength</code>.
	 * @public
	 */
	Chevron.prototype.getHeadLength = function (oData) {
		return this._configFirst("headLength", oData, true);
	};
	
	/**
	 * Gets the value of property <code>tailLength</code>.
	 * 
	 * <p>
	 * Tail length of a chevron shape.
	 * 
	 * This property influences property <code>d</code>.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>tailLength</code>.
	 * @public
	 */
	Chevron.prototype.getTailLength = function (oData) {
		return this._configFirst("tailLength", oData, true);
	};
	
	/**
	 * Gets the value of property <code>height</code>.
	 * 
	 * <p>
	 * Height of a chevron shape.
	 * 
	 * This property influences property <code>d</code>.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>height</code>.
	 * @public
	 */
	Chevron.prototype.getHeight = function (oData) {
		return this._configFirst("height", oData, true);
	};
	
	return Chevron;
}, true);

}; // end of sap/gantt/shape/ext/Chevron.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.Cursor') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.Cursor'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ext/Cursor",[
	"sap/gantt/shape/Path"
], function (Path) {
	"use strict";
	
	/**
	 * Creates and initializes a new Cursor class.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings of the new control
	 * 
	 * @class 
	 * Cursor shape class using SVG tag 'path'. It's usually treated as a transient shape.
	 * 
	 * <p>
	 * See {@link http://www.w3.org/TR/SVG/paths.html#PathElement SVG specification 1.1 for the 'path' element} for
	 * detail information of the html tag.<br/><br/>
	 * The following SVG image shows how the properties are designed:<br/>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="8.8cm" viewBox="0 0 300 220" version="1.1">
	 * 	<rect x="1" y="1" width="298" height="218" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * 	<marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * 	<style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * 	.arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * 	<path d="M 100 50 v 80 l 70 40 l 70 -40 v -80 z" class="side" />
	 * 	<path d="M 170 50 v 120" class="dashside" />
	 * 	<circle cx="170" cy="110" class="center" />
	 * 	<path d="M 240 50 v -20 m -140 0 v 20 h -20 m 20 80 h -20 m 0 40 h 90" class="dashassist" />
	 * 	<path d="M 100 30 h 140" class="arrowline" />
	 * 	<path d="M 80 50 v 80" class="arrowline" />
	 * 	<path d="M 80 130 v 40" class="arrowline" />
	 * 	<path d="M 190 110 h -20 m 0 60 v 20" class="texthyphon" />
	 * 	<text x="155" y="205" class="timeText">time</text>
	 * 	<text x="175" y="105" class="timeText">rotation</text>
	 * 	<text x="180" y="125" class="timeText">Center</text>
	 * 	<text x="150" y="45" class="propertyText">length</text>
	 * 	<text x="35" y="100" class="propertyText">width</text>
	 * 	<text x="35" y="145" class="propertyText">point</text>
	 * 	<text x="25" y="165" class="propertyText">Height</text>
	 * </svg>
	 * </p>
	 * 
	 * @extend sap.gantt.shape.Shape
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.Cursor
	 */
	var Cursor = Path.extend("sap.gantt.shape.ext.Cursor", /** @lends sap.gantt.shape.ext.Cursor.prototype */ {
		metadata: {
			properties: {
				isClosed: {type: "boolean", defaultValue: true},

				length: {type: "number", defaultValue: 10},
				width: {type: "number", defaultValue: 5},
				pointHeight: {type: "number", defaultValue: 5}
			}
		}
	});

	Cursor.prototype.init = function() {
		var oRb = sap.ui.getCore().getLibraryResourceBundle("sap.gantt");
		this.setProperty("ariaLabel", oRb.getText("ARIA_CURSOR"));
	};
	
	/**
	 * Gets the value of property <code>isClosed</code>.
	 * 
	 * @name sap.gantt.shape.ext.Cursor.prototype.getIsClosed
	 * @function
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {boolean} Value of property <code>isClosed</code>.
	 * @public
	 */

	/**
	 * Gets the value of property <code>d</code>.
	 * 
	 * <p>
	 * d attribute of the path element.
	 * See {@link http://www.w3.org/TR/SVG/paths.html#DAttribute SVG 1.1 specification for 'd' attribute of 'path'}.
	 * 
	 * Your application should not configure this value. Instead, the getter calculates the value of d by using properties <code>length</code>, 
	 * <code>width</code>, and <code>pointHeight</code>.
	 * The value of these properties can be retrieved using the corresponding getters (getLength, getWidth, and getPointHeight). 
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>d</code>.
	 * @public
	 */
	Cursor.prototype.getD = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("d")) {
			return this._configFirst("d", oData);
		}

		var nPointHeight = this.getPointHeight(oData, oRowInfo);
		var nWidth = this.getWidth(oData, oRowInfo);
		var nLength = this.getLength(oData, oRowInfo);
		var nHalflength = nLength / 2;

		var aCenter = this.getRotationCenter(oData, oRowInfo);

		return "M " + aCenter.join(" ") +
			" m " + -nHalflength + " " + -(nWidth + nPointHeight) / 2 +
			" l " + nLength + " 0 l 0 " + nWidth + " l -" + nHalflength +
			" " + nPointHeight + " l -" + nHalflength + " -" + nPointHeight + " z";
	};
	
	/**
	 * Gets the value of property <code>length</code>.
	 * 
	 * <p>
	 * Length of a cursor.
	 * 
	 * This property influences property <code>d</code>.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>length</code>.
	 * @public
	 */
	Cursor.prototype.getLength = function (oData) {
		return this._configFirst("length", oData, true);
	};
	
	/**
	 * Gets the value of property <code>width</code>.
	 * 
	 * <p>
	 * Width of a cursor.
	 * 
	 * This property influences property <code>d</code>.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>width</code>.
	 * @public
	 */
	Cursor.prototype.getWidth = function (oData) {
		return this._configFirst("width", oData, true);
	};
	
	/**
	 * Gets the value of property <code>pointHeight</code>.
	 * 
	 * <p>
	 * Point height of a cursor.
	 * 
	 * This property influences property <code>d</code>.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>pointHeight</code>.
	 * @public
	 */
	Cursor.prototype.getPointHeight = function (oData) {
		return this._configFirst("pointHeight", oData, true);
	};
	
	return Cursor;
}, true);

}; // end of sap/gantt/shape/ext/Cursor.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.Diamond') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.Diamond'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ext/Diamond",[
	"sap/gantt/shape/Path"
], function (Path) {
	"use strict";
	
	/**
	 * Creates and initializes a new Diamond class.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings of the new control
	 * 
	 * @class 
	 * Diamond shape class using SVG tag 'path'. It's usually treated as transient shape.
	 * 
	 * <p>
	 * See {@link http://www.w3.org/TR/SVG/paths.html#PathElement SVG specification 1.1 for the 'path' element} for
	 * detail information of the html tag.<br/><br/>
	 * The following SVG image shows how the properties are designed:<br/>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="8.8cm" viewBox="0 0 300 220" version="1.1">
	 * 	<rect x="1" y="1" width="298" height="218" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * 	<marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * 	<style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * 	.arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * 	<path d="M 40 120 l 100 -70 l 100 70 l -100 70 z" class="side" />
	 * 	<path d="M 40 120 h 200 m -100 -70 v 140" class="dashside" />
	 * 	<circle cx="140" cy="120" class="center" />
	 * 	<path d="M 40 120 v 90 m 200 0 v -90 m -100 -70 h 120 m 0 140 h -120" class="dashassist" />
	 * 	<path d="M 40 210 h 200" class="arrowline" />
	 * 	<path d="M 260 50 v 140" class="arrowline" />
	 * 	<path d="M 140 50 v -20 m 0 90 h 20" class="texthyphon" />
	 * 	<text x="125" y="25" class="timeText">time</text>
	 * 	<text x="155" y="115" class="timeText">rotation</text>
	 * 	<text x="160" y="135" class="timeText">Center</text>
	 * 	<text x="70" y="205" class="propertyText">horizontalDiagonal</text>
	 * 	<text x="255" y="185" class="propertyText" transform="rotate(-90, 255, 185)">vertitalDiagonal</text>
	 * </svg>
	 * </p>
	 * 
	 * @extend sap.gantt.shape.Shape
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.Diamond
	 */
	var Diamond = Path.extend("sap.gantt.shape.ext.Diamond", /** @lends sap.gantt.shape.ext.Diamond.prototype */ {
		metadata: {
			properties: {
				isClosed: {type: "boolean", defaultValue: true},

				verticalDiagonal: {type: "number", defaultValue: 12},
				horizontalDiagonal: {type: "number", defaultValue: 12}
			}
		}
	});

	Diamond.prototype.init = function() {
		var oRb = sap.ui.getCore().getLibraryResourceBundle("sap.gantt");
		this.setProperty("ariaLabel", oRb.getText("ARIA_DIAMOND"));
	};
	
	/**
	 * Gets the value of property <code>isClosed</code>.
	 * 
	 * @name sap.gantt.shape.ext.Diamond.prototype.getIsClosed
	 * @function
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {boolean} Value of property <code>isClosed</code>.
	 * @public
	 */
	
	/**
	 * Gets the value of property <code>d</code>.
	 * 
	 * <p>
	 * d attribute of the path element.
	 * See {@link http://www.w3.org/TR/SVG/paths.html#DAttribute SVG 1.1 specification for the 'd' attribute of 'path'}.
	 * 
	 * You application should not configure this value. Instead, the getter calculates value of d by using properties <code>horizontalDiagonal</code> and <code>verticalDiagonal</code>.
	 * The value of these properties can be retrieved using the corresponding getters (getHorizontalDiagonal and getVerticalDiagonal). 
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>d</code>.
	 * @public
	 */
	Diamond.prototype.getD = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("d")) {
			return this._configFirst("d", oData);
		}

		var halfVertical = this.getVerticalDiagonal(oData, oRowInfo) / 2;
		var halfHorizontal = this.getHorizontalDiagonal(oData, oRowInfo) / 2;

		var aCenter = this.getRotationCenter(oData, oRowInfo);

		return "M " + aCenter.join(" ") +
			" m " + -halfHorizontal + " 0" +
			" l " + halfHorizontal + " -" + halfVertical +
			" l " + halfHorizontal + " " + halfVertical +
			" l -" + halfHorizontal + " " + halfVertical + " z";
	};
	
	/**
	 * Gets the value of property <code>verticalDiagonal</code>.
	 * 
	 * <p>
	 * Vertical diagonal of a diamond shape.
	 * 
	 * This property influences property <code>d</code>.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>verticalDiagonal</code>.
	 * @public
	 */
	Diamond.prototype.getVerticalDiagonal = function (oData) {
		return this._configFirst("verticalDiagonal", oData, true);
	};
	
	/**
	 * Gets the value of property <code>horizontalDiagonal</code>.
	 * 
	 * <p>
	 * Horizontal diagonal of a diamond shape.
	 * 
	 * This property influences property <code>d</code>.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>horizontalDiagonal</code>.
	 * @public
	 */
	Diamond.prototype.getHorizontalDiagonal = function (oData) {
		return this._configFirst("horizontalDiagonal", oData, true);
	};
	
	return Diamond;
}, true);

}; // end of sap/gantt/shape/ext/Diamond.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.Pentangle') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.Pentangle'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ext/Pentangle",[
	"sap/gantt/shape/Polygon", "sap/gantt/misc/Utility"
], function (Polygon, Utility) {
	"use strict";
	/**
	 * Creates and initializes a new Pentangle class.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings of the new control
	 * 
	 * @class 
	 * Pentangle shape class using SVG tag 'polygon'. It's usually treated as a transient shape.
	 * 
	 * <p>
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#PolygonElement SVG specification 1.1 for the 'polygon' element} for
	 * detail information of the html tag.<br/><br/>
	 * Following SVG image shows how the properties are designed:<br/>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="8.8cm" viewBox="0 0 300 220" version="1.1">
	 * 	<rect x="1" y="1" width="298" height="218" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * 	<marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * 	<style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * 	.arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * 	<path d="M 120 50 l 23.4 49 l52.3 7.8 l -37.9 38.2 l 9 53.8 l-46.8 -25.4 l -46.7 25.4 l 8.9 -53.8 l -37.8 -38.2 l 52.2 -7.8 z" class="side" />
	 * 	<path d="M 120 50 v 125" class="dashside" />
	 * 	<circle cx="120" cy="132" class="center" />
	 * 	<path d="M 120 50 h 100 m 0 82 h -100 m 0 43 h 100" class="dashassist" />
	 * 	<path d="M 220 50 v 82" class="arrowline" />
	 * 	<path d="M 220 132 v 43" class="arrowline" />
	 * 	<path d="M 120 50 v -20 m 0 102 h -20" class="texthyphon" />
	 * 	<text x="105" y="25" class="timeText">time</text>
	 * 	<text x="20" y="130" class="timeText">rotation</text>
	 * 	<text x="25" y="150" class="timeText">Center</text>
	 * 	<text x="225" y="95" class="propertyText">radius</text>
	 * 	<text x="225" y="160" class="propertyText">radius2</text>
	 * </svg>
	 * </p>
	 * 
	 * @extend sap.gantt.shape.Shape
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.Pentangle
	 */
	var Pentangle = Polygon.extend("sap.gantt.shape.ext.Pentangle", /** @lends sap.gantt.shape.ext.Pentangle.prototype */ {
		metadata: {
			properties: {
				radius: {type: "number", defaultValue: 10},
				radius2: {type: "number", defaultValue: undefined}
			}
		}
	});

	Pentangle.prototype.init = function() {
		var oRb = sap.ui.getCore().getLibraryResourceBundle("sap.gantt");
		this.setProperty("ariaLabel", oRb.getText("ARIA_PENTANGLE"));
	};

	/**
	 * Gets the value of property <code>radius</code>.
	 * 
	 * <p>
	 * Radius of a pentangle shape.
	 * 
	 * This property influences property <code>points</code>.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>radius</code>.
	 * @public
	 */
	Pentangle.prototype.getRadius = function (oData) {
		return this._configFirst("radius", oData, true);
	};
	
	/**
	 * Gets the value of property <code>radius2</code>.
	 * 
	 * <p>
	 * The second radius of a pentangle shape. If this property is not provided, radius2 is set to a value making 
	 * radius and radius2 fit the golden ratio.
	 * 
	 * This property influences property <code>points</code>.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>radius2</code>.
	 * @public
	 */
	Pentangle.prototype.getRadius2 = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("radius2")) {
			return this._configFirst("radius2", oData, true);
		}
		
		var sDefaultRadius2 = this.getProperty("radius2");
		if (sDefaultRadius2 || sDefaultRadius2 === 0) {
			var sMode = this.mChartInstance.getSapUiSizeClass();
			return Utility.scaleBySapUiSize(sMode, sDefaultRadius2);
		} else { 
			return this.calRadius2ByGoldenRatio(this.getRadius(oData, oRowInfo));
		}
	};
	
	Pentangle.prototype.calRadius2ByGoldenRatio = function (nRadius) {
		return nRadius * Math.cos( 2 * Math.PI / 5) / Math.cos( Math.PI / 5);
	};
	
	/**
	 * Gets the value of property <code>d</code>.
	 * 
	 * <p>
	 * points attribute of the polygon element.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#PolygonElementPointsAttribute SVG 1.1 specification for 'points' attribute of 'polygon'}.
	 * 
	 * Your application should not configure this value. Instead, the getter calculates the value of d by using properties <code>radius</code> and <code>radus2</code>.
	 * The value of these properties can be retrieved using the corresponding getters (getRadius and getRadius2). 
	 * If your application overwrites the value of d by configuration or code, accurate results cannot be guaranteed.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>points</code>.
	 * @public
	 */
	Pentangle.prototype.getPoints = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("points")) {
			return this._configFirst("points", oData);
		}
		
		var aCenter = this.getRotationCenter(oData, oRowInfo);
		var nRadius = this.getRadius(oData, oRowInfo);
		var nRadius2 = this.getRadius2(oData, oRowInfo);
		var aPoints = this._generatePentaclePoints(aCenter, nRadius, nRadius2);
		
		return aPoints.join("");
	};
	
	Pentangle.prototype._generatePentaclePoints = function (aCenter, nRadius, nRadius2) {
		var oPoint = {},
			aPoints = [],
			nAngleUnit = Math.PI / 5,
			nAngle = 0;
		
		for (var i = 0; i < 10; i++){
			nAngle = nAngleUnit * i;
			oPoint.x = this._getPointX(aCenter[0], (i % 2 == 0) ? nRadius : nRadius2, nAngle);
			oPoint.y = this._getPointY(aCenter[1], (i % 2 == 0) ? nRadius : nRadius2, nAngle);
			aPoints.push(" " + oPoint.x + "," + oPoint.y);
		}
		return aPoints;
	};
	
	Pentangle.prototype._getPointX = function (nX, nRadius, nAngle) {
		return nX + (nRadius * Math.sin(nAngle));
	};
	
	Pentangle.prototype._getPointY = function (nY, nRadius, nAngle) {
		return nY - (nRadius * Math.cos(nAngle));
	};
	
	return Pentangle;
}, true);

}; // end of sap/gantt/shape/ext/Pentangle.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.RowBackgroundRectangle') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.RowBackgroundRectangle'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
sap.ui.define("sap/gantt/shape/ext/RowBackgroundRectangle",[
	"sap/gantt/shape/Rectangle", "sap/gantt/misc/Utility", "sap/ui/core/Core"
], function(Rectangle, Utility, Core){
	"use strict";

	/**
	 * Creates and initializes a new RowBackgroundRectangle class.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings of the new control
	 * 
	 * @class 
	 * RowBackgroundRectangle shape class using SVG tag 'rect'. It's used to represent rows' background rectangle in the tree table of a Gantt chart.
	 * 
	 * @extends sap.gantt.shape.Rectangle
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.RowBackgroundRectangle
	 */
	var RowBackgroundRectangle = Rectangle.extend("sap.gantt.shape.ext.RowBackgroundRectangle", /** @lends sap.gantt.shape.ext.RowBackgroundRectangle.prototype */ {
		metadata: {
			properties: {
				isBulk: {type: "boolean", defaultValue: true},
				enableSelection: {type: "boolean", defaultValue: false}
			}
		}
	});

	/**
	 * Gets the value of property <code>isBulk</code>.
	 * 
	 * <p>
	 * For performance reasons, Gantt charts perform filtering of data using timestamp. For a background rectangle shape which only needs to draw once in visible areas, set this flag to true.
	 * </p>
	 * 
	 * @name sap.gantt.shape.ext.RowBackgroundRectangle.prototype.getIsBulk
	 * @function
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {boolean} Value of property <code>isBulk</code>.
	 * @public
	 */

	/**
	 * Gets the value of property <code>fill</code>.
	 * 
	 * <p> 
	 * Standard SVG 'fill' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#FillProperty SVG 1.1 specification for 'fill'}.
	 * <b>Note:</b> You can provide fill with HTML colors and the URL reference to a paint server. Paint server definitions can be retrieved from paint servers rendered by
	 * {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable}, or {@link sap.gantt.GanttChart}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>fill</code>.
	 * @public
	 */
	RowBackgroundRectangle.prototype.getFill = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("fill")){
			return this._configFirst("fill", oData);
		}
		
		var oChartSchemeMap = this.mChartInstance._oChartSchemesConfigMap;
		var oChartScheme = (oChartSchemeMap && oChartSchemeMap[oRowInfo.chartScheme]) ? oChartSchemeMap[oRowInfo.chartScheme] : undefined;
		if (oChartScheme && oChartScheme.getBackgroundColor()) {
			return oChartScheme.getBackgroundColor();
		}
		return "none";
	};

	/**
	 * Gets the value of property <code>strokeWidth</code>.
	 * 
	 * <p>
	 * Standard SVG 'stroke-width' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeWidthProperty SVG 1.1 specification for 'stroke-width'}.
	 * </p>
	 * <p>The default value is 0.</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>strokeWidth</code>.
	 * @public
	 */
	RowBackgroundRectangle.prototype.getStrokeWidth = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("strokeWidth")) {
			return this._configFirst("strokeWidth", oData);
		}

		return 0;
	};

	/**
	 * Gets the value of property <code>x</code>.
	 * 
	 * <p>
	 * x coordinate of the top-left point of a rectangle.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#RectElementXAttribute SVG 1.1 specification for the 'x' attribute of 'rect'}.
	 * 
	 * Your application should not configure this value. Instead, the getter calculates the value of x by using the initial coordinate 
	 * of the view boundary for visible areas in a Gantt chart.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>x</code>.
	 * @public
	 */
	RowBackgroundRectangle.prototype.getX = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("x")) {
			return this._configFirst("x", oData);
		}
		
		var aViewRange = this.getShapeViewBoundary();
		if (aViewRange){
			return aViewRange[0];
		}
		return 0;
	};

	/**
	 * Gets the value of property <code>y</code>.
	 * 
	 * <p>
	 * y coordinate of the top-left point of a rectangle.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#RectElementYAttribute SVG 1.1 specification for the 'y' attribute of 'rect'}.
	 * 
	 * Your application should not configure this value. Instead, the getter calculates the value of y by using parameter <code>oRowInfo</code>.
	 * </p>
	 * <p>The default value is the y coordinate of the row plus 1px, which is the width of the stroke.</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>y</code>.
	 * @public
	 */
	RowBackgroundRectangle.prototype.getY = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("y")) {
			return this._configFirst("y", oData);
		}
		
		return oRowInfo.y + 1;
	};

	/**
	 * Gets the value of property <code>width</code>.
	 * 
	 * <p>
	 * Width of a rectangle.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#RectElementWidthAttribute SVG 1.1 specification for the 'width' attribute of 'rect'}.
	 * 
	 * Your application should not configure this value. Instead, the getter calculates the value of width by using the view boundary for visible areas in a Gantt chart.
	 * If your application overwrites the getter using configuration or code, accurate results cannot be guaranteed.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>width</code>.
	 * @public
	 */
	RowBackgroundRectangle.prototype.getWidth = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("width")) {
			return this._configFirst("width", oData);
		}
		
		var aViewRange = this.getShapeViewBoundary();
		if (aViewRange){
			return aViewRange[1] - aViewRange[0];
		}
		return 0;
	};

	/**
	 * Gets the value of property <code>height</code>.
	 * 
	 * <p>
	 * Height of a rectangle.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#RectElementHeightAttribute SVG 1.1 specification for the 'height' attribute of 'rect'}.
	 * </p>
	 * <p>The default value is the height of the row minus 1px, which is the width of stroke.</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>height</code>.
	 * @public
	 */
	RowBackgroundRectangle.prototype.getHeight = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("height")) {
			return this._configFirst("height", oData);
		}
		
		return oRowInfo.rowHeight - 1;
	};

	/**
	 * Filter all data in visible areas to get valid rows' data, only these valid rows must have a background rectangle drawn, 
	 * which is filled in a certain color.
	 * 
	 * @param {array} aRowDatas data of all rows in visible areas.
	 * @return {array} data of valid rows that must have a background rectangle drawn.
	 * @public
	 */
	RowBackgroundRectangle.prototype.filterValidData = function(aRowDatas) {
		if (aRowDatas.length > 0){
			var oChart = this.mChartInstance;
			var oChartSchemeMap = oChart._oChartSchemesConfigMap;
			var oObjectTypeMap = oChart._oObjectTypesConfigMap;
			return $.grep(aRowDatas, function(oValue, iIndex) {
				var oChartScheme;
				if (oValue.__group) {
					oChartScheme = (oChartSchemeMap && oChartSchemeMap[oValue.__group]) ? oChartSchemeMap[oValue.__group] : undefined;
				} else {
					var oObjectType = (oObjectTypeMap && oObjectTypeMap[oValue.type]) ? oObjectTypeMap[oValue.type] : undefined;
					if (oObjectType) {
						oChartScheme = (oChartSchemeMap && oChartSchemeMap[oObjectType.getMainChartSchemeKey()]) ? oChartSchemeMap[oObjectType.getMainChartSchemeKey()] : undefined;
					}
				}
				if (oChartScheme && oChartScheme.getBackgroundColor()) {
					return oValue;
				}
			});
		}
		return aRowDatas;
	};
	
	/**
	 * Indicates whether your application must use HtmlClass to decide the color of background.
	 * If the theme is sap_bluecrystal, the application can use custom configuration value for fill property, but if the theme is sap_hcb,
	 * the application must use HtmlClass instead.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {boolean} Value indicates whether HtmlClass must be used to decide the color of the background.
	 */
	RowBackgroundRectangle.prototype.getHtmlClass = function(oData, oRowInfo) {
		if (Core.getConfiguration().getTheme() === "sap_hcb") {
			return true;
		}
		return false;
	};

	return RowBackgroundRectangle;
}, true);

}; // end of sap/gantt/shape/ext/RowBackgroundRectangle.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.Triangle') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.Triangle'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ext/Triangle",[
	"sap/gantt/shape/Path"
], function (Path) {
	"use strict";
	
	/**
	 * Creates and initializes a new Triangle class.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings of the new control
	 * 
	 * @class 
	 * Triangle shape class using SVG tag 'path'. It's usually treated as a transient shape.
	 * 
	 * <p>
	 * See {@link http://www.w3.org/TR/SVG/paths.html#PathElement SVG specification 1.1 for the 'path' element} for
	 * detail information of the html tag.<br/><br/>
	 * The following image shows how the properties are designed:<br/>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="8.8cm" viewBox="0 0 300 220" version="1.1">
	 * 	<rect x="1" y="1" width="298" height="218" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * 	<marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * 	<style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * 	.arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * 	<path d="M 200 50 l -150 100 l 180 0 z" class="side" />
	 * 	<path d="M 200 50 v 100" class="dashside" />
	 * 	<circle cx="200" cy="100" class="center" />
	 * 	<path d="M 200 50 h -170 m 0 100 h 20 v 40 m 180 0 v -40 m -30 0 v 20" class="dashassist" />
	 * 	<path d="M 30 50 v 100" class="arrowline" />
	 * 	<path d="M 50 170 h 150" class="arrowline" />
	 * 	<path d="M 50 190 h 180" class="arrowline" />
	 * 	<path d="M 200 50 v -20 m 0 70 h 20" class="texthyphon" />
	 * 	<text x="185" y="25" class="timeText">time</text>
	 * 	<text x="225" y="95" class="timeText">rotation</text>
	 * 	<text x="230" y="114" class="timeText">Center</text>
	 * 	<text x="35" y="100" class="propertyText">height</text>
	 * 	<text x="55" y="165" class="propertyText">distanceOfyAxisHeight</text>
	 * 	<text x="100" y="185" class="propertyText">base</text>
	 * </svg>
	 * </p>
	 * 
	 * @extend sap.gantt.shape.Shape
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.Triangle
	 */
	var Triangle = Path.extend("sap.gantt.shape.ext.Triangle", /** @lends sap.gantt.shape.ext.Triangle.prototype */ {
		metadata: {
			properties: {
				isClosed: {type: "boolean", defaultValue: true},

				base: {type: "number", defaultValue: 10},
				height: {type: "number", defaultValue: 10},
				distanceOfyAxisHeight: {type: "number", defaultValue: 5}
			}
		}
	});
	
	Triangle.prototype.init = function() {
		var oRb = sap.ui.getCore().getLibraryResourceBundle("sap.gantt");
		this.setProperty("ariaLabel", oRb.getText("ARIA_TRIANGLE"));
	};
	
	/**
	 * Gets the value of property <code>isClosed</code>.
	 * 
	 * @name sap.gantt.shape.ext.Triangle.prototype.getIsClosed
	 * @function
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {boolean} Value of property <code>isClosed</code>.
	 * @public
	 */
	
	/**
	 * Gets the value of property <code>d</code>.
	 * 
	 * <p>
	 * d attribute of path element.
	 * See {@link http://www.w3.org/TR/SVG/paths.html#DAttribute SVG 1.1 specification for 'd' attribute of 'path'}.
	 * 
	 * Your application should not configure this value. Instead, the getter calculates the value of d by using properties <code>time</code>, <code>base</code>, <code>height</code>, 
	 * and <code>distanceOfyAxisHeight</code>. The value of these properties can be retrieved from the corresponding getters (getTime, getBase, getHeight, and getDistanceOfyAxisHeight).
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>d</code>.
	 * @public
	 */
	Triangle.prototype.getD = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("d")) {
			return this._configFirst("d", oData);
		}

		var nBase = this.getBase(oData, oRowInfo);
		var nHeight = this.getHeight(oData, oRowInfo);
		var nDisOfYaxisH = this.getDistanceOfyAxisHeight(oData, oRowInfo);
		var nHalfHeight = this.getHeight(oData, oRowInfo) / 2;

		var aCenter = this.getRotationCenter(oData, oRowInfo);

		return "M " + aCenter.join(" ") +
			" m 0 " + nHalfHeight +
			" l -" + nDisOfYaxisH + " 0 l " + nDisOfYaxisH +
			" -" + nHeight + " l " + Number(nBase - nDisOfYaxisH) + " " + nHeight + " l -" +
			Number(nBase - nDisOfYaxisH) + " 0 z";
	};

	/**
	 * Gets the value of property <code>base</code>.
	 * 
	 * <p>
	 * Base side of a triangle.
	 * 
	 * This property influences property <code>d</code>.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>base</code>.
	 * @public
	 */
	Triangle.prototype.getBase = function (oData) {
		return this._configFirst("base", oData, true);
	};

	/**
	 * Gets the value of property <code>height</code>.
	 * 
	 * <p>
	 * Height of a triangle.
	 * 
	 * This property influences property <code>d</code>.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>height</code>.
	 * @public
	 */
	Triangle.prototype.getHeight = function (oData) {
		return this._configFirst("height", oData, true);
	};

	/**
	 * Gets the value of property <code>distanceOfyAxisHeight</code>.
	 * 
	 * <p>
	 * distanceOfyAxisHeight of a triangle, which refers to the distance between the left point to the altitude of the triangle.
	 * 
	 * This property influences property <code>d</code>.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>distanceOfyAxisHeight</code>.
	 * @public
	 */
	Triangle.prototype.getDistanceOfyAxisHeight = function (oData) {
		return this._configFirst("distanceOfyAxisHeight", oData, true);
	};

	return Triangle;
}, true);

}; // end of sap/gantt/shape/ext/Triangle.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.rls.Relationship') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.rls.Relationship'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
sap.ui.define("sap/gantt/shape/ext/rls/Relationship",[
	"sap/gantt/shape/Path", "sap/ui/core/Core"
], function (Path, Core) {
	"use strict";
	/**
	 * Creates and initializes a Relationship object
	 * 
	 * @param {string} [sId] ID for the new control, generated automatically if no is given
	 * @param {object} [mSetting] Initial settings for the new control
	 * 
	 * @class 
	 * Enables users to visualize the relationship between elements.
	 * 
	 * <p>Four types of relationships are supported and L-shaped lines are supported for the finish-to-start type.</p>
	 * 
	 * @extend sap.gantt.shape.Shape
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.rls.Relationship
	 */
	var Relationship = Path.extend("sap.gantt.shape.ext.rls.Relationship", /* @lends sap.gantt.shape.ext.rls.Relationship */ {
		metadata: {
			properties: {
				/**
				 * CSS class name of the relationship shape
				 */
				htmlClass: {type: "string", defaultValue: "relationshipLine"},
				/**
				 * Category name
				 */
				category: {type: "string", defaultValue: sap.gantt.shape.ShapeCategory.Relationship},
				/**
				 * Indicates whether the shape is a closed path
				 */
				isClosed: {type: "boolean", defaultValue: true},
				/**
				 * Indicates whether the width of the polygon represents the duration of time
				 */
				isDuration: {type: "boolean", defaultValue: false},
				/**
				 * Line color of the relationship shape
				 */
				stroke: {type: "string", defaultValue: "#000000"},
				/**
				 * Fill color of the relationship shape (the color of the arrow and the square at the ends)
				 */
				fill: {type: "string", defaultValue: "#000000"},

				/**
				 * Relationship type
				 */
				type: {type: "number", defaultValue: 0},
				/**
				* Path of predecessor element
				*/
				fromObjectPath: {type: "string"},
				/**
				* Shape of predecessor element
				*/
				fromShapeId: {type: "string"},
				/**
				* Data of predecessor element
				*/
				fromDataId: {type: "string"},
				/**
				* Path of successor element
				*/
				toObjectPath: {type: "string"},
				/**
				* Shape of successor element
				*/
				toShapeId: {type: "string"},
				/**
				* Data of successor element
				*/
				toDataId: {type: "string"},

				/**
				* Indicates whether the start point (square) of the relationship shape is visible
				*/
				showStart: {type: "boolean", defaultValue: false},
				/**
				* Indicates whether the end point (arrow) of the relationship shape is visible
				*/
				showEnd: {type: "boolean", defaultValue: true},
				/**
				* Indicates whether an 'L' shape is used for the finish-to-start type
				*/
				lShapeforTypeFS: {type: "boolean", defaultValue: true},
				/**
				* Minimum length for relationship lines 
				*/
				minXLen: {type: "number", defaultValue: 10},
				/**
				* Size of the arrow
				*/
				arrowSideLength: {type: "number", defaultValue: 5}

			},
			aggregations: {
				selectedShape: {type: "sap.gantt.shape.ext.rls.SelectedRelationship", multiple: false}
			}
		}
	});
	
	// RTL mode check
	Relationship.prototype.init = function () {
			this._isRTL = Core.getConfiguration().getRTL();
			var oRb = sap.ui.getCore().getLibraryResourceBundle("sap.gantt");
			this.setProperty("ariaLabel", oRb.getText("ARIA_RELATIONSHIP"));
	};
        // Relationship types (0:finish-to-finish 1:finish-to-start 2:start-to-finish 3:start-to-start)
	Relationship.prototype.TYPE = {
		fftype: 0,
		fstype: 1,
		sftype: 2,
		sstype: 3
	};
	/**
	 * Gets the relationship type 
	 * @returns {number} The type number (from 0 to 3)
     * @param {object} oData Raw data object
	 * @public
	 */
	Relationship.prototype.getType = function (oData) {
		return this._configFirst("type", oData);
	};
	/**
     * Gets the path of predecessor object
     * @returns {string} Path of predecessor element
     * @param {object} oData Raw data object
	 * @public
	 */
	Relationship.prototype.getFromObjectPath = function (oData) {
		return this._configFirst("fromObjectPath", oData);
	};
    /**
     * Gets the shape ID of the predecessor element
     * @returns {string} Shape ID of the predecessor element
     * @param {object} oData Raw data object
     * @public
     */
	Relationship.prototype.getFromShapeId = function (oData) {
		return this._configFirst("fromShapeId", oData);
	};
    /**
     * Gets the data of the predecessor element
     * @returns {string} Data of predecessor
     * @param {object} oData Raw data object
     * @public
     */
	Relationship.prototype.getFromDataId = function (oData) {
		return this._configFirst("fromDataId", oData);
	};
	/**
     * Gets the path of the successor element
     * @returns {string} Path of the successor element
     * @param {object} oData Raw data object
     * @public
     */
	Relationship.prototype.getToObjectPath = function (oData) {
		return this._configFirst("toObjectPath", oData);
	};
    /**
     * Gets the shape ID of the successor element
     * @returns {string} Shape ID of the successor element
     * @param {object} oData Raw data object
     * @public
     */
	Relationship.prototype.getToShapeId = function (oData) {
		return this._configFirst("toShapeId", oData);
	};
    /**
     * Gets the data of the successor element
     * @returns {string} Data of the successor element
     * @param {object} oData Raw data object
     * @public
     */
	Relationship.prototype.getToDataId = function (oData) {
		return this._configFirst("toDataId", oData);
	};
    /**
     * Gets the'L' shape switch
     * @returns {boolean} 'L' shape configuration (whether the system uses L-shaped lines to represent finish-start relationships)
     * @param {object} oData Raw data object
     * @public
     */
	Relationship.prototype.getLShapeforTypeFS = function (oData) {
		return this._configFirst("lShapeforTypeFS", oData);
	};
    /**
     * Gets the CSS class of the relationship shape
     * @returns {string} CSS class name of the relationship shape
     * @param {object} oData Raw data object
     * @public
     */
	Relationship.prototype.getHtmlClass = function (oData) {
		return this._configFirst("htmlClass", oData);
	};
    /**
     * Gets whether the start shape is visible 
     * @returns {boolean} Start shape configuration (whether the start shape is visible)
     * @param {object} oData Raw data object
     * @public
     */
	Relationship.prototype.getShowStart = function (oData) {
		return this._configFirst("showStart", oData);
	};
    /**
     * Gets whether the end shape is visible
     * @returns {boolean} End shape configuration (whether the end shape is visible
     * @param {object} oData Raw data object
     * @public
     */
	Relationship.prototype.getShowEnd = function (oData) {
		return this._configFirst("showEnd", oData);
	};

	/**
	 * @returns {string} a string of commands for the "d" attribute of <path> element.
	 * @param {object} oData Raw data object
	 * @param {object} oRowInfo Information about the shape object. The object is like
	 *                {
						from: {
							objectInfo: from_object,
							shapeRawData: from_shape_rawData
						},
						to: {
							objectInfo: to_object,
							shapeRawData: to_shape_rawData
						}
				};
	 */
	Relationship.prototype.getD = function (oData, oRowInfo) {
		var showEnd = this.getShowEnd(oData, oRowInfo);
		var showStart = this.getShowStart(oData, oRowInfo);
		
		var x1, y1, x2, y2;
		var type;
		try {
			type = window.parseInt(this.getType(oData, oRowInfo));
		} catch (e) {
			jQuery.sap.log.warning("invalid relationship type");
		}
		var lShapeforTypeFS = this.getLShapeforTypeFS(oData, oRowInfo);
		
		// To get the coordinates of the from shape (starting point) and to shape (ending point).
		var sId = this.mChartInstance._getIdByShapeId(this.getFromShapeId(oData, oRowInfo.from.objectInfo.objectInfoRef));
		var oPoints1 = sap.ui.getCore().byId(sId).getRLSAnchors(oRowInfo.from.shapeRawData, oRowInfo.from.objectInfo);
		// For some shapes that wants to make the point of junction be on the top or the bottom of the shape (e.g. diamond), there are some special treatments based on lShapeforTypeFS.
		sId = this.mChartInstance._getIdByShapeId(this.getToShapeId(oData, oRowInfo.from.objectInfo.objectInfoRef));
		var oPoints2 = sap.ui.getCore().byId(sId).getRLSAnchors(oRowInfo.to.shapeRawData, oRowInfo.to.objectInfo, lShapeforTypeFS);
		
		if (this._isRTL) {
			//For RTL mode, shift the startPoint and endPoint for axis X and Y
			if (type === this.TYPE.fftype){// Finish-Finish relationship
				x1 = oPoints1.startPoint.x;
				y1 = oPoints1.startPoint.y;
				x2 = oPoints2.startPoint.x;
				y2 = oPoints2.startPoint.y;
			}else if (type === this.TYPE.fstype){ //Finish-Start
				x1 = oPoints1.startPoint.x;
				y1 = oPoints1.startPoint.y;
				x2 = oPoints2.endPoint.x;
				y2 = oPoints2.endPoint.y;
			}else if (type === this.TYPE.sftype){ //Start-Finish
				x1 = oPoints1.endPoint.x;
				y1 = oPoints1.endPoint.y;
				x2 = oPoints2.startPoint.x;
				y2 = oPoints2.startPoint.y;
			}else if (type === this.TYPE.sstype){ //Start-Start
				x1 = oPoints1.endPoint.x;
				y1 = oPoints1.endPoint.y;
				x2 = oPoints2.endPoint.x;
				y2 = oPoints2.endPoint.y;
			}
		} else if (type === this.TYPE.fftype){// Finish-Finish relationship
				x1 = oPoints1.endPoint.x;
				y1 = oPoints1.endPoint.y;
				x2 = oPoints2.endPoint.x;
				y2 = oPoints2.endPoint.y;
		 }else if (type === this.TYPE.fstype){ //Finish-Start
				x1 = oPoints1.endPoint.x;
				y1 = oPoints1.endPoint.y;
				x2 = oPoints2.startPoint.x;
				y2 = oPoints2.startPoint.y;
		 }else if (type === this.TYPE.sftype){ //Start-Finish
				x1 = oPoints1.startPoint.x;
				y1 = oPoints1.startPoint.y;
				x2 = oPoints2.endPoint.x;
				y2 = oPoints2.endPoint.y;
		 }else if (type === this.TYPE.sstype){ //Start-Start
				x1 = oPoints1.startPoint.x;
				y1 = oPoints1.startPoint.y;
				x2 = oPoints2.startPoint.x;
				y2 = oPoints2.startPoint.y;
		  }
		

		var dStr = "";
		
		//Concatenate the Move and Line commands for the coordinates of the square
		if (showStart){
			var squarePoints = this._calculateSquareCoordinate(type, x1, y1);
			dStr = dStr.concat("M").concat(squarePoints[0].x).concat(",").concat(squarePoints[0].y).concat(" ");
			var squarePointsLength = squarePoints.length;
			for (var i = 1; i < squarePointsLength; i++){
				dStr = dStr.concat("L").concat(squarePoints[i].x).concat(",").concat(squarePoints[i].y).concat(" ");
			}
		}
		
		//Concatenate the Move and Line commands for the coordinates of the relationship line body
		var linePoints = this._calculateLineCoordinate(lShapeforTypeFS, type, x1, x2, y1, y2, oRowInfo.from.objectInfo, oPoints2.startPoint.height);
		dStr = dStr.concat("M").concat(linePoints[0].x).concat(",").concat(linePoints[0].y).concat(" ");
		var linePointsLength = linePoints.length;
		for (var j = 0; j < linePointsLength; j++){
			dStr = dStr.concat("L").concat(linePoints[j].x).concat(",").concat(linePoints[j].y).concat(" ");
			dStr = dStr.concat("M").concat(linePoints[j].x).concat(",").concat(linePoints[j].y).concat(" ");
		}
		
		//Concatenate the Move and Line commands for the coordinates of the arrow
		if (showEnd){
			var arrowPoints = this._calculateArrowCoordinate(lShapeforTypeFS, type, x1, x2, y1, y2, oPoints2.startPoint.height);
			var arrowPointsLength = arrowPoints.length;
			for (var k = 0; k < arrowPointsLength; k++){
				dStr = dStr.concat("L").concat(arrowPoints[k].x).concat(",").concat(arrowPoints[k].y).concat(" ");
			}
		}
		dStr = dStr.concat("Z");
		return dStr;
};

	/**
	 * Private method
	 * calculate the points of the square at the starting of the line.
	 * @param {number} type Relationship type
	 * @param {number} x1 Start point coordinate
	 * @param {number} y1 Start point coordinate
	 * @returns {object} array[x1,y1,xa,ya,xb,yb...x2,y2] Containing all the points of the square
	 */
	Relationship.prototype._calculateSquareCoordinate = function (type, x1, y1) {
		var square = [];

		if (type === this.TYPE.fftype || type === this.TYPE.fstype) {
			if (this._isRTL) {
				//for RTL mode, square at the left of activity's left side
				square = [x1, y1 - 2, x1 - 3, y1 - 2, x1 - 3, y1 + 1.5, x1, y1 + 1.5, x1, y1 - 2];
			} else {
				// square at the right of activity's right side
				square = [x1 - 1, y1 - 2, x1 - 1 + 3, y1 - 2, x1 - 1 + 3, y1 + 1.5, x1 - 1, y1 + 1.5, x1 - 1, y1 - 2];
			}
		}else if (this._isRTL){
			//for RTL mode, square at the right of activity's right side
			square = [x1 - 1, y1 - 2, x1 - 1 + 3, y1 - 2, x1 - 1 + 3, y1 + 1.5, x1 - 1, y1 + 1.5, x1 - 1, y1 - 2];
		} else {
			//square at the left of activity's left side
			square = [x1, y1 - 2, x1 - 3, y1 - 2, x1 - 3, y1 + 1.5, x1, y1 + 1.5, x1, y1 - 2];
		}

		var object = [];
		var squareLength = square.length;
		for (var i = 0; i < squareLength;) {
			object[object.length] = {"x": square[i++], "y": square[i++]};
		}
		return object;
	};

	/**
	 * Private method
	 * calculate the points in the line.
	 * @param {boolean} lShapeforTypeFS Whether to draw 'L' shape for finish-to-start type of relationships
	 * @param {number} type the type of relationship
	 * @param {number} x1 Start point coordinate
	 * @param {number} x2 End point coordinate
	 * @param {number} y1 Start point coordinate
	 * @param {number} y2 End point coordinate 
	 * @param {object} fromObjectInfo The row object of starting point shape
	 * @param {number} shapeHeight Height of ending point shape
	 * @returns {object} array[x1,y1,xa,ya,xb,yb...x2,y2] Containing all the points on the line
	 */
	Relationship.prototype._calculateLineCoordinate = function (lShapeforTypeFS, type, x1, x2, y1, y2, fromObjectInfo, shapeHeight) {
		var data = [];

		var round, ceiling;

		if (y1 === y2) {// if two activities in a single row, simply returning line from start point to end point.
			data = data.concat([x1, y1, x2, y2]);
		}else {
			var k = this.getMinXLen(); //minimum length of the x-axis line.

			if (type === this.TYPE.fftype) {// Finish-Finish relationship
				if (this._isRTL){
					//for RTL mode, eliminate the length of line as same as Start-Start relationship
					data = data.concat([x1, y1, Math.min(x1, x2) - k, y1, Math.min(x1, x2) - k, y2, x2, y2]);
				} else {
					data = data.concat([x1 - 1, y1, Math.max(x1, x2) + k, y1, Math.max(x1, x2) + k, y2, x2, y2]);//eliminate the length of line
				}
				
			}else if (type === this.TYPE.fstype) {//Finish-Start relationship
				if (lShapeforTypeFS) {//L shape for finish start line shape
					if (this._isRTL){
						//for RTL mode, eliminate the length of line 
						if (x1 > x2) {//L shape when there is space between two activities.
							if (y1 < y2) {//top down direction.
								y2 = y2 - shapeHeight / 2;
							}else {//bottom up direction.
								y2 = y2 + shapeHeight / 2;
							}
							data = data.concat([x1 + 1, y1, x2, y1, x2, y2]);
						}else if (y1 < y2){//S shape when there is no space.
							ceiling = fromObjectInfo.y + fromObjectInfo.rowHeight;
							data = data.concat([x1 + 1, y1, x1 - k, y1, x1 - k, ceiling, x2 + k, ceiling, x2 + k, y2, x2, y2]);
						}else if (y1 > y2) {
							round = fromObjectInfo.y;
							data = data.concat([x1 + 1, y1, x1 - k, y1, x1 - k, round, x2 + k, round, x2 + k, y2, x2, y2]);
						}
					} else if (x1 <= x2){//L shape when there is space between two activities.
						if (y1 < y2) {//top down direction.
							y2 = y2 - shapeHeight / 2;
						}else {
							y2 = y2 + shapeHeight / 2;
						}
						data = data.concat([x1 - 1, y1, x2, y1, x2, y2]);
					} else if (y1 < y2) {//S shape when there is no space.
						ceiling = fromObjectInfo.y + fromObjectInfo.rowHeight;
						data = data.concat([x1 - 1, y1, x1 + k, y1, x1 + k, ceiling, x2 - k, ceiling, x2 - k, y2, x2, y2]);
					} else if (y1 > y2) {
						round = fromObjectInfo.y;
						data = data.concat([x1 - 1, y1, x1 + k, y1, x1 + k, round, x2 - k, round, x2 - k, y2, x2, y2]);
					}
				}else if (this._isRTL) {//S shape for finish start line shape.
					//for RTL mode, eliminate the length of line 
					if (x1 - k > x2) {//reserve k space for each connection
						data = data.concat([x1 - 1, y1, x1 + k, y1, x1 + k, y2, x2, y2]);
					} else if (y1 < y2) {
						ceiling = fromObjectInfo.y + fromObjectInfo.rowHeight;
						data = data.concat([x1 + 1, y1, x1 - k, y1, x1 - k, ceiling, x2 + k, ceiling, x2 + k, y2, x2, y2]);
					} else if (y1 > y2) {
						round = fromObjectInfo.y - fromObjectInfo.rowHeight;
						data = data.concat([x1 + 1, y1, x1 - k, y1, x1 - k, round, x2 + k, round, x2 + k, y2, x2, y2]);
					}
				} else if (x1 + k <= x2) {//reserve k space for each connection
					data = data.concat([x1 - 1, y1, x1 + k, y1, x1 + k, y2, x2, y2]);
				} else if (y1 < y2) {
					ceiling = fromObjectInfo.y + fromObjectInfo.rowHeight;
					data = data.concat([x1 - 1, y1, x1 + k, y1, x1 + k, ceiling, x2 - k, ceiling, x2 - k, y2, x2, y2]);
				} else if (y1 > y2) {
					round = fromObjectInfo.y - fromObjectInfo.rowHeight;
					data = data.concat([x1 - 1, y1, x1 + k, y1, x1 + k, round, x2 - k, round, x2 - k, y2, x2, y2]);
				}
			}else if (type === this.TYPE.sftype) { //Start-Finish relationship
				if (this._isRTL){
					//for RTL mode, eliminate the length of line 
					if (x1 < x2 - k) {
						data = data.concat([x1, y1, x1 + k, y1, x1 + k, y2, x2, y2]);
					}else if (y1 < y2){
						ceiling = fromObjectInfo.y + fromObjectInfo.rowHeight;
						data = data.concat([x1, y1, x1 + k, y1, x1 + k, ceiling, x2 - k, ceiling, x2 - k, y2, x2, y2]);
					}else if (y1 > y2) {
						round = fromObjectInfo.y;
						data = data.concat([x1, y1, x1 + k, y1, x1 + k, round, x2 - k, round, x2 - k, y2, x2, y2]);
					}
				} else if (x1 >= x2 + k) {
					data = data.concat([x1, y1, x1 - k, y1, x1 - k, y2, x2, y2]);
				}else if (y1 < y2){
					ceiling = fromObjectInfo.y + fromObjectInfo.rowHeight;
					data = data.concat([x1, y1, x1 - k, y1, x1 - k, ceiling, x2 + k, ceiling, x2 + k, y2, x2, y2]);
				}else if (y1 > y2) {
					round = fromObjectInfo.y;
					data = data.concat([x1, y1, x1 - k, y1, x1 - k, round, x2 + k, round, x2 + k, y2, x2, y2]);
				}
			
			}else if (type === this.TYPE.sstype) {  //Start-Start relationship
				if (this._isRTL){
					//for RTL mode, eliminate the length of line as same as Finish-Finish relationship
					data = data.concat([x1 - 1, y1, Math.max(x1, x2) + k, y1, Math.max(x1, x2) + k, y2, x2, y2]);
				} else {
					data = data.concat([x1, y1, Math.min(x1, x2) - k, y1, Math.min(x1, x2) - k, y2, x2, y2]);
				}
				
			}
		}

		var object = [];
		var dataLength = data.length;
		for (var i = 0; i < dataLength;) {
			object[object.length] = {"x": data[i++], "y": data[i++]};
		}
		return object;
	};

	/**
	 * Private method
	 * calculate the points of the arrow at the ending of the line.
	 * @param {boolean} lShapeforTypeFS Whether to draw 'L' shape for finish-to-start type of relationships
	 * @param {number} type the type of relationship
	 * @param {number} x1 Start point coordinate
	 * @param {number} x2 End point coordinate
	 * @param {number} y1 Start point coordinate
	 * @param {number} y2 End point coordinate
	 * @param {number} shapeHeight Height of the ending point shape
	 * @returns {object} array[x1,y1,xa,ya,xb,yb...x2,y2], containing all the points of the arrow
	 */
	Relationship.prototype._calculateArrowCoordinate = function (lShapeforTypeFS, type, x1, x2, y1, y2, shapeHeight) {
		var arrow = [];
		var arrowSideLength = this.getArrowSideLength();

		if (type === this.TYPE.fftype || type === this.TYPE.sftype) {
			if (this._isRTL){
				//for RTL mode, right arrow
				arrow = [x2 - arrowSideLength * Math.pow(3, 1 / 2) / 2, y2 - arrowSideLength / 2, x2 - arrowSideLength * Math.pow(3, 1 / 2) / 2, y2 + arrowSideLength / 2];
			} else {
				// left arrow
				arrow = [x2 + arrowSideLength * Math.pow(3, 1 / 2) / 2, y2 - arrowSideLength / 2, x2 + arrowSideLength * Math.pow(3, 1 / 2) / 2, y2 + arrowSideLength / 2];
			}
		}else if (type === this.TYPE.sstype) {
			if (this._isRTL){
				//for RTL mode, left arrow
				arrow = [x2 + arrowSideLength * Math.pow(3, 1 / 2) / 2, y2 - arrowSideLength / 2, x2 + arrowSideLength * Math.pow(3, 1 / 2) / 2, y2 + arrowSideLength / 2];
			} else {
				//right arrow
				arrow = [x2 - arrowSideLength * Math.pow(3, 1 / 2) / 2, y2 - arrowSideLength / 2, x2 - arrowSideLength * Math.pow(3, 1 / 2) / 2, y2 + arrowSideLength / 2];
			}
			
		}else if (lShapeforTypeFS) {// finish-start relationship, need to check if L shape or S shape.
				//L shape for finish start line shape
				if (this._isRTL){
					//RTL mode, arrow for L shape
					if (x1 > x2) {
						if (y1 < y2) {//top down direction.
							y2 = y2 - shapeHeight / 2;
						}else if (y1 > y2) {//bottom up direction.
							y2 = y2 + shapeHeight / 2;
						}else {//y1 == y2
							//do nothing
						}
						if (y1 < y2) {//down
							arrow = [x2 + arrowSideLength / 2, y2 - arrowSideLength * Math.pow(3, 1 / 2) / 2, x2 - arrowSideLength / 2, y2 - arrowSideLength * Math.pow(3, 1 / 2) / 2];
						}else if (y1 == y2) {
							arrow = [x2 + arrowSideLength * Math.pow(3, 1 / 2) / 2, y2 - arrowSideLength / 2, x2 + arrowSideLength * Math.pow(3, 1 / 2) / 2, y2 + arrowSideLength / 2];
						}else {//up
							arrow = [x2 + arrowSideLength / 2, y2 + arrowSideLength * Math.pow(3, 1 / 2) / 2, x2 - arrowSideLength / 2, y2 + arrowSideLength * Math.pow(3, 1 / 2) / 2];
						}
					}else {//S shape, right arrow
						arrow = [x2 + arrowSideLength * Math.pow(3, 1 / 2) / 2, y2 - arrowSideLength / 2, x2 + arrowSideLength * Math.pow(3, 1 / 2) / 2, y2 + arrowSideLength / 2];
					}
				} else if (x1 <= x2) {
					if (y1 < y2) {//top down direction.
						y2 = y2 - shapeHeight / 2;
					} else if (y1 > y2) {//bottom up direction.
						y2 = y2 + shapeHeight / 2;
					} else {//y1 == y2
						//do nothing
					}
					if (y1 < y2) {//down
						arrow = [x2 - arrowSideLength / 2, y2 - arrowSideLength * Math.pow(3, 1 / 2) / 2, x2 + arrowSideLength / 2, y2 - arrowSideLength * Math.pow(3, 1 / 2) / 2];
					} else if (y1 == y2) {
						arrow = [x2 - arrowSideLength * Math.pow(3, 1 / 2) / 2, y2 - arrowSideLength / 2, x2 - arrowSideLength * Math.pow(3, 1 / 2) / 2, y2 + arrowSideLength / 2];
					} else {//up
						arrow = [x2 - arrowSideLength / 2, y2 + arrowSideLength * Math.pow(3, 1 / 2) / 2, x2 + arrowSideLength / 2, y2 + arrowSideLength * Math.pow(3, 1 / 2) / 2];
					}

				} else {//S shape, right arrow
					arrow = [x2 - arrowSideLength * Math.pow(3, 1 / 2) / 2, y2 - arrowSideLength / 2, x2 - arrowSideLength * Math.pow(3, 1 / 2) / 2, y2 + arrowSideLength / 2];
				}
			}else if (this._isRTL){
				//RTL mode, left arrow
				arrow = [x2 + arrowSideLength * Math.pow(3, 1 / 2) / 2, y2 - arrowSideLength / 2, x2 + arrowSideLength * Math.pow(3, 1 / 2) / 2, y2 + arrowSideLength / 2];
			} else {
				// S shape, right arrow
				arrow = [x2 - arrowSideLength * Math.pow(3, 1 / 2) / 2, y2 - arrowSideLength / 2, x2 - arrowSideLength * Math.pow(3, 1 / 2) / 2, y2 + arrowSideLength / 2];	
		    }

		var object = [];
		var arrowLength = arrow.length;
		for (var i = 0; i < arrowLength;) {
			object[object.length] = {"x": arrow[i++], "y": arrow[i++]};
		}
		return object;
	};

	return Relationship;
}, true);

}; // end of sap/gantt/shape/ext/rls/Relationship.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.rls.SelectedRelationship') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

// Provides control sap.gantt.shape.ext.rls.SelectedRelationship.
jQuery.sap.declare('sap.gantt.shape.ext.rls.SelectedRelationship'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ext/rls/SelectedRelationship",[
	"sap/gantt/shape/ext/rls/Relationship"
], function (Relationship) {
	"use strict";

	/**
	 * Creates and initializes a SelectedRelationship object
	 *
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * <p>
	 *     Provides an implementation of shape for drawing relationships with red and wider lines when they are selected. 
	 * </p>
	 *
	 *
	 * @extends sap.gantt.shape.ext.rls.Relationship
	 * @version 1.36.8
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.rls.SelectedRelationship
	 */
	var SelectedRelationship = Relationship.extend("sap.gantt.shape.ext.rls.SelectedRelationship", {
		metadata: {
			properties: {
				/**
				 * Line color of the relationship.
				 */
				stroke: {type: "string"},
				/**
				 * Width of the relationship line.
				 */
				strokeWidth: {type: "int"}
			}
		}
	});
	
	/**
	 * Gets the value of <code>stroke</code>.
	 * 
	 * <p>
	 * See {@link sap.gantt.shape.Shape#getStroke} for a detailed description of <code>stroke</code>.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @return {string} Hard coded value: "red".
	 * @public
	 */
	// For now, we cannot set the stroke by using default value because shape class for selected state doesn't support shapeProperties configuration.
	SelectedRelationship.prototype.getStroke = function (oData) {
		return "red";
	};
	/**
	 * Gets the value of <code>fill</code>.
	 * 
	 * <p> 
	 * See {@link sap.gantt.shape.Shape#getFill} for a detailed description of <code>fill</code>.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @return {string} Hard coded value: "red".
	 * @public
	 */
	SelectedRelationship.prototype.getFill = function (oData) {
		return "red";
	};
	/**
	 * Gets the value of <code>strokeWidth</code>.
	 * 
	 * <p>
	 * See {@link sap.gantt.shape.Shape#getStrokeWidth} for a detailed description of <code>strokeWidth</code>.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @return {int} Hard coded value: 2.
	 * @public
	 */
	// For now, we cannot set the strokeWidth by using default value because shape class for selected state doesn't support shapeProperties configuration.
	SelectedRelationship.prototype.getStrokeWidth = function (oData) {
		return 2;
	};

	return SelectedRelationship;
}, true);

}; // end of sap/gantt/shape/ext/rls/SelectedRelationship.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.ubc.UbcBorderPath') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.ubc.UbcBorderPath'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ext/ubc/UbcBorderPath",[
	"sap/gantt/misc/Utility", "sap/gantt/misc/Format", "sap/gantt/shape/Path"
], function(Utility, Format, Path) {
	"use strict";
	
	/**
	 * Creates and initializes a fragment of the Utilization Bar Chart.
	 * 
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings of the new control
	 * 
	 * @class 
	 * This shape is used to represent a planned capacity line.
	 * 
	 * <p>
	 * Graphic Effect is:<br/>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="8.8cm" viewBox="0 0 300 220" version="1.1">
	 * 	<defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * 	<marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * 	<style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * 	.arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63;fill:none} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * 	<rect x="1" y="1" width="298" height="218" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<defs><pattern class="pattern" id="pUbc" patternUnits="userSpaceOnUse" x="0" y="0" width="4" height="4"><rect x="0" width="4" height="4" fill="#efefef"></rect><path d="M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2 " stroke="#6d6d6d" stroke-width="0.5"></path></pattern>
	 * 	<pattern class="pattern" id="pEx2" patternUnits="userSpaceOnUse" x="0" y="0" width="4" height="4"><rect x="0" width="4" height="4" fill="#f2a5a5"></rect><path d="M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2 " stroke="#9E1F63" stroke-width="0.5"></path></pattern></defs>
	 * 	<polygon points="10,65 290,65 290,155 10,155" fill="url(#pUbc)" />
	 * 	<path d="M 10 65 h 280 v 90 h -280 z" class="dashside" />
	 * 	<path d="M 10 90 h 40 v 55 h 80 v -65 h 40 v 40 h 40 v -20 h 40 v -20 h 40" class="side" />
	 * </svg>
	 * </p>
	 * 
	 * @extends sap.gantt.shape.Path
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.ubc.UbcBorderPath
	 */
	var UbcBorderPath = Path.extend("sap.gantt.shape.ext.ubc.UbcBorderPath", /** @lends sap.gantt.shape.ext.ubc.UbcBorderPath.prototype */ {});

	/**
	 * Gets the value of property <code>enableSelection</code>.
	 * 
	 * <p>
	 * This property determines whether a shape is enabled for a selection behavior. The default value for a Utilization Line Chart is false.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {boolean} Value of property <code>enableSelection</code>.
	 * @public
	 */
	UbcBorderPath.prototype.getEnableSelection = function (oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("enableSelection")) {
			return this._configFirst("enableSelection", oData);
		}

		return false;
	};

	/**
	 * Gets the value of property <code>d</code>.
	 * 
	 * <p>
	 * d attribute of the path element.
	 * See {@link http://www.w3.org/TR/SVG/paths.html#DAttribute SVG 1.1 specification for 'd' attribute of 'path'}.
	 * 'd' attribute has powerful usages. For more information, see {@link http://www.w3.org/TR/SVG/paths.html#PathDataBNF BNF grammar} for detail.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>d</code>.
	 * @public
	 */
	UbcBorderPath.prototype.getD = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("d")) {
			return this._configFirst("d", oData);
		}
		
		var drawData = oData.period;
		var path = "";
		if (drawData.length > 0) {
			var maxTotalRevised = this._getMaxTotalRevised(oData);
			var maxY = this._getMaxY(oData, oRowInfo);
			var drawRowHeight = oRowInfo.rowHeight - 1;
			var oAxisTime = this.mChartInstance.getAxisTime();
			for (var i = 0; i < drawData.length; i++) {
				var x1, x2, y1, y2;
				x1 = oAxisTime.timeToView(Format.abapTimestampToDate(drawData[i].start_date)).toFixed(1);
				if (i < drawData.length - 1) {
					x2 = oAxisTime.timeToView(Format.abapTimestampToDate(drawData[i + 1].start_date)).toFixed(1);
				}else {
					x2 = oAxisTime.timeToView(Format.abapTimestampToDate(drawData[i].start_date)).toFixed(1);
				}
				
				if ( isNaN(x1) || !x1) {
					x1 = oAxisTime.timeToView(0).toFixed(1);
				}
				if ( isNaN(x2) || !x2) {
					x1 = oAxisTime.timeToView(0).toFixed(1);
				}
				
				y1 = maxY - drawData[i].demand / maxTotalRevised * drawRowHeight;
				y1 = y1.toFixed(1);
				
				if (y1 < oRowInfo.y) {
					y1 = oRowInfo.y;
				}
				if (i < drawData.length - 1) {
					y2 = maxY - drawData[i + 1].demand / maxTotalRevised * drawRowHeight;
				} else {
					x2 = oAxisTime.timeToView(Format.abapTimestampToDate(drawData[i].start_date)).toFixed(1);
					y2 = maxY - drawData[i].demand / maxTotalRevised * drawRowHeight;
				}
				y2 = y2.toFixed(1);
				
				if (y2 < oRowInfo.y) {
					y2 = oRowInfo.y;
				}
				
				path += " M " + x1 + " " + y1 + "L" + x2 + " " + y1;
				path += " M " + x2 + " " + y1 + "L" + x2 + " " + y2;
			}
		}
		return path;
	};

	/**
	 * Gets the value of property <code>stroke</code>.
	 * 
	 * <p>
	 * Standard SVG 'stroke' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeProperty SVG 1.1 specification for 'stroke'}.
	 * <b>Note:</b>You can provide stroke with HTML colors and the URL reference to a paint server can be provided. Paint server definitions can be retrieved from paint servers rendered by
	 * {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable}, or {@link sap.gantt.GanttChart}.
	 * </p>
	 * <p>The default value is "blue".</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>stroke</code>.
	 * @public
	 */
	UbcBorderPath.prototype.getStroke = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("stroke")) {
			return this._configFirst("stroke", oData);
		}
		return "blue";
	};

	/**
	 * Gets the value of property <code>strokeWidth</code>.
	 * 
	 * <p>
	 * Standard SVG 'stroke-width' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeWidthProperty SVG 1.1 specification for 'stroke-width'}.
	 * </p>
	 * <p>The default value is 0.3.</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>strokeWidth</code>.
	 * @public
	 */
	UbcBorderPath.prototype.getStrokeWidth = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("strokeWidth")) {
			return this._configFirst("strokeWidth", oData);
		}
		return 0.3;
	};

	UbcBorderPath.prototype._getMaxY = function(oData, oRowInfo) {
		var topCapacityY = oRowInfo.y;
		var drawRowHeight = oRowInfo.rowHeight - 1;    // 1 is the border width for polygon.
		var maxY = topCapacityY + drawRowHeight;
		return maxY;
	};

	UbcBorderPath.prototype._getMaxTotalRevised = function(oData) {
		var maxTotal = this._getMaxTotal(oData);
		var maxTotalRevised = maxTotal + this._getmaxExceedCap(oData);
		return maxTotalRevised;
	};

	UbcBorderPath.prototype._getMaxTotal = function(oData) {
		var maxTotal = Math.max.apply(Math,
				oData.period.map(function(obj){
										return obj.supply;
									}));
		if (maxTotal <= 0 ) {
			maxTotal = 1;
		}
		
		return maxTotal;
	};

	UbcBorderPath.prototype._getmaxExceedCap = function(oData) {
		var maxTotal = this._getMaxTotal(oData);
		
		var maxExceedCap = 25;
		if (this.mShapeConfig.hasShapeProperty("maxExceedCapacity")){
			maxExceedCap = this._configFirst("maxExceedCapacity", oData);
		}
		
		return maxTotal * maxExceedCap / 100;
	};
	
	return UbcBorderPath;
}, true);

}; // end of sap/gantt/shape/ext/ubc/UbcBorderPath.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.ubc.UbcPolygon') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.ubc.UbcPolygon'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ext/ubc/UbcPolygon",[
	"sap/gantt/misc/Utility", "sap/gantt/shape/Polygon"
], function(Utility, Polygon){
	"use strict";

	/**
	 * Creates and initializes a fragment of the Utilization Line Chart.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings of the new control
	 * 
	 * @class 
	 * Base class for <code> sap.gantt.shape.ext.ubc.UbcOverCapacityZonePolygon</code>, <code> sap.gantt.shape.ext.ubc.UbcUnderCapacityZonePolygon</code>,
	 * <code> sap.gantt.shape.ext.ubc.UbcShortagePolygon</code>, <code> sap.gantt.shape.ext.ubc.UbcUsedPolygon</code>.
	 * 
	 * <p>This base class defines a number of shared methods. 
	 * </p>
	 * 
	 * @extends sap.gantt.shape.Polygon
	 * @abstract
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.ubc.UbcPolygon
	 */
	var UbcPolygon = Polygon.extend("sap.gantt.shape.ext.ubc.UbcPolygon", /** @lends sap.gantt.shape.ext.ubc.UbcPolygon.prototype */ {
		metadata: {
			"abstract": true
		}
	});

	/**
	 * Gets the value of property <code>enableSelection</code>.
	 * 
	 * <p>
	 * This property determines whether a shape is enabled for a selection behavior. The default value for a Utilization Line Chart is false.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {boolean} Value of property <code>enableSelection</code>.
	 * @public
	 */
	UbcPolygon.prototype.getEnableSelection = function (oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("enableSelection")) {
			return this._configFirst("enableSelection", oData);
		}
		
		return false;
	};

	UbcPolygon.prototype._getMaxY = function(oData, oRowInfo) {
		var topCapacityY = oRowInfo.y;
		var drawRowHeight = oRowInfo.rowHeight - 1;
		var maxY = topCapacityY + drawRowHeight;
		return maxY;
	};

	UbcPolygon.prototype._getMaxTotal = function(oData) {
		var maxTotal = Math.max.apply(Math,
				oData.period.map(function(obj){
					return obj.supply;
				}));
		if (maxTotal <= 0 ) {
			maxTotal = 1;
		}
		
		return maxTotal;
	};

	UbcPolygon.prototype._getmaxExceedCap = function(oData, total) {
		var maxTotal;
		if (total){
			maxTotal = total;
		}else {
			maxTotal = this._getMaxTotal(oData);
		}
		var maxExceedCap = 25;
		if (this.mShapeConfig.hasShapeProperty("maxExceedCapacity")){
			maxExceedCap = this._configFirst("maxExceedCapacity", oData);
		}
		
		return maxTotal * maxExceedCap / 100;
	};

	UbcPolygon.prototype._getMaxTotalRevised = function(oData) {
		var maxTotal = this._getMaxTotal(oData);
		var maxTotalRevised = this._getmaxExceedCap(oData, maxTotal) + maxTotal;
		return maxTotalRevised;
	};

	return UbcPolygon;
}, true);

}; // end of sap/gantt/shape/ext/ubc/UbcPolygon.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.ubc.UbcShortageCapacityPolygon') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.ubc.UbcShortageCapacityPolygon'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ext/ubc/UbcShortageCapacityPolygon",[
	"sap/gantt/misc/Utility", "sap/gantt/misc/Format", "sap/gantt/shape/ext/ubc/UbcPolygon"
], function(Utility, Format, UbcPolygon){
	"use strict";
	
	/**
	 * Creates and initializes a fragment of the Utilization Line Chart.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings of the new control
	 * 
	 * @class 
	 * This shape is used to represent a shortage capacity area.
	 * 
	 * <p>
	 * Graphic Effect is:<br/>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="8.8cm" viewBox="0 0 300 220" version="1.1">
	 * <defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * 	<marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * 	<style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * 	.arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63;fill:none} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * 	<rect x="1" y="1" width="298" height="218" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<defs><pattern class="pattern" id="pUbc" patternUnits="userSpaceOnUse" x="0" y="0" width="4" height="4"><rect x="0" width="4" height="4" fill="#efefef"></rect><path d="M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2 " stroke="#6d6d6d" stroke-width="0.5"></path></pattern>
	 * 	<pattern class="pattern" id="pEx2" patternUnits="userSpaceOnUse" x="0" y="0" width="4" height="4"><rect x="0" width="4" height="4" fill="#f2a5a5"></rect><path d="M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2 " stroke="#9E1F63" stroke-width="0.5"></path></pattern></defs>
	 * 	<path d="M 10 65 h 280 v 90 h -280 z" class="dashside" />
	 * 	<polygon points="10,65 290,65 290,155 10,155" fill="url(#pUbc)" />
	 * 	<polygon points="10,155 10,90 50,90 50,155 130,155 130,80 170,80 170,155 250,155 250,80 290,80 290,155" fill="url(#pEx2)" />
	 * </svg>
	 * </p>
	 * 
	 * @extends sap.gantt.shape.ext.ubc.UbcPolygon
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.ubc.UbcShortageCapacityPolygon
	 */
	var UbcShortageCapacityPolygon = UbcPolygon.extend("sap.gantt.shape.ext.ubc.UbcShortageCapacityPolygon", /** @lends sap.gantt.shape.ext.ubc.UbcShortageCapacityPolygon.prototype */ {});

	/**
	 * Gets the value of property <code>fill</code>.
	 * 
	 * <p> 
	 * Standard SVG 'fill' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#FillProperty SVG 1.1 specification for 'fill'}.
	 * <b>Note:</b> You can provide the fill attribute with HTML colors and the URL reference to a paint server. Paint server definitions can be retrieved from paint servers rendered by
	 * {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable}, or {@link sap.gantt.GanttChart}.
	 * </p>
	 * <p>The default value is "#FF0000".</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {string} Value of property <code>fill</code>.
	 * @public
	 */
	UbcShortageCapacityPolygon.prototype.getFill = function (oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("fill")){
			return this._configFirst("fill", oData);
		}
		
		return "#FF0000";
	};

	/**
	 * Gets current value of property <code>stroke</code>.
	 * 
	 * <p>
	 * Standard SVG 'stroke' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeProperty SVG 1.1 specification for 'stroke'}.
	 * <b>Note:</b> HTML color and url reference to paint server can be provided to stroke. Paint server definitions usually comes from paint servers rendered by
	 * {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable} or {@link sap.gantt.GanttChart}.
	 * </p>
	 * <p>The default value is "#CAC7BA".</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>stroke</code>.
	 * @public
	 */
	UbcShortageCapacityPolygon.prototype.getStroke = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("stroke")){
			return this._configFirst("stroke", oData);
		}
		return "#CAC7BA";
	};

	/**
	 * Gets the value of property <code>strokeWidth</code>.
	 * 
	 * <p>
	 * Standard SVG 'stroke-width' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeWidthProperty SVG 1.1 specification for 'stroke-width'}.
	 * </p>
	 * <p>The default value is 0.3.</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>strokeWidth</code>.
	 * @public
	 */
	UbcShortageCapacityPolygon.prototype.getStrokeWidth = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("strokeWidth")){
			return this._configFirst("strokeWidth", oData);
		}
		return 0.3;
	};

	/**
	 * Gets current value of property <code>points</code>.
	 * 
	 * <p>
	 * points attribute of polygon element.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#PolygonElementPointsAttribute SVG 1.1 specification for the 'points' attribute of 'polygon'}.
	 * The value of 'points' is calculated by using the coordinates of all points for the shortage capacity area.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>points</code>.
	 * @public
	 */
	UbcShortageCapacityPolygon.prototype.getPoints = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("points")) {
			return this._configFirst("points", oData);
		}
		
		var overCapacityPoints = "";
		var maxY = this._getMaxY(oData, oRowInfo);
		var topCapacityY = oRowInfo.y;
		var maxTotalRevised = this._getMaxTotalRevised(oData);
		var drawRowHeight = oRowInfo.rowHeight - 1;
		
		var drawData = oData.period;
		var oAxisTime = this.mChartInstance.getAxisTime();
		for (var i = 0; i < drawData.length; i++) {
			var periodData = drawData[i];
			var xPointStart, xPointEnd;
			xPointStart = oAxisTime.timeToView(Format.abapTimestampToDate(periodData.start_date)).toFixed(1);
			if (i < drawData.length - 1) {
				xPointEnd = oAxisTime.timeToView(Format.abapTimestampToDate(drawData[i + 1].start_date)).toFixed(1);
			}else {
				xPointEnd = oAxisTime.timeToView(Format.abapTimestampToDate(drawData[i].start_date)).toFixed(1);
			}
			
			if ( isNaN(xPointStart) || !xPointStart) {
				xPointStart = oAxisTime.timeToView(0).toFixed(1);
			}
			if ( isNaN(xPointEnd) || !xPointStart) {
				xPointEnd = oAxisTime.timeToView(0).toFixed(1);
			}
			
			if (i === 0) {
				overCapacityPoints += xPointStart + "," + maxY + " ";
			}
			
			var capacityY = maxY;
			if (periodData.demand > periodData.supply) {
				if  ( periodData.demand / maxTotalRevised > 1 ) {
					capacityY = topCapacityY;
				} else {
					capacityY = maxY - periodData.demand / maxTotalRevised * drawRowHeight;
				}
			}
			capacityY = capacityY.toFixed(1);
			
			overCapacityPoints += xPointStart + "," + capacityY + " ";
			overCapacityPoints += xPointEnd + "," + capacityY + " ";
			
			if (i === drawData.length - 1) {
				overCapacityPoints += xPointStart + "," + capacityY + " ";
				overCapacityPoints += xPointStart + "," + maxY + " ";
			}
		}
		return overCapacityPoints;
	};
	
	return UbcShortageCapacityPolygon;
}, true);

}; // end of sap/gantt/shape/ext/ubc/UbcShortageCapacityPolygon.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.ubc.UbcTooltipRectangle') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.ubc.UbcTooltipRectangle'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ext/ubc/UbcTooltipRectangle",[
	"sap/gantt/misc/Utility", "sap/gantt/misc/Format", "sap/gantt/shape/Rectangle"
], function(Utility, Format, Rectangle){
	"use strict";
	
	/**
	 * Creates and initializes a fragment of the Utilization Line Chart.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings of the new control
	 * 
	 * @class 
	 * This shape is used to represent an invisible rectangle with tooltips. Note that a tooltip appears 
	 * only when the title tag is specified on the rectangle.
	 * 
	 * <p>
	 * Graphic Effect is:<br/>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="8.8cm" viewBox="0 0 300 220" version="1.1">
	 * 	<defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * 	<marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * 	<style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * 	.arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63;fill:none} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * 	<rect x="1" y="1" width="298" height="218" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<defs><pattern class="pattern" id="pUbc" patternUnits="userSpaceOnUse" x="0" y="0" width="4" height="4"><rect x="0" width="4" height="4" fill="#efefef"></rect><path d="M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2 " stroke="#6d6d6d" stroke-width="0.5"></path></pattern>
	 * 	<pattern class="pattern" id="pEx2" patternUnits="userSpaceOnUse" x="0" y="0" width="4" height="4"><rect x="0" width="4" height="4" fill="#f2a5a5"></rect><path d="M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2 " stroke="#9E1F63" stroke-width="0.5"></path></pattern></defs>
	 * 	<path d="M 10 65 h 280 v 90 h -280 z" class="dashside" />
	 * 	<polygon points="10,65 290,65 290,155 10,155" fill="url(#pUbc)" />
	 * 	<path d="M 10 105 h 40 v 5 h 80 v -20 h 40 v -10 h 40 v 20 h 80" class="dashassist" />
	 * 	<path d="M 10 90 h 40 v 55 h 80 v -65 h 40 v 40 h 40 v -20 h 40 v -20 h 40" class="side" />
	 * 	<rect x="10" y="65" width="40" height="90" fill="#cdcdcd" fill-opacity="0.5" stroke="#cdcdcd" stroke-width="0.5"><title>Capacity: 50&#10;Required Capacity: 65</title></rect>
	 * 	<rect x="50" y="65" width="80" height="90" fill="#cdcdcd" fill-opacity="0.5" stroke="#cdcdcd" stroke-width="0.5"><title>Capacity: 45&#10;Required Capacity: 10</title></rect>
	 * 	<rect x="130" y="65" width="40" height="90" fill="#cdcdcd" fill-opacity="0.5" stroke="#cdcdcd" stroke-width="0.5"><title>Capacity: 65&#10;Required Capacity: 75</title></rect>
	 * 	<rect x="170" y="65" width="40" height="90" fill="#cdcdcd" fill-opacity="0.5" stroke="#cdcdcd" stroke-width="0.5"><title>Capacity: 75&#10;Required Capacity: 35</title></rect>
	 * 	<rect x="210" y="65" width="40" height="90" fill="#cdcdcd" fill-opacity="0.5" stroke="#cdcdcd" stroke-width="0.5"><title>Capacity: 55&#10;Required Capacity: 55</title></rect>
	 * 	<rect x="250" y="65" width="40" height="90" fill="#cdcdcd" fill-opacity="0.5" stroke="#cdcdcd" stroke-width="0.5"><title>Capacity: 55&#10;Required Capacity: 75</title></rect>
	</svg>
	 * </p>
	 * 
	 * @extends sap.gantt.shape.Rectangle
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.ubc.UbcTooltipRectangle
	 */
	var UbcTooltipRectangle = Rectangle.extend("sap.gantt.shape.ext.ubc.UbcTooltipRectangle", /** @lends sap.gantt.shape.ext.ubc.UbcTooltipRectangle.prototype */ {});

	UbcTooltipRectangle.prototype.init = function(){
		this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.gantt");
	};	

	/**
	 * Gets the value of property <code>enableSelection</code>.
	 * 
	 * <p>
	 * This property determines whether a shape is enabled for a selection behavior. The default value for the Utilization Line Chart is false.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {boolean} Value of property <code>enableSelection</code>.
	 * @public
	 */
	UbcTooltipRectangle.prototype.getEnableSelection = function (oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("enableSelection")) {
			return this._configFirst("enableSelection", oData);
		}
		
		return false;
	};

	/**
	 * Gets the value of property <code>x</code>.
	 * 
	 * <p>
	 * x coordinate of the top-left point of a rectangle.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#RectElementXAttribute SVG 1.1 specification for the 'x' attribute of 'rect'}.
	 * 
	 * Your application should not configure this value. Instead, the getter calculates the value of x by using property <code>start_date</code>.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {number} Value of property <code>x</code>.
	 * @public
	 */
	UbcTooltipRectangle.prototype.getX = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("x")) {
			return this._configFirst("x", oData);
		}
		
		var oAxisTime = this.mChartInstance.getAxisTime();
		var x = oAxisTime.timeToView(Format.abapTimestampToDate(oData.start_date)).toFixed(1);
		if ( isNaN(x) || !x) {
			x = this.axisTime.timeToView(0).toFixed(1);
		}
		return x;
	};

	/**
	 * Gets the value of property <code>y</code>.
	 * 
	 * <p>
	 * y coordinate of the top-left point of a rectangle.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#RectElementYAttribute SVG 1.1 specification for the 'y' attribute of 'rect'}.
	 * 
	 * Your application should not configure this value. Instead, the getter calculates the value of y by using parameter <code>oRowInfo</code>.
	 * </p>
	 * <p>The default value is the y coordinate of the top-left point of the row.</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>y</code>.
	 * @public
	 */
	UbcTooltipRectangle.prototype.getY = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("y")) {
			return this._configFirst("y", oData);
		}
		
		return oRowInfo.y;
	};

	/**
	 * Gets the value of property <code>width</code>.
	 * 
	 * <p>
	 * Width of a rectangle.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#RectElementWidthAttribute SVG 1.1 specification for the 'width' attribute of 'rect'}.
	 * 
	 * Your application should not configure this value. Instead, the getter calculates the width by using property <code>start_date</code> and
	 * property <code>end_date</code>. If your application overwrites the getter by configuration or code, accurate results cannot be guaranteed.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>width</code>.
	 * @public
	 */
	UbcTooltipRectangle.prototype.getWidth = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("width")) {
			return this._configFirst("width", oData);
		}
		
		var width, startX, endX;
		var oAxisTime = this.mChartInstance.getAxisTime();
		startX = oAxisTime.timeToView(Format.abapTimestampToDate(oData.start_date)).toFixed(1);
		endX = oAxisTime.timeToView(Format.abapTimestampToDate(oData.end_date)).toFixed(1);
		if ( isNaN(startX) || !startX) {
			startX = this.axisTime.timeToView(0).toFixed(1);
		}
		if ( isNaN(endX) || !endX) {
			endX = this.axisTime.timeToView(0).toFixed(1);
		}
		
		width = (endX - startX > 0) ? (endX - startX) : (startX - endX);
		
		if ((width === 0) || isNaN(width)) {
			width = 1;
		}
		return width;
	};

	/**
	 * Gets the value of property <code>height</code>.
	 * 
	 * <p>
	 * Height of a rectangle.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#RectElementHeightAttribute SVG 1.1 specification for the 'height' attribute of 'rect'}.
	 * </p>
	 * <p>The default value is the height of the row minus 1px, which is the width of stroke.</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>height</code>.
	 * @public
	 */
	UbcTooltipRectangle.prototype.getHeight = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("height")) {
			return this._configFirst("height", oData);
		}
		return oRowInfo.rowHeight - 1;
	};

	/**
	 * Gets the value of property <code>strokeOpacity</code>.
	 * 
	 * <p>
	 * Standard SVG 'stroke-Opacity' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeOpacityProperty SVG 1.1 specification for 'stroke-opacity'}.
	 * The value of strokeOpacity for a rectangle with tooltips must be 0.
	 * </p>
	 * <p>The default value is 0.</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>strokeOpacity</code>.
	 * @public
	 */
	UbcTooltipRectangle.prototype.getStrokeOpacity = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("strokeOpacity")) {
			return this._configFirst("strokeOpacity", oData);
		}
		return 0;
	};
	
	/**
	 * Gets the value of property <code>fillOpacity</code>.
	 * 
	 * <p>
	 * Standard SVG 'fill-Opacity' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#FillOpacityProperty SVG 1.1 specification for 'fill-opacity'}.
	 * The value of fillOpacity for a rectangle with tooltips must be 0.
	 * </p>
	 * <p>The default value is 0.</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>fillOpacity</code>.
	 * @public
	 */
	UbcTooltipRectangle.prototype.getFillOpacity = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("fillOpacity")) {
			return this._configFirst("fillOpacity", oData);
		}
		return 0;
	};

	/**
	 * Gets the value of property <code>title</code>.
	 * 
	 * A title is visualized as a tooltip in web browsers.
	 * <b>Notes:</b> Use character entities to perform simple text tabbing and breaking. (Use "&#09;" for tab and "&#10;" for break.)
	 * See {@link http://www.w3.org/TR/SVG/struct.html#TitleElement SVG 1.1 specification for 'title'}.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>title</code>.
	 * @public
	 */
	UbcTooltipRectangle.prototype.getTitle = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("title")) {
			return this._configFirst("title", oData);
		}
		var retVal = this._oRb.getText("TLTP_CAPACITY", [oData.supply, oData.demand]);
		if (oData.demand > oData.supply) {
			retVal += this._oRb.getText("TLTP_OVER_CAPACITY", [oData.demand - oData.supply]);
		}
		return retVal;
	}; 
	
	return UbcTooltipRectangle;
}, true);

}; // end of sap/gantt/shape/ext/ubc/UbcTooltipRectangle.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.ubc.UbcUnderCapacityZonePolygon') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.ubc.UbcUnderCapacityZonePolygon'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ext/ubc/UbcUnderCapacityZonePolygon",[
	"sap/gantt/misc/Utility", "sap/gantt/misc/Format", "sap/gantt/shape/ext/ubc/UbcPolygon"
], function(Utility, Format, UbcPolygon){
	"use strict";

	/**
	 * Creates and initializes a fragment of the Utilization Line Chart.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings of the new control
	 * 
	 * @class 
	 * This shape is used to represent an unplanned capacity area.
	 * 
	 * <p>
	 * Graphic Effect is:<br/>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="8.8cm" viewBox="0 0 300 220" version="1.1">
	 * <defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * 	<marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * 	<style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * 	.arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63;fill:none} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * 	<rect x="1" y="1" width="298" height="218" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<defs><pattern class="pattern" id="pUbc" patternUnits="userSpaceOnUse" x="0" y="0" width="4" height="4"><rect x="0" width="4" height="4" fill="#efefef"></rect><path d="M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2 " stroke="#6d6d6d" stroke-width="0.5"></path></pattern>
	 * 	<pattern class="pattern" id="pEx2" patternUnits="userSpaceOnUse" x="0" y="0" width="4" height="4"><rect x="0" width="4" height="4" fill="#f2a5a5"></rect><path d="M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2 " stroke="#9E1F63" stroke-width="0.5"></path></pattern></defs>
	 * 	<path d="M 10 65 h 280 v 90 h -280 z" class="dashside" />
	 * 	<polygon points="10,65 290,65 290,155 10,155" fill="url(#pUbc)" />
	 * 	<polygon points="50,155 50,110 130,110 130,155 170,155 170,80 210,80 210,155" fill="#ffffff" />
	 * </svg>
	 * </p>
	 * 
	 * @extends sap.gantt.shape.ext.ubc.UbcPolygon
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.ubc.UbcUnderCapacityZonePolygon
	 */
	var UbcUnderCapacityZonePolygon = UbcPolygon.extend("sap.gantt.shape.ext.ubc.UbcUnderCapacityZonePolygon", /** @lends sap.gantt.shape.ext.ubc.UbcUnderCapacityZonePolygon.prototype */ {});

	/**
	 * Gets the value of property <code>fill</code>.
	 * 
	 * <p> 
	 * Standard SVG 'fill' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#FillProperty SVG 1.1 specification for 'fill'}.
	 * <b>Note:</b> You can provide the fill attribute with HTML colors and the URL reference to a paint server. Paint server definitions can be retrieved from paint servers rendered by
	 * {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable}, or {@link sap.gantt.GanttChart}.
	 * </p>
	 * <p>The default value is "#40d44c".</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>fill</code>.
	 * @public
	 */
	UbcUnderCapacityZonePolygon.prototype.getFill = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("fill")){
			return this._configFirst("fill", oData);
		}
		
		return "#40d44c";
	};

	/**
	 * Gets the value of property <code>points</code>.
	 * 
	 * <p>
	 * points attribute of the polygon element.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#PolygonElementPointsAttribute SVG 1.1 specification for the 'points' attribute of 'polygon'}.
	 * The value of 'points' is calculated by using the coordinates of all points of the unplanned capacity area.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>points</code>.
	 * @public
	 */
	UbcUnderCapacityZonePolygon.prototype.getPoints = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("points")) {
			return this._configFirst("points", oData);
		}
		
		var overCapacityPoints = "";
		var maxY = this._getMaxY(oData, oRowInfo);
		var maxTotalRevised = this._getMaxTotalRevised(oData);
		var drawRowHeight = oRowInfo.rowHeight - 1;
		
		var drawData = oData.period;
		var oAxisTime = this.mChartInstance.getAxisTime();
		for (var i = 0; i < drawData.length; i++) {
			var periodData = drawData[i];
			var xPointStart, xPointEnd;
			xPointStart = oAxisTime.timeToView(Format.abapTimestampToDate(periodData.start_date)).toFixed(1);
			if (i < drawData.length - 1) {
				xPointEnd = oAxisTime.timeToView(Format.abapTimestampToDate(drawData[i + 1].start_date)).toFixed(1);
			}else {
				xPointEnd = oAxisTime.timeToView(Format.abapTimestampToDate(drawData[i].start_date)).toFixed(1);
			}
			
			if ( isNaN(xPointStart) || !xPointStart) {
				xPointStart = oAxisTime.timeToView(0).toFixed(1);
			}
			if ( isNaN(xPointEnd) || !xPointStart) {
				xPointEnd = oAxisTime.timeToView(0).toFixed(1);
			}
			
			if (i === 0) {
				overCapacityPoints += xPointStart + "," + maxY + " ";
			}
			
			var capacityY = maxY - periodData.supply / maxTotalRevised * drawRowHeight;
			capacityY = capacityY.toFixed(1);
			
			overCapacityPoints += xPointStart + "," + capacityY + " ";
			overCapacityPoints += xPointEnd + "," + capacityY + " ";
			
			if (i === drawData.length - 1) {
				overCapacityPoints += xPointStart + "," + capacityY + " ";
				overCapacityPoints += xPointStart + "," + maxY + " ";
			}
		}
		return overCapacityPoints;
	};
	
	return UbcUnderCapacityZonePolygon;
}, true);

}; // end of sap/gantt/shape/ext/ubc/UbcUnderCapacityZonePolygon.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.ubc.UbcUsedPolygon') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.ubc.UbcUsedPolygon'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ext/ubc/UbcUsedPolygon",[
	"sap/gantt/misc/Utility", "sap/gantt/misc/Format", "sap/gantt/shape/ext/ubc/UbcPolygon"
], function(Utility, Format, UbcPolygon){
	"use strict";
	
	/**
	 * Creates and initializes a fragment of the Utilization Line Chart.
	 * 
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings of the new control
	 * 
	 * @class 
	 * This shape is used to represent a healthy planned capacity area.
	 * 
	 * <p>
	 * Graphic Effect is:<br/>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="8.8cm" viewBox="0 0 300 220" version="1.1">
	 * <defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * 	<marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * 	<style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * 	.arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63;fill:none} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * 	<rect x="1" y="1" width="298" height="218" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<defs><pattern class="pattern" id="pUbc" patternUnits="userSpaceOnUse" x="0" y="0" width="4" height="4"><rect x="0" width="4" height="4" fill="#efefef"></rect><path d="M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2 " stroke="#6d6d6d" stroke-width="0.5"></path></pattern>
	 * 	<pattern class="pattern" id="pEx2" patternUnits="userSpaceOnUse" x="0" y="0" width="4" height="4"><rect x="0" width="4" height="4" fill="#f2a5a5"></rect><path d="M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2 " stroke="#9E1F63" stroke-width="0.5"></path></pattern></defs>
	 * 	<path d="M 10 65 h 280 v 90 h -280 z" class="dashside" />
	 * 	<polygon points="10,65 290,65 290,155 10,155" fill="url(#pUbc)" />
	 * 	<polygon points="10,105 50,105 50,145 130,145 130,90 170,90 170,120 210,120 210,100 290,100 290,155 10,155" fill="#efefef" />
	 * </svg>
	 * </p>
	 * 
	 * @extends sap.gantt.shape.ext.ubc.UbcPolygon
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.ubc.UbcUsedPolygon
	 */
	var UbcUsedPolygon = UbcPolygon.extend("sap.gantt.shape.ext.ubc.UbcUsedPolygon", /** @lends sap.gantt.shape.ext.ubc.UbcUsedPolygon.prototype */ {});

	/**
	 * Gets the value of property <code>fill</code>.
	 * 
	 * <p> 
	 * Standard SVG 'fill' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#FillProperty SVG 1.1 specification for 'fill'}.
	 * <b>Note:</b> You can provide the fill attribute with HTML colors and the URL reference to a paint server. Paint server definitions can be retrieved from paint servers rendered by
	 * {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable}, or {@link sap.gantt.GanttChart}.
	 * </p>
	 * <p>The default value is "#CAC7BA".</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>fill</code>.
	 * @public
	 */
	UbcUsedPolygon.prototype.getFill = function (oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("fill")){
			return this._configFirst("fill", oData);
		}
		
		return "#CAC7BA";
	};

	/**
	 * Gets the value of property <code>points</code>.
	 * 
	 * <p>
	 * points attribute of polygon element.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#PolygonElementPointsAttribute SVG 1.1 specification for 'points' attribute of 'polygon'}.
	 * The value of 'points' is calculated by using the coordinates of all points for the healthy planned capacity area.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>points</code>.
	 * @public
	 */
	UbcUsedPolygon.prototype.getPoints = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("points")) {
			return this._configFirst("points", oData);
		}
		
		var usedPoints = "";
		var maxY = this._getMaxY(oData, oRowInfo);
		var maxTotalRevised = this._getMaxTotalRevised(oData);
		var drawRowHeight = oRowInfo.rowHeight - 1;
		
		var drawData = oData.period;
		var oAxisTime = this.mChartInstance.getAxisTime();
		for (var i = 0; i < drawData.length; i++) {
			var periodData = drawData[i];
			var xPointStart, xPointEnd;
			var usedResY;
			xPointStart = oAxisTime.timeToView(Format.abapTimestampToDate(periodData.start_date)).toFixed(1);
			if (i < drawData.length - 1) {
				xPointEnd = oAxisTime.timeToView(Format.abapTimestampToDate(drawData[i + 1].start_date)).toFixed(1);
			}else {
				xPointEnd = oAxisTime.timeToView(Format.abapTimestampToDate(drawData[i].start_date)).toFixed(1);
			}

			if ( isNaN(xPointStart) || !xPointStart) {
				xPointStart = oAxisTime.timeToView(0).toFixed(1);
			}
			if ( isNaN(xPointEnd) || !xPointStart) {
				xPointEnd = oAxisTime.timeToView(0).toFixed(1);
			}
			
			if (i === 0) {
				usedPoints += xPointStart + "," + maxY + " ";
			}
			
			if (periodData.demand >= periodData.supply) {
				usedResY = maxY - periodData.supply / maxTotalRevised * drawRowHeight;
			} else {
				usedResY = maxY - periodData.demand / maxTotalRevised * drawRowHeight;
			}
			usedResY = usedResY.toFixed(1);
			
			usedPoints += xPointStart + "," + usedResY + " ";
			usedPoints += xPointEnd + "," + usedResY + " ";
			
			if (i === drawData.length - 1) {
				usedPoints += xPointStart + "," + usedResY + " ";
				usedPoints += xPointStart + "," + maxY + " ";
			}
		}	
		return usedPoints;
	};
	
	return UbcUsedPolygon;
}, true);

}; // end of sap/gantt/shape/ext/ubc/UbcUsedPolygon.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.ubc.UtilizationBarChart') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.ubc.UtilizationBarChart'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ext/ubc/UtilizationBarChart",[
	"sap/gantt/shape/Group"
], function(Group) {
	"use strict";

	/**
	 * Creates and initializes a new Utilization Bar Chart (UBC) container class.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings of the new control
	 * 
	 * @class 
	 * UBC is a complex shape. This class is the outer container with tag='g'. All fragments are aggregated into this container.
	 * You can remove a fragment from the container if your application does not need it. 
	 * 
	 * <p>The container has six aggregations: 
	 * <ul>
	 * 		<li>{@link sap.gantt.shape.ext.ubc.UbcOverCapacityZonePolygon}(used to represent the OverCapacity Zone area),</li>
	 * 		<li>{@link sap.gantt.shape.ext.ubc.UbcUnderCapacityZonePolygon}(used to represent the Unplanned Capacity area),</li>
	 * 		<li>{@link sap.gantt.shape.ext.ubc.UbcShortageCapacityPolygon}(used to the draw Shortage area),</li>
	 * 		<li>{@link sap.gantt.shape.ext.ubc.UbcUsedPolygon}(used to represent the HealthyPlanned Capacity area),</li>
	 * 		<li>{@link sap.gantt.shape.ext.ubc.UbcBorderPath}(used to represent the planned capacity line),</li>
	 * 		<li>{@link sap.gantt.shape.ext.ubc.UbcTooltipRectangle}(used to represent a rectangle with invisible tooltips for each period of capacity change).</li>
	 * </ul>
	 * </p>
	 * 
	 * <p>A super class <code> sap.gantt.shape.ext.ubc.UbcPolygon</code> is abstracted because the four polygons in this container (UbcOverCapacityZonePolygon, 
	 * UbcUnderCapacityZonePolygon, UbcShortageCapacityPolygon, and UbcUsedPolygon) share similar logic.</p>
	 * 
	 * <p>
	 * Graphic Effect is:<br/>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="8.8cm" viewBox="0 0 300 220" version="1.1">
	 * <defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * 	<marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * 	<style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * 	.arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63;fill:none} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * <rect x="1" y="1" width="298" height="218" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<defs><pattern class="pattern" id="pUbc" patternUnits="userSpaceOnUse" x="0" y="0" width="4" height="4"><rect x="0" width="4" height="4" fill="#efefef"></rect><path d="M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2 " stroke="#6d6d6d" stroke-width="0.5"></path></pattern>
	 * 	<pattern class="pattern" id="pEx2" patternUnits="userSpaceOnUse" x="0" y="0" width="4" height="4"><rect x="0" width="4" height="4" fill="#f2a5a5"></rect><path d="M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2 " stroke="#9E1F63" stroke-width="0.5"></path></pattern></defs>
	 * 	<polygon points="10,65 290,65 290,155 10,155" fill="url(#pUbc)" />
	 * 	<polygon points="50,155 50,110 130,110 130,155 170,155 170,80 210,80 210,155" fill="#ffffff" />
	 * 	<polygon points="10,155 10,90 50,90 50,155 130,155 130,80 170,80 170,155 250,155 250,80 290,80 290,155" fill="url(#pEx2)" />
	 * 	<polygon points="10,105 50,105 50,145 130,145 130,90 170,90 170,120 210,120 210,100 290,100 290,155 10,155" fill="#efefef" />
	 * 	<path d="M 10 90 h 40 v 55 h 80 v -65 h 40 v 40 h 40 v -20 h 40 v -20 h 40" class="side" />
	 * 	<rect x="10" y="65" width="40" height="90" opacity="0"><title>Capacity: 50&#10;Required Capacity: 65</title></rect>
	 * 	<rect x="50" y="65" width="80" height="90" opacity="0"><title>Capacity: 45&#10;Required Capacity: 10</title></rect>
	 * 	<rect x="130" y="65" width="40" height="90" opacity="0"><title>Capacity: 65&#10;Required Capacity: 75</title></rect>
	 * 	<rect x="170" y="65" width="40" height="90" opacity="0"><title>Capacity: 75&#10;Required Capacity: 35</title></rect>
	 * 	<rect x="210" y="65" width="40" height="90" opacity="0"><title>Capacity: 55&#10;Required Capacity: 55</title></rect>
	 * 	<rect x="250" y="65" width="40" height="90" opacity="0"><title>Capacity: 55&#10;Required Capacity: 75</title></rect>
	 * 	<path d="M 20 80 l 10 -30 m 120 0 l -10 30 m 140 10 l -10 -40 m -10 90 l -10 30 m -150 0 l -10 -30" class="dashassist" />
	 * 	<text x="20" y="40" class="propertyText">OverCapacity</text>
	 * 	<text x="40" y="60" class="propertyText">Zone</text>
	 * 	<text x="140" y="40" class="propertyText">Planned</text>
	 * 	<text x="160" y="60" class="propertyText">Capacity</text>
	 * 	<text x="220" y="40" class="propertyText">Shortage</text>
	 * 	<text x="180" y="190" class="propertyText">HealthyPlanned</text>
	 * 	<text x="200" y="210" class="propertyText">Capacity</text>
	 * 	<text x="60" y="190" class="propertyText">UnPlanned</text>
	 * 	<text x="80" y="210" class="propertyText">Capacity</text>
	 * </svg>
	 * </p>
	 * 
	 * <p>An example of the structure of data to feed utilization bar chart: </br>
	 * <code>
	 * {	
	 * 		bc_capacity: {
	 * 			id: "capacity_0",
	 * 			period: [
	 * 				{
	 * 					start_date: "20160123000000",
	 * 					supply: "9",
	 * 					demand: "7"
	 * 				},{
	 * 					start_date: "20160127093400",
	 * 					supply: "8",
	 * 					demand: "8"
	 * 				}
	 * 			]
	 * 		},
	 * 		bc_tooltip: [
	 * 				{
	 * 					start_date: "20160123000000",
	 * 					supply: "9",
	 * 					demand: "7",
	 * 					end_date: "20160127093400"
	 * 				},{
	 * 					start_date: "20160127093400",
	 * 					supply: "8",
	 * 					demand: "8",
	 * 					start_date: "20160203134520"
	 * 				}
	 * 		]
	 * }
	 * </code>
	 * </p>
	 * 
	 * @extends sap.gantt.shape.Group
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.ubc.UtilizationBarChart
	 */
	var UtilizationBarChart = Group.extend("sap.gantt.shape.ext.ubc.UtilizationBarChart", /** @lends sap.gantt.shape.ext.ubc.UtilizationBarChart.prototype */ {});

	/**
	 * Gets the value of property <code>enableSelection</code>.
	 * 
	 * <p>
	 * This property determines whether a shape is enabled for selection behavior. The default value for the Utilization Line Chart is false.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {boolean} Value of property <code>enableSelection</code>.
	 * @public
	 */
	UtilizationBarChart.prototype.getEnableSelection = function(oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("enableSelection")){
			return this._configFirst("enableSelection", oData);
		}
		
		return false;
	};

	UtilizationBarChart.prototype.filterValidData = function (aData/*, oProperty, aTimeBoundary, oYAxis, oObjectInfo*/){
		if (!aData) {
			return [];
		}
		var aFilterData = [];
		for (var i = 0; i < aData.length; i++) {
			var isBulk = this.getIsBulk(aData[i]);
			var sArrayAttribute = this.getArrayAttribute(aData[i]);
			var sTimeFilter = this.getTimeFilterAttribute(aData[i]);
			var sEndTimeFilter = this.getEndTimeFilterAttribute(aData[i]);
			var aTimeBoundary = this.mChartInstance._oStatusSet.aTimeBoundary;
			var oTempData = jQuery.extend(true, {}, aData[i]);

			if (isBulk && sArrayAttribute && sTimeFilter && sEndTimeFilter){
				var startArray = null;
				var endArray = null;
				var aShapes = this.getShapes();
				var aShapeDatas = [];
				for (var j = 0; j < aShapes.length; j++) {
					var dataName = aShapes[j].mShapeConfig.getShapeDataName();
					if (dataName && (jQuery.inArray(dataName, aShapeDatas) == -1)) {
						aShapeDatas.push(dataName);
					}
				}
				for (var key in oTempData) {
					if ((jQuery.type(oTempData[key]) == "object") && oTempData[key][sArrayAttribute] && oTempData[key][sArrayAttribute].length > 0) {
						startArray = this._binarySearchElement(aTimeBoundary[0], oTempData[key][sArrayAttribute], sTimeFilter, sEndTimeFilter);
						endArray = this._binarySearchElement(aTimeBoundary[1], oTempData[key][sArrayAttribute], sTimeFilter, sEndTimeFilter, startArray);

						if (startArray !== null && endArray !== null && startArray <= endArray){
							//For there is no end_date for oTempData[key][sArrayAttribute], so the endArray needs to plus 2
							oTempData[key][sArrayAttribute] = oTempData[key][sArrayAttribute].slice(startArray, endArray + 2);
							for (var k = 0; k < aShapeDatas.length; k++){
								if (key !== aShapeDatas[k] && (jQuery.type(oTempData[aShapeDatas[k]]) == "array") && oTempData[aShapeDatas[k]].length > 0) {
									oTempData[aShapeDatas[k]] = oTempData[aShapeDatas[k]].slice(startArray, endArray + 1);
								}
							}
						}
						break;
					}
				}
			}
			aFilterData.push(oTempData);
		}

		return aFilterData;
	};

	UtilizationBarChart.prototype._binarySearchElement = function (value, array, sTimeAttr, sEndTimeAttr, lowValue) {
		var low = 0;
		var high = array.length - 1;
		if (lowValue && lowValue < high) {
			low = lowValue;
		}
		var mid;
		while (low <= high) {
			mid = Math.floor((low + high) / 2);
			var startDate = sap.gantt.misc.Utility.abapTsToDate(array[mid][sTimeAttr]);
			var endDate = sap.gantt.misc.Utility.abapTsToDate(array[mid][sEndTimeAttr]);
			if (startDate <= value && value <= endDate) {
				return mid;
			} else if (endDate < value) {
				low = mid + 1;
			} else if (startDate > value) {
				high = mid - 1;
			}
		}
		return mid;
	};

	return UtilizationBarChart;
}, true);

}; // end of sap/gantt/shape/ext/ubc/UtilizationBarChart.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.ulc.UlcBorderPath') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.ulc.UlcBorderPath'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ext/ulc/UlcBorderPath",[
	"sap/gantt/shape/Path", "sap/gantt/misc/Utility", "sap/gantt/misc/Format"
], function(Path, Utility, Format){
	"use strict";

	/**
	 * Creates and initializes a fragment of the Utilization Line Chart.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings of the new control
	 * 
	 * @class 
	 * This shape is used to draw dimension lines.
	 * 
	 * <p>
	 * Graphic Effect is:<br/>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="8.8cm" viewBox="0 0 300 220" version="1.1">
	 * 	<defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * 	<marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * 	<style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * 	.arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63;fill:none} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * 	<rect x="1" y="1" width="298" height="218" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<path d="M 10 85 h 280 v -20 h -280 v 90 h 280 v -70" class="dashside" />
	 * 	<path d="M 40 155 l 25 -90 h 50 l 20 30 h 100 l 40 60" class="side" />
	 * 	<path d="M 40 155 l 25 -85 h 50 l 20 10 h 100 l 40 75" class="texthyphon" />
	 * </svg>
	 * </p>
	 * 
	 * @extends sap.gantt.shape.Path
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.ulc.UlcBorderPath
	 */
	var UlcBorderPath = Path.extend("sap.gantt.shape.ext.ulc.UlcBorderPath", /** @lends sap.gantt.shape.ext.ulc.UlcBorderPath.prototype */ {});

	/**
	 * Gets the value of property <code>d</code>.
	 * 
	 * <p>
	 * 'd' attribute of the path element.
	 * See {@link http://www.w3.org/TR/SVG/paths.html#DAttribute SVG 1.1 specification for 'd' attribute of 'path'}.
	 * The 'd' attribute has powerful usages. See {@link http://www.w3.org/TR/SVG/paths.html#PathDataBNF BNF grammar} for detail.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>d</code>.
	 * @public
	 */
	UlcBorderPath.prototype.getD = function(oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("d")){
			return this._configFirst("d", oData);
		}
		
		var retVal = "";
		if (oData.values) {
			for (var i = 0; i < oData.values.length; i++) {
				var oAxisTime = this.mChartInstance.getAxisTime();
				var xPos1 = oAxisTime.timeToView(Format.abapTimestampToDate(oData.values[i].from));
				var xPos2 = oAxisTime.timeToView(Format.abapTimestampToDate(oData.values[i].to));
				var ratio = oData.values[i].value;
				if (isNaN(ratio)){
					ratio = 0;
				}
				var maxVisibleRatio = 25;
				if (this.mShapeConfig.hasShapeProperty("maxVisibleRatio")){
					maxVisibleRatio = this._configFirst("maxVisibleRatio", oData);
				}
				if (ratio > (100 + maxVisibleRatio)) {
					ratio = 100 + maxVisibleRatio;
				}
				var yPos = oRowInfo.y + oRowInfo.rowHeight - oRowInfo.rowHeight * (ratio / (100 + maxVisibleRatio));
				var lowY = oRowInfo.y + oRowInfo.rowHeight;
				
				retVal = retVal +
						(oData.values[i].firstOne ? " M " + xPos1 + " " + lowY : "") +
						" L " + xPos1 + " " + yPos + " L " + xPos2 + " " + yPos +
						(oData.values[i].lastOne ? " L " + xPos2 + " " + lowY : "");
			}
		}
		return retVal === "" ? "M 0 0" : retVal;
	};

	/**
	 * Gets the value of property <code>stroke</code>.
	 * 
	 * <p>
	 * Standard SVG 'stroke' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeProperty SVG 1.1 specification for 'stroke'}.
	 * <b>Note:</b> You can provide stroke with HTML colors and URL references to paint servers. Paint server definitions usually comes from paint servers rendered by
	 * {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable} or {@link sap.gantt.GanttChart}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>stroke</code>.
	 * @public
	 */
	UlcBorderPath.prototype.getStroke = function(oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("stroke")){
			return this._configFirst("stroke", oData);
		}
		
		var oUtilizationCurves;
		if (this.mShapeConfig.hasShapeProperty("utilizationCurves")){
			oUtilizationCurves = this._configFirst("utilizationCurves", oData);
			return oUtilizationCurves[oData.dimension].color;
		}
	};

	/**
	 * Gets the value of property <code>strokeWidth</code>.
	 * 
	 * <p>
	 * Standard SVG 'stroke-width' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeWidthProperty SVG 1.1 specification for 'stroke-width'}.
	 * </p>
	 * <p>The default value is 1.</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>strokeWidth</code>.
	 * @public
	 */
	UlcBorderPath.prototype.getStrokeWidth = function(oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("strokeWidth")){
			return this._configFirst("strokeWidth", oData);
		}
		
		return 1;
	};

	return UlcBorderPath;
}, true);

}; // end of sap/gantt/shape/ext/ulc/UlcBorderPath.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.ulc.UlcClipPath') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.ulc.UlcClipPath'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ext/ulc/UlcClipPath",[
	"sap/gantt/shape/ClipPath"
], function(ClipPath){
	"use strict";
	
	/**
	 * Creates and initializes a fragment of the Utilization Line Chart.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings of the new control
	 * 
	 * @class 
	 * This shape is a container of {@link sap.gantt.shape.ext.ulc.UlcClipingPath}.
	 * 
	 * @extends sap.gantt.shape.ClipPath
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.ulc.UlcClipPath
	 */
	var UlcClipPath = ClipPath.extend("sap.gantt.shape.ext.ulc.UlcClipPath", /** @lends sap.gantt.shape.ext.ulc.UlcClipPath.prototype */ {});

	/**
	 * Gets the value of property <code>htmlClass</code>.
	 * 
	 * Customized HTML classes. To provide multiple classes, separate them using space. Note that each UlcClipPath must have a unique 
	 * HTML class or a unique set of HTML classes. The 'clip-path' property of UlcOverClipRectangle and UlcUnderClipRectangle identifies HTML classes.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>htmlClass</code>.
	 * @public
	 */
	UlcClipPath.prototype.getHtmlClass = function (oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("htmlClass")){
			return this._configFirst("htmlClass", oData);
		}
		
		var uid = oRowInfo.uid;
		var pattern = new RegExp("\\[|\\]|:|\\|", "g");
		var newUid = uid.replace(pattern, "_");
		
		return newUid + "_" +  oData.id + "_" + oData.dimension;
	};

	return UlcClipPath;
}, true);

}; // end of sap/gantt/shape/ext/ulc/UlcClipPath.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.ulc.UlcClipingPath') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.ulc.UlcClipingPath'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ext/ulc/UlcClipingPath",[
	"sap/gantt/shape/Path", "sap/gantt/misc/Utility", "sap/gantt/misc/Format"
], function(Path, Utility, Format){
	"use strict";
	
	/**
	 * Creates and initializes a fragment of the Utilization Line Chart.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings of the new control
	 * 
	 * @class 
	 * This shape is used to define path data inside {@link sap.gantt.shape.ext.ulc.UlcClipPath}.
	 * 
	 * @extends sap.gantt.shape.Path
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.ulc.UlcClipingPath
	 */
	var UlcClipingPath = Path.extend("sap.gantt.shape.ext.ulc.UlcClipingPath", /** @lends sap.gantt.shape.ext.ulc.UlcClipingPath.prototype */ {});

	/**
	 * Gets the value of property <code>d</code>.
	 * 
	 * <p>
	 * 'd' attribute of path element.
	 * See {@link http://www.w3.org/TR/SVG/paths.html#DAttribute SVG 1.1 specification for 'd' attribute of 'path'}.
	 * The 'd' attribute has powerful usages. See {@link http://www.w3.org/TR/SVG/paths.html#PathDataBNF BNF grammar} for detail.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>d</code>.
	 * @public
	 */
	UlcClipingPath.prototype.getD = function(oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("d")){
			return this._configFirst("d", oData);
		}
		
		var retVal = "";
		if (oData.values) {
			for (var i = 0; i < oData.values.length; i++) {
				var oAxisTime = this.mChartInstance.getAxisTime();
				var xPos1 = oAxisTime.timeToView(Format.abapTimestampToDate(oData.values[i].from));
				var xPos2 = oAxisTime.timeToView(Format.abapTimestampToDate(oData.values[i].to));
				var ratio = oData.values[i].value;
				if (isNaN(ratio)){
					ratio = 0;
				}
				var maxVisibleRatio = 25;
				if (this.mShapeConfig.hasShapeProperty("maxVisibleRatio")){
					maxVisibleRatio = this._configFirst("maxVisibleRatio", oData);
				}
				if (ratio > (100 + maxVisibleRatio)) {
					ratio = 100 + maxVisibleRatio;
				}
				var yPos = oRowInfo.y + oRowInfo.rowHeight  - oRowInfo.rowHeight  * (ratio / (100 + maxVisibleRatio));
				var lowY = oRowInfo.y + oRowInfo.rowHeight ;
				
				retVal = retVal +
						(oData.values[i].firstOne ? " M " + xPos1 + " " + lowY : "") +
						" L " + xPos1 + " " + yPos + " L " + xPos2 + " " + yPos +
						(oData.values[i].lastOne ? " L " + xPos2 + " " + lowY : "");
			}
		}
		return retVal === "" ? "M 0 0" : retVal;
	};

	return UlcClipingPath;
}, true);

}; // end of sap/gantt/shape/ext/ulc/UlcClipingPath.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.ulc.UlcDimension') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.ulc.UlcDimension'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ext/ulc/UlcDimension",[
	"sap/gantt/shape/Group"
], function(Group){
	"use strict";
	
	/**
	 * Creates and initializes a fragment of the Utilization Line Chart.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings of the new control
	 * 
	 * @class 
	 * This shape is a container for {@link sap.gantt.shape.ext.ulc.UlcBorderPath}, {@link sap.gantt.shape.ext.ulc.UlcOverClipRectangle},
	 * {@link sap.gantt.shape.ext.ulc.UlcUnderClipRectangle}, {@link sap.gantt.shape.ext.ulc.UlcClipPath}, {@link sap.gantt.shape.ext.ulc.UlcClipingPath}.
	 * 
	 * <p>For each dimension, it has two colors, one is OverCapacity and the other is UnderCapacity. When the <code>UlcClipPath</code> of a dimension and 
	 * <code>UlcOverClipRectangle</code> overlap, which means the utilization rate is above 100%, the overlapped part will be colored by OverCapacity. 
	 * The overlapped part of <code>UlcClipPath</code>  and <code>UlcUnderClipRectangle</code> is colored by UnderCapacity. 
	 * </p>
	 * 
	 * <p><code>UlcClipingPath</code> is aggregated in <code>UlcClipPath</code>. <code>UlcClipingPath</code> and <code>UlcBorderPath</code> share the same 
	 * value of property 'd'. <code>UlcBorderPath</code> is used to visualize the dimension line.
	 * </p>
	 * @extends sap.gantt.shape.Group
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.ulc.UlcDimension
	 */
	var UlcDimension = Group.extend("sap.gantt.shape.ext.ulc.UlcDimension", /** @lends sap.gantt.shape.ext.ulc.UlcDimension.prototype */ {});

	return UlcDimension;
}, true);

}; // end of sap/gantt/shape/ext/ulc/UlcDimension.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.ulc.UlcMiddleLine') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.ulc.UlcMiddleLine'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ext/ulc/UlcMiddleLine",[
	"sap/gantt/shape/Line"
], function(Line){
	"use strict";
	
	/**
	 * Creates and initializes a fragment of the Utilization Line Chart.
	 * 
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings of the new control
	 * 
	 * @class 
	 * This shape is used to draw a middle line, which indicates the position of 50%.
	 * 
	 * <p>
	 * Graphic Effect is:<br/>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="8.8cm" viewBox="0 0 300 220" version="1.1">
	 * <defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * 	<marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * 	<style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * 	.arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63;fill:none} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * 	<rect x="1" y="1" width="298" height="218" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<path d="M 10 85 h 280 v -20 h -280 v 90 h 280 v -70" class="dashside" />
	 * 	<path id="middleLine" d="M 10 120 h 280" class="dashassist" />
	 * </svg>
	 * </p>
	 * 
	 * @extends sap.gantt.shape.Line
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.ulc.UlcMiddleLine
	 */
	var UlcMiddleLine = Line.extend("sap.gantt.shape.ext.ulc.UlcMiddleLine", /** @lends sap.gantt.shape.ext.ulc.UlcMiddleLine.prototype */ {});

	/**
	 * Gets the value of property <code>x1</code>.
	 * 
	 * <p>
	 * x coordinate of the start of the line.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#LineElementX1Attribute SVG 1.1 specification for 'x1' attribute of 'line'}.
	 * 
	 * Usually an application does not configure this value. Instead, the getter calculates the value of x1 by using 
	 * the view boundary for the visible area in the Gantt Chart.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>x1</code>.
	 * @public
	 */
	UlcMiddleLine.prototype.getX1 = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("x1")){
			return this._configFirst("x1", oData);
		}
		
		var aViewRange = this.mChartInstance._oStatusSet ? this.mChartInstance._oStatusSet.aViewBoundary : [];
		if (aViewRange.length > 0){
			return aViewRange[0];
		}
		return 0;
	};

	/**
	 * Gets the value of property <code>y1</code>.
	 * 
	 * <p>
	 * y coordinate of the start of the line.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#LineElementY1Attribute SVG 1.1 specification for 'y1' attribute of 'line'}.
	 * 
	 * At the top of each row, a certain amount of space (in the shape of a rectangular frame) is reserved for over capacity area. 
	 * You can use 'maxVisibleRatio' in 'shapeConfig' to specify the amount of area to reserve. With the reserved area deducted 
	 * from a row, the height of the middle line is set to 50% of the row height.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>y1</code>.
	 * @public
	 */
	UlcMiddleLine.prototype.getY1 = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("y1")){
			return this._configFirst("y1", oData);
		}
		
		var maxVisibleRatio = 25;
		if (this.mShapeConfig.hasShapeProperty("maxVisibleRatio")){
			maxVisibleRatio = this._configFirst("maxVisibleRatio", oData);
		}
		return oRowInfo.y + oRowInfo.rowHeight  * (50 + maxVisibleRatio) / (100 + maxVisibleRatio);
	};

	/**
	 * Gets the value of property <code>x2</code>.
	 * 
	 * <p>
	 * x coordinate of the end of the line.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#LineElementX2Attribute SVG 1.1 specification for 'x2' attribute of 'line'}.
	 * 
	 * Usually an application does not configure this value. Instead, the getter calculates the value of 'x2' by using the 
	 * view boundary's terminal point, which is filtered by the visible area in a Gantt Chart.
	 * 
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>x2</code>.
	 * @public
	 */
	UlcMiddleLine.prototype.getX2 = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("x2")){
			return this._configFirst("x2", oData);
		}
		
		var aViewRange = this.mChartInstance._oStatusSet ? this.mChartInstance._oStatusSet.aViewBoundary : [];
		if (aViewRange.length > 0){
			return aViewRange[1];
		}
		return 0;
	};

	/**
	 * Gets the value of property <code>y2</code>.
	 * 
	 * <p>
	 * y coordinate of the end of the line.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#LineElementY2Attribute SVG 1.1 specification for 'y2' attribute of 'line'}.
	 * 
	 * y2 shares the same value with y1.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>y2</code>.
	 * @public
	 */
	UlcMiddleLine.prototype.getY2 = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("y2")){
			return this._configFirst("y2", oData);
		}
		
		return this.getY1(oData, oRowInfo);
	};

	/**
	 * Gets the value of property <code>strokeDasharray</code>.
	 * 
	 * <p>
	 * Standard SVG 'stroke-dasharray' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeWidthProperty SVG 1.1 specification for 'stroke-dasharray'}.
	 * </p>
	 * <p>The default value is "5,5".</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>strokeDasharray</code>.
	 * @public
	 */
	UlcMiddleLine.prototype.getStrokeDasharray = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("strokeDasharray")){
			return this._configFirst("strokeDasharray", oData);
		}
		
		return "5,5";
	};

	/**
	 * Gets the value of property <code>stroke</code>.
	 * 
	 * <p>
	 * Standard SVG 'stroke' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeProperty SVG 1.1 specification for 'stroke'}.
	 * <b>Note:</b> You can provide the stroke with HTML colors and the URL reference to a paint server. Paint server definitions can be 
	 * retrieved from paint servers rendered by {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable}, 
	 * or {@link sap.gantt.GanttChart}.
	 * </p>
	 * <p>The default value is "#CAC7BA".</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>stroke</code>.
	 * @public
	 */
	UlcMiddleLine.prototype.getStroke = function (oData) {
		if (this.mShapeConfig.hasShapeProperty("stroke")){
			return this._configFirst("stroke", oData);
		}
		
		return "#CAC7BA";
	};

	/**
	 * Gets the value of property <code>strokeWidth</code>.
	 * 
	 * <p>
	 * Standard SVG 'stroke-width' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeWidthProperty SVG 1.1 specification for 'stroke-width'}.
	 * </p>
	 * <p>The default value is 1.</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>strokeWidth</code>.
	 * @public
	 */
	UlcMiddleLine.prototype.getStrokeWidth = function (oData) {
		if (this.mShapeConfig.hasShapeProperty("strokeWidth")){
			return this._configFirst("strokeWidth", oData);
		}
		
		return 1;
	};

	return UlcMiddleLine;
}, true);

}; // end of sap/gantt/shape/ext/ulc/UlcMiddleLine.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.ulc.UlcRectangle') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.ulc.UlcRectangle'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ext/ulc/UlcRectangle",[
	"sap/gantt/shape/Rectangle"
], function(Rectangle){
	"use strict";

	/**
	 * Creates and initializes a fragment of the Utilization Line Chart.
	 * 
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings of the new control
	 * 
	 * @class 
	 * Base class for {@link sap.gantt.shape.ext.ulc.UlcOverCapacityZoneRectangle}, {@link sap.gantt.shape.ext.ulc.UlcOverClipRectangle},
	 * {@link sap.gantt.shape.ext.ulc.UlcUnderClipRectangle}, {@link sap.gantt.shape.ext.ulc.UlcTooltipRectangle}.
	 * 
	 * <p>This base class defines a number of shared methods. 
	 * </p>
	 * 
	 * @extends sap.gantt.shape.Rectangle
	 * @abstract
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.ulc.UlcRectangle
	 */
	var UlcRectangle = Rectangle.extend("sap.gantt.shape.ext.ulc.UlcRectangle", /** @lends sap.gantt.shape.ext.ulc.UlcRectangle.prototype */ {
		metadata: {
			"abstract": true
		}
	});

	/**
	 * Gets the value of property <code>x</code>.
	 * 
	 * <p>
	 * x coordinate of the rectangle left-top point.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#RectElementXAttribute SVG 1.1 specification for the 'x' attribute of 'rect'}.
	 * 
	 * Usually an application does not configure this value. Instead, the getter calculates the value of x by using the view boundary for the visible area in a Gantt Chart.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>x</code>.
	 * @public
	 */
	UlcRectangle.prototype.getX = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("x")){
			return this._configFirst("x", oData);
		}
		
		var aViewRange = this.getShapeViewBoundary();
		if (aViewRange){
			return aViewRange[0];
		}
		return 0;
	};

	/**
	 * Gets the value of property <code>y</code>.
	 * 
	 * <p>
	 * y coordinate of a rectangle left-top point.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#RectElementYAttribute SVG 1.1 specification for 'y' attribute of 'rect'}.
	 * 
	 * Usually application does not configure this value. Instead getter calculates the value of y using parameter <code>oRowInfo</code>.
	 * </p>
	 * <p>The default value is y coordinate of the top-left point of the row.</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>y</code>.
	 * @public
	 */
	UlcRectangle.prototype.getY = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("y")){
			return this._configFirst("y", oData);
		}
		
		return oRowInfo.y;
	};

	/**
	 * Gets the value of property <code>width</code>.
	 * 
	 * <p>
	 * Width of the rectangle.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#RectElementWidthAttribute SVG 1.1 specification for the 'width' attribute of 'rect'}.
	 * 
	 * Usually an application does not configure this value. Instead, the getter calculates the value of width by using the view boundary for the visible area in a Gantt Chart.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>width</code>.
	 * @public
	 */
	UlcRectangle.prototype.getWidth = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("width")){
			return this._configFirst("width", oData);
		}
		
		var aViewRange = this.getShapeViewBoundary();
		if (aViewRange){
			return aViewRange[1] - aViewRange[0];
		}
		return 0;
	};

	/**
	 * Gets the value of property <code>height</code>.
	 * 
	 * <p>
	 * Height of the rectangle.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#RectElementHeightAttribute SVG 1.1 specification for the 'height' attribute of 'rect'}.
	 * The default value of height is calculated by the over capacity rectangle.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>height</code>.
	 * @public
	 */
	UlcRectangle.prototype.getHeight = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("height")){
			return this._configFirst("height", oData);
		}
		
		var maxVisibleRatio = 25;
		if (this.mShapeConfig.hasShapeProperty("maxVisibleRatio")){
			maxVisibleRatio = this._configFirst("maxVisibleRatio", oData);
		}
		return oRowInfo.rowHeight  * maxVisibleRatio / (100 + maxVisibleRatio);
	};

	return UlcRectangle;
}, true);

}; // end of sap/gantt/shape/ext/ulc/UlcRectangle.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.ulc.UlcTooltipRectangle') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.ulc.UlcTooltipRectangle'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ext/ulc/UlcTooltipRectangle",[
	"sap/gantt/shape/ext/ulc/UlcRectangle", "sap/gantt/misc/Utility", "sap/gantt/misc/Format"
], function(UlcRectangle, Utility, Format){
	"use strict";
	
	/**
	 * Creates and initializes a fragment of the Utilization Line Chart.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings of the new control
	 * 
	 * @class 
	 * This shape is used to create invisible rectangles with tooltips enabled by tag 'title'.
	 * 
	 * <p>
	 * Graphic Effect is:<br/>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="8.8cm" viewBox="0 0 300 220" version="1.1">
	 * <defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * 	<marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * 	<style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * 	.arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63;fill:none} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * 	<rect x="1" y="1" width="298" height="218" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<path d="M 10 85 h 280 v -20 h -280 v 90 h 280 v -70" class="dashside" />
	 * 	<path d="M 40 155 l 25 -90 h 50 l 20 30 h 100 l 40 60" class="dashassist" />
	 * 	<path d="M 40 155 l 25 -85 h 50 l 20 10 h 100 l 40 75" class="dashassist" />
	 * 	<rect x="40" y="65" width="25" height="90" fill="#cdcdcd" fill-opacity="0.5" stroke="#cdcdcd" stroke-width="0.5"><title>dimention1: 0-150%&#10;dimention2: 0-110%</title></rect>
	 * 	<rect x="65" y="65" width="50" height="90" fill="#cdcdcd" fill-opacity="0.5" stroke="#cdcdcd" stroke-width="0.5"><title>dimention1: 150%&#10;dimention2: 110%</title></rect>
	 * 	<rect x="115" y="65" width="20" height="90" fill="#cdcdcd" fill-opacity="0.5" stroke="#cdcdcd" stroke-width="0.5"><title>dimention1: 150%-70%&#10;dimention2: 110%-105%</title></rect>
	 * 	<rect x="135" y="65" width="100" height="90" fill="#cdcdcd" fill-opacity="0.5" stroke="#cdcdcd" stroke-width="0.5"><title>dimention1: 70%&#10;dimention2: 105%</title></rect>
	 * 	<rect x="235" y="65" width="40" height="90" fill="#cdcdcd" fill-opacity="0.5" stroke="#cdcdcd" stroke-width="0.5"><title>dimention1: 70%-0&#10;dimention2: 105%-0</title></rect>
	 * </svg>
	 * </p>
	 * 
	 * @extends sap.gantt.shape.ext.ulc.UlcRectangle
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.ulc.UlcTooltipRectangle
	 */
	var UlcTooltipRectangle = UlcRectangle.extend("sap.gantt.shape.ext.ulc.UlcTooltipRectangle", /** @lends sap.gantt.shape.ext.ulc.UlcTooltipRectangle.prototype */ {});

	/**
	 * Gets the value of property <code>title</code>.
	 * 
	 * Title is visualized as a tooltip by browsers.
	 * <b>Notes:</b> Use character entities to perform simple text tabbing and breaking. (Use "&#09;" for tab and "&#10;" for break.)
	 * See {@link http://www.w3.org/TR/SVG/struct.html#TitleElement SVG 1.1 specification for 'title'}.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>title</code>.
	 * @public
	 */
	UlcTooltipRectangle.prototype.getTitle = function(oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("title")){
			return this._configFirst("title", oData);
		}
		
		var retVal = "";
		var oUtilCurves;
		if (this.mShapeConfig.hasShapeProperty("utilizationCurves")){
			oUtilCurves = this._configFirst("utilizationCurves", oData);
		}
		if (oData) {
			for (var util in oUtilCurves){
				if (oData[oUtilCurves[util].ratioAttribute] || oData[oUtilCurves[util].ratioAttribute] === 0){
					// a changer
					if (oData[oUtilCurves[util].ratioAttribute].previous !== undefined){
						retVal += oUtilCurves[util].name + "\t" +
						oData[oUtilCurves[util].ratioAttribute].previous + "-" +
							oData[oUtilCurves[util].ratioAttribute].next + "%" + "\n";
					// a carrier or follower
					}else {
						retVal += oUtilCurves[util].name + "\t" +
						oData[oUtilCurves[util].ratioAttribute].value + "%" + "\n";
					}
				}
			}
		}
		return retVal;
	};

	/**
	 * Gets the value of property <code>x</code>.
	 * 
	 * <p>
	 * x coordinate of the rectangle left-top point.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#RectElementXAttribute SVG 1.1 specification for 'x' attribute of 'rect'}.
	 * 
	 * Usually an application does not configure this value. Instead, the getter calculates the value of x by using property <code>from</code>.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>x</code>.
	 * @public
	 */
	UlcTooltipRectangle.prototype.getX = function(oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("x")){
			return this._configFirst("x", oData);
		}
		
		var oAxisTime = this.mChartInstance.getAxisTime();
		return oAxisTime.timeToView(Format.abapTimestampToDate(oData.from));
	};

	/**
	 * Gets the value of property <code>width</code>.
	 * 
	 * <p>
	 * Width of the rectangle.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#RectElementWidthAttribute SVG 1.1 specification for the 'width' attribute of 'rect'}.
	 * 
	 * Usually an application does not configure this value. Instead, the getter calculates value of width by using the <code>from</code> and
	 * <code>to</code> properties.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>width</code>.
	 * @public
	 */
	UlcTooltipRectangle.prototype.getWidth = function(oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("width")){
			return this._configFirst("width", oData);
		}
		
		var oAxisTime = this.mChartInstance.getAxisTime();
		return Math.abs(oAxisTime.timeToView(Format.abapTimestampToDate(oData.to)) - 
				oAxisTime.timeToView(Format.abapTimestampToDate(oData.from)));
	};

	/**
	 * Gets the value of property <code>height</code>.
	 * 
	 * <p>
	 * Height of the rectangle.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#RectElementHeightAttribute SVG 1.1 specification for the 'height' attribute of 'rect'}.
	 * </p>
	 * <p>The default value is the height of the row.</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>height</code>.
	 * @public
	 */
	UlcTooltipRectangle.prototype.getHeight = function(oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("height")){
			return this._configFirst("height", oData);
		}
		
		return oRowInfo.rowHeight;
	};
	
	/**
	 * Gets the value of property <code>strokeOpacity</code>.
	 * 
	 * <p>
	 * Standard SVG 'stroke-Opacity' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeOpacityProperty SVG 1.1 specification for 'stroke-opacity'}.
	 * The value of strokeOpacity for tooltip rectangles must be 0.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>strokeOpacity</code>.
	 * @public
	 */
	UlcTooltipRectangle.prototype.getStrokeOpacity = function(oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("strokeOpacity")){
			return this._configFirst("strokeOpacity", oData);
		}
		
		return 0;
	};

	/**
	 * Gets the value of property <code>fillOpacity</code>.
	 * 
	 * <p>
	 * Standard SVG 'fill-Opacity' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#FillOpacityProperty SVG 1.1 specification for 'fill-opacity'}.
	 * The value of fillOpacity for tooltip rectangles must be 0.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>fillOpacity</code>.
	 * @public
	 */
	UlcTooltipRectangle.prototype.getFillOpacity = function(oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("fillOpacity")){
			return this._configFirst("fillOpacity", oData);
		}
		
		return 0;
	};

	return UlcTooltipRectangle;
}, true);

}; // end of sap/gantt/shape/ext/ulc/UlcTooltipRectangle.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.ulc.UlcUnderClipRectangle') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.ulc.UlcUnderClipRectangle'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ext/ulc/UlcUnderClipRectangle",[
"sap/gantt/shape/ext/ulc/UlcRectangle"
], function(UlcRectangle){
	"use strict";

	/**
	 * Creates and initializes a fragment of the Utilization Line Chart.
	 * 
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings of the new control
	 * 
	 * @class 
	 * This shape is used to draw the under clipping rectangle.
	 * 
	 * <p>
	 * Graphic Effect is:<br/>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="8.8cm" viewBox="0 0 300 220" version="1.1">
	 * <defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * 	<marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * 	<style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * 	.arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63;fill:none} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * 	<rect x="1" y="1" width="298" height="218" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<path d="M 10 85 h 280 v -20 h -280 v 90 h 280 v -70" class="dashside" />
	 * 	<clippath id="cpSide"><path d="M 40 155 l 25 -90 h 50 l 20 30 h 100 l 40 60" /></clippath>
	 * 	<clippath id="cpTexthyphon"><path d="M 40 155 l 25 -85 h 50 l 20 10 h 100 l 40 75" /></clippath>
	 * 	<rect id="underSide" x="10" y="85" width="280" height="70" clip-path="url(#cpSide)" fill="#858585" fill-opacity="0.5" />
	 * 	<rect id="underTexthyphone" x="10" y="85" width="280" height="70" clip-path="url(#cpTexthyphon)" fill="#858585" fill-opacity="0.5" />
	 * </svg>
	 * </p>
	 * 
	 * @extends sap.gantt.shape.ext.ulc.UlcRectangle
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.ulc.UlcUnderClipRectangle
	 */
	var UlcUnderClipRectangle = UlcRectangle.extend("sap.gantt.shape.ext.ulc.UlcUnderClipRectangle", /** @lends sap.gantt.shape.ext.ulc.UlcUnderClipRectangle.prototype" */ {});

	/**
	 * Gets the value of property <code>y</code>.
	 * 
	 * <p>
	 * y coordinate of the rectangle left-top point.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#RectElementYAttribute SVG 1.1 specification for 'y' attribute of 'rect'}.
	 * 
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>y</code>.
	 * @public
	 */
	UlcUnderClipRectangle.prototype.getY = function(oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("y")){
			return this._configFirst("y", oData);
		}
		
		var maxVisibleRatio = 25;
		if (this.mShapeConfig.hasShapeProperty("maxVisibleRatio")){
			maxVisibleRatio = this._configFirst("maxVisibleRatio", oData);
		}
		return oRowInfo.y + oRowInfo.rowHeight * maxVisibleRatio / (100 + maxVisibleRatio);
	};

	/**
	 * Gets the value of property <code>height</code>.
	 * 
	 * <p>
	 * Height of the rectangle.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#RectElementHeightAttribute SVG 1.1 specification for 'height' attribute of 'rect'}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>height</code>.
	 * @public
	 */
	UlcUnderClipRectangle.prototype.getHeight = function(oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("height")){
			return this._configFirst("height", oData);
		}
		
		var maxVisibleRatio = 25;
		if (this.mShapeConfig.hasShapeProperty("maxVisibleRatio")){
			maxVisibleRatio = this._configFirst("maxVisibleRatio", oData);
		}
		return oRowInfo.rowHeight - oRowInfo.rowHeight * maxVisibleRatio / (100 + maxVisibleRatio);
	};

	/**
	 * Gets current value of property <code>fill</code>.
	 * 
	 * <p> 
	 * Standard SVG 'fill' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#FillProperty SVG 1.1 specification for 'fill'}.
	 * <b>Note:</b> You can provide the <code>fill</code> property with HTML colors and the URL reference to a paint server. Paint server definitions can be retrieved from paint servers rendered by
	 * {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable}, or {@link sap.gantt.GanttChart}.
	 * </p>
	 * <p>The default value is "#F2F2F2".</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>fill</code>.
	 * @public
	 */
	UlcUnderClipRectangle.prototype.getFill = function(oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("fill")){
			return this._configFirst("fill", oData);
		}
		
		return "#F2F2F2";
	};
	
	/**
	 * Gets the value of property <code>strokeOpacity</code>.
	 * 
	 * <p>
	 * Standard SVG 'stroke-Opacity' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeOpacityProperty SVG 1.1 specification for 'stroke-opacity'}.
	 * </p>
	 * <p>The default value is 0.3.</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>strokeOpacity</code>.
	 * @public
	 */
	UlcUnderClipRectangle.prototype.getStrokeOpacity = function(oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("strokeOpacity")){
			return this._configFirst("strokeOpacity", oData);
		}
		
		return 0.3;
	};

	/**
	 * Gets the value of property <code>fillOpacity</code>.
	 * 
	 * <p>
	 * Standard SVG 'fill-Opacity' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#FillOpacityProperty SVG 1.1 specification for 'fill-opacity'}.
	 * </p>
	 * <p>The default value is 0.3.</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>fillOpacity</code>.
	 * @public
	 */
	UlcUnderClipRectangle.prototype.getFillOpacity = function(oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("fillOpacity")){
			return this._configFirst("fillOpacity", oData);
		}
		
		return 0.3;
	};

	/**
	 * Gets the value of property <code>clipPath</code>.
	 * 
	 * <p>
	 * Standard SVG 'clippath' attribute.
	 * See {@link http://www.w3.org/TR/SVG/masking.html#ClipPathProperty SVG 1.1 specification for 'clippath'}.
	 * 
	 *  The referred ID must be consistent with the html class generated by <code>UlcClipPath</code>.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>clipPath</code>.
	 * @public
	 */
	UlcUnderClipRectangle.prototype.getClipPath = function(oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("clipPath")){
			return this._configFirst("clipPath", oData);
		}
		
		var uid = oRowInfo.uid;
		var pattern = new RegExp("\\[|\\]|:|\\|", "g");
		var newUid = uid.replace(pattern, "_");
		
		return "url(#" + newUid + "_" + oData.id + "_" + oData.dimension + ")";
	};

	return UlcUnderClipRectangle;
}, true);

}; // end of sap/gantt/shape/ext/ulc/UlcUnderClipRectangle.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.ulc.UtilizationLineChart') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.ulc.UtilizationLineChart'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ext/ulc/UtilizationLineChart",[
	"sap/gantt/shape/Group"
], function(Group){
	"use strict";
	
	/**
	 * Creates and initializes a new Utilization Line Chart container class.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * ULC is a complex shape. This class is the outer container with tag='g'. All fragments are aggregated into this container.
	 * You can remove a fragment from the container if your application does not need it.
	 * 
	 * <p>The container has four aggregations: 
	 * <ul>
	 * 		<li>{@link sap.gantt.shape.ext.ulc.UlcMiddleLine}(used to draw a middle line, which indicates the position of 50% utilization rate),</li>
	 * 		<li>{@link sap.gantt.shape.ext.ulc.UlcOverCapacityZoneRectangle}(used to draw over capacity Zone),</li>
	 * 		<li>{@link sap.gantt.shape.ext.ulc.UlcDimension}(used to draw Dimensions, OverCapacityClipping, and UnderCapacityClipping),</li>
	 * 		<li>{@link sap.gantt.shape.ext.ulc.UlcTooltipRectangle}(used to draw invisible tooltip rectangles for each period of capacity change).</li>
	 * </ul>
	 * </p>
	 * 
	 * <p>
	 * Each dimension consists of <code>UlcOverClipRectangle</code>, <code>UlcUnderClipRectangle</code>, <code>UlcClipPath</code>, and <code>UlcBorderPath</code>.
	 * <code>UlcClipingPath</code> is aggregated in <code>UlcClipPath</code>.
	 * </p>
	 * 
	 * <p>A super class <code>sap.gantt.shape.ext.ulc.UlcRectangle</code> is abstracted because the other four rectangles(UlcOverCapacityZoneRectangle, 
	 * UlcOverClipRectangle, UlcUnderClipRectangle, and UlcTooltipRectangle) share similar logic.
	 * </p>
	 * 
	 * <p>
	 * Graphic Effect is:<br/>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="8.8cm" viewBox="0 0 300 220" version="1.1">
	 * <defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * 	<marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * 	<style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * 	.arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63;fill:none} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * <rect x="1" y="1" width="298" height="218" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<defs><pattern class="pattern" id="pUlc" patternUnits="userSpaceOnUse" x="0" y="0" width="4" height="4"><rect x="0" width="4" height="4" fill="#efefef"></rect><path d="M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2 " stroke="#6d6d6d" stroke-width="0.5"></path></pattern>
	 * 	<pattern class="pattern" id="pEx" patternUnits="userSpaceOnUse" x="0" y="0" width="4" height="4"><rect x="0" width="4" height="4" fill="#f2a5a5"></rect><path d="M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2 " stroke="#d16d6d" stroke-width="0.5"></path></pattern></defs>
	 * 	<clippath id="cpSide"><path d="M 40 155 l 25 -90 h 50 l 20 30 h 100 l 40 60" /></clippath>
	 * 	<clippath id="cpTexthyphon"><path d="M 40 155 l 25 -85 h 50 l 20 10 h 100 l 40 75" /></clippath>
	 * 	<rect id="overBg" x="10" y="65" width="280" height="20" fill="url(#pUlc)" />
	 * 	<rect id="overSide"x="10" y="65" width="280" height="20" clip-path="url(#cpSide)" fill="url(#pEx)" stroke="none"/>
	 * 	<rect id="overTexthyphon" x="10" y="65" width="280" height="20" clip-path="url(#cpTexthyphon)" fill="url(#pEx)" stroke="none"/>
	 * 	<rect id="underBg" x="10" y="85" width="280" height="70" fill="#efefef" />
	 * 	<path id="middleLine" d="M 10 120 h 280" class="dashassist" />
	 * 	<rect id="underSide" x="10" y="85" width="280" height="70" clip-path="url(#cpSide)" fill="#858585" fill-opacity="0.5" />
	 * 	<rect id="underTexthyphone" x="10" y="85" width="280" height="70" clip-path="url(#cpTexthyphon)" fill="#858585" fill-opacity="0.5" />
	 * 	<path d="M 40 155 l 25 -90 h 50 l 20 30 h 100 l 40 60" class="side" />
	 * 	<path d="M 40 155 l 25 -85 h 50 l 20 10 h 100 l 40 75" class="texthyphon" />
	 * 	<rect x="40" y="65" width="25" height="90" opacity="0"><title>dimention1: 0-150%&#10;dimention2: 0-110%</title></rect>
	 * 	<rect x="65" y="65" width="50" height="90" opacity="0"><title>dimention1: 150%&#10;dimention2: 110%</title></rect>
	 * 	<rect x="115" y="65" width="20" height="90" opacity="0"><title>dimention1: 150%-70%&#10;dimention2: 110%-105%</title></rect>
	 * 	<rect x="135" y="65" width="100" height="90" opacity="0"><title>dimention1: 70%&#10;dimention2: 105%</title></rect>
	 * 	<rect x="235" y="65" width="40" height="90" opacity="0"><title>dimention1: 70%-0&#10;dimention2: 105%-0</title></rect>
	 * 	<path d="M 50 70 l 10 -20 m 120 0 l -70 30 m -90 70 l -5 20 m 60 -50 l 40 50 m 50 -30 l 10 55 m 30 -100 l 20 80 l 20 -75" class="dashassist" />
	 * 	<text x="20" y="40" class="propertyText"> >100% Zone</text>
	 * 	<text x="120" y="40" class="propertyText">OverCapacityClipping</text>
	 * 	<text x="10" y="190" class="propertyText"> <100% Zone</text>
	 * 	<text x="110" y="190" class="propertyText">50%</text>
	 * 	<text x="130" y="210" class="propertyText">UnderCapacityClipping</text>
	 * 	<text x="190" y="190" class="timeText">Dimensions</text>
	 * </svg>
	 * </p>
	 * 
	 *  <p>An example for the structure of data to feed balance chart: </br>
	 * <code>
	 * {	
	 * 		order: [{
	 * 			id: "ulc_0",
	 * 			util: [
	 * 				{
	 * 					dimension: "util_volumn",
	 * 					values:[
	 * 						{
	 * 							from: "20160123000000",
	 * 							to: "20160123000000",
	 * 							firstOne: true,
	 * 							value: 0
	 * 						},
	 * 						{
	 * 							from: "20160124071000",
	 * 							to: "20160124071000",
	 * 							value: 97.6
	 * 						}, {
	 * 							from: "20160124071000",
	 * 							to: "20160127051300",
	 * 							firstOne: true,
	 * 							value: 97.6
	 * 						},{
	 * 							from: "20160127051300",
	 * 							to: "20160127051300",
	 * 							value: 97.6
	 * 						},{
	 * 							from: "20160128093312",
	 * 							to: "20160128093312",
	 * 							lastOne: true,
	 * 							value: 0
	 * 						}
	 * 					]
	 * 				},{
	 * 					dimension: "util_mass",
	 * 					values:[
	 * 						{
	 * 							from: "20160123000000",
	 * 							to: "20160123000000",
	 * 							firstOne: true,
	 * 							value: 0
	 * 						}
	 * 						{
	 * 							from: "20160124071000",
	 * 							to: "20160124071000",
	 * 							value: 114.5
	 * 						}, {
	 * 							from: "20160124071000",
	 * 							to: "20160127051300",
	 * 							value: 114.5
	 * 						},{
	 * 							from: "20160127051300",
	 * 							to: "20160127051300",
	 * 							value: 114.5
	 * 						},{
	 * 							from: "20160128093312",
	 * 							to: "20160128093312",
	 * 							lastOne: true,
	 * 							value: 0
	 * 						}
	 * 					]
	 * 				}
	 * 			]
	 * 		}],
	 * 		tooltip: [
	 * 			{
 * 					from: "20160123000000",
 * 					to: "20160124071000",
 * 					firstOne: true,
 * 					util_volumn: {
 * 						previous: 0,
 * 						next: 97.6
 * 					},
 * 					util_mass:{
 * 						previous: 0,
 * 						next: 114.5
 * 					}
 * 				},{
 * 					from: "20160124071000",
 * 					to: "20160127051300",
 * 					util_volumn: {
 * 						val: 97.6
 * 					},
 * 					util_mass:{ 
 * 						val: 114.5
 * 					}
 * 				},{
 * 					from: "20160127051300",
 * 					to: "20160128093312",
 * 					lastOne: true,
 * 					util_volumn: {
 * 						previous: 97.6,
 * 						next: 0
 * 					},
 * 					util_mass:{
 * 						previous: 114.5,
 * 						next: 0
 * 					}
 * 				}
	 * 		]
	 * }
	 * </code>
	 * </p>
	 * 
	 * @extends sap.gantt.shape.Shape
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.ulc.UtilizationLineChart
	 */
	var UtilizationLineChart = Group.extend("sap.gantt.shape.ext.ulc.UtilizationLineChart", /** @lends sap.gantt.shape.ext.ulc.UtilizationLineChart.prototype" */ {});

	/**
	 * Gets the value of property <code>enableSelection</code>.
	 * 
	 * <p>
	 * This value controls whether a shape is enabled for selection behavior. The default value for Utilization Line Chart is false.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {boolean} Value of property <code>enableSelection</code>.
	 * @public
	 */
	UtilizationLineChart.prototype.getEnableSelection = function(oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("enableSelection")){
			return this._configFirst("enableSelection", oData);
		}
		
		return false;
	};

	return UtilizationLineChart;
}, true);

}; // end of sap/gantt/shape/ext/ulc/UtilizationLineChart.js
if ( !jQuery.sap.isDeclared('sap.gantt.GanttChartBase') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.GanttChartBase'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/gantt/GanttChartBase",[
	'jquery.sap.global', './library', 'sap/ui/core/Control',
	"./misc/Utility", "./config/TimeHorizon"
], function (jQuery, library, Control, Utility, TimeHorizon) {
	"use strict";

	/**
	 * Creates and initializes a new Gantt chart.
	 * 
	 * @param {string} [sId] ID for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * Base class for all Gantt charts.
	 * 
	 * <p>This base class defines:
	 * <ul>
	 * 		<li>Basic properties and aggregations.</li>
	 * 		<li>Metadata required integrate with GanttChartContainer.</li>
	 * </ul>
	 * sap.gantt provides two basic implementations of <code>GanttChartBase</code>:
	 * <ul>
	 * 		<li><code>sap.gantt.GanttChart</code> - A chart area that contains rows along the vertical axis and a time scale along the horizontal axis.</li>
	 * 		<li><code>sap.gantt.GanttChartWithTable</code> - A tree table and a chart area separated by a splitter with rows synchronized.</li>
	 * </ul>
	 * </p>
	 * 
	 * @extends sap.ui.core.Control
	 * @abstract
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.GanttChartBase
	 */
	var GanttChartBase = Control.extend("sap.gantt.GanttChartBase", /** @lends sap.gantt.GanttChartBase.prototype */ {
		metadata: {
			"abstract": true,
			library: "sap.gantt",
			
			properties: {
				
				/**
				 * Width of the control.
				 */
				width: {type: "sap.ui.core.CSSSize", defaultValue: "100%"},
				
				/**
				 * Height of the control.
				 */
				height: {type: "sap.ui.core.CSSSize", defaultValue: "100%"},
				
				/**
				 * Switch to show and hide the cursor line that follows the cursor.
				 */
				enableCursorLine: {type: "boolean", defaultValue: true},
				
				/**
				 * Switch to show and hide the present time indicator
				 */
				enableNowLine: {type: "boolean", defaultValue: true},
				
				/**
				 * Switch to show and hide vertical lines representing intervals along the time axis
				 */
				enableVerticalLine: {type: "boolean", defaultValue: true},
				
				/**
				 * Zoom level in float.
				 * 
				 * This property allows application developers to control the zoom level. 
				 * When GanttChart is embedded in <code>sap.gantt.GanttChartContainer</code>, you do not have to manage this property.
				 */
				timeZoomRate: {type: "float", defaultValue: 1},
				
				/**
				 * Current mode of the Gantt chart.
				 * 
				 * If no value is provided, GanttChart uses a default mode key.
				 */
				mode: {type: "string", defaultValue: sap.gantt.config.DEFAULT_MODE_KEY},
				
				/**
				 * Selection mode for GanttChart
				 * 
				 * This property controls whether multiToggle or multi-selection mode is enabled for the tree table and
				 * for shapes. It may also affect the visual appearance, such as whether check boxes are available for selection.
				 */
				selectionMode: {type : "sap.gantt.SelectionMode", defaultValue : sap.gantt.SelectionMode.MultiWithKeyboard},
				
				/**
				 * If the implementation contains a selection panel, this is the initial width.
				 * 
				 * In the current library, <code>sap.gantt.GanttChart</code> does not have a selection panel. 
				 * <code>sap.gantt.GanttChart</code> has a selection panel implemented by <code>sap.ui.table.TreeTable</code>.
				 */
				selectionPanelSize: {type: "sap.ui.core.CSSSize", defaultValue: "30%"},
				
				/**
				 * Current hierarchy key referencing from configuration property <code>hierarchies</code>.
				 * 
				 * If <code>source select group</code> is enabled in the Gantt chart toolbar, the current hierarchy name referenced from <code>hierarchies</code>
				 * by this property is shown.
				 * For applications that do not require this function, this property can be ignored and a default value is used.
				 */
				hierarchyKey: {type: "string", defaultValue: sap.gantt.config.DEFAULT_HIERARCHY_KEY},

				/**
				 * SVG reusable element definitions.
				 * 
				 * If this property is provided, the paint server definition of the SVG is rendered. Method <code>getDefString()</code> should be
				 * implemented by all paint server classes that are passed in in this property.
				 */
				svgDefs: {type: "sap.gantt.def.SvgDefs", defaultValue: null},

				/**
				 * Configuration of the time axis.
				 *
				 * Planning horizon, initial horizon, and zoom level can be configured with this property. If not provided, a default
				 * configuration is provided.
				 */
				timeAxis: {type: "sap.gantt.config.TimeAxis", defaultValue: sap.gantt.config.DEFAULT_TIME_AXIS},
				
				/**
				 * Configuration of available modes.
				 *
				 * List of available modes. To apply modes to toolbar and shapes, further configuration is needed. If not provided, a default
				 * configuration is provided.
				 */
				modes: {type: "array", defaultValue: sap.gantt.config.DEFAULT_MODES},
				
				/**
				 * Configuration of toolbar schemes.
				 *
				 * List of available toolbar shcemes. If not provided, a default configuration is provided.
				 */
				toolbarSchemes: {type: "array", defaultValue: sap.gantt.config.DEFAULT_GANTTCHART_TOOLBAR_SCHEMES},
				
				/**
				 * Configuration of hierarchies.
				 *
				 * List of available hierarchies. If not provided, a default configuration is provided.
				 */
				hierarchies: {type: "array", defaultValue: sap.gantt.config.DEFAULT_HIERARCHYS},
				
				/**
				 * Configuration of object types.
				 *
				 * List of available object types. If not provided, a default configuration is provided.
				 */
				objectTypes: {type: "array", defaultValue: sap.gantt.config.DEFAULT_OBJECT_TYPES},
				
				/**
				 * Configuration of chart schemes.
				 *
				 * List of available chart schemes. If not provided, a default configuration is provided.
				 */
				chartSchemes: {type: "array", defaultValue: sap.gantt.config.DEFAULT_CHART_SCHEMES},

				/**
				 * Configuration of locale settings.
				 *
				 * Most locale settings can be configured in sap.ui.configuration objects. Only the time zone and day-light-saving time option
				 * are provided by locale settings.
				 */
				locale: {type: "sap.gantt.config.Locale", defaultValue: sap.gantt.config.DEFAULT_LOCALE_CET},
				
				/**
				 * Configuration of shape data names.
				 * 
				 * List of available shape data names. This configuration must be provided if SVG graphics are needed.
				 */
				shapeDataNames: {type: "array", defaultValue: []},
				
				/**
				 * Configuration of shape data against shape classes.
				 *
				 * List of available shapes. The shapes configured in this list are initialized inside <code>sap.gantt.GanttChartBase</code>.
				 * Note that for JSON data binding, this configuration supports deep structured data structures. For ODATA binding, only one level is supported.
				 */
				shapes: {type: "array", defaultValue: []}
			},
			
			aggregations: {

				/**
				 * Rows of <code>sap.gantt.GanttChartBase</code>
				 *
				 * This aggregation is delegated to <code>sap.gantt.table.TreeTable</code>. Rows are provide a base for
				 * shapes with a category of <code>"InRowShape"</code>. The configuration in property <code>shapes</code>
				 * determines how the shapes are drawn.
				 */
				rows: {type: "sap.ui.core.Control", multiple: true, singularName: "row", bindable: "bindable", visibility: "public"},
					
				/**
				 * Relationships of shapes carried by rows.
				 *
				 * Similar to rows, this aggregation does not request templates either. Relationships are a special shape with a category of 
				 * <code>"crossRowShape"</code>. How relationships are drawn is also specified in configuration property <code>shapes</code>.
				 */
				relationships: {type: "sap.ui.core.Control", multiple: true, bindable: "bindable", visibility: "public"},
				
				/**
				 * Paint servers consumed by special shape <code>sap.gantt.shape.cal.Calendar</code>.
				 *
				 * This aggregation is designed to improve performance of calendar shapes. Rows usually share a similar definition with calendar shapes.
				 * It is possible to define a Calendar paint server to draw only one rectangle for each row. Notes for classes extended from
				 * <code>sap.gantt.def.cal.CalendarDef</code>: Different from property <code>paintServerDefs</code>, paint servers defined here must
				 * implement method <code>getDefNode()</code> instead of method <code>getDefString()</code>.
				 */	
				calendarDef: {type: "sap.gantt.def.cal.CalendarDefs", multiple: false, bindable: "bindable", visibility: "public"}
			},
			
			events: {
				
				/**
				 * Event fired when the hierarchy key has changed in the Gantt chart toolbar.
				 */
				ganttChartSwitchRequested: {
					parameters: {
						/**
						 * Target hierarchy key.
						 */
						hierarchyKey: {type: "string"}
					}
				},
				
				/**
				 * Splitter (if exists) resized.
				 *
				 * If a splitter exists and synchronization is needed with other Gantt charts in the container, use this event. 
				 * You can listen for this event and obtain <code>zoomInfo</code>.
				 *
				 */
				splitterResize: {
					parameters : {
						/**
						 * ID of the source control.
						 */
						id : {type : "string"},

						/**
						 * Old size in the form of [height, width].
						 */
						oldSizes : {type : "int[]"},

						/**
						 * New size in the form of [height, width].
						 */
						newSizes : {type : "int[]"},

						/**
						 * Zoom information.
						 *
						 * This object contains all related information for the listener to get the current zoom level of the time axis.
						 * Usually <code>zoomInfo</code> contains the following information:
						 * <ul>
						 * 	<li><code>"base"</code> - Base for zooming calculation.
						 *		<ul>
						 * 			<li><code>"sGranularity"</code>: "4day", - Zoom level that is used to calculate the zoom base; it is taken from timeAxis.granularity.</li>
						 * 			<li><code>"fScale"</code>: 3840000 - Base scale determined by zoomStrategy level and now().</li>
						 * 		</ul>
						 * 	</li>
						 * 	<li><code>"determinedByConfig"</code> - Zoom level calculated by configuration <code>timeAxis</code>.
						 * 		<ul>
						 * 			<li><code>"fRate"</code>: 1, - Zoom rate determined by configuration timeAxis.granularity.</li>
						 * 			<li><code>"fMaxRate"</code>: 384, - Maximum zoom rate determined by configuration timeAxis.finestGranularity.</li>
						 * 			<li><code>"fMinRate"</code>: 0.02197802197802198 - Minimum zoom rate determined by configuration timeAxis.coarsestGranularity.</li>
						 * 		</ul>
						 * 	</li>
						 * 	<li><code>"determinedByChartWidth"</code> - Zoom level calculated by the SVG width.
						 * 		<ul>
						 * 			<li><code>"fMinRate"</code>: 0.0279009617614573, - Minimum zoom rate determined by the chart width and configuration timeAxis.planHorizon.</li>
						 * 			<li><code>"fSuitableRate"</code>: 0.5078804440909039 - Suitable zoom rate determined by the chart width and configuration timeAxis.initHorizon.</li>
						 * 		</ul>					 
						 * 	</li>
						 * 	<li><code>iChartWidth</code>: 417 - Chart width in pixel.</li>
						 * </ul>
						 */
						zoomInfo: {type: "object"}
					}
				},
				
				/**
				 * Horizontal (time axis) scroll.
				 *
				 * If the horizontal scroll bar exists and synchronization is needed with other Gantt charts in the container, use this event. 
				 */
				horizontalScroll: {
					parameters: {
						/**
						 * Scroll steps.
						 */
						scrollSteps: {type: "int"}
					}
				},
				
				/**
				 * Vertical (row axis) scroll.
				 *
				 * If the vertical scroll bar exists and synchronization is needed with other Gantt charts in the container, use this event. 
				 */
				verticalScroll: {
					parameters: {
						/**
						 * Scroll steps.
						 */
						scrollSteps: {type: "int"}
					}
				},

				/**
				 * Event is fired when a mouse-hover occurs in the graphic part.
				 */
				chartMouseOver: {
					parameters: {
						/**
						 * Row object information of the current mouse point.
						 */
						objectInfo: {type: "object"},

						/**
						 * Leading row object information. null when it is the main row at current mouse point; main row information if it is one of multiple expanded rows.
						 */
						leadingRowInfo: {type: "object"},

						/**
						 * Timestamp of the current mouse point.
						 */
						timestamp: {type: "string"},

						/**
						 * ID of SVG.
						 */
						svgId: {type: "string"},

						/**
						 * [x, y] Coordinate of the current mouse point in the SVG coordinate system.
						 */
						svgCoordinate: {type: "int[]"},

						/**
						 * Effective mode. It can be the current Gantt Chart mode or the mode derived from the chart scheme mode.
						 */
						effectingMode: {type: "string"},

						/**
						 * Original JQuery event object.
						 */
						originEvent: {type: "object"}
					}
				},
				
				/**
				 * Event fired when the chart is double-clicked
				 */
				chartDoubleClick: {
					parameters:{
						/**
						 * Row object information of the current mouse point.
						 */
						objectInfo: {type: "object"},

						/**
						 * Leading row object information. null when it is the main row at current mouse point; main row information if it is one of multiple expanded rows.
						 */
						leadingRowInfo: {type: "object"},

						/**
						 * Timestamp of the current mouse point.
						 */
						timestamp: {type: "string"},

						/**
						 * ID of SVG.
						 */
						svgId: {type: "string"},

						/**
						 * [x, y] Coordinate of the current mouse point in the SVG coordinate system.
						 */
						svgCoordinate: {type: "int[]"},

						/**
						 * Effective mode. It can be the current Gantt Chart mode or the mode derived from the chart scheme mode.
						 */
						effectingMode: {type: "string"},

						/**
						 * Original JQuery event object.
						 */
						originEvent: {type: "object"}
					}
				},
				
				/**
				 * Event fired when the chart is right-clicked
				 */
				chartRightClick: {
					parameters:{
						/**
						 * Row object information of the current mouse point.
						 */
						objectInfo: {type: "object"},

						/**
						 * Leading row object information. null when it is the main row at current mouse point; main row information if it is one of multiple expanded rows.
						 */
						leadingRowInfo: {type: "object"},

						/**
						 * Timestamp of the current mouse point.
						 */
						timestamp: {type: "string"},

						/**
						 * ID of SVG.
						 */
						svgId: {type: "string"},

						/**
						 * [x, y] Coordinate of the current mouse point in the SVG coordinate system.
						 */
						svgCoordinate: {type: "int[]"},

						/**
						 * Effective mode. It can be the current Gantt Chart mode or a mode derived from the chart scheme mode.
						 */
						effectingMode: {type: "string"},

						/**
						 * Original JQuery event object.
						 */
						originEvent: {type: "object"}
					}
				},
				
				//Be used in Gantt to handle dragging shapes between different ganttCharts
				chartDragEnter: {
					parameters: {
						originEvent: {type: "object"}
					}
				},
				
				//Be used in Gantt to handle dragging shapes between different ganttCharts
				chartDragLeave: {
					parameters: {
						originEvent: {type: "object"},
						draggingSource: {type: "object"}
					}
				},
				
				/**
				 * Event fired when the selection status of rows changes.
				 */
				rowSelectionChange: {
					parameters: {
						/**
						 * Original JQuery event object.
						 */
						originEvent: {type: "object"}
					}
				
				},
				
				/**
				 * Event fired when the selection status of relationships changes.
				 */
				relationshipSelectionChange: {
					parameters: {
						/**
						 * Original JQuery event object.
						 */
						originEvent: {type: "object"}
					}
				},
				
				/**
				 * Event fired when the selection status of shapes changes.
				 */
				shapeSelectionChange: {
					parameters: {
						/**
						 * Original JQuery event object.
						 */
						originEvent: {type: "object"}
					}
				},
				
				/**
				 * Event fired when a drag-and-drop occurs on one or more selected shapes.
				 */
				shapeDragEnd: {
					parameters: {
						/**
						 * Original JQuery event object.
						 */
						originEvent: {type: "object"},

						/**
						 * List of source shape data.
						 */
						sourceShapeData: {type: "object[]"},

						/**
						 * Source SVG ID.
						 */
						sourceSvgId: {type: "string"},

						/**
						 * List of target shape data. Sorted by shape level.
						 */
						targetData: {type: "object[]"},

						/**
						 * Target SVG ID.
						 */
						targetSvgId: {type: "string"}
					}
				}
				
			}
		}
	});
	
	// enable calling 'bindAggregation("rows")' without a factory
	GanttChartBase.getMetadata().getAllAggregations()["rows"]._doesNotRequireFactory = true;
	// enable calling 'bindAggrgation("rows")' without a factory
	GanttChartBase.getMetadata().getAllAggregations()["relationships"]._doesNotRequireFactory = true;
	
	/**
	 * Jumps to a given time.
	 * 
	 * This method sets the position of the visible area to a certain timestamp. It can be used to implement the function of
	 * Jump To First, Jump To Last, and Jump To Current.
	 * 
	 * A Redraw of SVG is triggered.
	 * 
	 * @name sap.gantt.GanttChartBase.prototype.jumpToPosition
	 * @function
	 * 
	 * @param {timestamp} vDate Accepted value is a 14-digit timestamp or a Date object.
	 * @public
	 */

	/**
	 * Provides the Ordinal Axis that is used to draw the SVG graphic.
	 *
	 * This method is intended to allow access to the ordinal axis. Do not change the ordinal axis.
	 * All subclasses must provide implementations.
	 *
	 * @name sap.gantt.GanttChartBase.prototype.getAxisOrdinal
	 * @function
	 *
	 * @return {sap.gantt.misc.AxisOrdinal} Returns the axis ordinal instance.
	 * @public
	 */

	/**
	 * Provides the Time Axis that is used to draw the SVG graphic.
	 *
	 * This method is intended to allow access to the time axis. Do not change the time axis.
	 * All subclasses must provide implementations.
	 *
	 * @name sap.gantt.GanttChartBase.prototype.getAxisTime
	 * @function
	 *
	 * @return {sap.gantt.misc.AxisTime} Returns the axis time instance.
	 * @public
	 */

	/**
	 * Notify that the data source had changed.
	 * 
	 * @protected
	 */
	GanttChartBase.prototype.notifySourceChange = function(){

	};
	
	return GanttChartBase;
}, true);

}; // end of sap/gantt/GanttChartBase.js
if ( !jQuery.sap.isDeclared('sap.gantt.GanttChartContainer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.GanttChartContainer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.Splitter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.SplitterLayoutData'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Orientation'); // unlisted dependency retained
sap.ui.define("sap/gantt/GanttChartContainer",[
	"sap/ui/core/Control", "sap/ui/layout/Splitter", "sap/ui/layout/SplitterLayoutData", "sap/ui/core/Orientation",
	"./legend/LegendContainer", "./control/Toolbar", "./control/AssociateContainer",
	"./config/TimeHorizon", "./misc/Utility"
], function (Control, Splitter, SplitterLayoutData, Orientation, LegendContainer, Toolbar, AssociateContainer,
	TimeHorizon, Utility) {
	"use strict";

	/**
	 * Creates and initializes a new Gantt chart container.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * A container that holds one or more <code>GanttChartBase</code> instances.
	 *
	 * <p> This class has several built-in several controls to support <code>GanttChartBase</code> instances:
	 *  <ul>
	 * 		<li>A toolbar above all Gantt Charts. Many built-in controls can be enabled or disabled using configuration property <code>toolbarScheme</code>. Built-in functions include:
	 *			<ul>
	 *				<li>ComboBox for container selection</li>
	 *				<li>Buttons for Add View, Delete View, and Switch Splitter Orientation</li>
	 *				<li>Expand/Collapse groups for expandable charts</li>
	 *				<li>A zooming slider</li>
	 *				<li>A legend button</li>
	 *				<li>A Settings button</li>
	 *			</ul>
	 *			If nothing is added to the toolbar, the toolbar is hidden automatically. For more information about the functions and configuration, 
	 *			see the API documentation of <code>sap.gantt.config.ToolbarScheme.</code>
	 *		</li>
	 *		<li>A Splitter containing aggregation <code>ganttCharts</code></li>
	 *  </ul>
	 * </p>
	 *
	 * @extend sap.ui.core.Control
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.GanttChartContainer
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var GanttChartContainer = Control.extend("sap.gantt.GanttChartContainer", /** @lends sap.gantt.GanttChartContainer.prototype */ {
		metadata: {
			library: "sap.gantt",
			properties: {
				/**
				 * Width of the control
				 */
				width: {type: "sap.ui.core.CSSSize", defaultValue: "100%"},

				/**
				 * Height of the control
				 */
				height: {type: "sap.ui.core.CSSSize", defaultValue: "100%"},

				/**
				 * Switch to enable and disable scroll synchronization by time on instances of aggregation <code>ganttCharts</code>.
				 */
				enableTimeScrollSync: {type: "boolean", defaultValue: true},

				/**
				 * Switch to enable and disable scroll synchronization by row on instances of aggregation <code>ganttCharts</code>.
				 */
				enableRowScrollSync: {type: "boolean", defaultValue: false},

				/**
				 * Switch to enable and disable the cursor line that follows the cursor.
				 *
				 * When this value is set, it overrides the corresponding value on instances of aggregation <code>ganttCharts</code>.
				 */
				enableCursorLine: {type: "boolean", defaultValue: true},

				/**
				 * Switch to enable and disable the present time indicator.
				 *
				 * When this value is set, it overrides the corresponding value on instances of aggregation <code>ganttCharts</code>.
				 */
				enableNowLine: {type: "boolean", defaultValue: true},

				/**
				 * Switch to enable and disable vertical lines representing intervals along the time axis.
				 *
				 * When this value is set, it overrides the corresponding value on instances of aggregation <code>ganttCharts</code>.
				 */
				enableVerticalLine: {type: "boolean", defaultValue: true},

				/**
				 * Definitions of paint servers used for advanced shape features around SVG fill, stroke, and filter attributes.
				 * 
				 * If this property is provided, the paint server definition of the SVG is rendered. Method <code>getDefString()</code> should be
				 * implemented by all paint server classes that are passed in in this property. It is easier to assign a common paint server definition
				 * in this class instead of in separate instances of <code>sap.gantt.GanttChartBase</code>. Then the definition is 
				 * rendered only once.
				 */
				svgDefs: {type: "sap.gantt.def.SvgDefs", defaultValue: null},

				/**
				 * List of available modes. To apply modes to the toolbar and shapes, further configuration is needed. (specifically, 
				 * in property <code>toolbarSchemes</code>, and properties <code>toolbarSchemes</code> and <code>shapes</code> in 
				 * the <code>GanttChartBase</code> class)If not provided, a default configuration is provided.
				 */
				modes: {type: "array", defaultValue: sap.gantt.config.DEFAULT_MODES},

				/**
				 * List of available toolbar schemes. If not provided, a default configuration is provided.
				 */
				toolbarSchemes: {type: "array", defaultValue: sap.gantt.config.DEFAULT_CONTAINER_TOOLBAR_SCHEMES},

				/**
				 * List of available hierarchies. If not provided, a default configuration is provided.
				 */
				hierarchies: {type: "array", defaultValue: sap.gantt.config.DEFAULT_HIERARCHYS},

				/**
				 * Configuration of container layouts.
				 * 
				 * This configuration affects the data source selection ComboBox in the Container Toolbar. When the selection
				 * changes, the <code>ganttChartChangeRequested</code> event that is triggered includes the corresponding layout key.
				 */
				containerLayouts: {type: "array", defaultValue: sap.gantt.config.DEFAULT_CONTAINER_LAYOUTS},

				/**
				 * Current container layout key.
				 * 
				 * This is a key configured in configuration property <code>containerLayouts</code>.
				 */
				containerLayoutKey: {type: "string", defaultValue: sap.gantt.config.DEFAULT_CONTAINER_SINGLE_LAYOUT_KEY},

				/**
				 * Define the amount of units to change the time zoom slider.
				 *
				 * See {@link sap.m.Slider#setStep}
				 */
				sliderStep: {type: "int", defaultValue: 10}
			},
			aggregations: {
				
				/**
				 * Legend shown when the legend button is clicked.
				 * 
				 * This aggregation is used only when the Legend button is configured to be shown in the container toolbar.
				 */
				legendContainer: {type: "sap.gantt.legend.LegendContainer", multiple: false, visibility: "public"},

				/**
				 * Controls to be placed in the container toolbar.
				 * 
				 * <p>This aggregation is used only when the custom toolbar item group is configured to be shown in the container toolbar.
				 * Different from the built-in buttons that are configured to be shown or hidden, these controls are free controls created 
				 * by the application, but are only placed in the container toolbar by <code>sap.gantt.GanttChartContainer</code>.</p>
				 * 
				 * <p>If the source selection group is enabled and you want your application to use a container layout pre-configured 
				 * for a specific source, you can implement your custom toolbar items in the event handler of event <code>ganttChartChangeRequested</code>.</p>
				 */
				customToolbarItems: {type: "sap.ui.core.Control", multiple: true, visibility: "public",
					singularName: "customToolbarItem", bindable: "bindable"},

				/**
				 * Gantt chart instances.
				 * 
				 * <p>If the source selection group is enabled and you want your application to use a container layout pre-configured 
				 * for a specific source, you can implement your custom toolbar items in the event handler of event <code>ganttChartChangeRequested</code>.</p>
				 * <p>Provide a Gantt chart in compliance with the container layout setting.
				 * GanttChartContainer is designed to support Gantt chart layouts that include multiple views.</p>
				 */
				ganttCharts: {type: "sap.gantt.GanttChartBase", multiple: true, visibility: "public", singularName: "ganttChart", bindable: "bindable"},

				_toolbar: {type: "sap.gantt.control.Toolbar", multiple: false, visibility: "hidden"}
			},
			events: {
				
				/**
				 * Event fired when any change occurs in the toolbar that requests the application to change aggregation <code>ganttCharts</code>. 
				 * 
				 * <p>Possible triggers are:
				 * <ul>
				 * 	<li>The source selection group changes in the container toolbar.</li>
				 * 	<li>The layout group button is clicked in the container toolbar.</li>
				 * 	<li>The source selection group changes in the Gantt chart toolbar.</li>
				 * </ul>
				 * </p>
				 */
				ganttChartChangeRequested: {
					parameters: {
						/**
						 * Action that caused the change.
						 * 
						 * <p>Possible action values are:
						 * <ul>
						 * 	<li><code>'switchGanttChart'</code>: The source selection group of one Gantt chart toolbar is changed.</li>
						 * 	<li><code>'addGanttChart'</code>: The Add Gantt chart dropdown menu is selected.</li>
						 *  <li><code>'lessGanttChart'</code>: The Less Gantt chart dropdown menu is selected.</li>
						 *  <li><code>'switchContainerLayout'</code>: The source selection group of the Container toolbar is changed.</li>
						 * </ul>
						 * </p>
						 */
						action: {type: "string"},
						
						/**
						 * Provided for actions <code>'switchGanttChart'</code> and <code>'lessGanttChart'</code>.
						 */
						ganttChartIndex: {type: "int"},
						
						/**
						 * Provided for actions <code>'switchGanttChart'</code>, <code>'addGanttChart'</code> and <code>'lessGanttChart'</code>.
						 */
						hierarchyKey: {type: "string"},
						
						/**
						 * Provided for action <code>'switchGanttChart'</code>.
						 */
						oldHierarchyKey: {type: "string"},
						
						/**
						 * Provided for action <code>'switchContainerLayout'</code>.
						 */
						containerLayoutKey: {type: "string"}
					}
				},
				
				/**
				 * Event fired when the custom settings are changed.
				 * 
				 * The Custom settings are application-injected settings that can be configured in the Settings dialog box. This event allows the application to handle these settings.
				 * Only check boxes are supported.
				 */
				customSettingChange: {
					parameters: {
						/**
						 * ID of the custom setting
						 */
						id: {type: "string"},
						
						/**
						 * The value of the custom setting
						 */
						value: {type: "boolean"}
					}
				}
			}
		}
	});

	GanttChartContainer.prototype.init = function () {
		jQuery.sap.measure.start("GanttChartContainer Init","GanttPerf:GanttChartContainer Init function");
		
		this._bInitHorizonApplied = false;

		this._oToolbar = new Toolbar({
			type: sap.gantt.control.ToolbarType.Global,
			sourceId: sap.gantt.config.DEFAULT_CONTAINER_SINGLE_LAYOUT_KEY
		});
		this._oToolbar.setSliderStep(this.getSliderStep());
		this.setAggregation("_toolbar", this._oToolbar);
		this._oToolbar.attachSourceChange(this._onToolbarSourceChange, this);
		this._oToolbar.attachLayoutChange(this._onToolbarLayoutChange, this);
		this._oToolbar.attachExpandChartChange(this._onToolbarExpandChartChange, this);
		this._oToolbar.attachZoomRateChange(this._onToolbarZoomRateChange, this);
		this._oToolbar.attachSettingsChange(this._onToolbarSettingsChange, this);
		this._oToolbar.data("holder", this);

		this._oSplitter = new Splitter({
			width: "100%",
			height: "100%",
			orientation: Orientation.Vertical
		});
		
		this._oModesConfigMap = {};
		this._oModesConfigMap[sap.gantt.config.DEFAULT_MODE_KEY] = sap.gantt.config.DEFAULT_MODE;
		
		this._oToolbarSchemeConfigMap = {};
		this._oToolbarSchemeConfigMap[sap.gantt.config.DEFAULT_CONTAINER_TOOLBAR_SCHEME_KEY] = sap.gantt.config.DEFAULT_CONTAINER_TOOLBAR_SCHEME;
		this._oToolbarSchemeConfigMap[sap.gantt.config.DEFAULT_GANTTCHART_TOOLBAR_SCHEME_KEY] = sap.gantt.config.DEFAULT_GANTTCHART_TOOLBAR_SCHEME;
		this._oToolbarSchemeConfigMap[sap.gantt.config.EMPTY_TOOLBAR_SCHEME_KEY] = sap.gantt.config.EMPTY_TOOLBAR_SCHEME;
		
		this._oHierarchyConfigMap = {};
		this._oHierarchyConfigMap[sap.gantt.config.DEFAULT_HIERARCHY_KEY] = sap.gantt.config.DEFAULT_HIERARCHY;
		
		this._oContainerLayoutConfigMap = {};
		this._oContainerLayoutConfigMap[sap.gantt.config.DEFAULT_CONTAINER_SINGLE_LAYOUT_KEY] = sap.gantt.config.DEFAULT_CONTAINER_SINGLE_LAYOUT;
		this._oContainerLayoutConfigMap[sap.gantt.config.DEFAULT_CONTAINER_DUAL_LAYOUT_KEY] = sap.gantt.config.DEFAULT_CONTAINER_DUAL_LAYOUT;
		
		jQuery.sap.measure.end("GanttChartContainer Init");
	};

	GanttChartContainer.prototype.applySettings = function (mSettings, oScope) {
		var retVal = Control.prototype.applySettings.apply(this, arguments);
		if (this.getContainerLayouts() && this.getContainerLayoutKey()) {
			this.switchOrientation(null, true);
		}
		return retVal;
	};
	
	GanttChartContainer.prototype.setModes = function (aModes) {
		this.setProperty("modes", aModes);
		this._oToolbar.setModes(aModes);
		// build a map for easy look up
		this._oModesConfigMap = {};
		if (aModes) {
			for (var i = 0; i < aModes.length; i++) {
				this._oModesConfigMap[aModes[i].getKey()] = aModes[i];
			}
		}
		return this;
	};

	GanttChartContainer.prototype.setSliderStep = function (step) {
		this.setProperty("sliderStep", step);
		this._oToolbar.setSliderStep(step);
		return this;
	};

	GanttChartContainer.prototype.setToolbarSchemes = function (aToolbarSchemes) {
		this.setProperty("toolbarSchemes", aToolbarSchemes);
		this._oToolbar.setToolbarSchemes(aToolbarSchemes);
		// build a map for easy look up
		this._oToolbarSchemeConfigMap = {};
		if (aToolbarSchemes) {
			for (var i = 0; i < aToolbarSchemes.length; i++) {
				this._oToolbarSchemeConfigMap[aToolbarSchemes[i].getKey()] = aToolbarSchemes[i];
			}
		}
		return this;
	};
	
	GanttChartContainer.prototype.setHierarchies = function (aHierarchies) {
		this.setProperty("hierarchies", aHierarchies);
		this._oToolbar.setHierarchies(aHierarchies);
		// build a map for easy look up
		this._oHierarchyConfigMap = {};
		if (aHierarchies) {
			for (var i = 0; i < aHierarchies.length; i++) {
				this._oHierarchyConfigMap[aHierarchies[i].getKey()] = aHierarchies[i];
			}
		}
		return this;
	};
	
	GanttChartContainer.prototype.setContainerLayouts = function (aContainerLayouts) {
		this.setProperty("containerLayouts", aContainerLayouts);
		this._oToolbar.setContainerLayouts(aContainerLayouts);
		// build a map for easy look up
		this._oContainerLayoutConfigMap = {};
		if (aContainerLayouts) {
			for (var i = 0; i < aContainerLayouts.length; i++) {
				this._oContainerLayoutConfigMap[aContainerLayouts[i].getKey()] = aContainerLayouts[i];
			}
		}
		if (this.getContainerLayoutKey()) {
			this.switchOrientation(null, true);
		}
		return this;
	};

	GanttChartContainer.prototype.setEnableCursorLine = function (bEnableCursorLine) {
		this.setProperty("enableCursorLine", bEnableCursorLine);
		var aGanttCharts = this.getGanttCharts();
		for (var i = 0; i < aGanttCharts.length; i++) {
			aGanttCharts[i].setEnableCursorLine(bEnableCursorLine);
		}
		this.getAggregation("_toolbar").setEnableCursorLine(bEnableCursorLine);
		return this;
	};

	GanttChartContainer.prototype.setEnableNowLine = function (bEnableNowLine) {
		this.setProperty("enableNowLine", bEnableNowLine);
		var aGanttCharts = this.getGanttCharts();
		for (var i = 0; i < aGanttCharts.length; i++) {
			aGanttCharts[i].setEnableNowLine(bEnableNowLine);
		}
		this.getAggregation("_toolbar").setEnableNowLine(bEnableNowLine);
		return this;
	};

	GanttChartContainer.prototype.setEnableVerticalLine = function (bEnableVerticalLine) {
		this.setProperty("enableVerticalLine", bEnableVerticalLine);
		var aGanttCharts = this.getGanttCharts();
		for (var i = 0; i < aGanttCharts.length; i++) {
			aGanttCharts[i].setEnableVerticalLine(bEnableVerticalLine);
		}
		this.getAggregation("_toolbar").setEnableVerticalLine(bEnableVerticalLine);
		return this;
	};

	GanttChartContainer.prototype.setEnableTimeScrollSync = function (bEnableTimeScrollSync) {
		this.setProperty("enableTimeScrollSync", bEnableTimeScrollSync);
		var aGanttCharts = this.getGanttCharts();
		for (var i = 0; i < aGanttCharts.length; i++) {
			aGanttCharts[i].detachHorizontalScroll(this._onGanttChartHSBScroll, this);
			if (bEnableTimeScrollSync) {
				aGanttCharts[i].attachHorizontalScroll(this._onGanttChartHSBScroll, this);
			}
		}
		this.getAggregation("_toolbar").setEnableTimeScrollSync(bEnableTimeScrollSync);
		return this;
	};
	

	GanttChartContainer.prototype.setEnableRowScrollSync = function (bEnableRowScrollSync) {
		this.setProperty("enableRowScrollSync", bEnableRowScrollSync);
		var aGanttCharts = this.getGanttCharts();
		for (var i = 0; i < aGanttCharts.length; i++){
			aGanttCharts[i].detachVerticalScroll(this._onGanttChartVSBScroll, this);
			if (bEnableRowScrollSync) {
				aGanttCharts[i].attachVerticalScroll(this._onGanttChartVSBScroll, this);
			}
		}
		this.getAggregation("_toolbar").setEnableRowScrollSync(bEnableRowScrollSync);
		return this;
	};

	GanttChartContainer.prototype.setContainerLayoutKey = function (sContainerLayoutKey) {
		if (this.getProperty("containerLayoutKey") === sContainerLayoutKey) {
			return this;
		}
		this.setProperty("containerLayoutKey", sContainerLayoutKey);
		this._oToolbar.setSourceId(sContainerLayoutKey);
		if (this.getContainerLayouts()) {
			this.switchOrientation(null, true);
		}
		return this;
	};

	GanttChartContainer.prototype.setLegendContainer = function (oLegendContainer) {
		this.setAggregation("legendContainer", oLegendContainer);
		if (oLegendContainer){
			this._oToolbar.setLegend(new AssociateContainer({
				content: oLegendContainer.getId()
			}));
		} 
		return this;
	};

	GanttChartContainer.prototype.addCustomToolbarItem = function (oCustomToolbarItem) {
		this._oToolbar.addCustomToolbarItem(oCustomToolbarItem);
	};

	GanttChartContainer.prototype.insertCustomToolbarItem = function (oCustomToolbarItem, iIndex) {
		this._oToolbar.insertCustomToolbarItem(oCustomToolbarItem, iIndex);
	};

	GanttChartContainer.prototype.removeCustomToolbarItem = function (oCustomToolbarItem) {
		this._oToolbar.removeCustomToolbarItem(oCustomToolbarItem);
	};

	GanttChartContainer.prototype.removeAllCustomToolbarItems = function () {
		this._oToolbar.removeAllCustomToolbarItems();
	};

	GanttChartContainer.prototype.addGanttChart = function (oGanttChart) {
		this.addAggregation("ganttCharts", oGanttChart);
		if (oGanttChart) {
			this._insertGanttChart(oGanttChart);
		}
	};

	GanttChartContainer.prototype.insertGanttChart = function (oGanttChart, iIndex) {
		this.insertAggregation("ganttCharts", oGanttChart, iIndex);
		if (oGanttChart) {
			this._insertGanttChart(oGanttChart, iIndex);
		}
	};

	GanttChartContainer.prototype.removeGanttChart = function (vGanttChart) {
		this._removeGanttChart(vGanttChart);
		this.removeAggregation("ganttCharts", vGanttChart);
	};

	GanttChartContainer.prototype.removeAllGanttCharts = function () {
		var aGanttCharts = this.getGanttCharts();
		for (var i = 0; i < aGanttCharts.length; i++) {
			this._removeGanttChart(aGanttCharts[i]);
		}
		this.removeAllAggregation("ganttCharts");
	};

	GanttChartContainer.prototype._insertGanttChart = function (oGanttChart, iIndex) {
		jQuery.sap.measure.start("GanttChartContainer _insertGanttChart","GanttPerf:GanttChartContainer _insertGanttChart function");
		if (!oGanttChart) {
			return;
		}
		// wrap association container
		var oAssociateContainer = new AssociateContainer({
			content: oGanttChart.getId(),
			layoutData: new SplitterLayoutData({
				size: "auto"
			})
		});
		if (iIndex !== 0 && !iIndex) {
			this._oSplitter.addContentArea(oAssociateContainer);
		} else {
			this._oSplitter.insertContentArea(oAssociateContainer, iIndex);
		}
		
		// pass down properties
		var oContainerLayoutConfig = this._oContainerLayoutConfigMap[this.getContainerLayoutKey()];
		var sSelectionPanelSize = oContainerLayoutConfig.getSelectionPanelSize() ?
			oContainerLayoutConfig.getSelectionPanelSize() : "Auto";
		oGanttChart.setSelectionPanelSize(sSelectionPanelSize);
		
		//oView.setTimeZoomRate(this._oToolbar.getZoomRate());
		// attach events
		if (this.getEnableTimeScrollSync()) {
			oGanttChart.attachHorizontalScroll(this._onGanttChartHSBScroll, this);
		}
		//
		if (this.getEnableRowScrollSync()){
			oGanttChart.attachVerticalScroll(this._onGanttChartVSBScroll, this);
		}

		oGanttChart.attachSplitterResize(this._onViewSplitterResize, this);
		oGanttChart.attachGanttChartSwitchRequested(this._onGanttChartSwitchRequested, this);
		oGanttChart.attachChartDragEnter(this._onChartDragEnter, this);
		oGanttChart.attachChartDragLeave(this._onChartDragLeave, this);
		oGanttChart.attachShapeDragEnd(this._onChartDragEnd, this);
		jQuery.sap.measure.end("GanttChartContainer _insertGanttChart");
	};

	GanttChartContainer.prototype._removeGanttChart = function (vGanttChart) {
		var oGanttChart = vGanttChart;
		if ((typeof vGanttChart) === "number") {
			oGanttChart = this.getGanttCharts()[vGanttChart];	
		}
		if (oGanttChart) {
			// remove associated container
			this._oSplitter.removeContentArea(oGanttChart._oAC);
			// detach events
			oGanttChart.detachHorizontalScroll(this._onGanttChartHSBScroll, this);
			oGanttChart.detachVerticalScroll(this._onGanttChartVSBScroll, this);
			oGanttChart.detachSplitterResize(this._onViewSplitterResize, this);
			oGanttChart.detachGanttChartSwitchRequested(this._onGanttChartSwitchRequested, this);
			oGanttChart.detachChartDragEnter(this._onChartDragEnter, this);
			oGanttChart.detachChartDragLeave(this._onChartDragLeave, this);
			oGanttChart.detachShapeDragEnd(this._onChartDragEnd, this);
		}
	};

	GanttChartContainer.prototype.onBeforeRendering = function () {
		this._detachEvents();
		//View switch will initial global toolbar, need to reset the correct setting status to global toolbar
		this._oToolbar.setEnableTimeScrollSync(this.getEnableTimeScrollSync());
		this._oToolbar.setEnableRowScrollSync(this.getEnableRowScrollSync());
		this._oToolbar.setEnableCursorLine(this.getEnableCursorLine());
		this._oToolbar.setEnableNowLine(this.getEnableNowLine());
		this._oToolbar.setEnableVerticalLine(this.getEnableVerticalLine());
		
		var aGanttCharts = this.getGanttCharts();
		// Views need to respect the setting in Gantt, especially when changing
		// hierarchy layout, which triggered binding updated
		for (var i = 0; i < aGanttCharts.length; i++) {
			var oGanttChart = aGanttCharts[i];
			oGanttChart.setEnableCursorLine(this.getEnableCursorLine());
			oGanttChart.setEnableNowLine(this.getEnableNowLine());
			oGanttChart.setEnableVerticalLine(this.getEnableVerticalLine());
		}
	};

	GanttChartContainer.prototype._detachEvents = function () {};

	GanttChartContainer.prototype.onAfterRendering = function () {
		this._attachEvents();
	};

	
	GanttChartContainer.prototype._attachEvents = function () {
	};
	
	GanttChartContainer.prototype._detachToolbarEvents = function () {
		this._oToolbar.detachSourceChange(this._onToolbarSourceChange, this);
		this._oToolbar.detachLayoutChange(this._onToolbarLayoutChange, this);
		this._oToolbar.detachExpandChartChange(this._onToolbarExpandChartChange, this);
		this._oToolbar.detachZoomRateChange(this._onToolbarZoomRateChange, this);
		this._oToolbar.detachSettingsChange(this._onToolbarSettingsChange, this);
	};
	
	GanttChartContainer.prototype._onGanttChartHSBScroll = function(oEvent){
		var fLeftOffsetRate = oEvent.getParameters().leftOffsetRate;
		var aGanttCharts = this.getGanttCharts();
		for (var i = 0; i < aGanttCharts.length; i++){
			if (oEvent.oSource.getId() === aGanttCharts[i].getId()){
				continue;
			}
			aGanttCharts[i].jumpToPosition(fLeftOffsetRate);
		}
	};
	
	GanttChartContainer.prototype._onGanttChartVSBScroll = function(oEvent){
		var nScrollSteps = oEvent.getParameters().scrollSteps;
		var aGanttCharts = this.getGanttCharts();
		for (var i = 0; i < aGanttCharts.length; i++){
			if (oEvent.oSource.getId() === aGanttCharts[i].getId()){
				continue;
			}
			var oNowGanttChart = aGanttCharts[i]._oTC || aGanttCharts[i]._oTT;
			oNowGanttChart._oVSb.setScrollPosition(nScrollSteps);
		}
	};
	
	GanttChartContainer.prototype._onViewSplitterResize = function (oEvent) {
		if (this._oSplitter.getOrientation() === Orientation.Vertical) {
			this._syncSelectionPanelSizeBetweenViews(oEvent);
			this._oToolbar.setZoomInfo(oEvent.getParameter("zoomInfo"));
		}
	};

	GanttChartContainer.prototype._syncSelectionPanelSizeBetweenViews = function (oEvent) {
		var aGanttCharts = this.getGanttCharts();
		for (var i = 0; i < aGanttCharts.length; i++) {
			if (oEvent.oSource.getId() === aGanttCharts[i].getId()) {
				continue;
			}
			aGanttCharts[i].setSelectionPanelSize(oEvent.getParameter("newSizes")[0] + "px", true);
		}
	};

	GanttChartContainer.prototype._onGanttChartSwitchRequested = function (oEvent) {

		oEvent.getSource().notifySourceChange();

		this.fireGanttChartChangeRequested({
			action: "switchGanttChart",
			hierarchyKey: oEvent.getParameter("hierarchyKey"),
			oldHierarchyKey: oEvent.getParameter("oldHierarchyKey"),
			ganttChartIndex: this.getGanttCharts().indexOf(oEvent.getSource())
		});
	};
	
	GanttChartContainer.prototype._onToolbarLayoutChange = function (oEvent){
		var sEventId = oEvent.getParameter("id");
		var oEventValue = oEvent.getParameter("value");
		switch (sEventId) {
			case "orientation":
				this.switchOrientation(oEventValue);
				break;
			case "add":
				this.fireGanttChartChangeRequested({
					action: "addGanttChart",
					hierarchyKey: oEventValue.hierarchyKey
				});
				this._updateGanttChartSize();
				break;
			case "less":
				this.fireGanttChartChangeRequested({
					action: "lessGanttChart",
					hierarchyKey: oEventValue.hierarchyKey,
					ganttChartIndex: oEventValue.ganttChartIndex
				});
				this._updateGanttChartSize();
				break;
			default:
				break;
		}
	};
	
	GanttChartContainer.prototype._updateGanttChartSize = function() {
		var aContents = this._oSplitter.getContentAreas();
		for (var l = 0; l < aContents.length; l++) {
			if (aContents[l].getLayoutData()) {
				if (aContents[l].getLayoutData().getSize() === "auto") {
					aContents[l].getLayoutData().setSize("100%");
				}
				aContents[l].getLayoutData().setSize("auto");
			}
		}
	};

	GanttChartContainer.prototype._onToolbarSourceChange = function (oEvent) {
		var aGanttCharts = this.getGanttCharts();
		for (var i = 0; i < aGanttCharts.length; i++) {
			aGanttCharts[i].notifySourceChange();
		}

		this.setContainerLayoutKey(oEvent.getParameter("id"));
		this.fireGanttChartChangeRequested({
			action: "switchContainerLayout",
			containerLayoutKey: oEvent.getParameter("id")
		});
	};

	GanttChartContainer.prototype._onToolbarExpandChartChange = function (oEvent) {
		var aGanttCharts = this.getGanttCharts();
		for (var i = 0; i < aGanttCharts.length; i++) {
			aGanttCharts[i].expandChartChange(oEvent);
		}
	};

	GanttChartContainer.prototype._onToolbarZoomRateChange = function (oEvent) {
		var aGanttCharts = this.getGanttCharts();
		var i, oGanttChart;
		for (i = 0; i < aGanttCharts.length; i++) {
			oGanttChart = aGanttCharts[i];
			oGanttChart.setTimeZoomRate(oEvent.getParameter("zoomRate"));
		}
		if (this._bInitHorizonApplied) {
			return;
		}
		this._bInitHorizonApplied = true;
		for (i = 0; i < aGanttCharts.length; i++) {
			oGanttChart = aGanttCharts[i];
			oGanttChart.jumpToPosition();
		}
	};
	
	GanttChartContainer.prototype._onChartDragEnter = function (oEvent) {
		//do the following only when the mouse is still down
		var oSourceEvent = oEvent.getParameter("originEvent");
		var oGanttChart = oEvent.getSource();
		if (oSourceEvent.button == 0 && oSourceEvent.buttons !== 0 && this._oDraggingSource !== undefined) {
			oGanttChart.setDraggingData(this._oDraggingSource);
			this._oDraggingSource = undefined;
		}else {
			this._oDraggingSource = undefined;
			oGanttChart.setDraggingData(this._oDraggingSource);
		}
	};
	
	GanttChartContainer.prototype._onChartDragLeave = function (oEvent) {
		var oParam = oEvent.getParameters();
		if (oParam.draggingSource !== undefined) {
			//drag out of chart
			this._oDraggingSource = oParam.draggingSource;
		}else {
			this._oDraggingSource = undefined;
		}
	};
	
	GanttChartContainer.prototype._onChartDragEnd = function (oEvent) {
		this._oDraggingSource = undefined;
	};
	
	GanttChartContainer.prototype._onToolbarSettingsChange = function(oEvent){
		var oParameters = oEvent.getParameters();
		for (var i = 0; i < oParameters.length; i++) {
			switch (oParameters[i].id)	{
				case sap.gantt.config.SETTING_ITEM_ENABLE_TIME_SCROLL_SYNC_KEY:
					if (this.getEnableTimeScrollSync() !== oParameters[i].value) {
						this.setEnableTimeScrollSync(oParameters[i].value);
					}
					break;
				case sap.gantt.config.SETTING_ITEM_ROW_SCROLL_SYNC_KEY:
					if (this.getEnableRowScrollSync() !== oParameters[i].value) {
						this.setEnableRowScrollSync(oParameters[i].value);
					}
					break;
				case sap.gantt.config.SETTING_ITEM_ENABLE_CURSOR_LINE_KEY:
					if (this.getEnableCursorLine() !== oParameters[i].value) {
						this.setEnableCursorLine(oParameters[i].value);
					}
					break;
				case sap.gantt.config.SETTING_ITEM_ENABLE_NOW_LINE_KEY:
					if (this.getEnableNowLine() !== oParameters[i].value) {
						this.setEnableNowLine(oParameters[i].value);
					}
					break;
				case sap.gantt.config.SETTING_ITEM_ENABLE_VERTICAL_LINE_KEY:
					if (this.getEnableVerticalLine() !== oParameters[i].value) {
						this.setEnableVerticalLine(oParameters[i].value);
					}
					break;
				default:
					this.fireCustomSettingChange(oParameters[i]);
			}
		}
		
	};

	/**
	 * Switches the splitter orientation.
	 * 
	 * @param {string} [vOrientation] Target orientation. If not provided, this method inverts the orientation.
	 * @param {boolean} [bReadConfig] If this value is provided, it overrides the target orientation from the current configuration indicated by property <code>containerLayoutKey</code>.
	 * @returns {object} - <code>this</code>
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	GanttChartContainer.prototype.switchOrientation = function (vOrientation, bReadConfig) {
		// init target orientation by switch current orientation
		var sOrientation = this._oSplitter.getOrientation() === Orientation.Horizontal ?
				Orientation.Vertical :
				Orientation.Horizontal;
		// over-write target orientation by input
		sOrientation = vOrientation ? vOrientation : sOrientation;
		
		
		if (bReadConfig) { // if bReadConfig, over-write target orientation by config 
			var sContainerLayoutKey = this.getContainerLayoutKey();
			if (this._oContainerLayoutConfigMap[sContainerLayoutKey]) {
				sOrientation = this._oContainerLayoutConfigMap[sContainerLayoutKey].getOrientation();
			}
		} else { // else, reset view ratio to 'auto'
			this._resetSplitterLayoutData(sOrientation);
		}
		
		this._oSplitter.setOrientation(sOrientation);
		
		return this;
	};

	GanttChartContainer.prototype._resetSplitterLayoutData = function (orientation) {
		var aSplitter;
		var aGanttCharts = this.getGanttCharts();
		var aContents = this._oSplitter.getContentAreas();
		for (var l = 0; l < aContents.length; l++) {
			if (aContents[l].getLayoutData()) {
				// to trigger resize of gantt splitter first
				if (aContents[l].getLayoutData().getSize() === "auto") {
					aContents[l].getLayoutData().setSize("100%");
				}
				aContents[l].getLayoutData().setSize("auto");
			}
		}
		for (var i = 0; i < aGanttCharts.length; i++) {
			aSplitter = aGanttCharts[i]._oSplitter;
			var contents = aSplitter.getContentAreas();
			for (var j = 0;j < contents.length; j++) {
				if (contents[j].getLayoutData()) {
					if (orientation === Orientation.Vertical) {
						if (j == 0 && contents.length > 1) {
							contents[j].getLayoutData().setSize("30%");
						} else {
							contents[j].getLayoutData().setSize("auto");
						}
					} else {
						contents[j].getLayoutData().setSize("auto");
					}			
				}
			}
		}
	};
	
	/**
	 * Returns the current effective toolbar scheme key.
	 * 
	 * @returns {string} - Toolbar scheme key.
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	GanttChartContainer.prototype.getToolbarSchemeKey = function () {
		return this._oToolbar.getToolbarSchemeKey();
	};
	
	/**
	 * Selects in-row shapes and returns a success code.
	 * 
	 * @param {int} [iGanttChart] Index of the Gantt chart containing the shapes that you want to select
	 * @param {array} [aIds] L of the shape IDs that you want to select
	 * @param {boolean} [isExclusive] Whether all other selected shapes are to be deselected
	 * @returns {boolean} - If any selection change is applied, returns true.
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	GanttChartContainer.prototype.selectShapes = function(iGanttChart, aIds, isExclusive) {
		var aGanttCharts = this.getGanttCharts(),
			bRetVal = false,
			oGanttChart;
		
		if (iGanttChart != undefined && iGanttChart < aGanttCharts.length) {
			oGanttChart = aGanttCharts[iGanttChart];
			bRetVal = oGanttChart.selectShapes(aIds, isExclusive);
		}else {
			for (var i = 0; i < aGanttCharts.length; i++) {
				oGanttChart = aGanttCharts[i];
				if (oGanttChart.selectShapes(aIds, isExclusive)) {
					bRetVal = true;
				}
			}
		}
		return bRetVal;
	};

	/**
	 * Deselects in-row shapes and returns a success code.
	 * 
	 * @param {int} [iGanttChartIndex] Index of the Gantt chart containing the shapes that you want to deselect
	 * @param {array} [aIds] List of the shapes that you want to deselect
	 * @returns {boolean} - If any selection change is applied, returns true.
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	GanttChartContainer.prototype.deselectShapes = function(iGanttChartIndex, aIds) {
		var aGanttCharts = this.getGanttCharts(),
			bRetVal = false,
			oGanttChart;
		
		if (iGanttChartIndex != undefined && iGanttChartIndex < this.getGanttCharts().length) {
			oGanttChart = this.getGanttCharts()[iGanttChartIndex];
			bRetVal = oGanttChart.deselectShapes(aIds);
		}else {
			for (var iGanttChart in aGanttCharts) {
				oGanttChart = aGanttCharts[iGanttChart];
				if (oGanttChart.deselectShapes(aIds)) {
					bRetVal = true;
				}
			}
		}
		return bRetVal;
	};

	/**
	 * Selects relationships and returns a success code.
	 * 
	 * @param {int} [iGanttChartIndex] Index of the Gantt chart containing the relationships that you want to select
	 * @param {array} [aIds] List of the relationships that you want to select
	 * @param {boolean} [isExclusive] Whether all other selected relationships are to be deselected
	 * @returns {boolean} - If any selection change is applied, returns true.
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	GanttChartContainer.prototype.selectRelationships = function(iGanttChartIndex, aIds, isExclusive) {
		var aGanttCharts = this.getGanttCharts(),
			bRetVal = false,
			oGanttChart;
		
		if (iGanttChartIndex != undefined && iGanttChartIndex < aGanttCharts.length) {
			oGanttChart = aGanttCharts[iGanttChartIndex];
			bRetVal = oGanttChart.selectRelationships(aIds, isExclusive);
		}else {
			for (var i = 0; i < aGanttCharts.length; i++) {
				oGanttChart = aGanttCharts[i];
				if (oGanttChart.selectRelationships(aIds, isExclusive)) {
					bRetVal = true;
				}
			}
		}
		return bRetVal;
	};

	/**
	 * Deselects relationships and returns a success code.
	 * 
	 * @param {int} [iGanttChartIndex] Index of the Gantt chart containing the relationships that you want to deselect
	 * @param {array} [aIds] List of the relationships that you want to deselect
	 * @returns {boolean} - If any selection change is applied, returns true.
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	GanttChartContainer.prototype.deselectRelationships = function(iGanttChartIndex, aIds) {
		var aGanttCharts = this.getGanttCharts(),
			bRetVal = false,
			oGanttChart;

		if (iGanttChartIndex != undefined && iGanttChartIndex < aGanttCharts.length) {
			oGanttChart = aGanttCharts[iGanttChartIndex];
			bRetVal = oGanttChart.deselectRelationships(aIds);
		}else {
			for (var i = 0; i < aGanttCharts.length; i++) {
				oGanttChart = aGanttCharts[i];
				if (oGanttChart.deselectRelationships(aIds)) {
					bRetVal = true;
				}
			}
		}

		return bRetVal;
	};

	/**
	 * Selects rows and returns a success code.
	 * 
	 * @param {int} [iGanttChartIndex] Index of the Gantt chart containing the rows that you want to select
	 * @param {array} [aIds] List of the rows that you want to select
	 * @param {boolean} [isExclusive] Whether all other selected rows are to be deselected
	 * @returns {boolean} - If any selection change is applied, returns true.
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	GanttChartContainer.prototype.selectRows = function(iGanttChartIndex, aIds, isExclusive) {
		var bRetVal = false,
			aGanttCharts = this.getGanttCharts(),
			oGanttChart;
		
		if (iGanttChartIndex != undefined && iGanttChartIndex < aGanttCharts.length) {
			oGanttChart = aGanttCharts[iGanttChartIndex];
			bRetVal = oGanttChart.selectRows(aIds, isExclusive);
		}else {
			for (var i = 0; i < aGanttCharts.length; i++) {
				oGanttChart = aGanttCharts[i];
				if (oGanttChart.selectRows(aIds, isExclusive)) {
					bRetVal = true;
				}
			}
		}

		return bRetVal;
	};

	/**
	 * Deselects rows and returns a success code.
	 * 
	 * @param {int} [iGanttChartIndex] Index of the Gantt chart containing the rows that you want to deselect
	 * @param {array} [aIds] List of the rows that you want to deselect
	 * @returns {boolean} - If any selection change is applied, returns true.
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	GanttChartContainer.prototype.deselectRows = function(iGanttChartIndex, aIds) {
		var bRetVal = false,
			aGanttCharts = this.getGanttCharts(),
			oGanttChart;
		
		if (iGanttChartIndex != undefined && iGanttChartIndex < aGanttCharts.length) {
			oGanttChart = aGanttCharts[iGanttChartIndex];
			bRetVal = oGanttChart.deselectRows(aIds);
		}else {
			for (var i = 0; i < aGanttCharts.length; i++) {
				oGanttChart = aGanttCharts[i];
				if (oGanttChart.deselectRows(aIds)) {
					bRetVal = true;
				}
			}
		}
		return bRetVal;
	};
	
	/**
	 * Selects rows and all shapes contained in these rows.
	 * 
	 * @param {int} [iGanttChartIndex] Index of the Gantt chart containing the rows and shapes that you want to select
	 * @param {array} [aIds] Row UIDs
	 * @param {boolean} [bIsExclusive] Whether reset all other selected rows and shapes are to be reset
	 * @returns {boolean} - If any selection change is applied, returns true.
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	GanttChartContainer.prototype.selectRowsAndShapes = function(iGanttChartIndex, aIds, bIsExclusive) {
		var bRetVal = false,
			aGanttCharts = this.getGanttCharts(),
			oGanttChart;
		
		if (iGanttChartIndex != undefined && iGanttChartIndex < aGanttCharts.length) {
			oGanttChart = aGanttCharts[iGanttChartIndex];
			bRetVal = oGanttChart.selectRowsAndShapes(aIds, bIsExclusive);
		}else {
			for (var i = 0; i < aGanttCharts.length; i++) {
				oGanttChart = aGanttCharts[i];
				if (oGanttChart.selectRowsAndShapes(aIds, bIsExclusive)) {
					bRetVal = true;
				}
			}
		}
		return bRetVal;
	};

	/**
	 * Gets the selected in-row shapes.
	 * 
	 * @param {int} [iGanttChartIndex] Index of the Gantt chart containing the selected shapes that you want to get
	 * @return {array} Returns all selected shapes in the chart
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	GanttChartContainer.prototype.getSelectedShapes = function(iGanttChartIndex) {
		var aRetVal = [],
			aGanttCharts = this.getGanttCharts(),
			oGanttChart,
			oSelectedShapes;
		
		if (iGanttChartIndex != undefined && iGanttChartIndex < aGanttCharts.length) {
			oGanttChart = aGanttCharts[iGanttChartIndex];
			oSelectedShapes = oGanttChart.getSelectedShapes();
			if (oSelectedShapes !== undefined) {
				aRetVal.push({"ganttChartIndex": iGanttChartIndex, "selectedShapes": oSelectedShapes});
			}
		}else {
			for (var i = 0; i < aGanttCharts.length; i++) {
				oGanttChart = aGanttCharts[i];
				oSelectedShapes = oGanttChart.getSelectedShapes();
				if (oSelectedShapes !== undefined) {
					aRetVal.push({"ganttChartIndex": i, "selectedShapes": oSelectedShapes});
				}
			}
		}
		
		return aRetVal;
	};

	/**
	 * Gets the selected rows.
	 * 
	 * @param {int} [iGanttChartIndex] Index of the Gantt chart containing the selected rows that you want to get
	 * @return {array} Returns all selected rows
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	GanttChartContainer.prototype.getSelectedRows = function(iGanttChartIndex) {
		var aRetVal = [],
			aGanttCharts = this.getGanttCharts(),
			oGanttChart, aRows;
		
		if (iGanttChartIndex != undefined && iGanttChartIndex < aGanttCharts.length) {
			oGanttChart = aGanttCharts[iGanttChartIndex];
			aRows = oGanttChart.getSelectedRows();
			if (aRows !== undefined && aRows.length > 0) {
				aRetVal.push({"ganttChartIndex": iGanttChartIndex, "selectedRows": aRows});
			}
		}else {
			for (var i = 0; i < aGanttCharts.length; i++) {
				oGanttChart = aGanttCharts[i];
				aRows = oGanttChart.getSelectedRows();
				if (aRows !== undefined) {
					aRetVal.push({"ganttChartIndex": i, "selectedRows": aRows});
				}
			}
		}
		
		return aRetVal;
	};
	
	/**
	 * Gets the selected relationships.
	 * 
	 * @param {int} [iGanttChartIndex] Index of the Gantt chart containing the selected relationships that you want to get
	 * @return {array} Returns all selected relationships in the chart
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	GanttChartContainer.prototype.getSelectedRelationships = function(iGanttChartIndex) {
		var aRetVal = [],
			aGanttCharts = this.getGanttCharts(),
			oGanttChart, aRelationships;

		if (iGanttChartIndex != undefined && iGanttChartIndex < aGanttCharts.length) {
			oGanttChart = aGanttCharts[iGanttChartIndex];
			aRelationships = oGanttChart.getSelectedRelationships();
			if (aRelationships !== undefined) {
				aRetVal.push({"ganttChartIndex": iGanttChartIndex, "selectedRelationships": aRelationships});
			}
		}else {
			for (var i = 0; i < aGanttCharts.length; i++) {
				oGanttChart = aGanttCharts[i];
				aRelationships = oGanttChart.getSelectedRelationships();
				if (aRelationships !== undefined) {
					aRetVal.push({"ganttChartIndex": i, "selectedRelationships": aRelationships});
				}
			}
		}
		
		return aRetVal;
	};
	
	/**
	 * Gets all selected rows and shapes, including relationships.
	 * 
	 * @param {int} [iGanttChartIndex] Index of the Gantt chart containing that you want to get
	 * @return {object} The returned object contains "rows" for all selected rows, "shapes" for all selected shapes, and "relationships" for all selected relationships
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	GanttChartContainer.prototype.getAllSelections = function(iGanttChartIndex) {
		var aRetVal = [],
			aGanttCharts = this.getGanttCharts(),
			oGanttChart, oSelections;
		
		if (iGanttChartIndex != undefined && iGanttChartIndex < aGanttCharts.length) {
			oGanttChart = aGanttCharts[iGanttChartIndex];
			oSelections = oGanttChart.getAllSelections();
			if (oSelections !== undefined) {
				aRetVal.push({"ganttChartIndex": iGanttChartIndex, "allSelection": oSelections});
			}
		}else {
			for (var i = 0; i < aGanttCharts.length; i++) {
				oGanttChart = aGanttCharts[i];
				oSelections = oGanttChart.getAllSelections();
				if (oSelections !== undefined) {
					aRetVal.push({"ganttChartIndex": i, "allSelection": oSelections});
				}
			}
		}
		
		return aRetVal;
	};

	GanttChartContainer.prototype.exit = function () {
		this._detachEvents();
		this._oToolbar.destroy();
		this._oSplitter.destroy();
	};

	return GanttChartContainer;
}, true);

}; // end of sap/gantt/GanttChartContainer.js
if ( !jQuery.sap.isDeclared('sap.gantt.config.SettingGroup') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.config.SettingGroup'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/config/SettingGroup",[
	"./ToolbarGroup", "./SettingItem"
], function (ToolbarGroup, SettingItem) {
	"use strict";
	
	/**
	 * Creates and initializes a new setting group.
	 *
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * The SettingGroup control allows you to specify the number of setting items to display in the Setting window.
	 * @extends sap.gantt.config.ToolbarGroup
	 *
	 * @author SAP SE
	 * @version 1.36.8
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.config.SettingGroup
	 */
	var SettingGroup = ToolbarGroup.extend("sap.gantt.config.SettingGroup", /** @lends sap.gantt.config.SettingGroup.prototype */ {
		library : "sap.gantt",
		metadata: {
			properties: {
				/**
				 * Association to the setting item. See {@link sap.gantt.config.SettingItem}
				 */
				items: {type: "array", defaultValue: sap.gantt.config.DEFAULT_TOOLBAR_SETTING_ITEMS}
			}
		}
	});

	return SettingGroup;
}, /* bExport= */ true);

}; // end of sap/gantt/config/SettingGroup.js
if ( !jQuery.sap.isDeclared('sap.gantt.legend.LegendBase') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.legend.LegendBase'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.thirdparty.d3'); // unlisted dependency retained
sap.ui.define("sap/gantt/legend/LegendBase",[
	"sap/ui/core/Control", "sap/gantt/misc/Utility", "../misc/AxisTime", "sap/ui/thirdparty/d3"
], function (Control, Utility, AxisTime) {
	"use strict";
	
	var LegendBase = Control.extend("sap.gantt.legend.LegendBase", {
		metadata: {
			abstract: true,
			properties: {
				svgDefs: {type: "array"},
				legendWidth: {type: "number", defaultValue: 32}, // width in pixels in compact mode
				legendHeight: {type: "number", defaultValue: 32}, // height in pixels in compact mode

				/**
				 * Font size of legend item texts.
				 */
				fontSize: {type: "number", defaultValue: 16} // font size for legend text
			}
		}
	});
	
	// timestamp to create a fake axistime.
	LegendBase.prototype.TIME_RANGE = ["20160101000000", "20160103000000"];
	// middle timestamp of the time axis.
	LegendBase.prototype.TIME = "20160102000000";
	
	LegendBase.prototype.init = function () {
		this._aTimeRange = [d3.time.format("%Y%m%d%H%M%S").parse(this.TIME_RANGE[0]),
			d3.time.format("%Y%m%d%H%M%S").parse(this.TIME_RANGE[1])];
	};
	
	LegendBase.prototype.getAxisTime = function () {
		return this._oAxisTime;
	};
	
	LegendBase.prototype.onBeforeRendering = function () {
		this._sUiSizeMode = Utility.findSapUiSizeClass();
		
		this._aViewRange = [0, this._getScaledLegendWidth()];
		this._oAxisTime = new AxisTime(this._aTimeRange, this._aViewRange);
//		for calendar
//		this._oStatusSet = {
//			aViewBoundary: this._aViewRange
//		};
	};
	
	LegendBase.prototype._getScaledLegendWidth = function () {
		return Utility.scaleBySapUiSize(this.getSapUiSizeClass(), this.getLegendWidth());
	};
	
	LegendBase.prototype._getScaledLegendHeight = function () {
		return Utility.scaleBySapUiSize(this.getSapUiSizeClass(), this.getLegendHeight());
	};

	LegendBase.prototype.getSapUiSizeClass = function () {
		return this._sUiSizeMode;
	};
	return LegendBase;
}, true);
}; // end of sap/gantt/legend/LegendBase.js
if ( !jQuery.sap.isDeclared('sap.gantt.legend.ListLegend') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.legend.ListLegend'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/legend/ListLegend",[
	"./LegendBase", "sap/gantt/drawer/ListLegend", "sap/gantt/drawer/CalendarPattern"
], function (LegendBase, ListLegendDrawer, CalendarPattern) {
	"use strict";
	
	var ListLegend = LegendBase.extend("sap.gantt.legend.ListLegend", {
		metadata: {
			properties: {
				shapes: {type: "array"}
			}
		}
	});
	
	ListLegend.prototype.init = function () {
		LegendBase.prototype.init.apply(this, arguments);
		this._oListLegendDrawer = new ListLegendDrawer();
	};
	
	ListLegend.prototype.onAfterRendering = function () {
		for (var i = 0; i < this._aShapeInstance.length; i++) {
			var oShape = this._aShapeInstance[i];
			
			var aSvg = d3.select("#" + this.getId() + "-svg-" + i);

			this._oListLegendDrawer._drawPerTag(aSvg, oShape);
		}
	};
	
	ListLegend.prototype.setShapes = function (aShapes) {
		if (aShapes && aShapes.length > 0) {
			this._aShapeInstance = this._instantShape(aShapes);
			this.setProperty("shapes", aShapes);
		}
		return this;
	};

	ListLegend.prototype._instantShape = function (aShapes) {
		var aRetVal = [];
		// parse shape instances
		for (var i = 0; i < aShapes.length; i++) {
			if (aShapes[i].getShapeClassName()) {
				// create shape instance
				var oShapeInst = this._instantiateCustomerClass(aShapes[i].getShapeClassName(), i, aShapes[i]);
				
				if (aShapes[i].getClippathAggregation() && aShapes[i].getClippathAggregation() instanceof Array) {
					// create aggregation classes for clip-path
					var aPath = this._instantShape(aShapes[i].getClippathAggregation());
					aRetVal = aRetVal.concat(aPath);
				} else if (aShapes[i].getGroupAggregation() && aShapes[i].getGroupAggregation() instanceof Array) {
					// create aggregation classes for group
					var aAggregation = this._instantShape(aShapes[i].getGroupAggregation());
					for (var k = 0; k < aAggregation.length; k++) {
						oShapeInst.addShape(aAggregation[k]);
					}
				}
				
				if (this._isProperShape(oShapeInst)) {
					aRetVal.push(oShapeInst);
				}
			}
		}

		return aRetVal;
	};
	
	ListLegend.prototype._isProperShape = function (oShapeInst) {
		if (oShapeInst instanceof sap.gantt.shape.cal.Calendar) {
			jQuery.sap.log.warning("Calendar is not proper shape", "key '" + oShapeInst.mShapeConfig.getKey() + "'", "ListLegend");
			return false;
		} else if (oShapeInst.getTag() == "clippath") {
			return false;
		} else {
			return true;
		}
	};

	ListLegend.prototype._instantiateCustomerClass = function (sCustomerClassName, sShapeId, oShapeConfig) {
		var CustomerClass = jQuery.sap.getObject(sCustomerClassName);
		if (!CustomerClass) {
			jQuery.sap.require(sCustomerClassName);
			CustomerClass = jQuery.sap.getObject(sCustomerClassName);
		}
		
		var oCustomerClassInstance = new CustomerClass();

		oCustomerClassInstance.mShapeConfig = oShapeConfig;
		oCustomerClassInstance.mChartInstance = this;

		return oCustomerClassInstance;
	};
	
	return ListLegend;
}, true);
}; // end of sap/gantt/legend/ListLegend.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.ubc.UbcOverCapacityZonePolygon') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.ubc.UbcOverCapacityZonePolygon'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ext/ubc/UbcOverCapacityZonePolygon",[
	"sap/gantt/misc/Utility", "sap/gantt/shape/ext/ubc/UbcPolygon"
], function(Utility, UbcPolygon){
	"use strict";
	
	/**
	 * Creates and initializes a fragment of the Utilization Line Chart.
	 * 
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings of the new control
	 * 
	 * @class 
	 * This shape is used to represent the background of an over capacity zone.
	 * 
	 * <p>
	 * Graphic Effect is:<br/>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="8.8cm" viewBox="0 0 300 220" version="1.1">
	 * <defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * 	<marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * 	<style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * 	.arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63;fill:none} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * 	<rect x="1" y="1" width="298" height="218" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<defs><pattern class="pattern" id="pUbc" patternUnits="userSpaceOnUse" x="0" y="0" width="4" height="4"><rect x="0" width="4" height="4" fill="#efefef"></rect><path d="M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2 " stroke="#6d6d6d" stroke-width="0.5"></path></pattern>
	 * 	<pattern class="pattern" id="pEx2" patternUnits="userSpaceOnUse" x="0" y="0" width="4" height="4"><rect x="0" width="4" height="4" fill="#f2a5a5"></rect><path d="M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2 " stroke="#9E1F63" stroke-width="0.5"></path></pattern></defs>
	 * 	<path d="M 10 65 h 280 v 90 h -280 z" class="dashside" />
	 * 	<polygon points="10,65 290,65 290,155 10,155" fill="url(#pUbc)" />
	 * </svg>
	 * </p>
	 * 
	 * @extends sap.gantt.shape.ext.ubc.UbcPolygon
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.ubc.UbcOverCapacityZonePolygon
	 */
	var UbcOverCapacityZonePolygon = UbcPolygon.extend("sap.gantt.shape.ext.ubc.UbcOverCapacityZonePolygon", /** @lends sap.gantt.shape.ext.ubc.UbcOverCapacityZonePolygon.prototype */ {});

	/**
	 * Gets the value of property <code>fill</code>.
	 * 
	 * <p> 
	 * Standard SVG 'fill' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#FillProperty SVG 1.1 specification for 'fill'}.
	 * <b>Note:</b> You can provide fill with HTML colors and the URL reference to a paint server. Paint server definitions can be retrieved from paint servers rendered by
	 * {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable}, or {@link sap.gantt.GanttChart}. The default value 
	 * of 'fill' is the URL reference. 
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>fill</code>.
	 * @public
	 */
	UbcOverCapacityZonePolygon.prototype.getFill = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("fill")){
			return this._configFirst("fill", oData);
		}
		
		var sColor, sPattern;
		if (this.mShapeConfig.hasShapeProperty("backgroundColor")) {
			sColor = this._configFirst("backgroundColor", oData);
		}
		if (this.mShapeConfig.hasShapeProperty("pattern")) {
			sPattern = this._configFirst("pattern", oData);
		}
		var sPatternId;
		if (sColor && sPattern){
			sPatternId = "pattern_" + sPattern + "_" + (sColor.indexOf("#") == 0 ? sColor.substring(1, sColor.length) : sColor);
		}
		if (sPatternId && sap.ui.getCore().byId(sPatternId)){
			return sap.ui.getCore().byId(sPatternId).getRefString();
		}
	};

	/**
	 * Gets the value of property <code>stroke</code>.
	 * 
	 * <p>
	 * Standard SVG 'stroke' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeProperty SVG 1.1 specification for 'stroke'}.
	 * <b>Note:</b> You can provide stroke with HTML colors and the URL reference to a paint server. Paint server definitions can be retrieved from paint servers rendered by
	 * {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable}, or {@link sap.gantt.GanttChart}.
	 * </p>
	 * <p>The default value is "#CAC7BA".</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>stroke</code>.
	 * @public
	 */
	UbcOverCapacityZonePolygon.prototype.getStroke = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("stroke")){
			return this._configFirst("stroke", oData);
		}
		return "#CAC7BA";
	};

	/**
	 * Gets the value of property <code>strokeWidth</code>.
	 * 
	 * <p>
	 * Standard SVG 'stroke-width' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeWidthProperty SVG 1.1 specification for 'stroke-width'}.
	 * </p>
	 * <p>The default value is 0.3.</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>strokeWidth</code>.
	 * @public
	 */
	UbcOverCapacityZonePolygon.prototype.getStrokeWidth = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("strokeWidth")) {
			return this._configFirst("strokeWidth", oData);
		}
		return 0.3;
	};

	/**
	 * Gets the value of property <code>points</code>.
	 * 
	 * <p>
	 * points attribute of the polygon element.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#PolygonElementPointsAttribute SVG 1.1 specification for the 'points' attribute of 'polygon'}.
	 * The value of 'points' is calculated by the coordinates of four vertices of a visible area.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>points</code>.
	 * @public
	 */
	UbcOverCapacityZonePolygon.prototype.getPoints = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("points")) {
			return this._configFirst("points", oData);
		}
		
		var overCapacityZonePoints = "";
		var aViewRange = this.getShapeViewBoundary();
		if (aViewRange){
			overCapacityZonePoints = aViewRange[0] + "," + oRowInfo.y + " " + (aViewRange[1] - aViewRange[0]) + 
			"," + oRowInfo.y + " " + (aViewRange[1] - aViewRange[0]) + "," + ( oRowInfo.y + 
			oRowInfo.rowHeight ) + " " + aViewRange[0] + "," + ( oRowInfo.y + 
			oRowInfo.rowHeight );
			return overCapacityZonePoints;
		}
	};

	return UbcOverCapacityZonePolygon;
}, true);

}; // end of sap/gantt/shape/ext/ubc/UbcOverCapacityZonePolygon.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.ulc.UlcOverCapacityZoneRectangle') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.ulc.UlcOverCapacityZoneRectangle'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ext/ulc/UlcOverCapacityZoneRectangle",[
	"sap/gantt/shape/ext/ulc/UlcRectangle"
], function(UlcRectangle){
	"use strict";
	
	/**
	 * Creates and initializes a fragment of the Utilization Line Chart.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings of the new control
	 * 
	 * @class 
	 * This shape is used to draw the over capacity zone background.
	 * 
	 * <p>
	 * Graphic Effect is:<br/>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="8.8cm" viewBox="0 0 300 220" version="1.1">
	 * <defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * 	<marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * 	<style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * 	.arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63;fill:none} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * 	<rect x="1" y="1" width="298" height="218" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<defs><pattern class="pattern" id="pUlc" patternUnits="userSpaceOnUse" x="0" y="0" width="4" height="4"><rect x="0" width="4" height="4" fill="#efefef"></rect><path d="M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2 " stroke="#6d6d6d" stroke-width="0.5"></path></pattern>
	 * 	<pattern class="pattern" id="pEx" patternUnits="userSpaceOnUse" x="0" y="0" width="4" height="4"><rect x="0" width="4" height="4" fill="#f2a5a5"></rect><path d="M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2 " stroke="#d16d6d" stroke-width="0.5"></path></pattern></defs>
	 * 	<path d="M 10 85 h 280 v -20 h -280 v 90 h 280 v -70" class="dashside" />
	 * 	<rect id="overBg" x="10" y="65" width="280" height="20" fill="url(#pUlc)" />
	 * </svg>
	 * </p>
	 * 
	 * @extends sap.gantt.shape.ext.ulc.UlcRectangle
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.ulc.UlcOverCapacityZoneRectangle
	 */
	var UlcOverCapacityZoneRectangle = UlcRectangle.extend("sap.gantt.shape.ext.ulc.UlcOverCapacityZoneRectangle", /** @lends sap.gantt.shape.ext.ulc.UlcOverCapacityZoneRectangle.prototype */ {});

	/**
	 * Gets the value of property <code>fill</code>.
	 * 
	 * <p> 
	 * Standard SVG 'fill' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#FillProperty SVG 1.1 specification for 'fill'}.
	 * <b>Note:</b> You can provide <code>fill</code> property with the HTML colors and the URL reference to a paint server. Paint server definitions can be retrieved from paint servers rendered by
	 * {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable}, or {@link sap.gantt.GanttChart}. The default value 
	 * of 'fill' is a URL reference.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>fill</code>.
	 * @public
	 */
	UlcOverCapacityZoneRectangle.prototype.getFill = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("fill")){
			return this._configFirst("fill", oData);
		}
		
		var sColor, sPattern;
		if (this.mShapeConfig.hasShapeProperty("backgroundColor")) {
			sColor = this._configFirst("backgroundColor", oData);
		}
		if (this.mShapeConfig.hasShapeProperty("pattern")) {
			sPattern = this._configFirst("pattern", oData);
		}
		var sPatternId;
		if (sColor && sPattern){
			sPatternId = "pattern_" + sPattern + "_" + (sColor.indexOf("#") == 0 ? sColor.substring(1, sColor.length) : sColor);
		}
		if (sPatternId && sap.ui.getCore().byId(sPatternId)){
			return sap.ui.getCore().byId(sPatternId).getRefString();
		}
		
		return "#F6F6F6";
	};

	/**
	 * Gets the value of property <code>stroke</code>.
	 * 
	 * <p>
	 * Standard SVG 'stroke' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeProperty SVG 1.1 specification for 'stroke'}.
	 * <b>Note:</b> HTML colors and url reference to paint server can be provided to stroke. Paint server definitions usually comes from paint servers rendered by
	 * {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable} or {@link sap.gantt.GanttChart}.
	 * </p>
	 * <p>The default value is "#CAC7BA".</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>stroke</code>.
	 * @public
	 */
	UlcOverCapacityZoneRectangle.prototype.getStroke = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("stroke")){
			return this._configFirst("stroke", oData);
		}
		
		return "#CAC7BA";
	};

	/**
	 * Gets the value of property <code>strokeWidth</code>.
	 * 
	 * <p>
	 * Standard SVG 'stroke-width' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeWidthProperty SVG 1.1 specification for 'stroke-width'}.
	 * </p>
	 * <p>The default value is 0.</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>strokeWidth</code>.
	 * @public
	 */
	UlcOverCapacityZoneRectangle.prototype.getStrokeWidth = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("strokeWidth")){
			return this._configFirst("strokeWidth", oData);
		}
		
		return 0;
	};

	return UlcOverCapacityZoneRectangle;
}, true);

}; // end of sap/gantt/shape/ext/ulc/UlcOverCapacityZoneRectangle.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.ulc.UlcOverClipRectangle') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.ulc.UlcOverClipRectangle'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ext/ulc/UlcOverClipRectangle",[
	"sap/gantt/shape/ext/ulc/UlcRectangle"
], function(UlcRectangle){
	"use strict";

	/**
	 * Creates and initializes a fragment of the Utilization Line Chart.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings of the new control
	 * 
	 * @class 
	 * This shape is used to draw the over clipping rectangle.
	 * 
	 * <p>
	 * Graphic Effect is:<br/>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="8.8cm" viewBox="0 0 300 220" version="1.1">
	 * <defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * 	<marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * 	<style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * 	.arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63;fill:none} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * 	<rect x="1" y="1" width="298" height="218" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<defs><pattern class="pattern" id="pUlc" patternUnits="userSpaceOnUse" x="0" y="0" width="4" height="4"><rect x="0" width="4" height="4" fill="#efefef"></rect><path d="M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2 " stroke="#6d6d6d" stroke-width="0.5"></path></pattern>
	 * 	<pattern class="pattern" id="pEx" patternUnits="userSpaceOnUse" x="0" y="0" width="4" height="4"><rect x="0" width="4" height="4" fill="#f2a5a5"></rect><path d="M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2 " stroke="#d16d6d" stroke-width="0.5"></path></pattern></defs>
	 * 	<path d="M 10 85 h 280 v -20 h -280 v 90 h 280 v -70" class="dashside" />
	 * 	<clippath id="cpSide"><path d="M 40 155 l 25 -90 h 50 l 20 30 h 100 l 40 60" /></clippath>
	 * 	<clippath id="cpTexthyphon"><path d="M 40 155 l 25 -85 h 50 l 20 10 h 100 l 40 75" /></clippath>
	 * 	<rect id="overSide"x="10" y="65" width="280" height="20" clip-path="url(#cpSide)" fill="url(#pEx)" stroke="none"/>
	 * 	<rect id="overTexthyphon" x="10" y="65" width="280" height="20" clip-path="url(#cpTexthyphon)" fill="url(#pEx)" stroke="none"/>
	 * </svg>
	 * </p>
	 * 
	 * @extends sap.gantt.shape.ext.ulc.UlcRectangle
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.ulc.UlcOverClipRectangle
	 */
	var UlcOverClipRectangle = UlcRectangle.extend("sap.gantt.shape.ext.ulc.UlcOverClipRectangle", /** @lends sap.gantt.shape.ext.ulc.UlcOverClipRectangle.prototype */ {});

	/**
	 * Gets the value of property <code>fill</code>.
	 * 
	 * <p> 
	 * Standard SVG 'fill' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#FillProperty SVG 1.1 specification for 'fill'}.
	 * <b>Note:</b> You can provide the <code>fill</code> property with HTML colors and the URL reference to a paint server. Paint server definitions can be retrieved from paint servers rendered by
	 * {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable}, or {@link sap.gantt.GanttChart}.
	 * </p>
	 * <p>The default value is "#FF0000".</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>fill</code>.
	 * @public
	 */
	UlcOverClipRectangle.prototype.getFill = function(oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("fill")){
			return this._configFirst("fill", oData);
		}
		
		return "#FF0000";
	};

	/**
	 * Gets the value of property <code>clipPath</code>.
	 * 
	 * <p>
	 * Standard SVG 'clippath' attribute.
	 * See {@link http://www.w3.org/TR/SVG/masking.html#ClipPathProperty SVG 1.1 specification for 'clippath'}.
	 * 
	 *  The referred ID must be consistent with the HTML class generated by <code>UlcClipPath</code>.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>clipPath</code>.
	 * @public
	 */
	UlcOverClipRectangle.prototype.getClipPath = function(oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("clipPath")){
			return this._configFirst("clipPath", oData);
		}
		
		var uid = oRowInfo.uid;
		var pattern = new RegExp("\\[|\\]|:|\\|", "g");
		var newUid = uid.replace(pattern, "_"); 
		
		return "url(#" + newUid + "_" + oData.id + "_" + oData.dimension + ")";
	};

	return UlcOverClipRectangle;
}, true);

}; // end of sap/gantt/shape/ext/ulc/UlcOverClipRectangle.js
if ( !jQuery.sap.isDeclared('sap.gantt.GanttChart') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.GanttChart'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.TreeTable'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.Row'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained
jQuery.sap.require('sap.ui.thirdparty.d3'); // unlisted dependency retained
sap.ui.define("sap/gantt/GanttChart",[
	'jquery.sap.global',
	"sap/gantt/GanttChartBase", "sap/ui/core/Core", "sap/ui/table/TreeTable", "sap/ui/table/Row",
	"sap/gantt/misc/Utility",
	'sap/ui/core/theming/Parameters',
	"sap/gantt/shape/SelectedShape", "sap/gantt/shape/ext/rls/SelectedRelationship",
	"sap/gantt/drawer/ShapeInRow", "sap/gantt/drawer/ShapeCrossRow", "sap/gantt/drawer/CursorLine", "sap/gantt/drawer/NowLine", "sap/gantt/drawer/VerticalLine","sap/gantt/drawer/CalendarPattern",
	"sap/gantt/misc/AxisTime", "sap/gantt/misc/AxisOrdinal", "sap/gantt/misc/Format", "sap/gantt/misc/TreeTableHelper",
	// 3rd party lib
	"sap/ui/thirdparty/d3"
], function (jQuery, GanttChartBase, Core, TreeTable, Row, Utility, Parameters, SelectedShape, SelectedRelationship,
		ShapeInRowDrawer, ShapeCrossRowDrawer, CursorLineDrawer, NowLineDrawer, VerticalLineDrawer, CalendarPattern, AxisTime, AxisOrdinal, Format, TreeTableHelper) {
	"use strict";
	
	/**
	 * Creates and initializes a new Gantt Chart.
	 * 
	 * @param {string} [sId] ID for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * Gantt Chart control.
	 * 
	 * <p>The Gantt chart has a horizontal axis at the top that represents time and a vertical axis that represents rows.
	 * </p>
	 * 
	 * @extends sap.gantt.GanttChartBase
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.GanttChart
	 */
	var GanttChart = GanttChartBase.extend("sap.gantt.GanttChart", /** @lends sap.gantt.GanttChart.prototype */ {
		metadata: {
			aggregations: {
				_treeTable: {type: "sap.ui.table.TreeTable", multiple: false, visibility: "hidden"} // to ensure model pass down
			}
		}
	});

	GanttChart.prototype.init = function () {
		jQuery.sap.measure.start("GanttChart init","GanttPerf:GanttChart init function");
		// create tree table
		this._oTT = new TreeTable({
			visibleRowCountMode: "Auto",
			minAutoRowCount: 1,
			selectionBehavior: sap.ui.table.SelectionBehavior.RowOnly,
			selectionMode: sap.ui.table.SelectionMode.Multi,
			columnHeaderVisible: false
		});
		this._oTT.addColumn(new sap.ui.table.Column());
		this.setAggregation("_treeTable", this._oTT);
		// de/attach horizontal scroll bar
		this._oTT._oHSb.detachScroll(this._oTT.onhscroll, this._oTT);
		this._oTT._oHSb.attachScroll(this._onHSbScroll, this);
		// de/attach vertical scroll bar
		this._oTT._oVSb.detachScroll(this._oTT.onvscroll, this._oTT);
		this._oTT._oVSb.attachScroll(this._onVSbScroll, this);
		// sync svg with oTT
		this._oTT.attachEvent("_rowsUpdated", this._onTTRowUpdate.bind(this));
		this._oTT.addEventDelegate({
			onAfterRendering: this._onTTRowUpdate
		}, this);
		
		this._oTT.attachEvent("_rowSelectionChange", this._onRowSelectionChange.bind(this));
		this._oTT.attachRowSelectionChange(this._onRowSelectionChange, this);
		this._oTT.addEventDelegate({
			onAfterRendering: this._updateCSSForDummyRow
		}, this);
		
		// create drawers
		this._oShapeInRowDrawer = new ShapeInRowDrawer();
		this._oShapeCrossRowDrawer = new ShapeCrossRowDrawer();
		this._oCursorLineDrawer = new CursorLineDrawer();
		this._oCalendarPatternDrawer = new CalendarPattern();
		
		// internal private members
		this._oAxisTime = undefined;
		this._oAxisOrdinal = undefined;
		this._aShapeData = undefined; // data to be drawn on svg using registed shape instances
		this._aShapeInstance = undefined;	// array of shape instances
		this._oShapeInstance = undefined;	// map of top shape instances
		this._oZoom = { // zoom info
			base: {}
		};
		this._oDataNamePerType = {};
		this._fLeftOffsetRate = 0.0;
		this._oStatusSet = null;
		this._nLowerRange = 0;
		this._nUpperRange = 0;
		
		this._aSelectedRelationships = undefined;
		this._oSelectedShapes = {};
		this._aSelectedShapeUids = [];
		
		//add for mouse events to support drag shape over views
		this._iMouseDown = 0;
		this._bMouseDown = false;
		this._bDragging = false;
		this._oDraggingData = undefined;
		
		this._lastHoverRowIndex = undefined;
		
		// defualt maps
		this._oChartSchemesConfigMap = {};
		this._oChartSchemesConfigMap[sap.gantt.config.DEFAULT_CHART_SCHEME_KEY] = sap.gantt.config.DEFAULT_CHART_SCHEME;
		this._oObjectTypesConfigMap = {};
		this._oObjectTypesConfigMap[sap.gantt.config.DEFAULT_OBJECT_TYPE_KEY] = sap.gantt.config.DEFAULT_OBJECT_TYPE;
		
		this._fExtendFactor = 0.382;
		
		// create default this._oAxisTime
		this._calZoomFromTimeAxisConfig(sap.gantt.config.DEFAULT_TIME_AXIS);
		this._createAxisTime(sap.gantt.config.DEFAULT_TIME_AXIS);
		
		// performance tuning
		this._mDrawDelayMS = 500;
		this._mTimeouts = {};

		jQuery.sap.measure.end("GanttChart init");
	};
	
	GanttChart.prototype.setTimeAxis = function (oTimeAxis) {
		this.setProperty("timeAxis", oTimeAxis, true); // no need to trigger rerender
		this._calZoomFromTimeAxisConfig(oTimeAxis);
		this._createAxisTime(oTimeAxis);
		this._oStatusSet = null;
		
		this._draw(true); // only _draw is triggered
		
		return this;
	};
	
	GanttChart.prototype.setLocale = function (oLocale) {
		this.setProperty("locale", oLocale, true); // no need to trigger rerender
		this._oAxisTime.setLocale(oLocale);
		
		this._drawShapes();
		this._drawSelectedShapes();
		
		return this;
	};
	
	GanttChart.prototype.setChartSchemes = function (aChartSchemes) {
		this.setProperty("chartSchemes", aChartSchemes, true); // no need to trigger rerender
		// build a map for easy look up
		this._oChartSchemesConfigMap = {};
		if (aChartSchemes) {
			for (var i = 0; i < aChartSchemes.length; i++) {
				this._oChartSchemesConfigMap[aChartSchemes[i].getKey()] = aChartSchemes[i];
			}
		}
		
		this._drawShapes();
		this._drawSelectedShapes();
		
		return this;
	};
	
	GanttChart.prototype.setObjectTypes = function (aObjectTypes) {
		this.setProperty("objectTypes", aObjectTypes, true); // no need to trigger rerender
		// build a map for easy look up
		this._oObjectTypesConfigMap = {};
		if (aObjectTypes) {
			for (var i = 0; i < aObjectTypes.length; i++){
				this._oObjectTypesConfigMap[aObjectTypes[i].getKey()] = aObjectTypes[i];
			}
		}
		
		this._drawShapes();
		this._drawSelectedShapes();
		
		return this;
	};
	
	GanttChart.prototype.setSelectionMode = function (sSelectionMode) {
		this.setProperty("selectionMode", sSelectionMode);
		if (this._oTT) {
			if (sSelectionMode == sap.gantt.SelectionMode.MultiWithKeyboard) {
				this._oTT.setSelectionMode(sap.ui.table.SelectionMode.Multi);
			}else if (sSelectionMode == sap.gantt.SelectionMode.Multiple){
				this._oTT.setSelectionMode(sap.ui.table.SelectionMode.MultiToggle);
			}else if (sSelectionMode == sap.gantt.SelectionMode.Single) {
				this._oTT.setSelectionMode(sap.ui.table.SelectionMode.Single);
			}else {
				this._oTT.setSelectionMode(sap.ui.table.SelectionMode.None);
			}
		}
		return this;
	};

	GanttChart.prototype._calZoomFromTimeAxisConfig = function (oTimeAxis) {
		if (!oTimeAxis) {
			return;
		}
		// init an object on this._oZoom
		this._oZoom.base.sGranularity = oTimeAxis.getGranularity();
		var oGranularity = oTimeAxis.getZoomStrategy()[this._oZoom.base.sGranularity];
		this._oZoom.determinedByConfig = {
			fRate: 1
		};
		// get granularity objects
		var oFinestGranularity = oTimeAxis.getZoomStrategy()[oTimeAxis.getFinestGranularity()];
		var oCoarsestGranularity = oTimeAxis.getZoomStrategy()[oTimeAxis.getCoarsestGranularity()];
		var oStart = d3.time.format("%Y%m%d%H%M%S").parse("20000101000000");
		// calculate base rate scale
		var oBaseDate = jQuery.sap.getObject(oGranularity.innerInterval.unit)
			.offset(oStart, oGranularity.innerInterval.span);
		this._oZoom.base.fScale = this._calZoomScale(oStart, oBaseDate, oGranularity.innerInterval.range);
		// calculate max rate scale
		var oMaxDate = jQuery.sap.getObject(oFinestGranularity.innerInterval.unit)
			.offset(oStart, oFinestGranularity.innerInterval.span);
		var fMaxScale = this._calZoomScale(oStart, oMaxDate, oFinestGranularity.innerInterval.range * 4);
		// calculate min rate scale
		var oMinDate = jQuery.sap.getObject(oCoarsestGranularity.innerInterval.unit)
			.offset(oStart, oCoarsestGranularity.innerInterval.span);
		var fMinScale = this._calZoomScale(oStart, oMinDate, oCoarsestGranularity.innerInterval.range);
		// calculate zoom rates
		this._oZoom.determinedByConfig.fMaxRate = this._oZoom.base.fScale / fMaxScale;
		this._oZoom.determinedByConfig.fMinRate = this._oZoom.base.fScale / fMinScale;
	};

	GanttChart.prototype._calZoomScale = function (oStartDate, oEndDate, iLength) {
		return (oEndDate.valueOf() - oStartDate.valueOf()) / iLength;
	};

	GanttChart.prototype._createAxisTime = function (oConfigTimeAxis) {
		var aStrategy = oConfigTimeAxis.getZoomStrategy();
		var oHorizonStartTime = d3.time.format("%Y%m%d%H%M%S").parse(
			oConfigTimeAxis.getPlanHorizon().getStartTime());
		var oHorizonEndTime = d3.time.format("%Y%m%d%H%M%S").parse(
			oConfigTimeAxis.getPlanHorizon().getEndTime());
		var nHorizonTimeRange = oHorizonEndTime.valueOf() - oHorizonStartTime.valueOf();

		var oGranularity = aStrategy[oConfigTimeAxis.getGranularity()];
		var nUnitTimeRange = jQuery.sap.getObject(oGranularity.innerInterval.unit)
				.offset(oHorizonStartTime, oGranularity.innerInterval.span).valueOf() - oHorizonStartTime.valueOf();

		this._oAxisTime = new AxisTime(
			[oHorizonStartTime, oHorizonEndTime],
			[0, Math.ceil(nHorizonTimeRange * oGranularity.innerInterval.range / nUnitTimeRange)],
			oConfigTimeAxis.getRate(), null, null,
			this.getLocale(), Core.getConfiguration().getRTL(), oConfigTimeAxis.getZoomStrategy());
		this._nLowerRange = this._oAxisTime.getViewRange()[0];
		this._nUpperRange = Math.ceil(this._oAxisTime.getViewRange()[1]);
	};

	GanttChart.prototype.setShapes = function (aShapes) {
		this.setProperty("shapes", aShapes, true); // no need to trigger rerender
		if (aShapes && aShapes.length > 0) {
			this._oShapesConfigMap = {};
			for (var i = 0; i < aShapes.length; i++) {
				this._oShapesConfigMap[aShapes[i].getKey()] = aShapes[i];
			}
			this._parseAndSortShape(this._oShapesConfigMap);
			
			this._drawShapes();
			this._drawSelectedShapes();
		}
		return this;
	};

	GanttChart.prototype._parseAndSortShape = function (oShapeConfig, sTopShapeId) {
		var aRetVal = [];
		// parse shape instances
		var sShapeId, oShapeInst, oSelectedShapeInst, aAggregation, aPath, sSelectedShapeClassName;
		for (var i in oShapeConfig) {
			sShapeId = sTopShapeId ? sTopShapeId : i;
			oShapeInst = {};
			if (oShapeConfig[i].getShapeClassName()) {
				// create shape instance
					oShapeInst = this._instantiateCustomerClass(oShapeConfig[i].getShapeClassName(), i, oShapeConfig[i], sShapeId);
				var category = oShapeInst.getCategory(null, this._oAxisTime, this._oAxisOrdinal);
				// create selected shape instance for top shape only
				if (!sTopShapeId){
					sSelectedShapeClassName = oShapeConfig[i].getSelectedClassName();
					if (!sSelectedShapeClassName) {
						if (category == sap.gantt.shape.ShapeCategory.Relationship) {
							sSelectedShapeClassName = "sap.gantt.shape.ext.rls.SelectedRelationship";
							oSelectedShapeInst = new SelectedRelationship();
						}else {
							sSelectedShapeClassName = "sap.gantt.shape.SelectedShape";
						}
					}
					oSelectedShapeInst = this._instantiateCustomerClass(
							sSelectedShapeClassName, "selected" + i, oShapeConfig[i], sShapeId);
					oShapeInst.setAggregation("selectedShape", oSelectedShapeInst);
				}
				// create aggregations
				if (oShapeConfig[i].getGroupAggregation() && oShapeConfig[i].getGroupAggregation() instanceof Array) {
					// create aggregation classes for group
					aAggregation = this._parseAndSortShape(oShapeConfig[i].getGroupAggregation(), sShapeId);
					for (var k = 0; k < aAggregation.length; k++) {
						oShapeInst.addShape(aAggregation[k]);
					}
				} else if (oShapeConfig[i].getClippathAggregation() && oShapeConfig[i].getClippathAggregation() instanceof Array) {
					// create aggregation classes for clip-path
					aPath = this._parseAndSortShape(oShapeConfig[i].getClippathAggregation(), sShapeId);
					for (var j = 0; j < aPath.length; j++) {
						oShapeInst.addPath(aPath[j]);
					}
				}
			}
			aRetVal.push(oShapeInst);
		}

		// sort top shape instances and create map by shape id
		if (sTopShapeId){
			return aRetVal;
		} else {
			aRetVal.sort(function (oShape1, oShape2) {
				var level1 = jQuery.isNumeric(oShape1.mShapeConfig.getLevel()) ?
						oShape1.mShapeConfig.getLevel() : 99;
				var level2 = jQuery.isNumeric(oShape2.mShapeConfig.getLevel()) ?
						oShape2.mShapeConfig.getLevel() : 99;
				return level2 - level1;
			});
			this._aShapeInstance = aRetVal;

			var oShapeMap = {};
			jQuery.each(this._aShapeInstance, function (iKey, oValue) {
				oShapeMap[oValue.mShapeConfig.getKey()] = oValue;
			});
			this._oShapeInstance = oShapeMap;
		}
	};

	GanttChart.prototype._instantiateCustomerClass = function (sCustomerClassName, sShapeId, oShapeConfig, sTopShapeId) {
		var CustomerClass = jQuery.sap.getObject(sCustomerClassName);
		if (!CustomerClass) {
			jQuery.sap.require(sCustomerClassName);
			CustomerClass = jQuery.sap.getObject(sCustomerClassName);
		}
		
		var oCustomerClassInstance = new CustomerClass();
		var sTShapeId = sTopShapeId;
		if (sTShapeId === undefined) {
			sTShapeId = sShapeId;
		}
		this._storeCustomerClassId(sShapeId, oCustomerClassInstance.getId(), sTopShapeId);
		
		oCustomerClassInstance.mLocaleConfig = this.getLocale();
		oCustomerClassInstance.mShapeConfig = oShapeConfig;
		oCustomerClassInstance.mChartInstance = this;

		return oCustomerClassInstance;
	};
	
	/*
	 * {
	 * 		"activity": "__group0", //sId is the Id of shape class instance and it is randomly generated by UI5 framework
	 * 		"header": "__group1",
	 * 		...
	 * }
	 */
	GanttChart.prototype._storeCustomerClassId = function (sShapeId, sId, sTopShapeId) {
		if (!this._customerClassIds){
			this._customerClassIds = {};
		}
		if (this._oShapesConfigMap[sShapeId]){
			this._customerClassIds[sShapeId] = {
						"classId": sId,
						"topShapeId": sTopShapeId
					};
		}else {
			//non-topShape, when no shapeId in the shapeConfig.groupAggregation
			var sShape = sTopShapeId + "_" + sShapeId;
			this._customerClassIds[sShape] = {
					"classId": sId,
					"topShapeId": sTopShapeId
			};
		}
	};
	
	GanttChart.prototype._getIdByShapeId = function (sShapeId) {
		if (this._customerClassIds && this._customerClassIds[sShapeId]){
			return this._customerClassIds[sShapeId].classId;
		}
		return null;
	};
	
	GanttChart.prototype._getShapeIdById = function (sClassId) {
		if (this._customerClassIds){
			for (var sShapeId in this._customerClassIds) {
				var obj = this._customerClassIds[sShapeId];
				if (obj.classId === sClassId) {
					return {"shapeId": sShapeId, "topShapeId": obj.topShapeId};
				}
			}
		}
		return null;
	};

	GanttChart.prototype._genShapeConfig = function (sShapeId, oProp) {
		var obj = {}, oConfig;
		if (sShapeId !== null && sShapeId !== undefined) {
			obj.shapeId = sShapeId;
		}
		if (oProp.data) {
			obj.data = oProp.data;
		}
		if (oProp.level) {
			obj.level = oProp.level;
		}
		if (oProp.draw){
			oConfig = oProp.draw;
		} else {
			oConfig = oProp;
		}
		for (var item in oConfig) {
			if (item !== "class") {
				obj[item] = oConfig[item];
			}
		}
		return obj;
	};

	GanttChart.prototype.calculateZoomInfoFromChartWidth = function (iChartWidth) {
		var oTimeAxis = this.getTimeAxis();
		var oPlanHorizon = oTimeAxis.getPlanHorizon();
		var oInitHorizon = oTimeAxis.getInitHorizon();
		this._oZoom.determinedByChartWidth = {};
		
		// calculate min zoom rate by time horizon against svg container width
		if (oPlanHorizon) {
			var fMinScale = this._calZoomScale(
				Format.abapTimestampToDate(oPlanHorizon.getStartTime()),
				Format.abapTimestampToDate(oPlanHorizon.getEndTime()),
				iChartWidth);
			this._oZoom.determinedByChartWidth.fMinRate =  this._oZoom.base.fScale / fMinScale;
		}
		// calculate sutible zoom rate by init horizon against svg container width
		if (oInitHorizon && oInitHorizon.getStartTime() && oInitHorizon.getEndTime()) {
			var fSuitableScale = this._calZoomScale(
				Format.abapTimestampToDate(oInitHorizon.getStartTime()),
				Format.abapTimestampToDate(oInitHorizon.getEndTime()),
				iChartWidth);
			this._oZoom.determinedByChartWidth.fSuitableRate = this._oZoom.base.fScale / fSuitableScale;
		}
		this._oZoom.iChartWidth = iChartWidth;
		return this._oZoom;
	};

	GanttChart.prototype.setTimeZoomRate = function (fTimeZoomRate) {
		this.setProperty("timeZoomRate", fTimeZoomRate, true); // no need to trigger rerender
		this._oAxisTime.setZoomRate(fTimeZoomRate);
		this._oAxisTime.setViewOffset(0);
		this._oStatusSet = null;
		this._nLowerRange = this._oAxisTime.getViewRange()[0];
		this._nUpperRange = Math.ceil(this._oAxisTime.getViewRange()[1]);
		this._draw(true); // only _draw is triggered
		return this;
	};

	GanttChart.prototype.getBaseRowHeight = function () {
		if (this._oTT.getRows()[0] && this._oTT.getRows()[0].getDomRef()) {
			return this._oTT.getRows()[0].getDomRef().scrollHeight;
		}
	};
	
	/*
	 * Called by UI5 ManagedObject before and after retrieving data.
	 */
	GanttChart.prototype.updateRelationships = function (sReason) {
		var oBinding = this.getBinding("relationships");
		
		if (oBinding) {
			var aContext = oBinding.getContexts(0, 0);
			
			if (aContext && aContext.length > 0) {
				this._aRelationshipsContexts = aContext;
			}
		}
	};
	
	/*
	 * @see JSDoc generated by SAPUI5 control API generator
	 */
	GanttChart.prototype.addRelationship = function (oRelationship) {
		jQuery.sap.log.error("The control manages the relationships aggregation. The method \"addRelationship\" cannot be used programmatically!");
	};
	/*
	 * @see JSDoc generated by SAPUI5 control API generator
	 */
	GanttChart.prototype.insertRelationship = function (iIndex, oRelationship) {
		jQuery.sap.log.error("The control manages the relationships aggregation. The method \"insertRelationship\" cannot be used programmatically!");
	};
	/*
	 * @see JSDoc generated by SAPUI5 control API generator
	 */
	GanttChart.prototype.removeRelationship = function (oRelationship) {
		jQuery.sap.log.error("The control manages the relationships aggregation. The method \"removeRelationship\" cannot be used programmatically!");
	};
	/*
	 * @see JSDoc generated by SAPUI5 control API generator
	 */
	GanttChart.prototype.getRelationships = function () {
		jQuery.sap.log.error("The control manages the relationships aggregation. The method \"getRelationships\" cannot be used programmatically!");
	};
	/*
	 * @see JSDoc generated by SAPUI5 control API generator
	 */
	GanttChart.prototype.destroyRelationships = function () {
		jQuery.sap.log.error("The control manages the relationships aggregation. The method \"destroyRelationships\" cannot be used programmatically!");
	};
	/*
	 * @see JSDoc generated by SAPUI5 control API generator
	 */
	GanttChart.prototype.indexOfRelationship = function (oRelationship) {
		jQuery.sap.log.error("The control manages the relationships aggregation. The method \"indexOfRelationship\" cannot be used programmatically!");
	};
	/*
	 * @see JSDoc generated by SAPUI5 control API generator
	 */
	GanttChart.prototype.removeAllRelationships = function () {
		jQuery.sap.log.error("The control manages the relationships aggregation. The method \"removeAllRelationships\" cannot be used programmatically!");
	};

	GanttChart.prototype._bindAggregation = function (sName, oBindingInfo) {
		if (sName == "rows" && oBindingInfo){
			var oModel = this.getModel(oBindingInfo.model);
			// resolve the path if view itself is binded
			var oBindingContext = this.getBindingContext(oBindingInfo.model);
			if (oBindingContext && oModel){
				oBindingInfo.path = oModel.resolve(oBindingInfo.path, oBindingContext);
			}
			this._oTT.bindRows(oBindingInfo);
		} else {
			return sap.ui.core.Control.prototype._bindAggregation.apply(this, arguments);
		}
	};

	GanttChart.prototype.onBeforeRendering = function () {
		this._detachEvents();
		this._updateModelForMultiMainRow();
	};

	GanttChart.prototype._updateModelForMultiMainRow = function() {
		var oBinding = this._oTT.getBinding("rows");
		if (!oBinding || oBinding.getLength() === 0) {
			return;
		}
		var aRowContext = oBinding.getContexts(0, oBinding.getLength());
		var oAllShapeData = {}, iRowSpan = 1, sMainChartScheme,
		sType = aRowContext[0].getProperty("type");
		if (sType && this._oObjectTypesConfigMap[sType]) {
			sMainChartScheme = this._oObjectTypesConfigMap[sType].getProperty("mainChartSchemeKey");
			if (sMainChartScheme && this._oChartSchemesConfigMap[sMainChartScheme]) {
				iRowSpan = this._oChartSchemesConfigMap[sMainChartScheme].getProperty("rowSpan");
			}
		}
	
		if (iRowSpan == 1 || iRowSpan == undefined) {
			return;
		}
		for (var i = 0; i < aRowContext.length; i++) {
			var oRowData = aRowContext[i].getProperty();
			if (TreeTableHelper.isDummyRow(this._oTT, i)) {
				continue;
			}
			if (i < aRowContext.length - 1){
				if (TreeTableHelper.isDummyRow(this._oTT, i + 1)) {
					continue;
				}
			}
			oRowData.previousNodeNum = 0;
			oRowData.afterNodeNum = iRowSpan - 1;
			//allShapeData.push(oRowData);
			var oDummyData = {"chartScheme" : sMainChartScheme, "mainRowId" : oRowData.id};
			var aAddData = [];
			for ( var j = 1; j < iRowSpan; j++) {
				var oTempData = jQuery.extend(true, {}, oDummyData);
				oTempData.previousNodeNum = j;
				oTempData.afterNodeNum = iRowSpan - j - 1;
				aAddData.push(oTempData);
			}
			oAllShapeData[i] = aAddData;
		}

		if (!$.isEmptyObject(oAllShapeData)) {
			TreeTableHelper.addDummyData(this._oTT, oAllShapeData, false);
		}
	};

	GanttChart.prototype._detachEvents = function () {
		jQuery("#" + this.getId() + "-svg-ctn").unbind("mousemove", this._onSvgCtnMouseMove);
		jQuery("#" + this.getId() + "-svg-ctn").unbind("mouseleave", this._onSvgCtnMouseLeave);
		jQuery("#" + this.getId() + "-svg-ctn").unbind("mousedown", this._onSvgCtnMouseDown);
		jQuery("#" + this.getId() + "-svg-ctn").unbind("mouseenter", this._onSvgCtnMouseEnter);
		jQuery("#" + this.getId() + "-svg-ctn").unbind("mouseup", this._onSvgCtnMouseUp);
	};

	GanttChart.prototype.onAfterRendering = function () {
		this._attachEvents();
	};

	GanttChart.prototype._attachEvents = function () {

		var $svgCtn = jQuery("#" + this.getId() + "-svg-ctn");	
		$svgCtn.bind("mousemove", this._onSvgCtnMouseMove.bind(this));
		$svgCtn.bind("mouseleave", this._onSvgCtnMouseLeave.bind(this));
		$svgCtn.bind("mousedown", this._onSvgCtnMouseDown.bind(this));
		$svgCtn.bind("mouseenter", this._onSvgCtnMouseEnter.bind(this));
		$svgCtn.bind("mouseup", this._onSvgCtnMouseUp.bind(this));
	};

	GanttChart.prototype.expandChartChange = function (isExpand, aExpandChartSchemes, aExpandedIndices) {
		if (aExpandChartSchemes.length < 0) {
			return;
		}
		jQuery.sap.measure.start("GanttChart expandChartChange","GanttPerf:GanttChart expandChartChange function");
		var aSelectedIndices = (aExpandedIndices && aExpandedIndices.length > 0) ? aExpandedIndices : this._oTT.getSelectedIndices();
		var key;
		if (isExpand) {
			for (key = 0; key < aExpandChartSchemes.length; key++) {
				var sScheme = aExpandChartSchemes[key];
				var sMode;
				if (this._oChartSchemesConfigMap[sScheme] && this._oChartSchemesConfigMap[sScheme].getModeKey()) {
					sMode = this._oChartSchemesConfigMap[sScheme].getModeKey();
				} else {
					sMode = this.getMode();
				}
				var oAllInsertedData = {};
				for (var i = 0; i < aSelectedIndices.length; i++) {
					if (TreeTableHelper.isDummyRow(this._oTT, aSelectedIndices[i])) {
						continue;
					}
					var oSelectedData = TreeTableHelper.getContextObject(this._oTT, aSelectedIndices[i]);
					var oDummyData = {"__group" : aExpandChartSchemes[key], "parentData" : oSelectedData, "parentRefId" : oSelectedData.id};
					//Check whether the current object data has the expanded chart scheme
					if (this._oObjectTypesConfigMap[oSelectedData.type] && this._oObjectTypesConfigMap[oSelectedData.type].getExpandedChartSchemeKeys().length > 0) {
						var aValidSchems = this._oObjectTypesConfigMap[oSelectedData.type].getExpandedChartSchemeKeys();
						if ($.inArray(sScheme, aValidSchems) > -1) {
							var aDrawData, iRowSpan = 1;
							//If the expandedChartScheme is available in current mode, return all valid data names, which can be drawn by shapes of the expandedChartScheme
							var oSchemeInfo = this._collectDataNameForValidChartScheme(sScheme, sMode);
							if (oSchemeInfo) {
								aDrawData = oSchemeInfo.drawData;
								iRowSpan = oSchemeInfo.rowSpan;
								//Calculate how many rows need to be inserted into tree table and adapt number of rows according to rowSpan
								var aAddedData = this._insertExpandedRowsToTT(aSelectedIndices[i], aDrawData, oDummyData, iRowSpan);
								if (aAddedData && aAddedData.length > 0) {
									oAllInsertedData[aSelectedIndices[i]] = aAddedData;
								}
							}
						}
					}
				}
				if (!$.isEmptyObject(oAllInsertedData)) {
					TreeTableHelper.addDummyData(this._oTT, oAllInsertedData, true);
				}
			}
		} else {
			for (key = 0; key < aExpandChartSchemes.length; key++) {
				TreeTableHelper.removeDummyDataFromSelectedIndices(this._oTT, aSelectedIndices, aExpandChartSchemes[key]);
			}
		}
		jQuery.sap.measure.end("GanttChart expandChartChange");
	};

	GanttChart.prototype._collectDataNameForValidChartScheme = function (sScheme, sMode) {
		if (this._oChartSchemesConfigMap[sScheme]) {
			var aDrawData = [], iRowSpan;
			var aShapesForChartScheme = this._oChartSchemesConfigMap[sScheme].getShapeKeys();
			iRowSpan = this._oChartSchemesConfigMap[sScheme].getRowSpan();
			var that = this;
			jQuery.each(aShapesForChartScheme, function (iKey, oVal) {
				if (that._oShapesConfigMap[oVal]) {
					var aModeKeys = that._oShapesConfigMap[oVal].getModeKeys();
					if ((aModeKeys && aModeKeys.length > 0 && $.inArray(sMode, aModeKeys) > -1) || aModeKeys.length == 0 || sMode == sap.gantt.config.DEFAULT_MODE_KEY) {
						aDrawData.push(that._oShapesConfigMap[oVal].getShapeDataName());
					} 
				}
			});
			if (aDrawData.length > 0 && iRowSpan >= 1) {
				return {"drawData" : aDrawData, "rowSpan" : iRowSpan};
			}
		}
	};

	GanttChart.prototype._insertExpandedRowsToTT = function (iSelectedIndice, aDrawData, oDummyData, iRowSpan) {
		var oSelectedData = TreeTableHelper.getContextObject(this._oTT, iSelectedIndice);
		if (aDrawData && aDrawData.length > 0) {
			var iNumberOfRows = 1, bHasData = false;
			$.each(aDrawData, function(ikey, sData) {
				if (oSelectedData[sData] && oSelectedData[sData].length > 0) {
					bHasData = true;
					for (var i = 0; i < oSelectedData[sData].length; i++) {
						if (oSelectedData[sData][i].rowIndex !== undefined && oSelectedData[sData][i].rowIndex > iNumberOfRows) {
							iNumberOfRows = oSelectedData[sData][i].rowIndex;
						}
					}
				}
			});
			if (!bHasData) {
				return [];
			}
			var aAddedData = [], k, oTempData;
			if (iNumberOfRows > 1 && iRowSpan == 1) {
				for (k = 0; k < iNumberOfRows; k++) {
					oTempData = jQuery.extend(true, {}, oDummyData);
					oTempData.index = k + 1;
					aAddedData.push(oTempData);
				}
			} else {
				oDummyData.index = 1;
				for (k = 0; k < iRowSpan; k++) {
					oTempData = jQuery.extend(true, {}, oDummyData);
					aAddedData.push(oTempData);
				}
			}
			return aAddedData;
		}
		return [];
	};

	GanttChart.prototype._composeParameterForClickPosition = function (event) {
		var aSvg = jQuery("#" + this.getId() + "-svg");
		var oSvgPoint = this._getSvgCoodinateByDiv(aSvg[0], event.pageX, event.pageY);
		var x = event.pageX - aSvg.offset().left || event.offsetX;
		var y = event.pageY - aSvg.offset().top || event.offsetY;
		if (!this._oAxisOrdinal) {
			return;
		}
		var oRowInfo, iRowIndex = this._oAxisOrdinal.viewToRowIndex(y, this._oTT.getVisibleRowCount()) + this._oTT.getFirstVisibleRow();
		var oLeadingRowInfo, iLeadingRowNum = iRowIndex;
		if (TreeTableHelper.isMultipleSpanMainRow(this._oTT, iRowIndex)){
			var mainRowGroupIndices = TreeTableHelper.getMultipleSpanMainRowGroupIndices(this._oTT, iRowIndex);
			iLeadingRowNum = mainRowGroupIndices[0];
		}
		if (iLeadingRowNum !== iRowIndex) {
			oLeadingRowInfo = TreeTableHelper.getContextObject(this._oTT, iLeadingRowNum);
		}
		
		var startTime = this._oAxisTime.viewToTime(x);
		oRowInfo = TreeTableHelper.getContextObject(this._oTT, iRowIndex);
		var param = {
			"startTime": startTime,
			"svgPoint": oSvgPoint,
			"leadingRowNum": iLeadingRowNum,
			"leadingRowInfo": oLeadingRowInfo, //if current row is the main row or current GanttChart is not expand chart and not multi row height, the leadingRowInfo = undefined
			"rowIndex": iRowIndex,
			"rowInfo": oRowInfo //if current row is a dummy row, rowInfo = undefined
		};
		return param;
	};
	
	/**
	 * Gets the selected rows, shapes, and relationships
	 * @return {object} The returned object contains "rows" for all selected rows, "shapes" for all selected shapes, and "relationships" for all selected relationships
	 */
	GanttChart.prototype.getAllSelections = function () {
		var selectedRows = this.getSelectedRows();
		var selectedShapes = this.getSelectedShapes();
		var selectedRelationships = this.getSelectedRelationships();
		var currentSelection = {"rows": selectedRows, "shapes": selectedShapes, "relationships": selectedRelationships};
		return currentSelection;
	};
	
	/**
	 * Gets the selected rows
	 * @return {array} Selected rows
	 * @public
	 */
	GanttChart.prototype.getSelectedRows = function () {
		var aSelectedRows = [];
		var iFirstVisibleRow = this._oTT.getFirstVisibleRow();
		var aSelectedIndexs = this._oTT.getSelectedIndices();
		for (var i = 0; i < aSelectedIndexs.length; i++) {
			var iRowIndex = aSelectedIndexs[i] - iFirstVisibleRow;
			if (iRowIndex > -1 && this._aShapeData[iRowIndex] !== undefined) {
				aSelectedRows.push(this._aShapeData[iRowIndex]);
			}
		}
		return aSelectedRows;
	};
	
	/**
	 * Gets the selected shapes
	 * @return {array} selected shapes
	 * @public
	 */
	GanttChart.prototype.getSelectedShapes = function () {
		var aSelectedShapes = this._oSelectedShapes;
		return aSelectedShapes;
	};
	
	/**
	 * Get all the current selected relationships
	 * @return {array} selected relationships
	 * @public
	 */
	GanttChart.prototype.getSelectedRelationships = function () {
		return this._aSelectedRelationships;
	};
	
	/**
	 * Selects shapes, and deselects all shapes when aIds is a null list and bIsExclusive is true
	 * @param {array} [aIds] List of the shapes that you want to select
	 * @param {boolean} [bIsExclusive] Whether all other selected shapes are deselected
	 * @return {boolean} True if the selection change is applied
	 * @public
	 */
	GanttChart.prototype.selectShapes = function(aIds, bIsExclusive) {
		var i, j, aShapeData, oShapeData;
		var bSelectionUpdated = false;
		if (this._aSelectedShapeUids === undefined) {
			this._aSelectedShapeUids = [];
		}
		if (aIds === undefined || aIds.length < 1) {//deselect all
			if (bIsExclusive && this._aSelectedShapeUids.length > 0) {
				this._oSelectedShapes = {};
				this._aSelectedShapeUids = [];
				bSelectionUpdated = true;
			}
		}else if (bIsExclusive) {
			this._oSelectedShapes = {};
			this._aSelectedShapeUids = [];
			for (i = 0; i < aIds.length; i++) {
				aShapeData = this._getShapeDataById(aIds[i], false);
				for (j = 0; j < aShapeData.length; j++) {
					oShapeData = aShapeData[j];
					if (this._judgeEnableSelection(oShapeData)) { // judge whether the uid is existed and whether is enable selection
						var bUpdate = this._selectShape(oShapeData);
						if (bUpdate) {
							bSelectionUpdated = true;
						}
					}
				}
			}
		}else {
			for (i = 0; i < aIds.length; i++) {
				aShapeData = this._getShapeDataById(aIds[i], false);
				for (j = 0; j < aShapeData.length; j++) {
					oShapeData = aShapeData[j];
					if (jQuery.inArray(oShapeData.uid, this._aSelectedShapeUids) > -1) {
						continue;
					}else if (this._judgeEnableSelection(oShapeData) && this._selectShape(oShapeData)) {
						bSelectionUpdated = true;
					}
				}
			}
		}
		
		if (bSelectionUpdated) {
			this._drawSelectedShapes();
		}
		return bSelectionUpdated;
	};

	/**
	 * deselect shapes
	 * @param {array} [aIds] List of the shapes that you want to deselect
	 * @return {boolean} True if the selection change is applied
	 * @public
	 */
	GanttChart.prototype.deselectShapes = function(aIds) {
		var bSelectionUpdated = false;
		for (var i = 0; i < aIds.length; i++) {
			var aShapeData = this._getShapeDataById(aIds[i]);
			var bUpdate;
			for (var j = 0; j < aShapeData.length; j++){
				bUpdate = this._deselectShape(aShapeData[j]);
				if (bUpdate) {
					bSelectionUpdated = true;
				}
			}
		}
		if (bSelectionUpdated) {
			this._drawSelectedShapes();
		}
		return bSelectionUpdated;
	};
	
	/**
	 * Select rows and all shapes contained in those rows
	 * @param {array} [aIds] Row uids
	 * @param {boolean} [bIsExclusive] Wether all other selected rows and shapes are deselected
	 * @return {boolean} True if the selection change is applied
	 * @public
	 */
	GanttChart.prototype.selectRowsAndShapes = function(aIds, bIsExclusive) {
		var bSelectionUpdated = false;
		var bRowSelectionUpdated = this.selectRows(aIds, bIsExclusive);
		if (bIsExclusive) {
			this._oSelectedShapes = {};
			this._aSelectedShapeUids = [];
		}
		if (this._aSelectedShapeUids === undefined) {
			this._aSelectedShapeUids = [];
		}
		for (var id in aIds) {
			var sId = aIds[id];
			var oRowData = this._getRowById(sId);
			if (oRowData !== undefined) {
				for (var sShapeId in oRowData.data) {
					if (oRowData.data[sShapeId] instanceof Array) {
						for ( var i = 0; i < oRowData.data[sShapeId].length; i++) {
							var oShapeData = oRowData.data[sShapeId][i];
							if (jQuery.inArray(oShapeData.uid, this._aSelectedShapeUids) < 0) {
								this._selectShape(oShapeData);
								bSelectionUpdated = true;
							}
						}
					}
				}
			}
		}
		if (bSelectionUpdated) {
			this._drawSelectedShapes();
		}else if (bRowSelectionUpdated) {
			bSelectionUpdated = true;
		}
		
		return bSelectionUpdated;
	};

	/**
	 * Selects relationships, and deselects all other selected relationships if aIds is a null list and bIsExclusive is true
	 * @param {array} [aIds] List of the shapes that you want to select
	 * @param {boolean} [bIsExclusive] Whether all other selected shapes are deselected
	 * @return {boolean} True if the selection change is applied
	 * @public
	 */
	GanttChart.prototype.selectRelationships = function(aIds, bIsExclusive) {
		var i, oRelationship;
		var bSelectionUpdated = false;
		if (this._aSelectedRelationships === undefined) {
			this._aSelectedRelationships = [];
		}
		if (aIds === undefined || aIds.length < 1) {//deselect all
			if (bIsExclusive && this._aSelectedRelationships.length > 0) {
				this._aSelectedRelationships = [];
				bSelectionUpdated = true;
			}
		}else if (bIsExclusive) {
			if (aIds.length == this._aSelectedRelationships.length) {
				//check if any new selecting relationship
				for (i = 0; i < aIds.length; i++) {
					oRelationship = this._getShapeDataById(aIds[i], true)[0];
					if (oRelationship !== undefined && jQuery.inArray(oRelationship, this._aSelectedRelationships) >= 0) {
						continue;
					} else {
						bSelectionUpdated = true;
						break;
					}
				}
			}
			this._aSelectedRelationships = [];
			for (i = 0; i < aIds.length; i++) {
				oRelationship = this._getShapeDataById(aIds[i], true)[0];
				if (oRelationship !== undefined && oRelationship !== null && this._judgeEnableSelection(oRelationship)) {
					this._aSelectedRelationships.push(oRelationship);
					bSelectionUpdated = true;
				}
			}
		}else {
			for (i = 0; i < aIds.length; i++) {
				oRelationship = this._getShapeDataById(aIds[i], true)[0];
				//if the relationship is unavailable or it is already in selection, ignore
				if (oRelationship === undefined || jQuery.inArray(oRelationship, this._aSelectedRelationships) >= 0) {
					continue;
				} else if (this._judgeEnableSelection(oRelationship)) {
					this._aSelectedRelationships.push(oRelationship);
					bSelectionUpdated = true;
				}
			}
		}
		
		if (bSelectionUpdated) {
			this._drawSelectedShapes();
		}
		return bSelectionUpdated;
	};

	/**
	 * Deselects relationships
	 * @param {array} [aIds] List of the relationships that you want to deselect
	 * @return {boolean} True if the selection change is applied
	 * @public
	 */
	GanttChart.prototype.deselectRelationships = function(aIds) {
		var bSelectionUpdated = false;
		var aUids = [];
		if (aIds !== undefined) {
			for (var i = 0; i < aIds.length; i++) {
				var uid = this._getUidById(aIds[i], true)[0];
				if (uid !== undefined) {
					aUids.push(uid);
				}
			}
		}
		for (var j in this._aSelectedRelationships) {
			var oSelectedRLS = this._aSelectedRelationships[j];
			if (jQuery.inArray(oSelectedRLS.uid, aUids) > -1) {
				var iIndex = this._aSelectedRelationships.indexOf(oSelectedRLS);
				this._aSelectedRelationships.splice(iIndex, 1);
				bSelectionUpdated = true;
			}
		}
		if (bSelectionUpdated) {
			this._drawSelectedShapes();
		}
		return bSelectionUpdated;
	};

	/**
	 * Selects rows
	 * @param {array} [aIds] List of the rows that you want to select
	 * @param {boolean} [bIsExclusive] Whether all other selected rows are deselected
	 * @return {boolean} True if the selection change is applied
	 * @public
	 */
	GanttChart.prototype.selectRows = function(aIds, bIsExclusive) {
		var bSelectionUpdated = false;
		var aVisibleRows = this._oTT.getRows();
		//var iFirstRow = this._oTT.getFirstVisibleRow();
		var aSelectedIndexs = this._oTT.getSelectedIndices();
		if (bIsExclusive && aSelectedIndexs.length > 0) {
			this._oTT.clearSelection();
			bSelectionUpdated = true;
		}
		for (var i in aVisibleRows) {
			var oRow = d3.select("#" + aVisibleRows[i].getId());
			//iIndex = iFirstRow + parseInt(oSelectedRow.attr("data-sap-ui-rowindex"), 10);
			var iIndex = parseInt(oRow.attr("data-sap-ui-rowindex"), 10);
			var oRowData = this._aShapeData[iIndex];
			if (oRowData !== undefined && jQuery.inArray(oRowData.data.id, aIds) > -1) {
				if (jQuery.inArray(iIndex, aSelectedIndexs) < 0) {
					//check if the treetable support multiple selection
					var sSelectionMode = this._oTT.getSelectionMode();
					if (sSelectionMode === sap.ui.table.SelectionMode.Multi) {
						this._oTT.addSelectionInterval(iIndex, iIndex);
					}else {
						this._oTT.setSelectedIndex(iIndex);
					}
					bSelectionUpdated = true;
				}
			}
		}
		return bSelectionUpdated;
	};

	/**
	 * Deselects rows
	 * @param {array} [aIds] List of the rows that you want to deselect
	 * @return {boolean} True if the selection change is applied
	 * @public
	 */
	GanttChart.prototype.deselectRows = function(aIds) {
		var bSelectionUpdated = false;
		var aSelectedIndexs = this._oTT.getSelectedIndices();
		var aVisibleRows = this._oTT.getRows();
		for (var i in aSelectedIndexs) {
			var iSelectedIndex = aSelectedIndexs[i];
			var oRow = d3.select("#" + aVisibleRows[iSelectedIndex].getId());
			var iIndex = parseInt(oRow.attr("data-sap-ui-rowindex"), 10);
			var oRowData = this._aShapeData[iIndex];
			if (jQuery.inArray(oRowData.data.id, aIds)) {
				aSelectedIndexs.splice(iSelectedIndex, 1);
				this._oTT.removeSelectionInterval(iSelectedIndex, 1);
				bSelectionUpdated = true;
			}
		}
		return bSelectionUpdated;
	};
	
	//Private method: check if an element is a relationship by its' sShapeUid
	GanttChart.prototype._isRelationship = function (sShapeUid) {
		if (this._getShapeDataNameByUid(sShapeUid) === sap.gantt.shape.ShapeCategory.Relationship) {
			return true;
		}	
		return false;
	};
	
	GanttChart.prototype._onRowSelectionChange = function (oEvent) {

		//below is just a workaround, we may need change these in future
		var aChangedIndices = oEvent.getParameter("rowIndices"),
			aCurrentSelectedIndices = this._oTT.getSelectedIndices(),
			aSelectedIndices = [],
			aDeselectedIndices = [];

		for (var i = 0; i < aChangedIndices.length; i++){
			if (aCurrentSelectedIndices.indexOf(aChangedIndices[i]) === -1){
				aDeselectedIndices.push(aChangedIndices[i]); //deselected indices by user or delegate
			} else {
				aSelectedIndices.push(aChangedIndices[i]); //selected indices by user or delegate
			}
		}
		var oTT = this._oTT;
		var fnUpdateRowSelection = function(aRowIndices, bSelected){
			for (var j = 0; j < aRowIndices.length; j++){
				if (TreeTableHelper.isMultipleSpanMainRow(oTT, aRowIndices[j], true)){
					//indices is actual index in the table
					var aMainRowGroupIndices = TreeTableHelper.getMultipleSpanMainRowGroupIndices(oTT, aRowIndices[j], true);
					var iFirstIndex = aMainRowGroupIndices[0],
						iLastIndex = aMainRowGroupIndices[aMainRowGroupIndices.length - 1];
					
					for (var m = 0; m < aMainRowGroupIndices.length; m++){
						if (bSelected && aCurrentSelectedIndices.indexOf(aMainRowGroupIndices[m]) === -1){
							oTT.addSelectionInterval(iFirstIndex,iLastIndex);
						} else if (!bSelected && aCurrentSelectedIndices.indexOf(aMainRowGroupIndices[m]) !== -1){
							oTT.removeSelectionInterval(iFirstIndex,iLastIndex);
						}
					}
				}
			}
		};

		fnUpdateRowSelection(aSelectedIndices, true);
		fnUpdateRowSelection(aDeselectedIndices, false);

		this.fireRowSelectionChange({
			originEvent: oEvent
		});
	};
	
	//Private method: ShapeSelectionChange, RelationshipSelectionChange
	GanttChart.prototype._selectionChange = function (oShapeData, bCtrl, bShift, origEvent) {
		if (this._aSelectedRelationships == undefined){
			this._aSelectedRelationships = [];
		}
		if (this._aSelectedShapeUids == undefined){
			this._aSelectedShapeUids = [];
		}
		/*
		 * Click on Shapes:	Clear any existing selection of all shape and select current shape.	Clear all rows selection.
		 * Click on Shapes + control key:	Keep existing selection of all shapes and change selection of current shape.	Keep all rows selection. Keep all relationship selection
		 * above 2 same for the relationships
		 * Old: Click on Shape + shift key = Click on Shape
		 */
		var bShapeSelectionChange = false;
		var bRelationshipSelectionChange = false;
		var targetUid = oShapeData.uid;
		var isRelationship = this._isRelationship(targetUid);
		if ((bCtrl && this.getSelectionMode() === sap.gantt.SelectionMode.MultiWithKeyboard) || this.getSelectionMode() === sap.gantt.SelectionMode.Multiple){
			//when ctrl key is pressed or in Fiori multiple selection mode
			if (!isRelationship) {
				//if the shape is already in selectedShapes, deselect it, otherwise select it
				if (this._aSelectedShapeUids !== undefined && jQuery.inArray(targetUid, this._aSelectedShapeUids) > -1){
					if (!this._bDragging) {
						bShapeSelectionChange = this._deselectShape(oShapeData);
					}
				}else {
					bShapeSelectionChange = this._selectShape(oShapeData);
				}
			}else {
				if (jQuery.inArray(oShapeData, this._aSelectedRelationships) < 0){
					this._aSelectedRelationships.push(oShapeData);
				}else {
					var index = this._aSelectedRelationships.indexOf(oShapeData);
					this._aSelectedRelationships.splice(index,1);
				}
				bRelationshipSelectionChange = true;
			}
		}else if (!isRelationship) {
			if ((jQuery.inArray(targetUid, this._aSelectedShapeUids) < 0 || this._aSelectedShapeUids.length > 1) && !this._bDragging) {
				//clear all the Selected Shapes, add the clicking one
				this._oSelectedShapes = {};
				this._aSelectedShapeUids = [];
				bShapeSelectionChange = true;
			}
			if (jQuery.inArray(targetUid, this._aSelectedShapeUids) < 0 ) {
				var bUpdated = this._selectShape(oShapeData);
				if (!bShapeSelectionChange && bUpdated) {
					bShapeSelectionChange = true;
				}
			}
			if (this._aSelectedRelationships.length > 0) {
				this._aSelectedRelationships = [];
				bRelationshipSelectionChange = true;
			}
		}else {//if the current clicking element is a relationship
			if ((jQuery.inArray(oShapeData, this._aSelectedRelationships) < 0) || this._aSelectedRelationships.length > 1){
				//clear all the Selected Shapes, add the clicking one
				this._aSelectedRelationships = [];
				this._aSelectedRelationships.push(oShapeData);
				bRelationshipSelectionChange = true;
			}
			if (this._aSelectedShapeUids !== undefined && this._aSelectedShapeUids.length > 0) {
				this._oSelectedShapes = {};
				this._aSelectedShapeUids = [];
				bShapeSelectionChange = true;
			}
		}
		if (bShapeSelectionChange || bRelationshipSelectionChange) {
			this._drawSelectedShapes();
		}
		return {
			shapeSelectionChange: bShapeSelectionChange,
			relationshipSelectionChange: bRelationshipSelectionChange
		};
	};

	/*
	 * update the selected status back to model data
	 */
	GanttChart.prototype._setSelectedStatusToData = function() {
		for (var sRow in this._aShapeData) {
			var oRowData = this._aShapeData[sRow];
			for (var sShapeDataName in oRowData.data) {
				var aShapes = oRowData.data[sShapeDataName];
				if (aShapes instanceof Array) {
					for ( var iIndex = 0; iIndex < aShapes.length; iIndex++) {
						var oShapeData = aShapes[iIndex];
						if (jQuery.inArray(oShapeData.uid, this._aSelectedShapeUids) > -1) {
							oShapeData.selected = true;
						}else {
							oShapeData.selected = false;
						}
					}
				}
			}
		}
		for (var i in this._aRelationships) {
			this._aRelationships[i].selected = false;
			if (this._aSelectedRelationships !== undefined && this._aSelectedRelationships.length > 0){
				for (var j in this._aSelectedRelationships) {
					if (this._aRelationships[i].uid === this._aSelectedRelationships[j].uid) {
						this._aRelationships[i].selected = true;
					}
				}
			}
		}
	};

	/*
	 * get the selections according to the data from model
	 */
	GanttChart.prototype._setSelectedStatusFromData = function (aShapeDataNames) {
		this._oSelectedShapes = {};
		this._aSelectedShapeUids = [];
		for (var sRow in this._aShapeData) {
			var oRowData = this._aShapeData[sRow];
			for (var sShapeDataName in oRowData.data) {
				var aShapes = oRowData.data[sShapeDataName];
				//only loop the arrays, e.g tasks, activities
				if (aShapes instanceof Array && jQuery.inArray(sShapeDataName, aShapeDataNames) > -1) {
					for ( var i = 0; i < aShapes.length; i++) {
						var oShapeData = aShapes[i];
						if (oShapeData.selected) {
							if (this._oSelectedShapes[sShapeDataName] === undefined) {
								this._oSelectedShapes[sShapeDataName] = [];
							}
							this._oSelectedShapes[sShapeDataName].push({"shapeUid": oShapeData.uid, "shapeData": oShapeData, "objectInfoRef": oRowData});
							this._aSelectedShapeUids.push(oShapeData.uid);
						}
					}
				}
			}
		}
		//loop given relationship data, collect the selected data into the selected relationship collection
		this._aSelectedRelationships = [];
		for (var j in this._aRelationships) {
			if (this._aRelationships[j].selected) {
				this._aSelectedRelationships.push(this._aRelationships[j]);
			}
		}
	};
	/*
	 * Synconize the clicks on empty space of chart with selection of rows in the back table
	 */
	GanttChart.prototype._syncTTSelection = function(event){
		jQuery.sap.measure.start("GanttChart syncTTSelection","GanttPerf:GanttChart syncTTSelection function");
		var x = event.clientX;
		var y = event.clientY;
		var bShift = event.shiftKey;
		var bCtrl = event.ctrlKey;
		var $svg = jQuery("#" + this.getId() + "-svg")[0];
		var oClickPoint = this._getSvgCoodinateByDiv($svg, x, y);

		var iRowIndex = parseInt(this._oAxisOrdinal.viewToBandIndex(oClickPoint.y), 10);
		if (iRowIndex < 0){
			return false;
		}
		var aVisibleRows = this._oTT.getRows();
		var iIndex, oSelectedRow = d3.select("#" + aVisibleRows[iRowIndex].getId());
		if (iRowIndex < aVisibleRows.length && oSelectedRow && oSelectedRow.attr("data-sap-ui-rowindex")){
			iIndex = this._oTT.getFirstVisibleRow() + parseInt(oSelectedRow.attr("data-sap-ui-rowindex"), 10);
		}
		//disable selection for expaned dummy row
		if (TreeTableHelper.isDummyRow(this._oTT, iIndex) && TreeTableHelper.getContextObject(this._oTT, iIndex).__group !== undefined) {
			return false;
		}
		var sSelectionMode = this._oTT.getSelectionMode();
		if (iIndex >= 0 && sSelectionMode !== sap.ui.table.SelectionMode.None) {
			if (sSelectionMode === sap.ui.table.SelectionMode.Single) {
				if (!this._oTT.isIndexSelected(iIndex)) {
					this._oTT.setSelectedIndex(iIndex);
				} else {
					this._oTT.clearSelection();
				}
			} else {
				if (sSelectionMode === sap.ui.table.SelectionMode.Multi && this.getSelectionMode === sap.gantt.SelectionMode.Multiple) {
					bCtrl = true;
				}
				if (bShift) {
					// If no row is selected getSelectedIndex returns -1 - then we simply select the clicked row:
					/* Click on Empty place + shift key: Keep all shape/relationship selection.
					 * sync the row selection with original treetable row selection behavior
					 */
					var iSelectedIndex = this._oTT.getSelectedIndex();
					if (iSelectedIndex >= 0) {
						if (iSelectedIndex < iIndex) {
							this._oTT.addSelectionInterval(iSelectedIndex, iIndex);
						}else {
							this._oTT.addSelectionInterval(iIndex, iSelectedIndex);
						}
					}else {
						this._oTT.setSelectedIndex(iIndex);
					}
				}else if (!this._oTT.isIndexSelected(iIndex)) {
					if (bCtrl) {
						this._oTT.addSelectionInterval(iIndex, iIndex);
					} else {
						this._oTT.clearSelection();
						this._oTT.setSelectedIndex(iIndex);
					}
				}else if (bCtrl) {
					this._oTT.removeSelectionInterval(iIndex, iIndex);
				}else if (this._oTT.getSelectedIndices().length > 1) {
					this._oTT.clearSelection();
					this._oTT.setSelectedIndex(iIndex);
				}
			}
		}
		jQuery.sap.measure.end("GanttChart syncTTSelection");
	};
	
	//Set global variances for svg events
	GanttChart.prototype._setEventStatus = function (sEventName) {
		switch (sEventName) {
			case "dragEnter":
				this._bDragging = true;
				break;
			case "mouseDown":
				this._bMouseDown = true; 
				this._bDragging = false;
				break;
			case "shapeDragging":
				this._bDragging = true;
				break;
			case "mouseUp":
				this._bMouseDown = false;
				break;
			case "shapeDragEnd":
				this._bDragging = false;
				this._oDraggingData = undefined;
				break;
			case "dragLeave":
				this._iMouseDown = 0;
				this._bMouseDown = false;
				this._bDragging = false;
				break;
			default:
				break;
		}
	};
	
	GanttChart.prototype._onShapeDragStart = function (oEvent) {
		var aSvg = jQuery("#" + this.getId() + "-svg");
		//if mouse down on a shape that is dragable
		var oSourceShapeData = d3.select(oEvent.target).data()[0];
		var sClassId = oEvent.target.getAttribute("class").split(" ")[0];
		if (oSourceShapeData !== undefined && jQuery.inArray(oSourceShapeData.uid, this._aSelectedShapeUids) > -1
				&& this._judgeEnableDnD(oSourceShapeData, sClassId)) {
			var rowInfo = this._getRowByShapeUid(oSourceShapeData.uid);
			var x = oEvent.pageX - aSvg.offset().left || oEvent.offsetX;
			var y = oEvent.pageY - aSvg.offset().top || oEvent.offsetY;
			var shapeX, shapeWidth;
			if (oEvent.target.getAttribute("x") && oEvent.target.getAttribute("width")) {
				shapeX = parseInt(oEvent.target.getAttribute("x"), 10);
				shapeWidth = parseInt(oEvent.target.getAttribute("width"), 10);
			}else if (oSourceShapeData.startTime){
				var x1 = this._oAxisTime.timeToView(Format.abapTimestampToDate(oSourceShapeData.startTime));
				var x2 = this._oAxisTime.timeToView(Format.abapTimestampToDate(oSourceShapeData.endTime));
				if (Core.getConfiguration().getRTL()) {
					shapeX = x2;
					shapeWidth = (x1 - x2) > 0 ? (x1 - x2) : 1;
				}else {
					shapeX = x1;
					shapeWidth = (x2 - x1) > 0 ? (x2 - x1) : 1;
				}
			}else {
				shapeX = x;
				shapeWidth = 1;
			}
			var oDragStartPoint = {"x": x, "y": y, "shapeX": shapeX, "shapeWidth": shapeWidth};
			
			var aSourceShapeData = [];
			aSourceShapeData.push({
				"shapeData": oSourceShapeData,
				"objectInfo": rowInfo
			});
			for (var sShapeDataName in this._oSelectedShapes) {
				var aShapeData = this._oSelectedShapes[sShapeDataName];
				if (aShapeData !== undefined) {
					for (var i in aShapeData) {
						if (aShapeData[i].shapeUid !== oSourceShapeData.uid && this._judgeEnableDnD(aShapeData[i].shapeData)) {
							aSourceShapeData.push({
								"shapeData": aShapeData[i].shapeData,
								"objectInfo": aShapeData[i].objectInfoRef
							});
						}
					}
				}
			}
			this._oDraggingData = {
					"sourceShapeData": aSourceShapeData,
					"dragStartPoint": oDragStartPoint,
					"sourceSvgId": this.getId(),
					"targetSvgId": this.getId(),
					"domObject": d3.select(oEvent.target)[0][0]
			};
			
			this._oDraggingData.fDragHandler = this._onShapeDrag.bind(this);
			jQuery(document.body).bind("mousemove", this._oDraggingData.fDragHandler);
			this._oDraggingData.fDragEndHandler = this._onShapeDragEnd.bind(this);
			jQuery(document.body).bind("mouseup", this._oDraggingData.fDragEndHandler);
		}
	};
	
	GanttChart.prototype._onShapeDrag = function (oEvent) {
		if (oEvent.button !== 0 || oEvent.buttons === 0 || oEvent.ctrlKey) {
			return false;
		}
		var aDragDiv = d3.select("#activtityDragDrop");
		var dragDiv = aDragDiv[0];
		if (this._oDraggingData === undefined) {
			if (!aDragDiv.empty()){
				aDragDiv.remove();
			}
		}else {
			var nShapeCount = this._oDraggingData.sourceShapeData.length;
			var iShapeX = this._oDraggingData.dragStartPoint.shapeX;
			var iStartMouseX = this._oDraggingData.dragStartPoint.x;
			if (aDragDiv.empty() || dragDiv === null) {
				dragDiv = d3.select("body").append("div").attr("id", "activtityDragDrop")
				.style("position", "absolute").style("z-index", "999");
				var cloneNode = this._oDraggingData.domObject.cloneNode();
				var width = d3.select(cloneNode).attr("width");
				var height = d3.select(cloneNode).attr("height");
				var fontSize = 12;
				var g = dragDiv.append("svg").attr("id", "activtityDragDropSvg").attr("width", width).attr("height", height)
					.append("g").attr("id", "activtityDragDropSvgGroup");
	
				var shadow = d3.select(this._oDraggingData.domObject.cloneNode())
					.classed("shadow", true)
					.attr("fill-opacity", "0.5")
					.attr("x", 0)
					.attr("y", 0);
	
				g.node().appendChild(shadow.node());
				g.append("text")
					.attr("x", width / 2 - fontSize / 2)
					.attr("y", height - fontSize / 2 + 4)
					.attr("fill", "blue")
					.attr("font-size", 12)
					.text(function () {
						return nShapeCount; 
					});
			}
			var iCurrentX = iShapeX + (oEvent.pageX - iStartMouseX);
			var iCurrentY = oEvent.pageY;//calculate current Y on the align of shape&row
			d3.select("#activtityDragDrop").style("left", iCurrentX + 4 + "px");
			d3.select("#activtityDragDrop").style("top", iCurrentY + 4 + "px");
			jQuery(document.body).addClass("sapGanttDraggingCursor");
			this._setEventStatus("shapeDragging");
			this._iMouseDown = 0;
		}
	};
	
	GanttChart.prototype._onShapeDragEnd = function (oEvent) {
		//console.log("_onShapeDragEnd",oEvent);
		var div = d3.select("#activtityDragDrop");
		if (!div.empty()){
			div.remove();
		}
		if (this._bDragging && this._oDraggingData !== undefined) {
			var sTargetSvgId = this.getId() + "-svg";
			this._collectDraggingShapeData(this._oDraggingData, oEvent);
			this.fireShapeDragEnd({
				originEvent: oEvent,
				sourceSvgId: this._oDraggingData.sourceSvgId,
				targetSvgId: sTargetSvgId,
				sourceShapeData: this._oDraggingData.sourceShapeData,
				targetData: this._oDraggingData.targetData
			});
		}
		if (this._oDraggingData !== undefined) {
			jQuery(document.body).unbind("mousemove", this._oDraggingData.fDragHandler);
			jQuery(document.body).unbind("mouseup", this._oDraggingData.fDragEndHandler);
		}
		jQuery(document.body).removeClass("sapGanttDraggingCursor");
		this._setEventStatus("shapeDragEnd");
	};
	
	GanttChart.prototype._collectDraggingShapeData = function (oDraggingSource, oEvent) {
		var aSvg = jQuery("#" + this.getId() + "-svg");
		var x = oEvent.pageX - aSvg.offset().left || oEvent.offsetX;
		var sStartPointX = oDraggingSource.dragStartPoint.x;
		var iDragDistance = parseInt(x, 10) - parseInt(sStartPointX, 10);
		var sShapeCurrentStartX = parseInt(oDraggingSource.dragStartPoint.shapeX, 10) + iDragDistance;
		var sShapeCurrentEndX = sShapeCurrentStartX + parseInt(oDraggingSource.dragStartPoint.shapeWidth, 10);
		var sNewStartTime, sNewEndTime;
		if (Core.getConfiguration().getRTL() === true) {
			sNewStartTime = Format.dateToAbapTimestamp(this._oAxisTime.viewToTime(sShapeCurrentEndX));
			sNewEndTime = Format.dateToAbapTimestamp(this._oAxisTime.viewToTime(sShapeCurrentStartX));
		} else {
			sNewStartTime = Format.dateToAbapTimestamp(this._oAxisTime.viewToTime(sShapeCurrentStartX));
			sNewEndTime = Format.dateToAbapTimestamp(this._oAxisTime.viewToTime(sShapeCurrentEndX));
		}
		/*
		 * Only Update the clicking shape data with the row object at the current point
		 * keep other shape data as the same as they are in sourceshapedata
		 */
		var param = this._composeParameterForClickPosition(oEvent);
		var rowInfo = param.rowInfo;
		oDraggingSource.targetData = {
			"mouseTimestamp": {startTime: sNewStartTime, endTime: sNewEndTime},
			"mode": this.getMode(),
			"objectInfo": rowInfo
		};
	};
	
	/*
	 * set draggingSource when a drag is from outside of the current chart
	 */
	GanttChart.prototype.setDraggingData = function (oDraggingSource) {
		
		this._oDraggingData = oDraggingSource;
		if (this._oDraggingData !== undefined) {
			this._oDraggingData.targetSvgId = this.getId();
			jQuery(document.body).unbind("mousemove", this._oDraggingData.fDragHandler);
			jQuery(document.body).unbind("mouseup", this._oDraggingData.fDragEndHandler);
			this._oDraggingData.fDragHandler = this._onShapeDrag.bind(this);
			this._oDraggingData.fDragEndHandler = this._onShapeDragEnd.bind(this);
			jQuery(document.body).bind("mousemove", this._oDraggingData.fDragHandler);
			jQuery(document.body).bind("mouseup", this._oDraggingData.fDragEndHandler);
			this._setEventStatus("dragEnter");
		}
	};
	
	GanttChart.prototype._onSvgCtnMouseEnter = function (oEvent) {
		if (oEvent.currentTarget.id === (this.getId() + '-svg-ctn') && oEvent.button === 0 && oEvent.buttons !== 0) {// check if the mouse left key is down
			this.fireChartDragEnter({originEvent: oEvent});
		}
	};

	GanttChart.prototype._onSvgCtnMouseMove = function(oEvent){
		var aSvg = jQuery("#" + this.getId() + "-svg");
		// calculate svg coordinate for hover
		var oSvgPoint = this._getSvgCoodinateByDiv(aSvg[0], oEvent.pageX, oEvent.pageY);

		// draw cursorLine. select svgs of all chart instances to impl synchronized cursorLine
		if (this.getEnableCursorLine()) {
			this._oCursorLineDrawer.drawSvg(
				d3.selectAll(".sapGanttChartSvg"),
				d3.selectAll(".sapGanttChartHeaderSvg"),
				this.getLocale(),
				oSvgPoint);
		}
		//Trigger mouseover event from oSVG to tree table, according to row index
		//if current row is the main row or current GanttChart is not expand chart and not multi row height, the leadingRowInfo = undefined, leadingRowNum = rowIndex
		//if current row is a dummy row, rowInfo = undefined
		var param = this._composeParameterForClickPosition(oEvent);
		//only hover the main row when in expand chart
		var iRowIndex = param ? param.rowIndex : -1; 
		var oShapeData = d3.select(oEvent.target).data()[0];
		if (iRowIndex  > -1 && 
				((oShapeData !== undefined && oShapeData.uid !== this._lastHoverShapeUid)
						|| (oShapeData === undefined && this._lastHoverShapeUid !== undefined) || iRowIndex !== this._lastHoverRowIndex)) {
			this.fireChartMouseOver({
				objectInfo: param.rowInfo,
				leadingRowInfo: param.leadingRowInfo,
				timestamp: param.startTime.getTime(),
				svgId: this.getId() + "-svg",
				svgCoordinate: param.svgPoint, 
				effectingMode: this.getMode(),
				originEvent: oEvent
			});
			if (oShapeData !== undefined) {
				this._lastHoverShapeUid = oShapeData.uid;
			}else {
				this._lastHoverShapeUid = undefined;
			}
		}
		if (iRowIndex > -1 && iRowIndex !== this._lastHoverRowIndex) {
			var oTT = this._oTT;
			var $oTT = jQuery(oTT.getDomRef());
			var aHover = $oTT.find(".sapUiTableRowHvr");
			var oTargetRow = $oTT.find(".sapUiTableTr")[iRowIndex];
			
			if (this._oTT.getRows()[iRowIndex]) {
				var iRowNum = this._oTT.getRows()[iRowIndex].getIndex();
				var oRowContent = TreeTableHelper.getContextObject(this._oTT, iRowNum);
				
				if (aHover.length > 0) {
					for (var i = 0; i < aHover.length; i++) {
						if (jQuery.inArray("sapUiTableTr", aHover[i].classList) > -1) {
							jQuery(aHover[i]).mouseleave();
						}
					}
				}
				//disable hover for expaned dummy row
				if (!TreeTableHelper.isDummyRow(this._oTT, iRowNum) || oRowContent.__group === undefined || oRowContent.__group === null) {
					jQuery(oTargetRow).mouseenter();
					this._lastHoverRowIndex = iRowIndex;
				}
			}
		}
	};

	GanttChart.prototype._onSvgCtnMouseLeave = function (oEvent) {
		if (oEvent.currentTarget.id === (this.getId() + '-svg-ctn') && this._bDragging && this._oDraggingData !== undefined) {
			this._oDraggingData.targetSvgId = undefined;
			//if drag a shape out of a chart(view), then fire an event to Gantt
			this.fireChartDragLeave({
				//eventStatus: this._bDragging, this._mouseup, this.mousedown, or can those status already can be judged by the target(null or not?)
				originEvent: oEvent,
				draggingSource: this._oDraggingData
			});
			this._setEventStatus("dragLeave");
		}
		if (this.getEnableCursorLine()) {
			this._oCursorLineDrawer.destroySvg(
				d3.selectAll(".sapGanttChartSvg"),
				d3.selectAll(".sapGanttChartHeaderSvg"));
		}

		//Trigger mouseout event from oSVG to tree table
		var oTT = this._oTT;
		var $oTT = jQuery(oTT.getDomRef());
		var aHover = $oTT.find(".sapUiTableRowHvr");
		
		if (aHover.length > 0) {
			//to less the times of mouse leave, only trigger the row event
			for (var i = 0; i < aHover.length; i++) {
				if (jQuery.inArray("sapUiTableTr", aHover[i].classList) > -1) {
					jQuery(aHover[i]).mouseleave();
				}
			}
		}
		this._lastHoverShapeUid = undefined;
		this._lastHoverRowIndex = -1;
	};
	
	GanttChart.prototype._onSvgCtnMouseDown = function (oEvent) {
		if (oEvent.button == 0 ) {
			var oShapeData = d3.select(oEvent.target).data()[0];
			var sClassId;
			if (oEvent.target.getAttribute("class")){
				sClassId = oEvent.target.getAttribute("class").split(" ")[0];
			}
			//only when the mousedown is happened to a selectable shape, the shape selection change & dragNdrop are available, but the row selection still works
			if (sClassId && oShapeData && this._judgeEnableSelection(oShapeData, sClassId)) {
				this._oLastSelectedShape = oShapeData;
				this._onShapeDragStart(oEvent);
				//Needed for disabling default drag and drop behaviour in Firefox. This is not harmful to the behaviour in other browsers.
				oEvent.preventDefault();
			}
			this._iMouseDown++;
			this._setEventStatus("mouseDown");
		}
	};
	
	GanttChart.prototype._onSvgCtnMouseUp = function (event) {
		/* check if a dragging is happended, if yes, fireShapeDragEnd
		 * Otherwise check if a single click or a double click should happend
		 */
		if (event.button == 2){
			var param = this._composeParameterForClickPosition(event);
			this.fireChartRightClick({ 
				objectInfo: param.rowInfo,
				leadingRowInfo: param.leadingRowInfo,
				timestamp: param.startTime.getTime(),
				svgId: this.getId() + "-svg",
				svgCoordinate: param.svgPoint, 
				effectingMode: this.getMode(),
				originEvent: event
			});
		}else if (event.button == 0 && !this._bDragging && this._bMouseDown) {
			this._onSvgCtnClick(event);
		}
	};
	
	//event handler for single click on chart
	GanttChart.prototype._onSvgCtnClick = function (oEvent) {
		var oShapeData = d3.select(oEvent.target).data()[0];
		var sClassId;
		if (oEvent.target.getAttribute("class")){
			sClassId = oEvent.target.getAttribute("class").split(" ")[0];
		}
		var bSelectionChange = {};
		if (oShapeData !== undefined && this._judgeEnableSelection(oShapeData, sClassId) && this._oLastSelectedShape !== undefined && this._oLastSelectedShape.uid === oShapeData.uid) {
			bSelectionChange = this._selectionChange(oShapeData, oEvent.ctrlKey, oEvent.shiftKey, oEvent);
		}else if (this.getSelectionMode() === sap.gantt.SelectionMode.MultiWithKeyboard) {
			this._syncTTSelection(oEvent);
			this._oLastSelectedShape = undefined;
		}else {
			if (this._aSelectedShapeUids !== undefined && this._aSelectedShapeUids.length > 0) {
				this._oSelectedShapes = {};
				this._aSelectedShapeUids = [];
				bSelectionChange.shapeSelectionChange = true;
			}
			if (this._aSelectedRelationships.length > 0) {
				this._aSelectedRelationships = [];
				bSelectionChange.relationshipSelectionChange = true;
			}
			if (bSelectionChange.shapeSelectionChange || bSelectionChange.relationshipSelectionChange) {
				this._drawSelectedShapes();
			}
		}
		if (!oEvent.ctrlKey && !oEvent.shiftKey){
			var that = this;
			setTimeout(function () {
				if (that._iMouseDown > 1){
					var param = that._composeParameterForClickPosition(oEvent);
					that.fireChartDoubleClick({
						objectInfo: param.rowInfo,
						leadingRowInfo: param.leadingRowInfo,
						timestamp: param.startTime.getTime(),
						svgId: that.getId() + "-svg",
						svgCoordinate: param.svgPoint,
						effectingMode: that.getMode(),
						originEvent: oEvent
					});	
				}
				that._iMouseDown = 0;
				that._setEventStatus("mouseUp");
				this._oLastSelectedShape = undefined;
			}, 300);
		}else {
			this._iMouseDown = 0;
			this._setEventStatus("mouseUp");
			this._oLastSelectedShape = undefined;
		}
		
		if (bSelectionChange.shapeSelectionChange) {
			this.fireShapeSelectionChange({
				originEvent: oEvent
			});
		}
		if (bSelectionChange.relationshipSelectionChange) {
			this.fireRelationshipSelectionChange({
				originEvent: oEvent
			});
		}
	};

	GanttChart.prototype._onHSbScroll = function (oEvent) {
		var nScrollLeft = this._oTT._oHSb.getScrollPosition();
		this.updateLeftOffsetRate(nScrollLeft);
		this._draw(false);
		this.fireHorizontalScroll({
			scrollSteps: nScrollLeft,
			leftOffsetRate: this._fLeftOffsetRate
		});
	};
	
	GanttChart.prototype._onVSbScroll = function (oEvent) {
		this.fireVerticalScroll({
			scrollSteps: this._oTT._oVSb.getScrollPosition()
		});
		this._oTT.setFirstVisibleRow(this._oTT._oVSb.getScrollPosition() || 0, true);
	};

	GanttChart.prototype._hSbScrollLeft = function (nScrollPosition) {
		var $chartBodySvgCnt = jQuery("#" + this.getId() + "-svg-ctn");
		var $chartHeaderSvgCnt = jQuery("#" + this.getId() + "-header");
		var nScrollLeft;
		if (Core.getConfiguration().getRTL() === true) {
			//Header and Body should have same width. Use header to calculate the scroll position in RTL mode
			nScrollLeft = this._oStatusSet.aViewBoundary[1] - $chartHeaderSvgCnt.width() - nScrollPosition;
			if ( nScrollLeft < 0 ) {
				nScrollLeft = 0;
			}
		} else {
			nScrollLeft = nScrollPosition;
		}

		//scroll divs
		if (Core.getConfiguration().getRTL() === true && sap.ui.Device.browser.name === "ff") {
			$chartBodySvgCnt.scrollLeftRTL(nScrollLeft);
			$chartHeaderSvgCnt.scrollLeftRTL(nScrollLeft);
		} else {
			$chartBodySvgCnt.scrollLeft(nScrollLeft);
			$chartHeaderSvgCnt.scrollLeft(nScrollLeft);
		}

	};
	
	GanttChart.prototype.updateLeftOffsetRate = function(nPosition, nContentWidth) {
		//In RTL mode, treeTable use ui5 scrollbar control which wrap-ups the jQuery scrollLeft. The functions getScrollPosition() and setScrollPosition()
		//act same in 3 browsers: ie, ff, cr. The returned value of getScrollPosition() means the width of hidden DOM element at the right of scroll bar
		//Actually 3 browsers have different logic for scroll bar, UI5 scroll bar control wrap-ups the jQuery and make all act as same in ie.
		//To calculate the _fLeftOffsetRate, need to convert the returned value of getScrollPosition() to the width of hidden DOM element at the left of scroll bar 
		var nScrollWidth = nContentWidth ? nContentWidth : parseInt(this._oTT._oHSb.getContentSize(), 0);
		var nClientWidth = jQuery("#" + this.getId() + "-svg-ctn").width();
		if (nScrollWidth - nClientWidth !== 0) {
			if (Core.getConfiguration().getRTL() === true) {
				this._fLeftOffsetRate = (nScrollWidth - nPosition - nClientWidth) / (nScrollWidth - nClientWidth);
			} else {
				this._fLeftOffsetRate = nPosition / (nScrollWidth - nClientWidth);
			}
			this._fLeftOffsetRate = this._fLeftOffsetRate < 0 ? 0 : this._fLeftOffsetRate;
			this._fLeftOffsetRate = this._fLeftOffsetRate > 1 ? 1 : this._fLeftOffsetRate;
		}
		return this._fLeftOffsetRate;
	};

	GanttChart.prototype.jumpToPosition = function(value) {
		if (!isNaN(value) && !(value instanceof Date)) {
			// when input parameter "value" is float value which means left offset rate
			this._fLeftOffsetRate = value;
			this._draw(false);
			return;
		}
		
		var oDateToJump, nDatePosition;
		var nClientWidth = jQuery("#" + this.getId() + "-svg-ctn").width();
		if (!nClientWidth || nClientWidth <= 0) {
			return;
		}

		if (value instanceof Date) {
			// when value is Date format
			oDateToJump = value;
		} else {
			// when value is null or undefined
			var oTimeAxis = this.getTimeAxis();
			var oInitHorizon = oTimeAxis.getInitHorizon();
			if (!oInitHorizon || !oInitHorizon.getStartTime() || !oInitHorizon.getEndTime()) {
				return;
			}
			oDateToJump = Format.abapTimestampToDate(oInitHorizon.getStartTime());
			// need to adjust zoom rate for jumping to initHorizon
			var fSuitableScale = this._calZoomScale(
				Format.abapTimestampToDate(oInitHorizon.getStartTime()),
				Format.abapTimestampToDate(oInitHorizon.getEndTime()),
				nClientWidth);
			var fSuitableRate = this._oZoom.base.fScale / fSuitableScale;
			this.setTimeZoomRate(fSuitableRate);
		}
		
		var nContentWidth = this._nUpperRange - this._nLowerRange;
		if (!nContentWidth || nContentWidth <= 0) {
			return;
		}
		
		if (Core.getConfiguration().getRTL() === true){
			//Refer to the comments in updateLeftOffsetRate. Convert the the x value to nScrollLeft
			nDatePosition = nContentWidth - this._oAxisTime.timeToView(oDateToJump) - this._oAxisTime.getViewOffset();
			nDatePosition = nDatePosition < 0 ? 0 : nDatePosition;
		} else {
			nDatePosition = this._oAxisTime.timeToView(oDateToJump) + this._oAxisTime.getViewOffset();
		}

		this.updateLeftOffsetRate(nDatePosition, nContentWidth);
		this._draw(false);
	};

	GanttChart.prototype._onTTRowUpdate = function () {
		this._syncSvgHeightWithTT();
		this._syncSvgDataWithTT();
		this._prepareRelationshipDataFromModel();
		this._draw(true);
	};

	GanttChart.prototype._updateDataString = function () {
		var sShapeData = JSON.stringify(this._aShapeData, function(key, value) {
			if (key === "bindingObj" || key === "contextObj") {
				return undefined;
			}
			return value;
		});
		if (this._sShapeData && sShapeData === this._sShapeData) {
			this._sShapeData = sShapeData;
			return false;
		} else {
			this._sShapeData = sShapeData;
			return true;
		}
	};

	GanttChart.prototype._syncSvgHeightWithTT = function () {
		var $svg = this.$().find(".sapGanttChartSvgCtn");
		//var nRowNumber = this._oTT.getVisibleRowCount();
		$svg.height(this.$().find(".sapUiTableCCnt").height());
	};

	GanttChart.prototype._syncSvgDataWithTT = function () {
		var oBinding = this._oTT.getBinding("rows");
		var bJSONTreeBinding = oBinding.getMetadata().getName() === "sap.ui.model.json.JSONTreeBinding";
		
		var iFirstVisibleRow = this._oTT.getFirstVisibleRow();
		var iVisibleRowCount = this._oTT.getVisibleRowCount();
		
		// structured data for drawing by D3
		this._aShapeData = [];
		this._aNonVisibleShapeData = [];
		// temporary variables
		var _aTopNonVisibleShapeData = [];
		var _aBottomNonVisibleShapeData = [];
		// default visible range
		var aVisibleRange = [iFirstVisibleRow, iFirstVisibleRow + iVisibleRowCount - 1];

		if (bJSONTreeBinding) {
			aVisibleRange = this._prepareVerticalDrawingRange();
			
			oBinding.getContexts(0, 0);// get all contexts
			
			if (iFirstVisibleRow > 0) {
				_aTopNonVisibleShapeData = this._getDrawingData([0, iFirstVisibleRow - 1]);
			}
			_aBottomNonVisibleShapeData = this._getDrawingData([iFirstVisibleRow + iVisibleRowCount, oBinding.getLength() - 1]);
			
			oBinding.getContexts(aVisibleRange[0], aVisibleRange[1]);// get contexts of visible area
			
			this._aShapeData = this._getDrawingData(aVisibleRange);
		} else {
			if (this._aRelationshipsContexts && this._aRelationshipsContexts.length > 0){
				// oBinding.getContexts(0, 0) returns all contexts so we have to check whether iFirstVisibleRow is larger than 0
				if (iFirstVisibleRow > 0) {
					_aTopNonVisibleShapeData = this._createShapeDataFromRowContexts(oBinding.getContexts(0, iFirstVisibleRow));
				}
				_aBottomNonVisibleShapeData = this._createShapeDataFromRowContexts(oBinding.getContexts(iFirstVisibleRow + iVisibleRowCount, oBinding.getLength()));
			}
			
			// row contexts of the visible area
			// IMPORTANT: this must be called after getting the row contexts of non visible because Table._aRowIndexMap is refreshed every time when getContexts is called.
			var aRowContext = oBinding.getContexts(iFirstVisibleRow, iVisibleRowCount);
			this._aShapeData = this._createShapeDataFromRowContexts(aRowContext);
		}
		
		// merge _aTopNonVisibleShapeData with _aBottomNonVisibleShapeData
		this._aNonVisibleShapeData = _aTopNonVisibleShapeData.concat(_aBottomNonVisibleShapeData);
		
		// enhance row data
		var aShapeDataNames = this.getShapeDataNames();
		if (aShapeDataNames && aShapeDataNames.length > 0) {
			Utility.generateRowUid(this._aShapeData,this._oObjectTypesConfigMap, aShapeDataNames);	// +uid
			Utility.generateRowUid(this._aNonVisibleShapeData, this._oObjectTypesConfigMap, aShapeDataNames);	// +uid
			this._setSelectedStatusFromData(aShapeDataNames);
		} else {
			jQuery.sap.log.error("Missing configuration for shapeDataNames.");
		}
		var iBaseRowHeight = this.getBaseRowHeight();
		this._oAxisOrdinal = this._createAxisOrdinal(this._aShapeData, iBaseRowHeight,
				(aVisibleRange[0] - iFirstVisibleRow) * iBaseRowHeight);
		
		// this._replaceDataRef(); // replace ref --TODO: move this logic to app
		this._cacheObjectPosition(this._aShapeData, this._oAxisOrdinal);	// +y, +rowHeight
		this._cacheObjectPosition(_aTopNonVisibleShapeData, this._oAxisOrdinal, true);	// +y, +rowHeight
		this._cacheObjectPosition(_aBottomNonVisibleShapeData, this._oAxisOrdinal, false);	// +y, +rowHeight

		if (!this._aVisibleRange || this._aVisibleRange[0] !== aVisibleRange[0] || this._aVisibleRange[1] !== aVisibleRange[1]) {
			this._aVisibleRange = aVisibleRange;
			return true;
		}

		return false;
	};
	
	/*
	 * Creates shape data array for the given row contexts.
	 */
	GanttChart.prototype._createShapeDataFromRowContexts = function (aRowContexts) {
		var aShapeDataNames = this.getShapeDataNames();
		var oBinding = this._oTT.getBinding("rows");
		var oModel = oBinding.getModel();
		
		var aShapeData = [];
		
		for (var i = 0; i < aRowContexts.length; i++) {
			if (aRowContexts[i] != undefined) {
				for (var j = 0; j < aShapeDataNames.length; j++) {
					var sShapeName = aShapeDataNames[j];//e.g. 'Header'
					var aShapeDataPath = aRowContexts[i].getProperty(sShapeName);//e.g. ["HeaderDetail('0%20')","HeaderDetail('48%20')"]
					var oShapeData;
					if (aShapeDataPath) {
						for (var k = 0; k < aShapeDataPath.length; k++) {
							var sShapeDataPath = aShapeDataPath[k];
							oShapeData = oModel.getData("/" + sShapeDataPath);
							aShapeData.push({
								"bindingObj": oBinding,
								"contextObj": aRowContexts[i],
								"data": aRowContexts[i].getObject(),
								"shapeData": [oShapeData],
								"id": oShapeData.id,
								"shapeName": sShapeName,
								"rowIndex": i
							});
						}
					}
				}
			}
		}
		
		return aShapeData;
	};
	
	/*
	 * Calculate [rowHeight] and [y] property for each object based on a given axisY
	 * @param {object[]} objects Shape data array for whose entity we will add y and rowHeight properties to.
	 * @param {object} axisY AxisOrdinal object.
	 * @param {boolean} bAboveOrUnderVisibleArea Optional. Only used for drawing elements in the non visible area.
	 * 		if undefined, means the objects are in the visible area
	 * 		if true, means the objects are above the visible area, then y are -100
	 * 		if false, means the objects are under the visible area, then y are axisY.getViewRange()[1]+100
	 * @return undefined
	 */
	GanttChart.prototype._cacheObjectPosition = function (objects, axisY, bAboveVisibleArea) {
		if (objects && objects.length > 0) {
			if (bAboveVisibleArea === true) {
				for (var i = 0; i < objects.length; i++) {
					objects[i].y = -100;
					objects[i].rowHeight = axisY.getViewBandWidth();
				}
			} else if (bAboveVisibleArea === false) {
				for (var j = 0; j < objects.length; j++) {
					objects[j].y = axisY.getViewRange()[1] + 100;
					objects[j].rowHeight = axisY.getViewBandWidth();
				}
			} else {
				for (var k = 0; k < objects.length; k++) {
					objects[k].y = axisY.elementToView(objects[k].uid);

					if (k > 0) {
						objects[k - 1].rowHeight = objects[k].y - objects[k - 1].y;
					}
				}
				objects[objects.length - 1].rowHeight = axisY.getViewRange()[1] - objects[objects.length - 1].y;
			}
		}
	};
	
	/*
	 * Loop this._aRelationshipsContexts and call getObject method on each entity and then push the value into this._aRelationships
	 */
	GanttChart.prototype._prepareRelationshipDataFromModel = function () {
		this._aRelationships = [];
		if (this._aRelationshipsContexts) {
			for (var i = 0; i < this._aRelationshipsContexts.length; i++) {
				var oRelationship = this._aRelationshipsContexts[i].getObject();
				if (oRelationship !== undefined) {
					this._aRelationships.push(oRelationship);
				}
			}
		}
		Utility.generateUidByShapeDataName(this._aRelationships, "relationship"); // +uid for relationships
	};

	GanttChart.prototype._createAxisOrdinal = function (aShapeData, iBaseRowHeight, fShift) {
		var aRowNames = aShapeData.map(function (oRow) {
			return oRow.uid;
		});
		var aRowHeights = aShapeData.map(function (oRow) {
			if (oRow.rowSpan) {
				return oRow.rowSpan;
			} else {
				//For blank rows in hierarchy, just return 1, since there is no place to specify its rowSpan now...
				return 1;
			}
		});

		return new AxisOrdinal(aRowNames, aRowHeights, iBaseRowHeight, fShift);
	};

	GanttChart.prototype.getShapeData = function(aRange) {
		return this._aShapeData;
	};

	GanttChart.prototype._getDrawingData = function(aRange) {
		var i, j, k, oRow;
		var oBinding = this._oTT.getBinding("rows");
		var aRowList = [];
		for (i = aRange[0]; i <= aRange[1]; i++) {
			oRow = TreeTableHelper.getContextObject(this._oTT, i);
			if (!oRow) {
				continue;
			}
			if (TreeTableHelper.isDummyRow(this._oTT, i)
				&& ((aRowList.length > 0
				&& aRowList[aRowList.length - 1].chartScheme
				&& aRowList[aRowList.length - 1].chartScheme === oRow.__group
				&& aRowList[aRowList.length - 1].index === oRow.index) || oRow.chartScheme)) {
				continue;
			}
			if (oRow.__group) { // expanded row
				var sMode;
				if (this._oChartSchemesConfigMap[oRow.__group] && this._oChartSchemesConfigMap[oRow.__group].getModeKey() && this._oChartSchemesConfigMap[oRow.__group].getModeKey() !== sap.gantt.config.DEFAULT_MODE_KEY) {
					sMode = this._oChartSchemesConfigMap[oRow.__group].getModeKey();
				} else {
					sMode = this.getMode();
				}
				var oSchemeInfo = this._collectDataNameForValidChartScheme(oRow.__group, sMode);
				var oParent = oRow.parentData ? oRow.parentData : null;
				if (oRow.index && oParent && oSchemeInfo && oSchemeInfo.drawData) {
					for (j = 0; j < oSchemeInfo.drawData.length; j++) {
						if (!oParent[oSchemeInfo.drawData[j]]) {
							continue;
						}
						oRow[oSchemeInfo.drawData[j]] = [];
						for (k = 0; k < oParent[oSchemeInfo.drawData[j]].length; k++) {
							if (!oParent[oSchemeInfo.drawData[j]][k].rowIndex ||
								oRow.index === oParent[oSchemeInfo.drawData[j]][k].rowIndex) {
								oRow[oSchemeInfo.drawData[j]].push(oParent[oSchemeInfo.drawData[j]][k]);
							}
						}
					}
				}
				aRowList.push({
					"bindingObj": oBinding,
					"data": oRow,
					"id": oParent.id,
					"rowSpan": oSchemeInfo.rowSpan,
					"chartScheme": oRow.__group,
					"rowIndex": i,
					"index": oRow.index, // > 0
					"icon": this._oChartSchemesConfigMap[oRow.__group].getIcon(),
					"closeIcon": "./image/closeChart.png",
					"name": this._oChartSchemesConfigMap[oRow.__group].getName()
				});
			} else { // main row
				var rowSpan = 1;
				var sChartScheme = this._oObjectTypesConfigMap[oRow.type] ?
					this._oObjectTypesConfigMap[oRow.type].getMainChartSchemeKey() :
					sap.gantt.config.DEFAULT_CHART_SCHEME_KEY;
				if (oRow.type) {
					var oChartScheme = this._oChartSchemesConfigMap[sChartScheme];
					if (oChartScheme) {
						rowSpan = oChartScheme.getRowSpan();
					}
				}
				aRowList.push({
					"bindingObj": oBinding,
					"contextObj": this._oTT.getContextByIndex(i),
					"data": oRow,
					"id": oRow.id,
					"rowSpan": rowSpan,
					"chartScheme": sChartScheme,
					"rowIndex": i,
					"index": 0
				});
			}
		}
		return aRowList;
	};

	GanttChart.prototype._prepareVerticalDrawingRange = function() {
		var nLastBindingRow = this._oTT.getBinding("rows").getLength() - 1;
		if (nLastBindingRow < 0) {
			return [0, -1];
		}
		var nFirstVisibleRow = this._oTT.getFirstVisibleRow();
		var nLastVisibleRow = nFirstVisibleRow + this._oTT.getVisibleRowCount() - 1;
		var nFirstDrawingRow = nFirstVisibleRow;
		var nLastDrawingRow = nLastVisibleRow < nLastBindingRow ? nLastVisibleRow : nLastBindingRow;
		var i, nGroup, nGroupIndex, oRow;
		for (i = nFirstVisibleRow; i >= 0; i--) {
			if (!TreeTableHelper.isDummyRow(this._oTT, i)) {
				break;
			}
			oRow = TreeTableHelper.getContextObject(this._oTT, i);
			if (oRow && oRow.previousNodeNum) {
				nFirstDrawingRow = i - oRow.previousNodeNum;
				continue;
			}
			if (!oRow || !oRow.index || oRow.index < 0) {
				break;
			}			
			if (!nGroupIndex) {
				nGroup = oRow.__group;
				nGroupIndex = oRow.index;
			} else if (nGroup === oRow.__group && nGroupIndex === oRow.index) {
				nFirstDrawingRow = i;
			} else {
				break;
			}
		}
		nGroupIndex = undefined;
		for (i = nLastVisibleRow; i <= nLastBindingRow; i++) {
			oRow = TreeTableHelper.getContextObject(this._oTT, i);
			if (oRow && oRow.afterNodeNum) {
				nLastDrawingRow = i + oRow.afterNodeNum;
				continue;
			}
			if (!TreeTableHelper.isDummyRow(this._oTT, i)) {
				break;
			}			
			if (!oRow || !oRow.index || oRow.index < 0) {
				break;
			}			
			if (!nGroupIndex) {
				nGroup = oRow.__group;
				nGroupIndex = oRow.index;
			} else if (nGroup === oRow.__group && nGroupIndex === oRow.index) {
				nLastDrawingRow = i;
			} else {
				break;
			}
		}
		return [nFirstDrawingRow, nLastDrawingRow];
	};

	GanttChart.prototype._prepareHorizontalDrawingRange = function () {
		//oStatusSet must keep the value of LTR mode because other functions use it
		var nContentWidth = this._nUpperRange - this._nLowerRange;
		var nClientWidth = jQuery("#" + this.getId() + "-svg-ctn").width();

		if (!this._oStatusSet) {
			this._updateScrollWidth();
		}
		
		var nScrollLeft = Math.ceil((this._fLeftOffsetRate ? this._fLeftOffsetRate : 0) * (nContentWidth - nClientWidth));
		if (this._oStatusSet) {
			if ((nClientWidth >= nContentWidth || (this._oStatusSet.aViewBoundary[0] <= nScrollLeft - this._oStatusSet.nOffset &&
				this._oStatusSet.aViewBoundary[1] >= nScrollLeft + nClientWidth - this._oStatusSet.nOffset))) {
				if (!this._mTimeouts._drawSvg) {
					this._scrollSvg();
				}

				return false;
			}
		}

		var nWidth = nClientWidth * (1 + this._fExtendFactor * 2);
		var nOffset = nScrollLeft - nClientWidth * this._fExtendFactor;
		if (nOffset < this._nLowerRange) {
			nWidth += nOffset;
			nOffset = 0;
		}
		if (nOffset + nWidth > this._nUpperRange) {
			nWidth = this._nUpperRange - nOffset;
		}

		this._oAxisTime.setViewOffset(nOffset);
		this._oStatusSet = {
				nWidth: nWidth,
				nOffset: nOffset,
				nScrollLeft: nScrollLeft,
				aViewBoundary: [0, nWidth],
				aTimeBoundary: [this._oAxisTime.viewToTime(0), this._oAxisTime.viewToTime(nWidth)],
				bRTL: Core.getConfiguration().getRTL()
		};

		return true;
	};

	GanttChart.prototype._draw = function (bForced) {
		if (!this._prepareHorizontalDrawingRange() && !bForced) {
			return;
		}
		
		var that = this;
		this._mTimeouts._drawSvg = this._mTimeouts._drawSvg || window.setTimeout(function() {
			that._drawSvg();
			that._mDrawDelayMS = 0;
		}, this._mDrawDelayMS);
	};

	GanttChart.prototype._updateScrollWidth = function () {
		var nMaxScrollWidth = 100000;
		var nContentWidth = this._nUpperRange - this._nLowerRange;
		var nScrollWidth = nContentWidth > nMaxScrollWidth ? nMaxScrollWidth : nContentWidth;
		if (nScrollWidth + "px" !== this._oTT._oHSb.getContentSize()) {
			this._oTT._oHSb.setContentSize(nScrollWidth + "px").bind(this._oTT.getDomRef());
		}
	};

	GanttChart.prototype._updateScrollLeft = function () {
		var nScrollWidth = parseInt(this._oTT._oHSb.getContentSize(), 0);
		var nClientWidth = jQuery("#" + this.getId() + "-svg-ctn").width();
		var nScrollLeft = Math.ceil((this._fLeftOffsetRate ? this._fLeftOffsetRate : 0) * (nScrollWidth - nClientWidth)); 
		if (Core.getConfiguration().getRTL() === true) {
			nScrollLeft = nScrollWidth - nScrollLeft - nClientWidth;
		}
		if (Math.abs(this._oTT._oHSb.getScrollPosition() - nScrollLeft) > 1) {
			this._oTT._oHSb.setScrollPosition(nScrollLeft);
		}
};

	GanttChart.prototype._scrollSvg = function () {
		var $svg = jQuery("#" + this.getId() + "-svg");
		var $header = jQuery("#" + this.getId() + "-header-svg");
		if (this._oStatusSet.nWidth !== $svg.width()) {
			$svg.width(this._oStatusSet.nWidth);
		}
		if (this._oStatusSet.nWidth !== $header.width()) {
			$header.width(this._oStatusSet.nWidth);
		}
		var nContentWidth = this._nUpperRange - this._nLowerRange;
		var nClientWidth = jQuery("#" + this.getId() + "-svg-ctn").width();
		var nScrollLeft = Math.ceil((this._fLeftOffsetRate ? this._fLeftOffsetRate : 0) * (nContentWidth - nClientWidth));
		this._hSbScrollLeft(nScrollLeft - this._oStatusSet.nOffset);
};

	GanttChart.prototype._drawSvg = function () {
		jQuery.sap.measure.start("GanttChart _drawSvg","GanttPerf:GanttChart _drawSvg function");
		
		// before draw
		this._updateScrollLeft();
		this._scrollSvg();
		this._sUiSizeMode = Utility.findSapUiSizeClass(this);
		
		// draw
		this._drawCalendarPattern();
		this._drawHeader();
		this._drawNowLine();
		this._drawVerticalLine();
		this._drawShapes();
		this._drawSelectedShapes();

		// after draw
		this.fireEvent("_shapesUpdated", {aSvg: jQuery("#" + this.getId() + "-svg")});
		this._updateCSSForDummyRow();
		delete this._mTimeouts._drawSvg;
		
		jQuery.sap.measure.end("GanttChart _drawSvg");
	};
	
	GanttChart.prototype._drawHeader = function () {
		var $headerDom = jQuery(this.getDomRef()).find(".sapGanttChartHeader");
		var nSvgHeight = $headerDom.height();

		var oHeaderSvg = d3.select(jQuery(this.getDomRef()).find(".sapGanttChartHeaderSvg").get(0));
		oHeaderSvg.attr("height", nSvgHeight);

		// Split the total SVG height as 5 parts for drawing 
		// label0 (MM YYYY), label1 (DD) and vertical line (|)
		var nfirstRowYOffset = nSvgHeight / 5 * 2;
		var nMiddleLineYOffset = nSvgHeight / 5 * 4;
		var nSecondRowYOffset = nSvgHeight / 5 * 4;

		var aLabelList = this.getAxisTime().getTickTimeIntervalLabel(
				this.getAxisTime().getCurrentTickTimeIntervalKey(), null, [0, this._oStatusSet.nWidth]);

		// append group
		oHeaderSvg.selectAll("g").remove();
		var oGroupSvg = oHeaderSvg.append("g");

		// append text for labels on first row
		oGroupSvg.selectAll("label0")
			.data(aLabelList[0])
			.enter()
			.append("text")
			.classed("sapGanttTimeHeaderSvgText0", true)
			.text(function (d) {
				return d.label;
			}).attr("x", function (d) {
				return d.value;
			}).attr("y", function (d) {
				return nfirstRowYOffset;
			});

		// append text for labels on second row
		oGroupSvg.selectAll("label1")
			.data(aLabelList[1])
			.enter()
			.append("text")
			.classed("sapGanttTimeHeaderSvgText1", true)
			.text(function (d) {
				return d.label;
			}).attr("x", function (d) {
				// 5px spacing for the text
				return d.value + (Core.getConfiguration().getRTL() ? -5 : 5);
			}).attr("y", function (d) {
				return nSecondRowYOffset;
			});

		// append path for scales on both rows
		var sPathData = "";
		for (var i = 0; i < aLabelList[1].length; i++) {
			var oLabel = aLabelList[1][i];
			if (oLabel) {
				sPathData +=
					" M" +
					" " + (oLabel.value - 1 / 2) +
					" " + nMiddleLineYOffset +
					" L" +
					" " + (oLabel.value - 1 / 2 ) +
					" " + nSvgHeight;
			}
		}

		oGroupSvg.append("path").classed("sapGanttTimeHeaderSvgPath", true).attr("d", sPathData);
	};
	
	GanttChart.prototype._drawCalendarPattern = function () {
		var $GanttChartSvg = d3.select("#" + this.getId() + "-svg");
		this._oCalendarPatternDrawer.drawSvg($GanttChartSvg, this.getId(), this.getCalendarDef(), this._oStatusSet, this.getBaseRowHeight());
	};
	
	GanttChart.prototype._drawNowLine = function () {
		this._oNowlineDrawer  = new NowLineDrawer(this._oAxisTime);

		var $GanttChartHeader = d3.select("#" + this.getId() + "-header-svg"),
			$GanttChartSvg = d3.select("#" + this.getId() + "-svg");
		
		if (this.getEnableNowLine()) {
			this._oNowlineDrawer.drawSvg($GanttChartSvg, $GanttChartHeader);
		} else {
			this._oNowlineDrawer.destroySvg($GanttChartSvg, $GanttChartHeader);
		}
	};

	GanttChart.prototype._drawVerticalLine = function() {
		this._oVerticalLineDrawer = new VerticalLineDrawer(this.getAxisTime());
		var $GanttChartSvg = d3.select("#" + this.getId() + "-svg");
		if (this.getEnableVerticalLine()) {
			this._oVerticalLineDrawer.drawSvg($GanttChartSvg);
		} else {
			this._oVerticalLineDrawer.destroySvg($GanttChartSvg);
		}
	};
	
	GanttChart.prototype._drawShapes = function () {
		var aSvg = d3.select("#" + this.getId() + "-svg");
		
		if (!this._oTT || !this._oTT.getRows() || this._oTT.getRows().length <= 0) {
			return;
		}
		
		// draw shape
		if (this._aShapeData && this._aShapeInstance && this._aShapeInstance.length > 0) {

			this._collectDataPerShapeId();
			var relationshipDataSet = [];
			
			for (var i = 0; i < this._aShapeInstance.length; i++) {
				switch (this._aShapeInstance[i].getCategory(null, this._oAxisTime, this._oAxisOrdinal)) {
					case sap.gantt.shape.ShapeCategory.InRowShape:
						this._oShapeInRowDrawer.drawSvg(aSvg, this._aShapeInstance[i],
							this._oAxisTime, this._oAxisOrdinal, this._oStatusSet);
						break;
					case sap.gantt.shape.ShapeCategory.Relationship:
						if (this._judgeDisplayableOfRLS(this._aShapeInstance[i])) {
							relationshipDataSet = this._oShapeCrossRowDrawer.generateRelationshipDataSet(aSvg, this._oShapeInstance, this._aNonVisibleShapeData,
									this.getShapeDataNames(), this._aRelationships, this._oAxisTime, this._oAxisOrdinal);
						}
						this._aShapeInstance[i].dataSet = relationshipDataSet;
						this._oShapeCrossRowDrawer.drawSvg(aSvg, this._aShapeInstance[i],
								this._oAxisTime, this._oAxisOrdinal);
						break;
					default:
						break;
				}
			}
		}
	};
	
	//draw all the selected shapes and relationships
	GanttChart.prototype._drawSelectedShapes = function () {
		if (!this._oTT || !this._oTT.getRows() || this._oTT.getRows().length <= 0) {
			return;
		}
		
		var aSvg = d3.select("#" + this.getId() + "-svg");
		
		//set selected Status for Shapes and relationships
		this._setSelectedStatusToData();
		// draw selected shape
		this._collectSelectedDataPerShapeId();
		for (var sShapeId in this._oShapeInstance) {
			var oSelectedClassIns = this._oShapeInstance[sShapeId].getAggregation("selectedShape");
			var category = oSelectedClassIns.getCategory(null, this._oAxisTime, this._oAxisOrdinal);
			switch (category) {
			case sap.gantt.shape.ShapeCategory.InRowShape:
				this._oShapeInRowDrawer.drawSvg(aSvg, oSelectedClassIns, this._oAxisTime, this._oAxisrdinal, this._oStatusSet);
				break;
			case sap.gantt.shape.ShapeCategory.Relationship:
				var relationshipDataSet = this._oShapeCrossRowDrawer.generateRelationshipDataSet(aSvg, this._oShapeInstance, this._aNonVisibleShapeData,
						this.getShapeDataNames(), this._aSelectedRelationships, this._oAxisTime, this._oAxisOrdinal);
				oSelectedClassIns.dataSet =  relationshipDataSet;
				this._oShapeCrossRowDrawer.drawSvg(aSvg, oSelectedClassIns,
						this._oAxisTime, this._oAxisOrdinal);
				break;
			default:
				break;
			}
		}
	};
	
	/*
	 * This method collect data according to current row's configuration/objectType/shape/chart scheme/mode.
	 * this._aShapeData contains the data for all different shapes so here we need to pick up by sShapeName
	 * once is function finished execution, each instance of shape classes will have 'dataset' attribute
	 * and it is an array of the data picked up from this._aShapeData for drawing that shape.
	 */
	GanttChart.prototype._collectDataPerShapeId = function () {
		var bJSONTreeBinding = (this._oTT.getBinding("rows").getMetadata().getName() === "sap.ui.model.json.JSONTreeBinding");
		var oRowData, oShapeData;
		//this._oShapeInstance is an object which has properties with format as below:
		//property key is the data name for shapes such as 'header'
		//property value is the instance of shape classes such as sap.gantt.shape.Rectangle
		//so the structure of this._oShapeInstance is like
		//{
		//	'header': <instance of sap.gantt.shape.ext.Chevron>
		//	'task': <sap.gantt.shape.Rectangle>
		//}
		for (var sShapeId in this._oShapeInstance) {
			var sShapeName = this._oShapeInstance[sShapeId].mShapeConfig.getShapeDataName();//e.g. Header
			this._oShapeInstance[sShapeId].dataSet = [];

			for (var i = 0; i < this._aShapeData.length; i++) {
				//this._aShapeData contains the data for all different shapes so here we need to pick up by sShapeName
				oRowData = this._aShapeData[i];
				if (oRowData.isBlank) {
					continue;
				}
				//if user doesn't configure the shape with 'shapeDataName', add all row data to the shape
				if (!sShapeName) {
					this._oShapeInstance[sShapeId].dataSet.push({
						"objectInfoRef": oRowData,
						"shapeData": oRowData.data
					});
					continue;
				}

				if (!this._judgeDisplayableByShapeId(oRowData, sShapeId)) {
					continue;
				}
				if (bJSONTreeBinding){
					oShapeData = oRowData.data[sShapeName];
				}else if (sShapeName == oRowData.shapeName) {
						oShapeData = [oRowData.data];
				}else {
					continue;
				}
				if (oShapeData){
					this._oShapeInstance[sShapeId].dataSet.push({
						"objectInfoRef": oRowData,
						"shapeData": oShapeData
					});
				}
			}
		}
	};

	GanttChart.prototype._collectSelectedDataPerShapeId = function () {
		//group the selected shape data into the dataSet of related selectedClass instance
		for (var sShapeId in this._oShapeInstance) {
			var sShapeDataName = this._oShapeInstance[sShapeId].mShapeConfig.getShapeDataName();//e.g. Header
			var oSelectedClassIns = this._oShapeInstance[sShapeId].getAggregation("selectedShape");
			var sCategory = oSelectedClassIns.getCategory(null, this._oAxisTime, this._oAxisOrdinal);
			//collect shape data for every selectedClass instance according to current selection
			oSelectedClassIns.dataSet = [];
			if (sCategory == sap.gantt.shape.ShapeCategory.Relationship) {
				var aShapeData = [];
				for (var j in this._aSelectedRelationships) {
					var oRelationshipData = this._aSelectedRelationships[j];
					//only when the relationship is display, it needs to be drew
					if (this._getShapeDataById(oRelationshipData.id, true) !== undefined) {
						aShapeData.push(oRelationshipData);
					}
				}
				oSelectedClassIns.dataSet.push({
					"shapeData": aShapeData
				});
			}else if (this._oSelectedShapes[sShapeDataName] !== undefined) {
				for (var i in this._oSelectedShapes[sShapeDataName]) {
					var oShape = this._oSelectedShapes[sShapeDataName][i];
					//only when the master shape is displayed, draw the selectedShape
					var oRowData = this._getRowByShapeUid(oShape.shapeUid);
					if (oRowData !== undefined && oRowData !== null && this._judgeDisplayableByShapeId(oRowData, sShapeId)){
						oShape.objectInfoRef = oRowData;
						oSelectedClassIns.dataSet.push({
							"objectInfoRef": oShape.objectInfoRef,
							"shapeData": [oShape.shapeData]
						});
					}
				}
			}
		}
	};
	
	GanttChart.prototype._judgeDisplayableByShapeId = function (oRowData, sShapeId) {
		var  sChartScheme, oChartScheme, aShapeIdsInChartScheme, sMode;
		if (oRowData.data.__group) {
			sChartScheme = oRowData.data.__group;
		} else {
			sChartScheme = this._oObjectTypesConfigMap[oRowData.data.type] ?
					this._oObjectTypesConfigMap[oRowData.data.type].getMainChartSchemeKey() :
					sap.gantt.config.DEFAULT_CHART_SCHEME_KEY;
		}
		oChartScheme = this._oChartSchemesConfigMap[sChartScheme];
		if (oChartScheme == undefined) {
			return false;
		}
		aShapeIdsInChartScheme = oChartScheme.getShapeKeys();
		/*
		 * determin mode. if mode is coded against chart scheme, it over-write current mode in chart
		 */
		sMode = oChartScheme.getModeKey() !== sap.gantt.config.DEFAULT_MODE_KEY ?
				oChartScheme.getModeKey() :
				this.getMode();
		//sMode = oChartScheme.getModeKey() ? oChartScheme.getModeKey() : this.getMode();
		/*
		 * check if shape should appear in current chart scheme and mode
		 */
		if (sChartScheme !== sap.gantt.config.DEFAULT_CHART_SCHEME_KEY &&
				aShapeIdsInChartScheme.indexOf(sShapeId) < 0 ||
				sMode !== sap.gantt.config.DEFAULT_MODE_KEY &&
				this._oShapesConfigMap[sShapeId].getModeKeys() &&
				this._oShapesConfigMap[sShapeId].getModeKeys().length > 0 &&
				this._oShapesConfigMap[sShapeId].getModeKeys().indexOf(sMode) < 0 ||
				!oRowData.data) {
			return false;
		}
		return true;
	};
	
	GanttChart.prototype._judgeDisplayableOfRLS = function (oShape) {

		var aShapeMode = this._oShapesConfigMap[oShape.mShapeConfig.getKey()] ? 
				this._oShapesConfigMap[oShape.mShapeConfig.getKey()].getModeKeys() : [];
		if (jQuery.inArray(this.getMode(), aShapeMode) < 0 && this.getMode() !== sap.gantt.config.DEFAULT_MODE_KEY) {
			return false;
		}
		return true;
	};
	
	//get shapeId by shape uid and related row data uid
	GanttChart.prototype._getShapeDataNameByUid = function (sShapeUid) {
		//var rowData;
		var sShapeDataName;
		if (sShapeUid !== undefined) {
			var str = "|DATA:";
			if (sShapeUid.split(str)[1]) {
				sShapeDataName = sShapeUid.split(str)[1].split("[")[0];
			}else {
				sShapeDataName = sap.gantt.shape.ShapeCategory.Relationship;
			}
		}
		return sShapeDataName;
	};
	
	//get Uid by id
	GanttChart.prototype._getUidById = function (sId, bRelationship) {
		var sUid = [];
		if (bRelationship) {
			for (var i in this._aRelationships) {
				var oRelationship = this._aRelationships[i];
				if (oRelationship.id == sId) {
					sUid.push(oRelationship.uid);
					break;
				}
			}	
		}else {
			jQuery.each(this._aShapeData, function (k, v) {
				var rowInfo = v;
				for (var sShape in rowInfo.data) {
					if (rowInfo.data[sShape] instanceof Array) {
						for (var i in rowInfo.data[sShape]) {
							//a shape can appear in different rows, so one id may have several uids
							if (rowInfo.data[sShape][i].id == sId) {
								sUid.push(rowInfo.data[sShape][i].uid);
							}
						}
					}
				}
			});
		}
		
		return sUid;
	};
	
	//get shapeData by uid
	GanttChart.prototype._getShapeDataByUid = function (sUid, bRelationship) {
		if (bRelationship) {// if it is a relationship
			for (var i in this._aRelationships) {
				var oRelationship = this._aRelationships[i];
				if (oRelationship.uid === sUid) {
					return oRelationship;
				}
			}
		}else {
			var rowInfo = this._getRowByShapeUid(sUid);
			var sShapeDataName = this._getShapeDataNameByUid(sUid);
			if (rowInfo !== undefined && rowInfo.data[sShapeDataName] !== undefined) {
				for ( var j = 0; j < rowInfo.data[sShapeDataName].length; j++) {
					var oShapeData = rowInfo.data[sShapeDataName][j];
					if (oShapeData.uid == sUid) {
						return oShapeData;
					}
				}
			}
		}
		return undefined;
	};
	
	/*
	 * get shapeData by id
	 * @para 
	 * @para
	 * @return an array as there may be multiple uids for a same id, as the shape can appear more than once
	 */
	GanttChart.prototype._getShapeDataById = function (sId, bRelationship) {
		var aShapeData = [];
		var aUids = this._getUidById(sId, bRelationship);
		for (var i in aUids) {
			var oShapeData = this._getShapeDataByUid(aUids[i], bRelationship);
			if (oShapeData !== undefined) {
				aShapeData.push(oShapeData);
			}
		}
		return aShapeData;
	};
	
	//get row obj by shape uid
	//one shape(has an uid as unique key) may appear more then once in different rows, the uid includes row information
	GanttChart.prototype._getRowByShapeUid = function (sShapeUid) {
		var rowData;
		var sShapeDataName = this._getShapeDataNameByUid(sShapeUid);
		var bJSONTreeBinding = (this._oTT.getBinding("rows").getMetadata().getName() === "sap.ui.model.json.JSONTreeBinding");
		jQuery.each(this._aShapeData, function (k, v) {
			var rowInfo = v;
			if (bJSONTreeBinding && rowInfo.data[sShapeDataName]) {
				for ( var i = 0; i < rowInfo.data[sShapeDataName].length; i++) {
					if (rowInfo.data[sShapeDataName][i].uid == sShapeUid) {
						rowData = rowInfo;
						return false;
					}
				}
			}else if (rowInfo.data.uid === sShapeUid) {
				rowData = rowInfo;
				return false;
			}
		});
		return rowData;
	};
	
	//get row by row id
	GanttChart.prototype._getRowById = function (sRowId) {
		var rowData;
		jQuery.each(this._aShapeData, function (k, v) {
			var rowInfo = v;
			if (rowInfo.data.id == sRowId) {
				rowData = rowInfo;
				return false;
			}
		});
		return rowData;
	};
	
	GanttChart.prototype._getSvgCoodinateByDiv = function(oNode, x, y){
		var oClickPoint = oNode.createSVGPoint();
			oClickPoint.x = x;
			oClickPoint.y = y;
			oClickPoint = oClickPoint.matrixTransform(oNode.getScreenCTM().inverse());
			oClickPoint.svgHeight = oNode.height.baseVal.value;
			oClickPoint.svgId = this.getId() + "-svg";
		
		return oClickPoint;
	};
	
	GanttChart.prototype._getTopShapeInstance = function (oShapeData, sClassId) {
		if (sClassId !== undefined) {
			var oShapeId = this._getShapeIdById(sClassId);
			if (oShapeId !== undefined && oShapeId !== null) {
				if (oShapeId.topShapeId !== undefined) {
					return this._oShapeInstance[oShapeId.topShapeId];
				}else {
					return this._oShapeInstance[oShapeId.shapeId];
				}
			}
		}else {
			var sShapeDataName = this._getShapeDataNameByUid(oShapeData.uid);
			for (var sShapeId in this._oShapeInstance) {
				var sShapeName = this._oShapeInstance[sShapeId].mShapeConfig.getShapeDataName();//e.g. Header
				if (sShapeDataName === sShapeName){
					var sTopShapeId = this._customerClassIds[sShapeId].topShapeId;
					if (sTopShapeId !== undefined) {
						return this._oShapeInstance[sTopShapeId];
					}else {
						return this._oShapeInstance[sShapeId];
					}
				}
			}
		}
		return undefined;
	};
	
	//judge if the shape is selectable
	GanttChart.prototype._judgeEnableSelection = function (oShapeData, sClassId) {	
		if (oShapeData === undefined) {
			return false;
		}
		var oTopShapeInstance = this._getTopShapeInstance(oShapeData, sClassId);
		if (oTopShapeInstance !== undefined) {
			return oTopShapeInstance.getEnableSelection(oShapeData);
		}
		return false;
	};
	
	GanttChart.prototype._judgeEnableDnDByUid = function (sShapeUid) {
		if (sShapeUid === undefined || sShapeUid == null) {
			return false;
		}
		var oShapeData;
		if (this._isRelationship(sShapeUid)) {
			oShapeData = this._getShapeDataByUid(sShapeUid, true);
		}else {
			oShapeData = this._getShapeDataByUid(sShapeUid, false);
		}
		return this._judgeEnableDnD(oShapeData);
	};
	
	GanttChart.prototype._judgeEnableDnD = function (oShapeData, sClassId) {
		if (oShapeData === undefined) {
			return false;
		}
		var oTopShapeInstance = this._getTopShapeInstance(oShapeData, sClassId);
		if (oTopShapeInstance !== undefined) {
			return oTopShapeInstance.getEnableDnD(oShapeData);
		}
		return false;
	};
	
	/*select shape by adding current selecting shape into the shape selection
	 * The structure of aSelectedShapes: {"ShapeDataName1": e.g. all selected activities, "ShapeDataName2": e.g. all selected tasks...--- arrays with a struture of {"shapeUid": "shapeData", "objectInfoRef"}
	 */
	GanttChart.prototype._selectShape = function (oShapeData) {
		var oRowInfo = this._getRowByShapeUid(oShapeData.uid);
		if (oRowInfo == undefined) {
			return false;
		}
		if (this._aSelectedShapeUids === undefined) {
			this._aSelectedShapeUids = [];
		}
		var sShapeDataName = this._getShapeDataNameByUid(oShapeData.uid);
		if (this._oSelectedShapes[sShapeDataName] !== undefined && this._oSelectedShapes[sShapeDataName] !== null ) {
			var aShapes = this._oSelectedShapes[sShapeDataName];
			if (jQuery.inArray(oShapeData.uid, this._aSelectedShapeUids) > -1) { //if the shape is already in selection
				return false;
			}else {
				this._aSelectedShapeUids.push(oShapeData.uid);
				aShapes.push({"shapeUid": oShapeData.uid, "shapeData": oShapeData, "objectInfoRef": oRowInfo});
				return true;
			}
		}else {
			this._aSelectedShapeUids.push(oShapeData.uid);
			this._oSelectedShapes[sShapeDataName] = [];
			this._oSelectedShapes[sShapeDataName].push({"shapeUid": oShapeData.uid, "shapeData": oShapeData, "objectInfoRef": oRowInfo});
			return true;
		}
	};

	// deselect current shape by remove it from the collection of selected shapes
	GanttChart.prototype._deselectShape = function (oShapeData) {
		var sShapeDataName = this._getShapeDataNameByUid(oShapeData.uid);
		if (jQuery.inArray(oShapeData.uid, this._aSelectedShapeUids) > -1) {
			var iIndex = this._aSelectedShapeUids.indexOf(oShapeData.uid);
			this._aSelectedShapeUids.splice(iIndex,1);
			var aShapes = this._oSelectedShapes[sShapeDataName];
			for (var i in aShapes) {
				if (aShapes[i].shapeUid === oShapeData.uid) {
					aShapes.splice(i,1);
					break;
				}
			}
			return true;
		}
		
		return false;
	};
	
	GanttChart.prototype._updateCSSForDummyRow = function() {
		var aRows = this._oTT.getRows();
		var aRowHeaders = this._oTT.$().find(".sapUiTableRowHdrScr").children();
		for (var i = 0; i < aRows.length; i++){
			var oRow = aRows[i];
			var index = oRow.getIndex();
			
			if (index !== -1 && TreeTableHelper.isMultipleSpanMainRow(this._oTT, i)){
				var context = TreeTableHelper.getContextObject(this._oTT, index);
				if (context.afterNodeNum > 0){
					aRows[i].$().addClass("sapGanttTrNoBorder");
					$(aRowHeaders[i]).addClass("sapGanttTHeaderNoBorder");
				} else {
					aRows[i].$().removeClass("sapGanttTrNoBorder");
					$(aRowHeaders[i]).removeClass("sapGanttTHeaderNoBorder");
				}
			} else {
				aRows[i].$().removeClass("sapGanttTrNoBorder");
				$(aRowHeaders[i]).removeClass("sapGanttTHeaderNoBorder");
			}
		}
	};
	
	GanttChart.prototype.getAxisOrdinal = function () {
		return this._oAxisOrdinal;
	};
	
	GanttChart.prototype.getAxisTime = function () {
		return this._oAxisTime;
	};
	
	GanttChart.prototype.ondblclick = function (oEvent) {
		return null;
	};
	
	GanttChart.prototype.onclick = function (oEvent) {
		return null;
	};
	
	GanttChart.prototype.getSapUiSizeClass = function () {
		return this._sUiSizeMode;
	};
	
	GanttChart.prototype.exit = function () {
		// TODO: destroy axis time and ordinal after refactor to listener pattern.
		// other children are all strong aggregation relations, no need to destroy.
		this._detachEvents();
	};

	return GanttChart;
}, true);

}; // end of sap/gantt/GanttChart.js
if ( !jQuery.sap.isDeclared('sap.gantt.GanttChartWithTable') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.GanttChartWithTable'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.table.Column'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.TreeTable'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ScrollBar'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.Splitter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.SplitterLayoutData'); // unlisted dependency retained
jQuery.sap.require('sap.ui.thirdparty.d3'); // unlisted dependency retained
sap.ui.define("sap/gantt/GanttChartWithTable",[
	"sap/gantt/GanttChartBase", "sap/ui/table/Column", "sap/ui/table/TreeTable", "sap/ui/core/ScrollBar",
	"sap/ui/layout/Splitter", "sap/ui/layout/SplitterLayoutData",
	"sap/gantt/GanttChart", "sap/gantt/control/Cell", "sap/gantt/control/Toolbar",
	"sap/gantt/control/AssociateContainer","sap/gantt/drawer/SelectionPanel","./misc/TreeTableHelper","sap/gantt/misc/Utility","sap/gantt/misc/AxisOrdinal","sap/ui/thirdparty/d3"
], function (GanttChartBase, Column, TreeTable, ScrollBar, Splitter, SplitterLayoutData,
		GanttChart, Cell, Toolbar, AssociateContainer, SelectionPanelDrawer, TreeTableHelper, Utility, AxisOrdinal) {
	"use strict";
	
	/**
	 * Creates and initializes a new Gantt Chart with a TreeTable control on the left and a svg chart area on the right.
	 * 
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * 
	 * @class 
	 * Embed a <code>sap.ui.table.TreeTable</code> and a <code>sap.gantt.GanttChart</code> side-by-side.
	 * 
	 * <p>This class defines:
	 * The TreeTable part provide a column view of data with sorting/filtering functions available. The svg chart part provide graphic Gantt chart
	 * view of data. Both width can be adjusted by a splitter bar, and row scrolling are always synchronized.3
	 * </p>
	 * 
	 * @extends sap.gantt.GanttChartBase
	 * 
	 * @author SAP SE
	 * @version 1.36.8
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.GanttChartWithTable
	 */
	var GanttChartWithTable = GanttChartBase.extend("sap.gantt.GanttChartWithTable", /** @lends sap.gantt.GanttChartWithTable.prototype */ {
		metadata: {
			properties: {
				
				/**
				 * A customized cell callback function.
				 * 
				 * <p> This property is used in combination with configuration property <code>hierarchies</code>.
				 * If aggregation <code>columns</code> is provided, property <code>hierarchies</code> and <code>cellCallback</code> is ignored.
				 * Otherwise property <code>hierarchies</code> must provide column configurations that cellCallback can consume. And if cellCallback
				 * is not provided, a default cellCallback adds <code>sap.m.Label</code> to fill cells.
				 * </p>
				 */
				cellCallback: {type: "object"},
				
				/**
				 * Property propagated from <code>sap.ui.table.Table</code>.
				 * @see sap.ui.table.Table#fixedColumnCount
				 */
				fixedColumnCount: {type: "int"}
			},
			aggregations: {
				
				/**
				 * Controls to be place in Gantt chart toolbar.
				 * 
				 * <p>This aggregation is only used when custom toolbar item group is configured to be shown in Gantt chart toolbar.
				 * Different from the build-in buttons which are configured to be shown or hidden, these are free controls created 
				 * by application, only they are placed in container toolbar by <code>sap.gantt.GanttChartWithTable</code>.</p>
				 * 
				 * <p>A common recommendation is, if the source select group is enabled and application wants to pre-configure
				 * container layouts, the chance to change custom toolbar items is in event handler to event <code>ganttChartSwitchRequested</code>.</p>
				 */
				customToolbarItems: {type: "sap.ui.core.Control", multiple: true, visibility: "public",
					singularName: "customToolbarItem", bindable: "bindable"},
					
				/**
				 * Aggregation delegated to <code>sap.ui.table.Table</code>.
				 * 
				 * <p>If this aggregation is provided, call back property <code>cellCallBack</code> and column configuration in property <code>hierarchies</code> will be ignored.</p>
				 * @see sap.ui.table.Table#columns
				 */
				columns: {type: "sap.ui.table.Column", multiple: true, visibility: "public", singularName: "column"},
				
				_selectionPanel: {type: "sap.ui.table.TreeTable", multiple: false, visibility: "hidden"},
				_chart: {type: "sap.gantt.GanttChart", multiple: false, visibility: "hidden"}
			}
		}
	});

	GanttChartWithTable.prototype.init = function () {
		// create chart
		jQuery.sap.measure.start("GanttChartWithTable Init","GanttPerf:GanttChartWithTable Init function");
		this._oGanttChart = new GanttChart();
		this.setAggregation("_chart", this._oGanttChart);
		this._oGanttChartCnt = new AssociateContainer({
			enableRootDiv: true,
			content: this._oGanttChart
		});
		this._oTC = this._oGanttChart._oTT;

		// create selection panel
		this._oTT = new TreeTable({
			visibleRowCountMode: "Auto",
			minAutoRowCount: 1,
//			rowHeight: 28,
			fixedColumnCount: this.getFixedColumnCount(),
			selectionBehavior: sap.ui.table.SelectionBehavior.Row,
			selectionMode: sap.ui.table.SelectionMode.Multi
		});
		this._oTT.attachFilter(function(oEvent){
			if (this.canExpandGanttChart()){
				TreeTableHelper.filter(oEvent);
			}
		}.bind(this));
		this._oTT.attachSort(function(oEvent){
			if (this.canExpandGanttChart()){
				TreeTableHelper.sort(oEvent);
			}
		}.bind(this));
		this._oTT.attachToggleOpenState(function(oEvent) {
			var oBinding = this.getBinding();
			if (oBinding && oBinding.getModel() instanceof sap.ui.model.json.JSONModel) {
				var oSource = oEvent.getSource(),
					bExpanded = oEvent.getParameter("expanded"),
					iRowIndex = oEvent.getParameter("rowIndex"),
					oContext = oBinding.getContextByIndex(iRowIndex);
				
				// may modify the condition if we need build children to the node
				if (oBinding.hasChildren && oBinding.hasChildren(oContext)) {
					TreeTableHelper.toggleOpenStateWithRowIndex(oSource, iRowIndex, bExpanded);	
				}
			}
		});
		this.setAggregation("_selectionPanel", this._oTT);
		this._oToolbar = new Toolbar({
			type: sap.gantt.control.ToolbarType.Local,
			sourceId: sap.gantt.config.DEFAULT_HIERARCHY_KEY
		});
		this._oToolbar.data("holder", this);
		this._oToolbar.attachSourceChange(this._onToolbarSourceChange, this);
		this._oToolbar.attachExpandTreeChange(this._onToolbarExpandTreeChange, this);
		this._oToolbar.attachModeChange(this._onToolbarModeChange, this);
		this._oTT.addExtension(this._oToolbar);
		this._oSelectionPanelCnt = new AssociateContainer({
			enableRootDiv: true,
			content: this._oTT,
			layoutData: new SplitterLayoutData({
				size: "30%"
			})
		});

		// create horizontal layout
		this._oSplitter = new Splitter({
			width: "100%",
			height: "100%",
			orientation: sap.ui.core.Orientation.Horizontal,
			contentAreas: [this._oSelectionPanelCnt, this._oGanttChartCnt]
		}).addStyleClass("sapGanttViewSplitterH");

		// attach this to layout resize
		this._oSplitter.attachResize(this._onSplitterResize, this);
		// attach to oTC hscroll
		this._oTC._oHSb.attachScroll(this._onChartHSbScroll, this);
		// sync oTC oTT vertical scroll
		this._oTC._oVSb.attachScroll(this._onChartVSbScroll, this);
		this._oTT._oVSb.attachScroll(this._onSelectionPanelVSbScroll, this);
		//this._oTC.attachRowSelectionChange(this._onRowSelectionChange, this);
		this._oGanttChart.attachRowSelectionChange(this._onRowSelectionChange, this);
		this._oGanttChart.attachShapeSelectionChange(this._onShapeSelectionChange, this);
		this._oGanttChart.attachChartMouseOver(this._onChartMouseOver, this);
		this._oGanttChart.attachRelationshipSelectionChange(this._onRelationshipSelectionChange, this);
		this._oGanttChart.attachChartDoubleClick(this._onDoubleClick, this);
		this._oGanttChart.attachChartRightClick(this._onRightClick, this);
		this._oGanttChart.attachEvent("_shapesUpdated", this._onChartShapesUpdated, this);
		this._oGanttChart.attachChartDragEnter(this._onChartDragEnter, this);
		this._oGanttChart.attachChartDragLeave(this._onChartDragLeave, this);
		this._oGanttChart.attachShapeDragEnd(this._onShapeDragEnd, this);
		
		this._oModesConfigMap = {};
		this._oModesConfigMap[sap.gantt.config.DEFAULT_MODE_KEY] = sap.gantt.config.DEFAULT_MODE;
		
		this._oToolbarSchemeConfigMap = {};
		this._oToolbarSchemeConfigMap[sap.gantt.config.DEFAULT_GANTTCHART_TOOLBAR_SCHEME_KEY] = sap.gantt.config.DEFAULT_GANTTCHART_TOOLBAR_SCHEME;
		this._oToolbarSchemeConfigMap[sap.gantt.config.EMPTY_TOOLBAR_SCHEME_KEY] = sap.gantt.config.EMPTY_TOOLBAR_SCHEME;
		
		this._oHierarchyConfigMap = {};
		this._oHierarchyConfigMap[sap.gantt.config.DEFAULT_HIERARCHY_KEY] = sap.gantt.config.DEFAULT_HIERARCHY;
		this._oDefaultExpansionStatus = {};

		this._oTT.addEventDelegate({
			onAfterRendering: this._appendMaskSvg
		}, this);
		
		this._oTT.addEventDelegate({
			onAfterRendering: this._updateCSSForDummyRow
		}, this);



		this._oSelectionPanelDrawer = new SelectionPanelDrawer();
		
		this.attachEvent("collapseDummyRow",this._onRowCollapse);

		// defualt maps
		this._oGanttChartSchemesConfigMap = {};
		this._oGanttChartSchemesConfigMap[sap.gantt.config.DEFAULT_CHART_SCHEME_KEY] = sap.gantt.config.DEFAULT_CHART_SCHEME;
		this._oObjectTypesConfigMap = {};
		this._oObjectTypesConfigMap[sap.gantt.config.DEFAULT_OBJECT_TYPE_KEY] = sap.gantt.config.DEFAULT_OBJECT_TYPE;
		this._oShapesConfigMap = {};
		jQuery.sap.measure.end("GanttChartWithTable Init");
	};
	
	GanttChartWithTable.prototype.setFixedColumnCount = function (iFixedColumnCount) {
		this.setProperty("fixedColumnCount", iFixedColumnCount);
		this._oTT.setFixedColumnCount(iFixedColumnCount);
		return this;
	};
	
	GanttChartWithTable.prototype.setTimeAxis = function (oTimeAxis) {
		this.setProperty("timeAxis", oTimeAxis);
		this._oGanttChart.setTimeAxis(oTimeAxis);
		return this;
	};

	GanttChartWithTable.prototype.setMode = function (sMode) {
		this.setProperty("mode", sMode);
		this._oGanttChart.setMode(sMode);
		this._oToolbar.setMode(sMode);
		return this;
	};
	
	GanttChartWithTable.prototype.setModes = function (aModes) {
		this.setProperty("modes", aModes);
		this._oToolbar.setModes(aModes);
		this._oGanttChart.setModes(aModes);
		this._oModesConfigMap = {};
		if (aModes) {
			for (var i = 0; i < aModes.length; i++) {
				this._oModesConfigMap[aModes[i].getKey()] = aModes[i];
			}
		}
		return this;
	};
	
	GanttChartWithTable.prototype.setSelectionMode = function (sSelectionMode) {
		this.setProperty("selectionMode", sSelectionMode);
		if (this._oTT) {
			if (sSelectionMode == sap.gantt.SelectionMode.None) {
				this._oTT.setSelectionMode(sap.ui.table.SelectionMode.None);
				this._oTT.setSelectionBehavior(sap.ui.table.SelectionBehavior.RowOnly);
			}else if (sSelectionMode == sap.gantt.SelectionMode.MultiWithKeyboard) {
				this._oTT.setSelectionMode(sap.ui.table.SelectionMode.Multi);
				this._oTT.setSelectionBehavior(sap.ui.table.SelectionBehavior.Row);
			}else {
				if (sSelectionMode == sap.gantt.SelectionMode.Single) {
					this._oTT.setSelectionMode(sap.ui.table.SelectionMode.Single);
				}else {
					this._oTT.setSelectionMode(sap.ui.table.SelectionMode.MultiToggle);
				}
				this._oTT.setSelectionBehavior(sap.ui.table.SelectionBehavior.RowSelector);
			}
		}
		
		if (this._oGanttChart) {
			this._oGanttChart.setSelectionMode(sSelectionMode);
		}
		return this;
	};
	
	GanttChartWithTable.prototype.setToolbarSchemes = function (aToolbarSchemes) {
		this.setProperty("toolbarSchemes", aToolbarSchemes);
		this._oToolbar.setToolbarSchemes(aToolbarSchemes);
		this._oToolbarSchemeConfigMap = {};
		if (aToolbarSchemes) {
			for (var i = 0; i < aToolbarSchemes.length; i++) {
				this._oToolbarSchemeConfigMap[aToolbarSchemes[i].getKey()] = aToolbarSchemes[i];
			}
		}
		return this;
	};

	GanttChartWithTable.prototype.setHierarchyKey = function (sHierarchyKey) {
		this.setProperty("hierarchyKey", sHierarchyKey);
		this._oToolbar.setSourceId(sHierarchyKey);
		this._hierarchyChange();
		return this;
	};
	
	GanttChartWithTable.prototype.setHierarchies = function (aHierarchies) {
		this.setProperty("hierarchies", aHierarchies);
		this._oToolbar.setHierarchies(aHierarchies);
		this._oGanttChart.setHierarchies(aHierarchies);
		this._oHierarchyConfigMap = {};
		if (aHierarchies) {
			for (var i = 0; i < aHierarchies.length; i++) {
				this._oHierarchyConfigMap[aHierarchies[i].getKey()] = aHierarchies[i];
			}
		}
		this._hierarchyChange();
		return this;
	};
	
	GanttChartWithTable.prototype.setCalendarDef = function (oCalendarDef) {
		this.setAggregation("calendarDef", oCalendarDef);
		/*
		 * Copy oCalendarDef to this._oGanttChart instead of set it directly to this._oGanttChart.
		 * Because if we do so, in binding case, copying of private aggregation '_chart' won't copy
		 * template calendarDef. Therefore have to go this way.
		 * And in this way, have to set templateShareable = true if oCalendarDef is a template. 
		 */
		var oPSBindingInfo = oCalendarDef.getBindingInfo("defs");
		if (oPSBindingInfo) {
			oPSBindingInfo.templateShareable = true;
		}
		this._oGanttChart.setCalendarDef(oCalendarDef.clone());
		return this;
	};
	
	GanttChartWithTable.prototype._hierarchyChange = function () {
		var sHierarchyKey = this.getHierarchyKey();
		if (sHierarchyKey && this._oHierarchyConfigMap[sHierarchyKey]) {
			// if current hierarchy has a column configuration, generate columns from configuration.
			if (this._oHierarchyConfigMap[sHierarchyKey].getColumns() &&
					this._oHierarchyConfigMap[sHierarchyKey].getColumns().length > 0) {
				this._buildColumnFromCellCallback();
			} 
			// adjust current mode
			var sMode =  this.getMode();
			if (sMode === sap.gantt.config.DEFAULT_MODE_KEY && this._oHierarchyConfigMap[this.getHierarchyKey()]) {
				sMode = this._oHierarchyConfigMap[this.getHierarchyKey()].getActiveModeKey();
			}
			this.setMode(sMode);
			this.setSelectionMode(this.getSelectionMode());
		}
	};

	GanttChartWithTable.prototype._buildColumnFromCellCallback = function () {
		this._oTT.removeAllColumns();
		
		var oHierarchyConfig, aColumnConfig;
		oHierarchyConfig = this._oHierarchyConfigMap[this.getHierarchyKey()];
		if (oHierarchyConfig){
			aColumnConfig = oHierarchyConfig.getColumns();
		}
		if (aColumnConfig) {
			for (var i = 0; i < aColumnConfig.length; i++) {
				var oCol = new Column({
					label: aColumnConfig[i].getTitle(),
					sortProperty: aColumnConfig[i].getSortAttribute(),
					filterProperty: aColumnConfig[i].getFilterAttribute(),
					width: aColumnConfig[i].getWidth(),
					template: new Cell({
						cellCallback: this.getCellCallback(),
						columnConfig: aColumnConfig[i]
					})
				});
				this._oTT.addColumn(oCol);
			}
		} 
		
		// hack from treeTable, trigger update cell
		this._oTT._bCallUpdateTableCell = true;
	};
	
	GanttChartWithTable.prototype.setObjectTypes = function (aObjectTypes) {
		this.setProperty("objectTypes", aObjectTypes);
		this._oGanttChart.setObjectTypes(aObjectTypes);
		// build a map for easy look up
		this._oObjectTypesConfigMap = {};
		if (aObjectTypes) {
			for (var i = 0; i < aObjectTypes.length; i++){
				this._oObjectTypesConfigMap[aObjectTypes[i].getKey()] = aObjectTypes[i];
			}
		}
		return this;
	};
	
	GanttChartWithTable.prototype.setChartSchemes = function (aChartSchemes) {
		this.setProperty("chartSchemes", aChartSchemes);
		this._oGanttChart.setChartSchemes(aChartSchemes);
		// build a map for easy look up
		this._oGanttChartSchemesConfigMap = {};
		if (aChartSchemes) {
			for (var i = 0; i < aChartSchemes.length; i++) {
				this._oGanttChartSchemesConfigMap[aChartSchemes[i].getKey()] = aChartSchemes[i];
			}
		}
		return this;
	};
	
	GanttChartWithTable.prototype.setShapeDataNames = function (aShapeDataNames) {
		this.setProperty("shapeDataNames", aShapeDataNames);
		this._oGanttChart.setShapeDataNames(aShapeDataNames);
		return this;
	};
	
	GanttChartWithTable.prototype.setLocale = function (oLocale) {
		this.setProperty("locale", oLocale);
		this._oGanttChart.setLocale(oLocale);
		return this;
	};
	
	GanttChartWithTable.prototype.setShapes = function (aShapes) {
		this.setProperty("shapes", aShapes);
		this._oGanttChart.setShapes(aShapes);
		// build a map for easy look up
		this._oShapesConfigMap = {};
		if (aShapes) {
			for (var i = 0; i < aShapes.length; i++) {
				this._oShapesConfigMap[aShapes[i].getKey()] = aShapes[i];
			}
		}
		return this;
	};

	GanttChartWithTable.prototype.setSvgDefs = function (oSvgDefs) {
		this.setProperty("svgDefs", oSvgDefs);
		this._oGanttChart.setSvgDefs(oSvgDefs);
		return this;
	};

	GanttChartWithTable.prototype.setEnableCursorLine = function (bEnableCursorLine) {
		this.setProperty("enableCursorLine", bEnableCursorLine);
		this._oGanttChart.setEnableCursorLine(bEnableCursorLine);
		this._oToolbar.setEnableCursorLine(bEnableCursorLine);
		return this;
	};

	GanttChartWithTable.prototype.setEnableNowLine = function (bEnableNowLine) {
		this.setProperty("enableNowLine", bEnableNowLine);
		this._oGanttChart.setEnableNowLine(bEnableNowLine);
		this._oToolbar.setEnableNowLine(bEnableNowLine);
		return this;
	};

	GanttChartWithTable.prototype.setEnableVerticalLine = function (bEnableVerticalLine) {
		this.setProperty("enableVerticalLine", bEnableVerticalLine);
		this._oGanttChart.setEnableVerticalLine(bEnableVerticalLine);
		this._oToolbar.setEnableVerticalLine(bEnableVerticalLine);
		return this;
	};

	GanttChartWithTable.prototype.setTimeZoomRate = function (fTimeZoomRate) {
		this.setProperty("timeZoomRate", fTimeZoomRate);
		this._oGanttChart.setTimeZoomRate(fTimeZoomRate);
		return this;
	};
	/*
	 * @see JSDoc generated by SAPUI5 control API generator
	 */
	GanttChartWithTable.prototype.addRelationship = function (oRelationship) {
		this._oGanttChart.addRelationship(oRelationship);
	};
	/*
	 * @see JSDoc generated by SAPUI5 control API generator
	 */
	GanttChartWithTable.prototype.insertRelationship = function (iIndex, oRelationship) {
		this._oGanttChart.insertRelationship(iIndex, oRelationship);
	};
	/*
	 * @see JSDoc generated by SAPUI5 control API generator
	 */
	GanttChartWithTable.prototype.removeRelationship = function (oRelationship) {
		this._oGanttChart.removeRelationship(oRelationship);
	};
	/*
	 * @see JSDoc generated by SAPUI5 control API generator
	 */
	GanttChartWithTable.prototype.getRelationships = function () {
		this._oGanttChart.getRelationships();
	};
	/*
	 * @see JSDoc generated by SAPUI5 control API generator
	 */
	GanttChartWithTable.prototype.destroyRelationships = function () {
		this._oGanttChart.destroyRelationships();
	};
	/*
	 * @see JSDoc generated by SAPUI5 control API generator
	 */
	GanttChartWithTable.prototype.indexOfRelationship = function (oRelationship) {
		this._oGanttChart.indexOfRelationship(oRelationship);
	};
	/*
	 * @see JSDoc generated by SAPUI5 control API generator
	 */
	GanttChartWithTable.prototype.removeAllRelationships = function () {
		this._oGanttChart.removeAllRelationships();
	};
	
	// This method is needed because once relationships data is retrieved from the backend,
	// UI5 core will try to call this method and if it not exist the updateAggregation method is called,
	// then it will execute binding.factory method which is a dummy method and causes exceptions.
	GanttChartWithTable.prototype.updateRelationships = function (sReason) {
		this._oGanttChart.updateRelationships(sReason);
	};

	GanttChartWithTable.prototype.setSelectionPanelSize = function (sCSSSize, bSuppressInvalidate) {
		this.setProperty("selectionPanelSize", sCSSSize, bSuppressInvalidate);
		this._oSelectionPanelCnt.setLayoutData(new SplitterLayoutData({
			size: sCSSSize
		}));
		return this;
	};

	GanttChartWithTable.prototype.addCustomToolbarItem = function (oCustomToolbarItem) {
		this._oToolbar.addCustomToolbarItem(oCustomToolbarItem);
	};

	GanttChartWithTable.prototype.insertCustomToolbarItem = function (oCustomToolbarItem, iIndex) {
		this._oToolbar.insertCustomToolbarItem(oCustomToolbarItem, iIndex);
	};

	GanttChartWithTable.prototype.removeCustomToolbarItem = function (oCustomToolbarItem) {
		this._oToolbar.removeCustomToolbarItem(oCustomToolbarItem);
	};

	GanttChartWithTable.prototype.removeAllCustomToolbarItems = function () {
		this._oToolbar.removeAllCustomToolbarItems();
	};

	GanttChartWithTable.prototype.addColumn = function (oColumn) {
		this._oTT.addColumn(oColumn);
	};

	GanttChartWithTable.prototype.insertColumn = function (oColumn, iIndex) {
		this._oTT.insertColumn(oColumn, iIndex);
	};

	GanttChartWithTable.prototype.removeColumn = function (oColumn) {
		this._oTT.removeColumn(oColumn);
	};

	GanttChartWithTable.prototype.removeAllColumns = function () {
		this._oTT.removeAllColumns();
	};
	
	GanttChartWithTable.prototype.getColumns = function () {
		return this._oTT.getColumns();
	};

	GanttChartWithTable.prototype._bindAggregation = function (sName, oBindingInfo) {
		var oModel, oBindingContext;
		if (sName == "rows" && oBindingInfo){
			oModel = this.getModel(oBindingInfo.model);
			// resolve the path if gantt chart itself is binded
			oBindingContext = this.getBindingContext(oBindingInfo.model);
			if (oBindingContext && oModel){
				oBindingInfo.path = oModel.resolve(oBindingInfo.path, oBindingContext);
			}
			// bind rows to tt and chart, two diff binding objects will be created
			this._oTT.bindRows(oBindingInfo);
			this._oGanttChart.bindRows(oBindingInfo);
			// sync behaviors of both controls (expand, etc...)
			this._oTC.updateRows = this._updateRows.bind(this);
			// only one-direction sync. Otherwise endless loop happens when length of data is smaller than visible row count
			//this._oTT.updateRows = this._updateRows.bind(this);
		} else if (sName == "relationships" && oBindingInfo) {
			oModel = this.getModel(oBindingInfo.model);
			// resolve the path if gantt chart itself is binded
			oBindingContext = this.getBindingContext(oBindingInfo.model);
			if (oBindingContext && oModel){
				oBindingInfo.path = oModel.resolve(oBindingInfo.path, oBindingContext);
			}
			this._oGanttChart.bindRelationships(oBindingInfo);
		} else {
			return sap.ui.core.Control.prototype._bindAggregation.apply(this, arguments);
		}
	};
	

	GanttChartWithTable.prototype._updateRows = function () {
		sap.ui.table.Table.prototype.updateRows.apply(this._oTT, arguments);
		sap.ui.table.Table.prototype.updateRows.apply(this._oTC, arguments);
	};

	GanttChartWithTable.prototype._detachToolbarEvents = function () {
		this._oToolbar.detachSourceChange(this._onToolbarSourceChange, this);
		this._oToolbar.detachExpandTreeChange(this._onToolbarExpandTreeChange, this);
	};

	GanttChartWithTable.prototype.onAfterRendering = function () {
		this._attachEvents();
		this._oTT._oHSb.setContentSize(this._oTT.$().find(".sapUiTableCtrlScroll").width() + "px");
	};

	GanttChartWithTable.prototype._attachEvents = function () {
		// add 'onAfterRendering' event delegate to this._oTT
		var oDelegate = {
			onAfterRendering: this._onTTandTCafterRendering
		};
		this._oTT.removeEventDelegate(oDelegate);
		this._oTT.addEventDelegate(oDelegate,this);
		// add 'onAfterRendering' event delegate to this._oTC
		this._oTC.removeEventDelegate(oDelegate);
		this._oTC.addEventDelegate(oDelegate,this);
		
		
	};
	
	GanttChartWithTable.prototype._onRowSelectionChange = function (oEvent){
		
		this.fireRowSelectionChange({
			originEvent: oEvent.getParameter("originEvent")
		});
		this._oTT._oSelection.fireSelectionChanged(); //sync selection of oTC and oTT -- when table impl changes, change accordingly
	};

	GanttChartWithTable.prototype._onChartMouseOver = function (oEvent){
		var oParam = oEvent.getParameters();
		this.fireChartMouseOver({
			objectInfo: oParam.objectInfo,
			leadingRowInfo: oParam.leadingRowInfo,
			timestamp: oParam.timestamp,
			svgId: oParam.svgId,
			svgCoordinate: oParam.svgCoordinate, 
			effectingMode: oParam.effectingMode,
			originEvent: oParam.originEvent
		});
	};
	
	GanttChartWithTable.prototype._onShapeSelectionChange = function (oEvent){
		this.fireShapeSelectionChange({
			originEvent: oEvent.getParameter("originEvent")
		});
	};
	GanttChartWithTable.prototype._onRelationshipSelectionChange = function (oEvent){
		this.fireRelationshipSelectionChange({
			originEvent: oEvent.getParameter("originEvent")
		});
	};
	
	GanttChartWithTable.prototype._onDoubleClick = function (oEvent){
		var oParam = oEvent.getParameters();
		this.fireChartDoubleClick({
			objectInfo: oParam.objectInfo,
			leadingRowInfo: oParam.leadingRowInfo,
			timestamp: oParam.timestamp,
			svgId: oParam.svgId,
			svgCoordinate: oParam.svgCoordinate, 
			effectingMode: oParam.effectingMode,
			originEvent: oParam.originEvent
		});
	};
	/*
	 * This method will fire the right click event on the chart
	 */		
	GanttChartWithTable.prototype._onRightClick = function (oEvent){
		var oParam = oEvent.getParameters();
		this.fireChartRightClick({
			objectInfo: oParam.objectInfo,
			leadingRowInfo: oParam.leadingRowInfo,
			timestamp: oParam.timestamp,
			svgId: oParam.svgId,
			svgCoordinate: oParam.svgCoordinate, 
			effectingMode: oParam.effectingMode,
			originEvent: oParam.originEvent
		});
	};
 
	GanttChartWithTable.prototype._onChartDragEnter = function (oEvent) {
		this.fireChartDragEnter({
			originEvent: oEvent.getParameter("originEvent")
		});
	};
	
	GanttChartWithTable.prototype._onChartDragLeave = function (oEvent) {
		this.fireChartDragLeave({
			originEvent: oEvent.getParameter("originEvent"),
			draggingSource: oEvent.getParameter("draggingSource")
		});
			
	};
	
	GanttChartWithTable.prototype._onShapeDragEnd = function (oEvent) {
		var oParam = oEvent.getParameters();
		this.fireShapeDragEnd({
			originEvent: oParam.originEvent,
			sourceShapeData: oParam.sourceShapeData,
			targetData: oParam.targetData,
			sourceSvgId: oParam.sourceSvgId,
			targetSvgId: oParam.targetSvgId
		});
	};
	
	GanttChartWithTable.prototype._onChartHSbScroll = function (oEvent) {
		var nScrollLeft = this._oTC._oHSb.getScrollPosition();
		this.fireHorizontalScroll({
			scrollSteps: nScrollLeft,
			leftOffsetRate: this._oGanttChart.updateLeftOffsetRate(nScrollLeft)
		});
	};
	
	GanttChartWithTable.prototype._onChartVSbScroll = function (oEvent) {
		this.fireVerticalScroll({
			scrollSteps: this._oTC._oVSb.getScrollPosition()
		});
		this._oTT.setFirstVisibleRow(this._oTC._oVSb.getScrollPosition() || 0, true);
	};
	
	GanttChartWithTable.prototype._onChartShapesUpdated = function (oEvent) {
		this._appendMaskSvg();
		this._updateCSSForDummyRow();
		this.fireEvent("_shapesUpdated", {aSvg: oEvent.mParameters.aSvg});
	};

	GanttChartWithTable.prototype._onSelectionPanelVSbScroll = function (oEvent) {
		this._oTC._oVSb.setScrollPosition(this._oTT.getFirstVisibleRow());
	};

	GanttChartWithTable.prototype._onSplitterResize = function (oEvent) {
		var oParam = oEvent.getParameters();
		// reset size of chart and selectionpanel explicitely to force chart div resizing
		// fire event
		oParam.zoomInfo = this._oGanttChart.calculateZoomInfoFromChartWidth(
			oParam.newSizes[1]);
		this.fireSplitterResize(oParam);

	};

	GanttChartWithTable.prototype._onToolbarSourceChange = function (oEvent) {
		var oldHierarchy = this.getHierarchyKey();
		this.setHierarchyKey(oEvent.getParameter("id"));

		this.notifySourceChange();
		this.fireGanttChartSwitchRequested({
			hierarchyKey: oEvent.getParameter("id"),
			oldHierarchyKey: oldHierarchy
		});
	};

	GanttChartWithTable.prototype._onToolbarExpandTreeChange = function(oEvent){
		var sAction = oEvent.getParameter("action");
		if (sAction){
			var aSelectedRows = this._oTT.getSelectedIndices();
			for (var i = aSelectedRows.length - 1; i > -1; i--){
				this._oTT[sAction](aSelectedRows[i]);
				aSelectedRows = this._oTT.getSelectedIndices();
			}
		}
	};
	
	GanttChartWithTable.prototype._onToolbarModeChange = function (oEvent) {
		// update data if mode is bound to model
		var oBindingInfo = this.getBinding("mode");
		if (oBindingInfo) {
			oBindingInfo.setValue(oEvent.getParameter("mode"));
		}
		// trigger mode change
		this.setMode(oEvent.getParameter("mode"));
	};

	GanttChartWithTable.prototype.expandChartChange = function (oEvent) {
		var oParameters = oEvent.getParameters();
		this._oGanttChart.expandChartChange(oParameters.isExpand, oParameters.expandedChartSchemes, oParameters.aExpandedIndices);
	};

	GanttChartWithTable.prototype.getBaseRowHeight = function () {
		if (this._oTT.getRows()[0]) {
			return this._oTT.getRows()[0].getDomRef().scrollHeight;
		}
	};

	GanttChartWithTable.prototype._onTTandTCafterRendering = function(oEvent) {
		//We'd like to sync the hovering behavior for the rows of table (i.e. _oTT) and chart (i.e. _oTC). The idea is to programmatically trigger
		//hovering event on _oTT when user is hovering over _oTC, visa versa. But here we need to be careful to prevent endless event loop.
		var oTT = this._oTT;
		var $oTT = jQuery(oTT.getDomRef());
		var oTC = this._oTC;
		var $oTC = jQuery(oTC.getDomRef());
		var sOTTId = oTT.getId();
		var sOTCId = oTC.getId();
		var oSrcControl = oEvent.srcControl;
		var sId, oTargetControl;
		if (oSrcControl === oTT){
			//sync row height
			oTC.setRowHeight(this.getBaseRowHeight());
			sId = sOTCId;
			oTargetControl = oTC;
			//this is for the hover event handler of row selector (the rectangles on the leftmost of the table),
			//since they are not part of rows so that the event handlers need to be registered separately.
			$oTT.find(".sapUiTableRowHdr").hover(function(event) {
				var sType = event.type,
					iIndex = $oTT.find(".sapUiTableRowHdr").index(this),
					oRow;
				if (TreeTableHelper.isMultipleSpanMainRow(oTT, iIndex, false)){
					var mainRowGroupIndices = TreeTableHelper.getMultipleSpanMainRowGroupIndices(oTT, iIndex, false);
					for (var i = 0; i < mainRowGroupIndices.length; i++){
						oRow = oTT.getRows()[mainRowGroupIndices[i]];
						if (oRow){
							jQuery(oRow.getDomRef()).trigger(sType, [oTT.getId()]);
						}
					}
				} else {
					oRow = oTC.getRows()[iIndex];
					if (oRow){
						jQuery(oRow.getDomRef()).trigger(sType, [oTT.getId()]);
					}
				}
			});
		}else if (oSrcControl === oTC){
			sId = sOTTId;
			oTargetControl = oTT;
			//this is for the hover event handler of row selector (the rectangles on the leftmost of the table),
			//since they are not part of rows so that the event handlers need to be registered separately. 
			$oTC.find(".sapUiTableRowHdr").hover(function(event) {
				var cType = event.type,
					cIndex = $oTC.find(".sapUiTableRowHdr").index(this),
					oRow;
				if (TreeTableHelper.isMultipleSpanMainRow(oTC,cIndex)){
					var mainRowGroupIndices = TreeTableHelper.getMultipleSpanMainRowGroupIndices(oTC,cIndex);
					for (var i = 0; i < mainRowGroupIndices.length; i++){
						oRow = oTC.getRows()[mainRowGroupIndices[i]];
						if (oRow){
							jQuery(oRow.getDomRef()).trigger(cType,[oTC.getId()]);
						}
					}
				} else {
					oRow = oTT.getRows()[cIndex];
					if (oRow){
						jQuery(oRow.getDomRef()).trigger(cType,[oTC.getId()]);
					}
				}
			});
		}
		//define the hover event handler which is used for both mouseover and mouseout
		var f1 = function(event, sFromControlId, bMainRow){
			var sType = event.type;
			var oRow = jQuery(this).control(0);
			var iIndex = oSrcControl.indexOfRow(oRow);
			//need to ensure the event was triggered by user's action instead of from oTC's hover event handler,
			//otherwise there will be endless event loop.
			
			if (bMainRow === undefined && TreeTableHelper.isMultipleSpanMainRow(oSrcControl, iIndex, false)){
				var mainRowGroupIndices = TreeTableHelper.getMultipleSpanMainRowGroupIndices(oSrcControl, iIndex, false);
				if (sFromControlId !== sId){
					if (sFromControlId === sOTCId && sType !== "mouseleave") {
						var oTTRow = oTargetControl.getRows()[iIndex];
						if (oTTRow) {
							jQuery(oTTRow.getDomRef()).trigger(sType,[oSrcControl.getId()],true);
						}
					}else {
						for (var i = 0; i < mainRowGroupIndices.length; i++){
							var oSrcRow = oSrcControl.getRows()[mainRowGroupIndices[i]];
							var oTarRow = oTargetControl.getRows()[mainRowGroupIndices[i]];
							if (oSrcRow && oTarRow) {
								jQuery(oSrcRow.getDomRef()).trigger(sType,[oTargetControl.getId()], true);
								jQuery(oTarRow.getDomRef()).trigger(sType,[oSrcControl.getId()],true);
							}
						}
					}
				}
			} else if (sFromControlId !== sId){
				if (iIndex > -1){
					oRow = oTargetControl.getRows()[iIndex];
					if (oRow) {
						jQuery(oRow.getDomRef()).trigger(sType,[oSrcControl.getId()],true);
					}
				}
			}
			
		};
		//register events to each row of _oTT
		var aRows = oSrcControl.getRows();
		var iRowsLength = aRows.length;
		var j = 0;
		for (j = 0; j < iRowsLength; j++){
			var $oRow = jQuery(aRows[j].getDomRef());
			//$oRow.hover(f1);
			//just a workaround, we need update the implementation
			if (jQuery._data($oRow[0], "events") === undefined || jQuery._data($oRow[0], "events").mouseover.length < 2) {
				$oRow.mouseenter(f1);
				$oRow.mouseleave(f1);
			}
		}
		//expand tree table to default level expandedLevels defined in configuration of hierarchy
		this._expandDefaultLevel();

	};
	
	GanttChartWithTable.prototype._onRowCollapse = function (oEvent) {
		this.expandChartChange(oEvent);
	};
	
	/**
	 * Returns the effective toolbar scheme key.
	 * 
	 * @returns {string} - Toolbar scheme key.
	 * @public
	 */
	GanttChartWithTable.prototype.getToolbarSchemeKey = function () {
		return this._oToolbar.getToolbarSchemeKey();
	};
	
	/**
	 * Scrolls the visible chart area to a certain time. 
	 * 
	 * <p>It can be used to implement the function of 'Jump To First', 'Jump To Last' and 'Jump To Current'.</p>
	 *
	 * @param {Date} oDate The date object to which the user wants the visible area to scroll.
	 * @public
	 */
	GanttChartWithTable.prototype.jumpToPosition = function(oDate) {
		this._oGanttChart.jumpToPosition(oDate);
	};
	
	/**
	 * Selects in-row shapes and returns a success code.
	 * 
	 * @param {array} [aIds] List of the shapes that you want to select
	 * @param {boolean} [isExclusive] Whether all other selected shapes are deselected
	 * @return {boolean} If any selection change is applied, returns true.
	 * @public
	 */
	GanttChartWithTable.prototype.selectShapes = function(aIds, isExclusive) {
		return this._oGanttChart.selectShapes(aIds, isExclusive);
	};

	/**
	 * Deselects in-row shapes and returns a success code.
	 * 
	 * @param {array} [aIds] List the shapes that you want to deselect
	 * @return {boolean} If any selection change is applied, returns true.
	 * @public
	 */
	GanttChartWithTable.prototype.deselectShapes = function(aIds) {
		return this._oGanttChart.deselectShapes(aIds);
	};

	/**
	 * Selects relationships and returns a success code.
	 * 
	 * @param {array} [aIds] List of the relationships that you want to select
	 * @param {boolean} [isExclusive] Whether all other selected relationships are deselected
	 * @return {boolean} - If any selection change is applied, returns true.
	 * @public
	 */
	GanttChartWithTable.prototype.selectRelationships = function(aIds, isExclusive) {
		return this._oGanttChart.selectRelationships(aIds, isExclusive);
	};

	/**
	 * Deselects relationships and returns a success code.
	 * 
	 * @param {array} [aIds] List of the relationships that you want to deselect
	 * @return {boolean} - If any selection change is applied, returns true.
	 * @public
	 */
	GanttChartWithTable.prototype.deselectRelationships = function(aIds) {
		return this._oGanttChart.deselectRelationships(aIds);
	};

	/**
	 * Selects rows and returns a success code.
	 * 
	 * @param {array} [aIds] List of the rows that you want to select
	 * @param {boolean} [isExclusive] Whether all other selected elements are deselected
	 * @returns {boolean} - If any selection change is applied, returns true.
	 * @public
	 */
	GanttChartWithTable.prototype.selectRows = function(aIds, isExclusive) {
		return this._oGanttChart.selectRows(aIds, isExclusive);
	};

	/**
	 * Deselects rows and returns a success code.
	 * 
	 * @param {array} [aIds] List of the rows that you want to deselect
	 * @returns {boolean} - If any selection change is applied, returns true.
	 * @public
	 */
	GanttChartWithTable.prototype.deselectRows = function(aIds) {
		return this._oGanttChart.deselectRows(aIds);
	};
	
	/**
	 * Selects rows and all in-row shapes contained in the rows.
	 * 
	 * @param {array} [aIds] Row uids
	 * @param {boolean} [bIsExclusive] Whether all other selected rows and shapes are deselected
	 * @returns {boolean} - If any selection change is applied, returns true.
	 * @public
	 */
	GanttChartWithTable.prototype.selectRowsAndShapes = function(aIds, bIsExclusive) {
		return this._oGanttChart.selectRowsAndShapes(aIds, bIsExclusive);
	};

	/**
	 * Gets all selected rows, shapes, and relationships
	 * @return {object} The returned object contains "rows" for all selected rows, "shapes" for all selected shapes, and "relationships" for all selected relationships
	 * @public
	 */
	GanttChartWithTable.prototype.getAllSelections = function () {
		return this._oGanttChart.getAllSelections();
	};
	
	/**
	 * Gets selected in-row shapes.
	 * 
	 * @return {array} Returns all selected shapes in the chart
	 * @public
	 */
	GanttChartWithTable.prototype.getSelectedShapes = function() {
		var aSelectedShapes = this._oGanttChart.getSelectedShapes();
		return aSelectedShapes;
	};

	/**
	 * Gets selected rows.
	 * 
	 * @return {array} Returns all selected rows
	 * @public
	 */
	GanttChartWithTable.prototype.getSelectedRows = function() {
		var aSelectedRows = this._oGanttChart.getSelectedRows();
		return aSelectedRows;
	};
	
	/**
	 * Gets selected relationships.
	 * 
	 * @return {array} Returns all selected relationships in the chart
	 * @public
	 */
	GanttChartWithTable.prototype.getSelectedRelationships = function() {
		var aSelectedRelationships = this._oGanttChart.getSelectedRelationships();
		return aSelectedRelationships;
	};
	
	
	GanttChartWithTable.prototype.setDraggingData = function(oDraggingShape) {
		this._oGanttChart.setDraggingData(oDraggingShape);
	};
	
	GanttChartWithTable.prototype._updateCSSForDummyRow = function() {
		var aRows = this._oTT.getRows();
		var aRowHeaders = this._oTT.$().find(".sapUiTableRowHdrScr").children();
		for (var i = 0; i < aRows.length; i++){
			var oRow = aRows[i];
			var index = oRow.getIndex();
			
			if (index !== -1 && TreeTableHelper.isMultipleSpanMainRow(this._oTT, i)){
				var context = TreeTableHelper.getContextObject(this._oTT, index);
				if (context.afterNodeNum > 0){
					aRows[i].$().addClass("sapGanttTrNoBorder");
					$(aRowHeaders[i]).addClass("sapGanttTHeaderNoBorder");
				} else {
					aRows[i].$().removeClass("sapGanttTrNoBorder");
					$(aRowHeaders[i]).removeClass("sapGanttTHeaderNoBorder");
				}
			} else {
				aRows[i].$().removeClass("sapGanttTrNoBorder");
				$(aRowHeaders[i]).removeClass("sapGanttTHeaderNoBorder");
			}
		}
	};

	GanttChartWithTable.prototype._drawSelectionPanel = function () {
		var aTableSvg = d3.select("#" + this.getId() + "-spm-svg-table");
		var aSelectionSvg = d3.select("#" + this.getId() + "-spm-svg-selection");
		
		var aData = this._oGanttChart.getShapeData();
		if (aData !== undefined){
			this._oSelectionPanelDrawer.drawSvg(aTableSvg, aSelectionSvg, aData, this);
		}
		
	};
	

	GanttChartWithTable.prototype._appendMaskSvg = function(){
		var $tableMask = this.$().find("#" + this.getId() + "-spm-svg-table-ctn");
		var $slecetionMask = this.$().find("#" + this.getId() + "-spm-svg-slecetion-ctn");
		
		if ($tableMask.length == 0 && $slecetionMask.length == 0) {
			
			$tableMask = $("<div id='" + this.getId() + "-spm-svg-table-ctn' class='sapGanttChartSPMSvgCtn' >" + 
						"<svg id='" + this.getId() + "-spm-svg-table' class='sapGanttSPMaskSvg'>" +
						"</svg>" +
					"</div>");
			
			$slecetionMask = $("<div id='" + this.getId() + "-spm-svg-slecetion-ctn' class='sapGanttChartSPMSvgCtn' >" + 
					"<svg id='" + this.getId() + "-spm-svg-selection' class='sapGanttSPMaskSvg'>" +
					"</svg>" +
				"</div>");
			
			this._oTT.$().find("table").parent().append($tableMask);
			this._oTT.$().find("table").parent().parent().prev().append($slecetionMask);

		}
		
		$($tableMask).attr("style", this._oTT.$().find("table").attr("style"));
		
		this._drawSelectionPanel();
	};
	
	GanttChartWithTable.prototype.getAxisOrdinal = function () {
		return this._oGanttChart.getAxisOrdinal();
	};
	
	GanttChartWithTable.prototype.getAxisTime = function () {
		return this._oGanttChart.getAxisTime();
	};

	GanttChartWithTable.prototype._expandDefaultLevel = function() {
		var aExpandedLevels;
		var sHierarchyKey = this.getHierarchyKey();
		//Check because default expansion should be applied only once
		if (this._oDefaultExpansionStatus) {
			if (this._oDefaultExpansionStatus[sHierarchyKey] === true) {
				return;
			}
		}

		if (this._oHierarchyConfigMap[sHierarchyKey] && this._oHierarchyConfigMap[sHierarchyKey].getExpandedLevels()) {
			aExpandedLevels = this._oHierarchyConfigMap[this.getHierarchyKey()].getExpandedLevels();
			var oBinding = this._oTT.getBinding("rows");
			var oTreeTableData = oBinding.getModel().getObject(oBinding.getPath());
			var iCurrentLevel = 0; //Traversal level
			var iRowCursor = 0;
			var aCollapseRowIndex = [];
			var aNodeNames = this._oTT.getBindingInfo("rows").parameters.arrayNames;
			var iIndex;
			var hasChildren = function(oNode) {
				for (var i = 0; i < aNodeNames.length; i++){
					if (oNode[aNodeNames[i]]) {
						return true;
					}
				}
				return false;
			};
			if (aExpandedLevels.length <= 0) {
				//No configuration, mark expand as applied and exit
				this._oDefaultExpansionStatus[sHierarchyKey] = true;
				return;
			} else {
				//Attach change event to binding
				//Expand the tree table to the level of length of configured levels
				//In change event handler. detach the event first, then find and collapse the nodes which do not match the config
				var fnCalculateCollapseRowIndex = function(index, oNode) {
					if (iCurrentLevel > aExpandedLevels.length) {
						if (iCurrentLevel === (aExpandedLevels.length + 1)) {
							iRowCursor++;
						}
						return;
					}
					if (hasChildren(oNode) === true) {
						if (!($.inArray(oNode.type, aExpandedLevels[iCurrentLevel]) > -1)) {
							if (aCollapseRowIndex) {
								aCollapseRowIndex.push(iRowCursor);
							} else {
								aCollapseRowIndex = [iRowCursor];
							}
						}
						iRowCursor++;
						if (iCurrentLevel <= aExpandedLevels.length) {
							iCurrentLevel++;
							for (var j = 0; j < aNodeNames.length; j++){
								if (oNode[aNodeNames[j]]) {
									jQuery.each(oNode[aNodeNames[j]], fnCalculateCollapseRowIndex);
								}
							}
							iCurrentLevel--;
						}
					} else {
						iRowCursor++;
					}
				};
				var fnCollapse = function() {
					oBinding.detachChange(fnCollapse, this);
					for (var i = 0; i < aNodeNames.length; i++){
						if (oTreeTableData[aNodeNames[i]]) {
							jQuery.each(oTreeTableData[aNodeNames[i]], fnCalculateCollapseRowIndex);
						}
					}
					oBinding.getContexts(this._oTT.getFirstVisibleRow(), 0);
					for (iIndex = 0; iIndex < aCollapseRowIndex.length; iIndex++) {
						this._oTT.collapse(aCollapseRowIndex[iIndex]);
					}
				};
				oBinding.attachChange(fnCollapse, this);
				this._oTT.expandToLevel(aExpandedLevels.length);
			}
		}
		//update default expansion status of hierarchy to avoid it is applied again
		this._oDefaultExpansionStatus[sHierarchyKey] = true;
	};

	/**
	 * Walks through the local toolbar schemes and the global toolbar scheme to determine whether the user can
	 * expand the Gantt chart. It is used in the tree table filter and the sort event handler.
	 * 
	 * @return {boolean} true: can be expanded; false: can not be expanded
	 * @private
	 */
	GanttChartWithTable.prototype.canExpandGanttChart = function() {
		var bCanExpandChart = false;
		// Check local tool bar expand chart configuration
		var sCurrentHierarchyKey = this.getHierarchyKey(),
			aAllHierarchies = this.getHierarchies(),
			aAllToolbarSchemes = this.getToolbarSchemes();
		var aFilteredHierarchy = aAllHierarchies.filter(function(oHierarchy){
			return oHierarchy.getKey() === sCurrentHierarchyKey;
		}) || [];

		aFilteredHierarchy.forEach(function(oHierarchy){
			bCanExpandChart = aAllToolbarSchemes.filter(function(oScheme){
				return oScheme.getKey() === oHierarchy.getToolbarSchemeKey();
			}).some(function(oToolbarScheme){
				return oToolbarScheme.getExpandChart();
			});
		});

		// Check if global toolbar has configure expand chart or not
		var oContainer = this.getParent();
		if (!bCanExpandChart && oContainer.getToolbarSchemes) {
			var sLayoutKey = oContainer.getContainerLayoutKey(),
				aLayouts = oContainer.getContainerLayouts(),
				aLayout = aLayouts.filter(function(oItem){
					return oItem.getKey() === sLayoutKey;
				}) || [];
			
			aLayout.forEach(function(oLayout){
				bCanExpandChart = oContainer.getToolbarSchemes().filter(function(oItem){
					return oItem.getKey() === aLayout[0].getToolbarSchemeKey();
				}).some(function(oItem){
					return oItem.getExpandChart();
				});
			});
		}
		return bCanExpandChart;
	};

	/**
	 * Expands the row for the given row index in the selection panel
	 * 
	 * @see sap.ui.table.Table.expand
	 *
	 * @param {int} iRowIndex
	 *         Index of the row to expand
	 * @return {sap.gantt.GanttChartWithTable} A reference to the GanttChartWithTable control, which can be used for chaining
	 * @public
	 */
	GanttChartWithTable.prototype.expand = function(iRowIndex) {
		this._oTT.expand(iRowIndex);
		return this;
	};
	
	/**
	 * Collapses the row for the given row index in the selection panel
	 *
	 * @see sap.ui.table.Table.collapse
	 * 
	 * @param {int} iRowIndex
	 *         index of the row to expand
	 * @return {sap.gantt.GanttChartWithTable} A reference to the GanttChartWithTable control, which can be used for chaining
	 * @public
	 */
	GanttChartWithTable.prototype.collapse = function(iRowIndex) {
		this._oTT.collapse(iRowIndex);
		return this;
	};
	
	/**
	 * Selects a row in the selection panel.
	 * 
	 * @see sap.ui.table.Table.setSelectedIndex
	 * 
	 * @param {int} iRowIndex The row index to be selected (if any exists)
	 * @return {sap.gantt.GanttChartWithTable} A reference to the GanttChartWithTable control, which can be used for chaining
	 * @public
	 */
	GanttChartWithTable.prototype.setSelectedIndex = function(iRowIndex) {
		this._oTT.setSelectedIndex(iRowIndex);
		return this;
	};
	
	/**
	 * Retrieves the lead selection index. The lead selection index is, among other things, used to determine the
	 * start and end of a selection range, when using Shift-Click to select multiple entries. 
	 * 
	 * @see sap.ui.table.Table.getSelectedIndex
	 * 
	 * @return {int[]} An array containing all selected indexes (ascending ordered integers)
	 * @public
	 */
	GanttChartWithTable.prototype.getSelectedIndex = function() {
		return this._oTT.getSelectedIndex();
	};
	
	/**
	 * Gets the first visible row of the selection panel. 
	 * 
	 * @see sap.ui.table.Table.getFirstVisibleRow
	 * 
	 * @return {int} the first visible row index
	 * @public
	 */
	GanttChartWithTable.prototype.getFirstVisibleRow = function() {
		return this._oTT.getFirstVisibleRow();
	};

	/**
	 * Sets the first visible row in the selection panel.
	 * 
	 * @see sap.ui.table.Table.setFirstVisibleRow
	 * 
	 * @param {int} iRowIndex The row index to be set as the first visible row
	 * @return {sap.gantt.GanttChartWithTable} A reference to the GanttChartWithTable control, which can be used for chaining
	 * @public
	 */
	GanttChartWithTable.prototype.setFirstVisibleRow = function(iRowIndex) {
		this._oTT.setFirstVisibleRow(iRowIndex);
		return this;
	};
	
	/**
	 * Gets the number of visible rows in the selection panel. 
	 * 
	 * @see sap.ui.table.Table.getVisibleRowCount
	 * 
	 * @return {int} The first visible row index
	 * @public
	 */
	GanttChartWithTable.prototype.getVisibleRowCount = function() {
		return this._oTT.getVisibleRowCount();
	};
	
	GanttChartWithTable.prototype.getRows = function() {
		return this._oTT.getRows();
	};
	
	GanttChartWithTable.prototype.exit = function () {
		this._detachToolbarEvents();
		this._oSplitter.destroy();
	};

	GanttChartBase.prototype.notifySourceChange = function(){
		// Remove the custom data when data source change
		this._oTT.data(TreeTableHelper.JSONDataKey, null);
	};
	return GanttChartWithTable;
}, true);

}; // end of sap/gantt/GanttChartWithTable.js
if ( !jQuery.sap.isDeclared('sap.gantt.legend.DimensionLegend') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.legend.DimensionLegend'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/legend/DimensionLegend",[
	"./LegendBase"
], function (LegendBase) {
	"use strict";
	
	var DimensionLegend = LegendBase.extend({
		metadata: {
			properties: {
				shape: {type: "sap.gantt.config.Shape"},
				xDimension: {type: "string"},
				yDimension: {type: "string"},
				xDomain: {type: "array"},
				yDomain: {type: "array"}
			}
		}
	});
	
	return DimensionLegend;
}, true);
}; // end of sap/gantt/legend/DimensionLegend.js
